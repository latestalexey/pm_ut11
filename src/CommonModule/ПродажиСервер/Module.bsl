////////////////////////////////////////////////////////////////////////////////
// Модуль "ПродажиСервер", содержит процедуры и функции для
// проверки корректности документов продажи и для обработки введенных данных
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Определяет хозяйственную операцию возврата по хозяйственной операции реализации
//
// Параметры:
// ХозяйственнаяОперацияРеализация - ПеречислениеСсылка.ХозяйственныеОперации
//
// Возвращаемое значение:
// ПеречислениеСсылка.ХозяйственныеОперации
// Хозяйственная операция возврата
//
Функция ПолучитьХозяйственнуюОперациюВозвратаПоРеализации(Знач ХозяйственнаяОперацияРеализация) Экспорт
	
	Если ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
	 Или Не ЗначениеЗаполнено(ХозяйственнаяОперацияРеализация) Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
	ИначеЕсли ХозяйственнаяОперацияРеализация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Возврат Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;
	КонецЕсли;
	
КонецФункции

// Определяет хозяйственную операцию соглашения по хозяйственной операции возврата
//
// Параметры:
// ХозяйственнаяОперацияРеализация - ПеречислениеСсылка.ХозяйственныеОперации
//
// Возвращаемое значение:
// ПеречислениеСсылка.ХозяйственныеОперации
// Хозяйственная операция возврата
//
Функция ПолучитьХозяйственнуюОперациюСоглашенияПоВозврату(Знач ХозяйственнаяОперацияВозврат) Экспорт
	
	Если ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента 
		ИЛИ ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя
		ИЛИ Не ЗначениеЗаполнено(ХозяйственнаяОперацияВозврат) Тогда
			Возврат Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		ИначеЕсли ХозяйственнаяОперацияВозврат = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
			Возврат Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
	КонецЕсли;
	
КонецФункции

// Заполняет авансовые этапы графика оплаты в документе ЗаказКлиента
//
// Параметры:
// ДокументПродажи - ссылка на заказа клиента, в котором необходимо заполнить
// авансовые этапы оплаты
// ТекстОшибки     -Строка - строка, в которую будет помещен текст ошибки для дальнейшего оповещения
// пользователя об ошибке заполнения в клиентской процедуре, если заполнение происходит интерактивно
// ЗаполнятьФормуОплаты - Булево - признак, указывающий на необходимость заполнения формы оплаты
// в документе формой оплаты по графику
//
Процедура ЗаполнитьЭтапыГрафикаОплаты(ДокументПродажи,
	                                  Знач СуммаКРаспределению,
	                                  ЗаполнятьФормуОплаты = Ложь) Экспорт
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ГрафикиОплатыЭтапы.НомерСтроки        КАК НомерСтроки,
		|	ГрафикиОплатыЭтапы.ВариантОплаты      КАК ВариантОплаты,
		|	ГрафикиОплатыЭтапы.Сдвиг              КАК Сдвиг,
		|	ГрафикиОплатыЭтапы.ПроцентПлатежа     КАК ПроцентПлатежа,
		|	ГрафикиОплатыЭтапы.Ссылка.Календарь   КАК Календарь,
		|	ГрафикиОплатыЭтапы.Ссылка.ФормаОплаты КАК ФормаОплаты
		|ИЗ
		|	Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы
		|ГДЕ
		|	ГрафикиОплатыЭтапы.Ссылка = &ГрафикОплаты
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|");
		
	Запрос.УстановитьПараметр("ГрафикОплаты",ДокументПродажи.ГрафикОплаты);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	ЭтапыГрафикаОплаты = Новый ТаблицаЗначений();
	
	ЭтапыГрафикаОплаты.Колонки.Добавить("ВариантОплаты");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");
	
	Если Выгрузка.Количество() = 0 Тогда
		
		ДокументПродажи.ЭтапыГрафикаОплаты.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		
		ФормаОплаты = Выгрузка[0].ФормаОплаты;
		
		Если ЗначениеЗаполнено(ФормаОплаты) И ДокументПродажи.ФормаОплаты <> ФормаОплаты Тогда
			ДокументПродажи.ФормаОплаты = ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	РаспределеннаяСумма = 0;
	ТекущийЭтап         = 0;
	ОдинДень            = 86400;
	
	КоличествоЭтапов = Выгрузка.Количество();

	Если СуммаКРаспределению = 0 Тогда
		
		ДокументПродажи.ЭтапыГрафикаОплаты.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Календарь   = Выгрузка[0].Календарь;
	
	Если НЕ ЗначениеЗаполнено(Календарь) Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(ДокументПродажи.Дата), ДокументПродажи.Дата, ТекущаяДата());
	ДатаОтгрузки  = ДокументПродажи.ЖелаемаяДатаОтгрузки;
	
	// Определим календарную дату для каждого этапа графика оплаты
	УчитыватьКалендарь = Ложь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		
		УчитыватьКалендарь = Истина;
		
		СдвигиАвансовыхЭтапов = Новый Массив();
		СдвигиКредитныхЭтапов = Новый Массив();
		МассивДатПоКалендарю  = Новый Массив();

		Для Каждого Этап Из Выгрузка Цикл
			
			Если Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Или
				Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
				СдвигиАвансовыхЭтапов.Добавить(Этап.Сдвиг);
			Иначе
				СдвигиКредитныхЭтапов.Добавить(Этап.Сдвиг);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
			
			МассивДатПоКалендарюАвансовыхЭтапов = КалендарныеГрафики.ПолучитьМассивДатПоКалендарю(Календарь, ДатаДокумента, СдвигиАвансовыхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюАвансовыхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СдвигиКредитныхЭтапов.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
				
				Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
					Если МассивДатПоКалендарюАвансовыхЭтапов.Количество() > 0 Тогда
						ДатаОтгрузки = МассивДатПоКалендарюАвансовыхЭтапов[МассивДатПоКалендарюАвансовыхЭтапов.Количество()-1];
					КонецЕсли;
				Иначе
					ДатаОтгрузки = ДатаДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			МассивДатПоКалендарюКредитныхЭтапов = КалендарныеГрафики.ПолучитьМассивДатПоКалендарю(Календарь, ДатаОтгрузки, СдвигиКредитныхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюКредитныхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДатаОтгрузки) Тогда
			
			МаксСдвигАванса = 0;
		
			Для Каждого ТекЭтап Из Выгрузка Цикл
				
				Если ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Или
					ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
					
					МаксСдвигАванса = Макс(МаксСдвигАванса, ТекЭтап.Сдвиг);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДатаОтгрузки = ДатаДокумента + МаксСдвигАванса * ОдинДень;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним этапы в соответствии с графиком оплаты	
	Для Каждого Этап Из Выгрузка Цикл
		
		ТекущийЭтап                     = ТекущийЭтап + 1;
		ЭтапГрафикаОплаты               = ЭтапыГрафикаОплаты.Добавить();
		ЭтапГрафикаОплаты.ВариантОплаты = Этап.ВариантОплаты;
		
		Если УчитыватьКалендарь Тогда
			ДатаПлатежа = МассивДатПоКалендарю[ТекущийЭтап-1];
		Иначе
			ДатаПлатежа = ?(ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки, ДатаОтгрузки, ДатаДокумента) + Этап.Сдвиг * ОдинДень;
		КонецЕсли;
		
		Если (ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения
			Или ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)
			И ЗначениеЗаполнено(ДокументПродажи.ЖелаемаяДатаОтгрузки)
			И ДатаПлатежа > ДокументПродажи.ЖелаемаяДатаОтгрузки Тогда
			ДатаПлатежа = ДокументПродажи.ЖелаемаяДатаОтгрузки;
		КонецЕсли;
		
		ЭтапГрафикаОплаты.ДатаПлатежа    = ДатаПлатежа;
		ЭтапГрафикаОплаты.ПроцентПлатежа = Этап.ПроцентПлатежа;
		СуммаЭтапа                       = Окр(СуммаКРаспределению * Этап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
		ЭтапГрафикаОплаты.СуммаПлатежа   = ?(ТекущийЭтап = КоличествоЭтапов, СуммаКРаспределению - РаспределеннаяСумма, СуммаЭтапа);
		РаспределеннаяСумма              = РаспределеннаяСумма + ЭтапГрафикаОплаты.СуммаПлатежа;
		
	КонецЦикла;
	
	ДокументПродажи.ЭтапыГрафикаОплаты.Загрузить(ЭтапыГрафикаОплаты);

КонецПроцедуры

// Отменяет все строки, по которым не было документально оформлена реализация
//
// Параметры:
// 		ДокументПродажи   - ДокументСсылка - ссылка на документ продажи,
// 			в котором необходимо отменить непоставленные строк
// 		ИмяТабличнойЧасти - Строка - имя табличной части, в которой необходимо осуществить проверку
// 		ПричинаОтмены     - СправочникСсылка.ПричиныОтменыЗаказовКлиентов - причина, по которой отменяются строки
// 		ПроверятьОстатки  - Булево - признак, указывающий на необходимость запроса для проверки остатков
//
// Возвращаемое значение:
// 		Число - Количество отмененных строк
//
Функция ОтменитьНепоставленныеСтроки(ДокументПродажи, ИмяТабличнойЧасти, Знач ПричинаОтмены, Знач ПроверятьОстатки = Ложь) Экспорт
	
	КоличествоОтмененныхСтрок = 0;
	ОчищатьСерии = (Тип("ДокументСсылка.ЗаказКлиента") = ТипЗнч(ДокументПродажи.Ссылка));
	ТаблицаТовары = ДокументПродажи[ИмяТабличнойЧасти];
	
	СвойстваОтмененнойСтроки = Новый Структура(
		"Отменено, ПричинаОтмены, УказаниеСерий, СтатусУказанияСерий",
		Истина, ПричинаОтмены, Ложь, 0
	);
	
	Если Не ПроверятьОстатки Тогда
		Для н = 0 По ТаблицаТовары.Количество() - 1 Цикл
			Если Не ТаблицаТовары[н].Отменено Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаТовары[н], СвойстваОтмененнойСтроки);
				КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		Если ОчищатьСерии Тогда
			ДокументПродажи.Серии.Очистить();
		КонецЕсли;
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаТовары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.КодСтроки КАК ЧИСЛО) КАК КодСтроки,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Количество КАК ЧИСЛО) КАК Количество,
	|	ВЫРАЗИТЬ(ТаблицаТовары.Отменено КАК БУЛЕВО) КАК Отменено
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ
	|	&ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ
	|	ТаблицаТовары.Отменено = ЛОЖЬ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ТаблицаТовары.КодСтроки КАК КодСтроки,
	|	ЕСТЬNULL(ТаблицаТовары.Упаковка.Коэффициент, 1) КАК КоэффициентУпаковки,
	|	ТаблицаТовары.Количество КАК Количество,
	|	ЗаказыКлиентовОстатки.КОформлениюОстаток,
	|	ЗаказыКлиентовОстатки.СуммаОстаток,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Количество = ЗаказыКлиентовОстатки.КОформлениюОстаток
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РазбитьСтроку
	|ИЗ
	|	ТаблицаТовары КАК ТаблицаТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &ЗаказКлиента) КАК ЗаказыКлиентовОстатки
	|		ПО ТаблицаТовары.КодСтроки = ЗаказыКлиентовОстатки.КодСтроки
	|			И (ЗаказыКлиентовОстатки.КОформлениюОстаток > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ДокументПродажи.Ссылка);
	Запрос.УстановитьПараметр(
		"ТаблицаТовары",
		ДокументПродажи[ИмяТабличнойЧасти].Выгрузить(
			, // Массив строк для выгрузки
			"НомерСтроки, КодСтроки, Упаковка, Количество, Отменено"
		)
	);
	
	Если ОчищатьСерии Тогда
		
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ
		|	РезервыСерийТоваров.Серия КАК Серия,
		|	СУММА(РезервыСерийТоваров.Количество) КАК Количество,
		|	РезервыСерийТоваров.Номенклатура КАК Номенклатура,
		|	РезервыСерийТоваров.Характеристика КАК Характеристика,
		|	РезервыСерийТоваров.Склад КАК Склад,
		|	ИСТИНА КАК УказыватьСерии
		|ИЗ
		|	РегистрНакопления.РезервыСерийТоваров КАК РезервыСерийТоваров
		|ГДЕ
		|	РезервыСерийТоваров.ДокументРезерва = &ЗаказКлиента
		|	И РезервыСерийТоваров.Серия <> ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	И РезервыСерийТоваров.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|СГРУППИРОВАТЬ ПО
		|	РезервыСерийТоваров.Серия,
		|	РезервыСерийТоваров.Номенклатура,
		|	РезервыСерийТоваров.Характеристика,
		|	РезервыСерийТоваров.Склад";
		
	КонецЕсли;
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Если ПакетРезультатов[1].Пустой() Тогда
		Возврат КоличествоОтмененныхСтрок;
	КонецЕсли;
	
	Выборка = ПакетРезультатов[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Строка = ДокументПродажи[ИмяТабличнойЧасти][Выборка.НомерСтроки-1];
		
		Если Выборка.РазбитьСтроку Тогда
			
			НоваяСтрока = ДокументПродажи[ИмяТабличнойЧасти].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваОтмененнойСтроки);
			НоваяСтрока.КодСтроки = 0;
			
			Строка.Количество              = Выборка.Количество - Выборка.КОформлениюОстаток;
			Строка.КоличествоУпаковок      = (Выборка.Количество - Выборка.КОформлениюОстаток) / Выборка.КоэффициентУпаковки;
			Строка.СуммаСНДС               = Строка.СуммаСНДС - Выборка.СуммаОстаток;
			
			НоваяСтрока.Количество         = Выборка.КОформлениюОстаток;
			НоваяСтрока.КоличествоУпаковок = Выборка.КОформлениюОстаток / Выборка.КоэффициентУпаковки;
			НоваяСтрока.СуммаСНДС          = Выборка.СуммаОстаток;
			
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(Строка, ДокументПродажи.ЦенаВключаетНДС, Истина, Истина);
			Ценообразование.ПересчитатьСуммыВСтрокеПоСуммеСНДС(НоваяСтрока, ДокументПродажи.ЦенаВключаетНДС, Истина, Истина);
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(Строка, СвойстваОтмененнойСтроки);
			
		КонецЕсли;
		
		КоличествоОтмененныхСтрок = КоличествоОтмененныхСтрок + 1;
		
	КонецЦикла;
	
	Если ОчищатьСерии Тогда
		ДокументПродажи.Серии.Загрузить(ПакетРезультатов[2].Выгрузить());
	КонецЕсли;
	
	Возврат КоличествоОтмененныхСтрок;
	
КонецФункции

// Определяет имя табличной части по документу
//
// Параметры:
// ИмяТаблицы - строка - имя документа
//
// Возвращаемое значение:
// строка
// Имя табличной части документа
//
Функция ПолучитьИмяТабличнойЧасти(ИмяТаблицы) Экспорт
	
	Если ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ИмяТЧ = "ЗаменяющиеТовары";
	Иначе
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	Возврат ИмяТЧ;
	
КонецФункции

// Определяет представление табличной части по документу
//
// Параметры:
// ИмяТаблицы - строка - имя документа
//
// Возвращаемое значение:
// строка
// Представление табличной части документа
//
Функция ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы) Экспорт
	
	Если ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		ПредставлениеТЧ = "Заменяющие товары";
	Иначе
		ПредставлениеТЧ = "Товары";
	КонецЕсли;
	
	Возврат ПредставлениеТЧ;
	
КонецФункции

// Выводит сообщения об ошибках при вводе реализации по заказам
//
// Параметры:
// ВыборкаРеквизитыШапки - Выборка из результата запроса
//
// Возвращаемое значение:
// Булево
// Истина, если отказ от ввода на основании
//
Функция СообщитьОбОшибкахФормированияДанныхЗаполненияРеализации(ВыборкаРеквизитыШапки) Экспорт
	
	Отказ = Ложь;
	
	ТекстСообщения = НСтр("ru='У выделенных распоряжений отличается поле ""%ПредставлениеПоля%""'");
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияПартнер Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Партнер'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияКонтрагент Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Контрагент'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияОрганизация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Организация'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСоглашение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Соглашение'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияДоговор Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Договор'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСделка Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Сделка'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСклад Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Склад'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияХозяйственнаяОперация Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Операция'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВалютаВзаиморасчетов Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Валюта взаиморасчетов'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияНалогообложениеНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Налогообложение НДС'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияЦенаВключаетНДС Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Цена включает НДС'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияВернутьМногооборотнуюТару Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Вернуть многооборотную тару'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если ВыборкаРеквизитыШапки.ЕстьОтличияСрокВозвратаМногооборотнойТары Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтрЗаменить(ТекстСообщения, "%ПредставлениеПоля%", НСтр("ru='Срок возврата многооборотной тары'")),
			,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

// Проверяет наличие корректировок, введенных на основании изменяемого документа.
//
// Параметры:
// Ссылка - Изменяемый документ
//
// Возвращаемое значение:
// Булево - Возможность изменения документа
//
Функция ПроверитьВозможностьИзмененияДокумента(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументОснование = &Основание
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.МоментВремени УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ТекстОшибки = НСтр("ru='На основании документа %Основание% введен корректировочный документ %Корректировка%. Изменение исходного документа запрещено.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Основание%", Ссылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Корректировка%", Выборка.Корректировка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		
	КонецЕсли;
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

// Проверяет наличие корректировок, введенных на основании исходного документа.
//
// Параметры:
// Ссылка - Изменяемый документ корректировки
//
// Возвращаемое значение:
// Булево - Возможность изменения документа
//
Функция ПроверитьВозможностьИзмененияКорректировки(Ссылка, Основание) Экспорт
	
	ИзменениеВозможно = Истина;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументОснование = &Основание
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.МоментВремени УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание", Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Если Выборка.Корректировка <> Ссылка Тогда
			
			ТекстОшибки = НСтр("ru='На основании документа %Основание% введен корректировочный документ %Корректировка%. Изменение предыдущих документов корректировки запрещено.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Основание%", Основание);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Корректировка%", Выборка.Корректировка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			ИзменениеВозможно = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИзменениеВозможно;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции заполнения по отгрузке.

// Возвращает типовую структру для заполнения документа по фактической отгрузке
//
// Возвращаемое значение:
// 		Структура
//
Функция СтруктураДокументаДляЗаполненияПоФактическойОтгрузке() Экспорт
	
	Возврат Новый Структура(
		"Ссылка, Товары, Серии, Склад, ДокументРезерваСерий,
		|СкладВТабличнойЧасти, ДокументРезерваСерийВТабличнойЧасти,
		|ДополнятьСтроки,
		|ЕстьОтгруженныеТовары, ЕстьНесобранныеТовары,
		|ЗаполнятьНеСобраннымиТоварами,
		|ПараметрыУказанияСерий,
		|СтруктураДействийСИзмененнымиСтроками, СтруктураДействийСДобавленнымиСтроками",
		Неопределено, Неопределено, Неопределено, Неопределено, Неопределено,
		Ложь, Ложь,
		Ложь,
		Ложь, Ложь,
		Ложь,
		Новый Структура,
		Новый Структура, Новый Структура
	);
	
КонецФункции

// Заполняет табличные части документа по фактической отгрузке
//
// Параметры:
// 		ОбъектДокумента - ДокументОбъект или ДанныеФормыСтруктура - Объект документа для заполнения
// 		СтруктураДокументаОтгрузки - Структура - Поля типовой структуры описаны в функции "СтруктураДокументаДляЗаполненияПоФактическойОтгрузке"
//
// Возвращаемое значение:
// 		Булево - Истина, если табличные части перезаполнены
//
Функция ЗаполнитьПоФактическойОтгрузке(ОбъектДокумента, СтруктураДокументаОтгрузки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЕстьИзменения = Ложь; // Инициализация возвращаемого значения
	
	// Если какие либо из свойств структуры были не заполнены при вызове функции - заполнить их значениями по-умолчанию
	// 		В дальнейшем для получения свойств заполняемого документа будет использоваться структура "Параметры"
	Параметры = СтруктураДокументаДляЗаполненияПоФактическойОтгрузке();
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, СтруктураДокументаОтгрузки, Истина);
	
	// Если нет отгруженных товаров или несобранных
	Если Не (Параметры.ЕстьОтгруженныеТовары
		ИЛИ (Параметры.ЗаполнятьНеСобраннымиТоварами И Параметры.ЕстьНесобранныеТовары)) Тогда
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЕстьИзменения;
	КонецЕсли;
	
	// Выгрузка таблиц документа
	ТаблицаТЧТовары = Параметры.Товары.Выгрузить(
		, // Массив Строк
		"НомерСтроки, Номенклатура, Характеристика, Упаковка"
		+ ?(Параметры.СкладВТабличнойЧасти, ", Склад", "")
		+ ?(Параметры.ДокументРезерваСерийВТабличнойЧасти, ", ДокументРезерваСерий", "")
	);
	ТаблицаТЧСерии = Параметры.Серии.Выгрузить( , "НомерСтроки" + ?(Параметры.СкладВТабличнойЧасти, ", Склад", ""));
	Если НЕ Параметры.СкладВТабличнойЧасти Тогда
		ТаблицаТЧТовары.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаТЧТовары.ЗаполнитьЗначения(Параметры.Склад, "Склад");
		ТаблицаТЧСерии.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаТЧСерии.ЗаполнитьЗначения(Параметры.Склад, "Склад");
	КонецЕсли;
	Если НЕ Параметры.ДокументРезерваСерийВТабличнойЧасти Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(Параметры.ДокументРезерваСерий));
		ТаблицаТЧТовары.Колонки.Добавить("ДокументРезерваСерий", Новый ОписаниеТипов(МассивТипов));
		ТаблицаТЧТовары.ЗаполнитьЗначения(Параметры.ДокументРезерваСерий, "ДокументРезерваСерий");
	КонецЕсли;
	
	// Получение и параметризация запроса по отгруженным позициям
	Запрос = Новый Запрос(ТекстЗапросаПоФактическойОтгрузке());
	Запрос.УстановитьПараметр("ДокументОтгрузки", Параметры.Ссылка);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);
	Запрос.УстановитьПараметр("ДокументРезерваСерий", Параметры.ДокументРезерваСерий);
	Запрос.УстановитьПараметр("ЗаполнятьНеСобраннымиТоварами", Параметры.ЗаполнятьНеСобраннымиТоварами);
	Запрос.УстановитьПараметр("Товары", ТаблицаТЧТовары);
	Запрос.УстановитьПараметр("Серии", ТаблицаТЧСерии);
	
	ПакетРезультатов = Запрос.ВыполнитьПакет();
	Если ПакетРезультатов[0].Пустой() Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат ЕстьИзменения;
	КонецЕсли;
	
	// Создание таблицы для хранения промежуточного результата обработки
	Таблица = Параметры.Ссылка.Серии.ВыгрузитьКолонки(
		"Серия, Номенклатура, Характеристика, Количество"
		+ ?(Параметры.СкладВТабличнойЧасти, ", Склад", "")
		 + ?(Параметры.ДокументРезерваСерийВТабличнойЧасти, ", ДокументРезерваСерий", "")
	);
	Если НЕ Параметры.СкладВТабличнойЧасти Тогда
		Таблица.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	КонецЕсли;
	
	ВыборкаПоОтгрузке = ПакетРезультатов[0].Выбрать();
	
	ТаблицаРезервов = ПакетРезультатов[4].Выгрузить();
	СтруктураПоискаПоРезервам = Новый Структура("Серия, Номенклатура, Характеристика, Склад");
	
	// Цикл по выборке отгруженных позиций
	Пока ВыборкаПоОтгрузке.Следующий() Цикл
		
		// Общее количество к отгурзке
		КоличествоОтгрузить = ВыборкаПоОтгрузке.КоличествоОтгрузить;
		
		// Поиск зарезервированных к отгрузке позиций
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоРезервам, ВыборкаПоОтгрузке);
		РезервыСерий = ТаблицаРезервов.НайтиСтроки(СтруктураПоискаПоРезервам);
		Для Каждого РезервСерий Из РезервыСерий Цикл
			
			СтрокаТаблицы = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, РезервСерий);
			
			КоличествоОтгрузить = КоличествоОтгрузить - СтрокаТаблицы.Количество;
			Если КоличествоОтгрузить < 0 Тогда
				СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + КоличествоОтгрузить;
				КоличествоОтгрузить = 0;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоОтгрузить <= 0 Тогда
			// Количество к отгрузке распределено по строкам, зарезервированным документами
			Продолжить;
		КонецЕсли;
		
		// Запомнить оставщееся количество к отгрузке - как отгруженное без резерва по документу (ДокументРезерваСерий = Неопределено)
		СтрокаТаблицы = Таблица.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ВыборкаПоОтгрузке);
		СтрокаТаблицы.Количество = КоличествоОтгрузить;
		
	КонецЦикла;
	
	ТЧТовары = Параметры.Товары;
	ТЧСерии = Параметры.Серии;
	
	ПоляПоиска = "Номенклатура, Характеристика" + ?(Параметры.СкладВТабличнойЧасти, ", Склад", "") + ?(Параметры.ДокументРезерваСерийВТабличнойЧасти, ", ДокументРезерваСерий", "");
	СтруктураПоискаПоТЧТовары = Новый Структура(ПоляПоиска);
	СтруктураПоискаПоТЧСерии = Новый Структура("Серия, "  + ПоляПоиска);
	
	КоличествоВСтрокахДоИзменения = Новый Соответствие;
	КоэффициентыУпаковок = Новый Соответствие;
	Выборка = ПакетРезультатов[5].Выбрать(); // Получение выборки по всем строкам тч "Товары", которые могут быть отгружены
	СтруктураЗаполнения = Новый Структура("Количество, КоличествоУпаковок, Сумма, СуммаНДС, СуммаСНДС, СуммаВзаиморасчетов", 0, 0, 0, 0, 0, 6);
	Пока Выборка.Следующий() Цикл
		СтрокаТЧТовары = ТЧТовары[Выборка.НомерСтроки-1];
		КоэффициентыУпаковок.Вставить(СтрокаТЧТовары.Упаковка, Выборка.КоэффициентУпаковки); // Запомнить коэффициент упаковки
		КоличествоВСтрокахДоИзменения.Вставить(СтрокаТЧТовары, СтрокаТЧТовары.Количество); // Запомнить количество в строке до изменения
		ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтруктураЗаполнения); // Обнулить количество в строке
	КонецЦикла;
	КоэффициентыУпаковок.Вставить(Справочники.УпаковкиНоменклатуры.ПустаяСсылка(), 1); // Добавить коэффициент упаковки для пустого значения
	
	// Удалить строки серий, которые могут быть отгружены
	Выборка = ПакетРезультатов[6].Выбрать();
	Пока Выборка.Следующий() Цикл
		ТЧСерии.Удалить(Выборка.НомерСтроки-1); // Выборка упорядочена по убыванию номеров строк
	КонецЦикла;
	
	ДобавленныеСтроки = Новый Соответствие;
	ИзмененныеСтроки = Новый Соответствие;
	
	// Цикл по строкам временной таблицы
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		КоличествоОтгрузить = СтрокаТаблицы.Количество;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоискаПоТЧТовары, СтрокаТаблицы);
		СтрокиТЧТовары = ТЧТовары.НайтиСтроки(СтруктураПоискаПоТЧТовары);
		ПоследняяОбработаннаяСтрока = Неопределено;
		
		Для Каждого СтрокаТЧТовары Из СтрокиТЧТовары Цикл
			
			ПоследняяОбработаннаяСТрока = ?(ДобавленныеСтроки.Получить(СтрокаТЧТовары) <> Неопределено, ПоследняяОбработаннаяСтрока, СтрокаТЧТовары);
			
			КоличествоДоИзменения = КоличествоВСтрокахДоИзменения[СтрокаТЧТовары];
			Количество = КоличествоДоИзменения - СтрокаТЧТовары.Количество; // Количество, которое можно добавить к текущей строке тч
			
			Если Количество < 0 Тогда
				Прервать
			КонецЕсли;
			
			КоличествоОтгрузить = КоличествоОтгрузить - Количество;
			
			Если КоличествоОтгрузить < 0 Тогда
				Количество = Количество + КоличествоОтгрузить;
				КоличествоОтгрузить = 0;
			КонецЕсли;
			
			СтрокаТЧТовары.Количество = СтрокаТЧТовары.Количество + Количество;
			ИзмененныеСтроки.Вставить(СтрокаТЧТовары);
			ЕстьИзменения = Истина;
			
		КонецЦикла;
		
		// Отражение оставшихся отгруженных товаров
		Если КоличествоОтгрузить > 0 Тогда
			Если ПоследняяОбработаннаяСтрока <> Неопределено Тогда
				ПоследняяОбработаннаяСтрока.Количество = ПоследняяОбработаннаяСтрока.Количество + КоличествоОтгрузить;
				КоличествоОтгрузить = 0;
				ИзмененныеСтроки.Вставить(ПоследняяОбработаннаяСтрока);
				ЕстьИзменения = Истина;
			ИначеЕсли Параметры.ДополнятьСтроки Тогда
				НоваяСтрока = ТЧТовары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоискаПоТЧТовары);
				НоваяСтрока.Количество = КоличествоОтгрузить;
				НоваяСтрока.КоличествоУпаковок = КоличествоОтгрузить;
				ДобавленныеСтроки.Вставить(НоваяСтрока);
				КоличествоОтгрузить = 0;
				ЕстьИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Формирование строк табличной части "Серии"
		КоличествоОтразитьВСериях = ?(ЗначениеЗаполнено(СтрокаТаблицы.Серия), СтрокаТаблицы.Количество - КоличествоОтгрузить, 0);
		Если КоличествоОтразитьВСериях > 0 Тогда
			
			// Отразить добавленное количество в тч "серии"
			ЗаполнитьЗначенияСвойств(СтруктураПоискаПоТЧСерии, СтрокаТаблицы);
			СтрокиСерий = ТЧСерии.НайтиСтроки(СтруктураПоискаПоТЧСерии);
			Если СтрокиСерий.Количество() = 0 Тогда
				СтрокаСерии = ТЧСерии.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСерии, СтруктураПоискаПоТЧСерии);
			Иначе
				СтрокаСерии = СтрокиСерий[0];
			КонецЕсли;
			СтрокаСерии.Количество = СтрокаСерии.Количество + КоличествоОтразитьВСериях;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление строк в тч "Товары", у которых реквизит "Количество" имеет нулевое значение
	Для Каждого Строка Из ТЧТовары.НайтиСтроки(Новый Структура("Количество", 0)) Цикл
		ТЧТовары.Удалить(Строка);
	КонецЦикла;
	
	// Обработка структуры действий по измененным строкам
	Для Каждого Строка Из ИзмененныеСтроки Цикл
		СтрокаТЧТовары = Строка.Ключ;
		СтрокаТЧТовары.КоличествоУпаковок = СтрокаТЧТовары.Количество / КоэффициентыУпаковок[СтрокаТЧТовары.Упаковка];
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, Параметры.СтруктураДействийСИзмененнымиСтроками, Неопределено);
	КонецЦикла;
	
	// Обработка структуры действий по добавленным строкам
	Для Каждого Строка Из ДобавленныеСтроки Цикл
		СтрокаТЧТовары = Строка.Ключ;
		Параметры.СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьХарактеристикуПоВладельцу", СтрокаТЧТовары.Характеристика);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧТовары, Параметры.СтруктураДействийСДобавленнымиСтроками, Неопределено);
	КонецЦикла;
	
	// Заполнить статусы указания серий
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ОбъектДокумента, Параметры.ПараметрыУказанияСерий);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ЕстьИзменения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки корректности заполнения документов.

// Проверяет корректность заполнения документа продажи в соответствии с массивом проверок
// путем выполнения пакета запросов. Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументПродажи  - ДокументОбъект, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьЗаполненияДокументаПродажи(Знач ДокументПродажи, Отказ) Экспорт

	// Если документ уже заполнен некорректно - не будем выполнять запросы
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенПродажи = Константы.ВидМаксимальноДопустимыхЦенПродажи.Получить();
	ВидМинимальноДопустимыхЦенПродажи  = Константы.ВидМинимальноДопустимыхЦенПродажи.Получить();
	ПроверятьДиапазонЦен               = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенПродажи) Или ЗначениеЗаполнено(ВидМинимальноДопустимыхЦенПродажи);
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	МассивПроверок    = Новый Массив();
	ТипДокумента      = ТипЗнч(ДокументПродажи);
	ИмяТаблицы        = ОбщегоНазначения.ИмяТаблицыПоСсылке(ДокументПродажи.Ссылка);
	ИмяТЧ             = ПолучитьИмяТабличнойЧасти(ИмяТаблицы);
	ПредставлениеТЧ   = ПолучитьПредставлениеТабличнойЧасти(ИмяТаблицы);
	
	ОтклонениеОтУсловийПродаж =Пользователи.РолиДоступны("ОтклонениеОтУсловийПродаж");
	
	//Проверим возможность и состояние согласования через 1С:Документооборот
	СогласованиеЧерез1СДокументооборот = Константы.ИспользоватьИнтеграциюС1СДокументооборот.Получить() И Константы.ИспользоватьСогласованиеЧерез1СДокументооборот.Получить();
	Если СогласованиеЧерез1СДокументооборот И
		(ТипДокумента = Тип("ДокументОбъект.ЗаказКлиента") ИЛИ
		 ТипДокумента = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") ИЛИ
		 ТипДокумента = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") ИЛИ
		 ТипДокумента = Тип("СправочникОбъект.СоглашенияСКлиентами")) Тогда
		СогласованВ1СДокументооборот = ИнтеграцияС1СДокументооборотПереопределяемый.ПолучитьСостояниеСогласованияВ1СДокументооборот(ДокументПродажи.Ссылка);
	Иначе
		СогласованВ1СДокументооборот = Ложь;
	КонецЕсли;
	
	ВсеСтрокиОтменены = Ложь;
	
	Если ТипДокумента = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		
		СтрутураОтбора    = Новый Структура("Отменено", Истина);
		ОтмененныеСтроки  = ДокументПродажи.Товары.НайтиСтроки(СтрутураОтбора);
		ВсеСтрокиОтменены = (ОтмененныеСтроки.Количество() = ДокументПродажи.Товары.Количество());
		
		НужноСогласовать =  Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот)
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		
		СтрутураОтбора    = Новый Структура("Отменено", Истина);
		ОтмененныеСтроки  = ДокументПродажи.ЗаменяющиеТовары.НайтиСтроки(СтрутураОтбора);
		ВсеСтрокиОтменены = (ОтмененныеСтроки.Количество() = ДокументПродажи.ЗаменяющиеТовары.Количество());
		
		НужноСогласовать =  Не (ВсеСтрокиОтменены ИЛИ ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот)
		
	ИначеЕсли ТипДокумента <> Тип("ДокументОбъект.ЗаданиеТорговомуПредставителю")
		И ТипДокумента <> Тип("ДокументОбъект.ВозвратТоваровОтКлиента")
		И ТипДокумента <> Тип("ДокументОбъект.ЧекККМ")
		И ТипДокумента <> Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		НужноСогласовать =  Не (ОтклонениеОтУсловийПродаж ИЛИ ДокументПродажи.Согласован ИЛИ СогласованВ1СДокументооборот)
		
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ЧекККМ") Тогда
		НужноСогласовать = Ложь;
	Иначе
		НужноСогласовать = Не ОтклонениеОтУсловийПродаж;
	КонецЕсли;
	
	ПроверятьСкидкиРассчитаны = Ложь;
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьАвтоматическиеСкидки             = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидки                     = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ПроверятьСкидкиНаценки                       = ИспользоватьАвтоматическиеСкидки Или ИспользоватьРучныеСкидки;
	ИспользоватьРаздельныйУчетПоНалогообложению  = ПолучитьФункциональнуюОпцию("ИспользоватьРаздельныйУчетПоНалогообложению");
	ИспользоватьЦеновыеГруппы                    = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьОграниченияПоПользователям       = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	ИспользоватьОграниченияПоСоглашениям         = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям")
	                                               И НужноСогласовать;
	ОграничиватьРучныеСкидки                     = ИспользоватьРучныеСкидки И (ИспользоватьОграниченияПоПользователям ИЛИ ИспользоватьОграниченияПоСоглашениям);
	
	// Проверим, нужно ли запрещать закрытие заказов без полной отгрузки/оплаты
	КонтролироватьРасчеты              = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты");
	КонтролироватьОтгрузку             = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
	ИспользоватьСтатусыЗаказовКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовКлиентов");
	ИспользоватьСтатусыЗаявокНаВозврат = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаявокНаВозврат");
	
	ВозвратМногооборотнойТары          = Ложь;
	
	// ПОМОЩНИК ПРОДАЖ
	Если ТипДокумента = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		
		Если ИспользоватьРаздельныйУчетПоНалогообложению Тогда
			МассивПроверок.Добавить("КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары");
		КонецЕсли;
		
		// ПОМОЩНИК ПРОДАЖ - ЗАКАЗ КЛИЕНТА
		
		Если ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Или
			ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
			
			МассивПроверок.Добавить("КорректностьЗаполненияСклада");
			МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
			
			Если НужноСогласовать И ДокументПродажи.СтатусЗаказаКлиента <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				
				Если ПроверятьДиапазонЦен Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
				КонецЕсли;
			
				// Проверка корректности этапов оплаты осуществляется только для
				// заказов, в которых не все строки отменены и  в которых указан график оплаты.
				
				Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
					ЗначениеЗаполнено(ДокументПродажи.ГрафикОплаты) И
					ДокументПродажи.СуммаДокумента <> 0 Тогда
					
					МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
					
				КонецЕсли;
				
				Если ИспользоватьАвтоматическиеСкидки И
					Не ДокументПродажи.СкидкиРассчитаны И
					ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
					ПроверятьСкидкиРассчитаны = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		// ПОМОЩНИК ПРОДАЖ - КОММЕРЧЕСКОЕ ПРЕДЛОЖЕНИЕ
			
		ИначеЕсли ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
			
			Если НужноСогласовать И ДокументПродажи.СтатусКоммерческогоПредложения <> Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				
				Если ПроверятьДиапазонЦен Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
				КонецЕсли;
				
				Если ИспользоватьАвтоматическиеСкидки И
					ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
					Не ДокументПродажи.СкидкиРассчитаны Тогда
					ПроверятьСкидкиРассчитаны = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		// ПОМОЩНИК ПРОДАЖ - РЕАЛИЗАЦИЯ ТОВАРОВ УСЛУГ
			
		ИначеЕсли ДокументПродажи.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг Тогда
			
			Если ПроверятьСкидкиРассчитаны И
				ИспользоватьАвтоматическиеСкидки И
				Не ДокументПродажи.СкидкиРассчитаны И
				ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
			Если НужноСогласовать Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
				МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
				
				Если ПроверятьДиапазонЦен Тогда
					МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
				КонецЕсли;
				
				Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
				 ИЛИ Не ЗначениеЗаполнено(ДокументПродажи.ХозяйственнаяОперация) Тогда
					МассивПроверок.Добавить("КорректностьДатыПлатежа");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// СОГЛАШЕНИЕ С КЛИЕНТОМ
	
	ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВозвращатьМногооборотнуюТару;
		
		Если Не ДокументПродажи.Типовое И НужноСогласовать И
			ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияТипового");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального");
			МассивПроверок.Добавить("КорректностьЭтаповОплатыСоглашения");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповОплатыСоглашения");
			
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ДублиТоваров");
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
		Если НужноСогласовать И ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
		
			Если ЗначениеЗаполнено(ДокументПродажи.СегментНоменклатуры) Тогда
				МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Или Не ДокументПродажи.Типовое Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			КонецЕсли;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		
			Если Не ДокументПродажи.Типовое Тогда
				МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			КонецЕсли;
			
		КонецЕсли;
		
		ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
		
		Если ИспользоватьЦеновыеГруппы Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаЦеновыеГруппы");
			МассивПроверок.Добавить("ДублиЦеновыхГрупп");
			
			Если Не ДокументПродажи.Типовое И НужноСогласовать И
			ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
				МассивПроверок.Добавить("СоответствиеЦеновыхГруппУсловиямПродаж");
			КонецЕсли;
		
		КонецЕсли;
		
		Если ПроверятьСкидкиНаценки И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкидкиНаценки");
			МассивПроверок.Добавить("ДублиСкидокНаценок");
			
			Если Не ДокументПродажи.Типовое И НужноСогласовать И
				ДокументПродажи.Статус <> Перечисления.СтатусыСоглашенийСКлиентами.НеСогласовано Тогда
				МассивПроверок.Добавить("СоответствиеСкидокНаценокУсловиямПродаж");
			КонецЕсли;
			
		КонецЕсли;

	// ЗАКАЗ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		
		Если ИспользоватьРаздельныйУчетПоНалогообложению Тогда
			МассивПроверок.Добавить("КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары");
		КонецЕсли;
		
		Если НужноСогласовать И ДокументПродажи.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		
			// Проверка корректности этапов оплаты осуществляется только для
			// заказов, в которых не все строки отменены и  в которых указан график оплаты.
			
			Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
				ЗначениеЗаполнено(ДокументПродажи.ГрафикОплаты) И
				ДокументПродажи.СуммаДокумента <> 0 Тогда
				
				Если ДокументПродажи.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
					МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
					МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИспользоватьАвтоматическиеСкидки И
				Не ДокументПродажи.СкидкиРассчитаны И
				ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И ДокументПродажи.Статус <> Перечисления.СтатусыЗаказовКлиентов.НеСогласован Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
				И ДокументПродажи.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт И Не ВсеСтрокиОтменены Тогда
				
			Если ДокументПродажи.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов и КонтролироватьРасчеты И ИспользоватьСтатусыЗаказовКлиентов Тогда
				МассивПроверок.Добавить("КонтрольЗавершенияРасчетов");
			КонецЕсли;
			
			Если КонтролироватьОтгрузку И ИспользоватьСтатусыЗаказовКлиентов Тогда
				МассивПроверок.Добавить("КонтрольЗавершенияОтгрузки");
			КонецЕсли;
			
		КонецЕсли;
		
	// КОММЕРЧЕСКОЕ ПРЕДЛОЖЕНИЕ КЛИЕНТУ
	
	ИначеЕсли ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" Тогда
	
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		Если ИспользоватьРаздельныйУчетПоНалогообложению Тогда
			МассивПроверок.Добавить("КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары");
		КонецЕсли;
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		
		Если НужноСогласовать И ДокументПродажи.Статус <> Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
			Если ИспользоватьАвтоматическиеСкидки И
				ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
				Не ДокументПродажи.СкидкиРассчитаны Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ДокументПродажи.Статус <> Перечисления.СтатусыКоммерческихПредложенийКлиентам.НеСогласовано Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			Если МассивПроверок.Найти("ВременнаяТаблицаТовары") = Неопределено Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			КонецЕсли;
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// РЕАЛИЗАЦИЯ ТОВАРОВ И УСЛУГ
	
	ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КорректностьЗаполненияСклада");
		МассивПроверок.Добавить("КорректностьЗаполненияСкладаВТабличнойЧастиТовары");
		Если ИспользоватьРаздельныйУчетПоНалогообложению Тогда
			МассивПроверок.Добавить("КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары");
		КонецЕсли;
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		
		Если ПроверятьСкидкиРассчитаны И
			ИспользоватьАвтоматическиеСкидки И
			Не ДокументПродажи.СкидкиРассчитаны И
			ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			ПроверятьСкидкиРассчитаны = Истина;
		КонецЕсли;
		
		Если Не ДокументПродажи.РеализацияПоЗаказам И НужноСогласовать Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Не ДокументПродажи.РеализацияПоЗаказам Или ДокументПродажи.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
			И НужноСогласовать Тогда
			
			Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
			 ИЛИ Не ЗначениеЗаполнено(ДокументПродажи.ХозяйственнаяОперация) Тогда
				МассивПроверок.Добавить("КорректностьДатыПлатежа");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументПродажи.Соглашение)
			 И ДокументПродажи.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
				МассивПроверок.Добавить("СоответствиеСуммыПредоплатыГрафикуОплат");
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
	// ЗАЯВКА НА ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ЗаполнениеПодразделенияПриНаличииРабот");
		Если ИспользоватьРаздельныйУчетПоНалогообложению Тогда
			МассивПроверок.Добавить("КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары");
		КонецЕсли;
		
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		
		Если НужноСогласовать И ДокументПродажи.Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
		
			// Проверка корректности этапов оплаты осуществляется только для
			// заявок, в которых не все строки отменены и  в которых указан график оплаты.
			
			Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
				И ЗначениеЗаполнено(ДокументПродажи.ГрафикОплаты)
				И ДокументПродажи.ЗаменяющиеТовары.Количество() > 0
				И ДокументПродажи.СуммаДокумента <> 0
				И ДокументПродажи.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
				МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
				
			КонецЕсли;
			
			Если ИспользоватьАвтоматическиеСкидки И
				Не ДокументПродажи.СкидкиРассчитаны И
				ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера И
				ДокументПродажи.ЗаменяющиеТовары.Количество() > 0 Тогда
				ПроверятьСкидкиРассчитаны = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки
			И ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
			И ДокументПродажи.Статус <> Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.НеСогласована Тогда
			
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
			
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
			Если МассивПроверок.Найти("ВременнаяТаблицаТовары") = Неопределено Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			КонецЕсли;
			МассивПроверок.Добавить("НаличиеУслуг");
		КонецЕсли;
		
		Если ДокументПродажи.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера
				И ДокументПродажи.Статус = Перечисления.СтатусыЗаявокНаВозвратТоваровОтКлиентов.Выполнена И Не ВсеСтрокиОтменены Тогда
				
			Если ДокументПродажи.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов и КонтролироватьРасчеты И ИспользоватьСтатусыЗаявокНаВозврат Тогда
				МассивПроверок.Добавить("КонтрольЗавершенияРасчетов");
			КонецЕсли;
			
			Если КонтролироватьОтгрузку И ИспользоватьСтатусыЗаявокНаВозврат Тогда
				МассивПроверок.Добавить("КонтрольЗавершенияОтгрузки");
			КонецЕсли;
			
		КонецЕсли;

	// ЗАДАНИЕ ТОРГОВОМУ ПРЕДСТАВИТЕЛЮ
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
		
		Если Не ОтклонениеОтУсловийПродаж Или ИспользоватьРаздельныйУчетПоНалогообложению Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		КонецЕсли;
		
		Если Не ОтклонениеОтУсловийПродаж Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
		КонецЕсли;
		
		Если ИспользоватьРаздельныйУчетПоНалогообложению Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары");
		КонецЕсли;
			
	// АКТ ВЫПОЛНЕННЫХ РАБОТ
	
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		
		Если ПроверятьСкидкиРассчитаны И
			ИспользоватьАвтоматическиеСкидки И
			Не ДокументПродажи.СкидкиРассчитаны Тогда
			ПроверятьСкидкиРассчитаны = Истина;
		КонецЕсли;
		
		Если Не ДокументПродажи.АктПоЗаказам И НужноСогласовать Тогда
			
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьПартнераСегментуПартнеров");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			МассивПроверок.Добавить("ПринадлежностьТоваровСегментуНоменклатуры");
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Не ДокументПродажи.АктПоЗаказам Или ДокументПродажи.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным)
			И НужноСогласовать Тогда
			
			МассивПроверок.Добавить("КорректностьДатыПлатежа");
			
		КонецЕсли;
		
		Если ОграничиватьРучныеСкидки Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
	// ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("КонтрольЗаполненияЦен");
		ВозвратМногооборотнойТары = ДокументПродажи.ВозвратПереданнойМногооборотнойТары;
		
	// ЧЕК ККМ
		
	ИначеЕсли ИмяТаблицы = "Документ.ЧекККМ" Тогда
		
		Если ОграничиватьРучныеСкидки Тогда
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	УчитыватьСкидкиНаценки = Не ((ИмяТаблицы = "Справочник.СоглашенияСКлиентами") 
		Или (ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю")
		Или (ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента"));
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок

	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("Дата",          ДокументПродажи.Дата);
	ПараметрыЗапроса.Вставить("ЭтоСоглашение", ТипДокумента = Тип("СправочникОбъект.СоглашенияСКлиентами"));
	ПараметрыЗапроса.Вставить("Ссылка",        ДокументПродажи.Ссылка);
	ПараметрыЗапроса.Вставить("Пользователь",  Пользователи.ТекущийПользователь());
	ПараметрыЗапроса.Вставить("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	ПараметрыЗапроса.Вставить("ИспользоватьСтатусыРеализацийТоваровУслуг", ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг"));
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	
	Если ИспользоватьОграниченияПоСоглашениям Тогда
		ПараметрыЗапроса.Вставить("СоглашениеСКлиентом", ДокументПродажи.Соглашение);
	КонецЕсли;
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаДокументПродажи" Тогда
		
			СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
		
			СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ИмяТаблицы, УчитыватьСкидкиНаценки);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦеновыеГруппы" Тогда
		
			СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкидкиНаценки" Тогда
		
			СформироватьЗапросВременнаяТаблицаСкидкиНаценкиДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, , ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
		
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ДублиТоваров" Тогда
			
			СформироватьЗапросНаличиеДублейТоваровДокументаПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямПродаж" Тогда
			
			СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ДублиСкидокНаценок" Тогда
			
			СформироватьЗапросНаличиеДублейСкидокНаценокДокументаПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДублиЦеновыхГрупп" Тогда
			
			СформироватьЗапросНаличиеДублейЦеновыхГруппДокументаПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеСкидокНаценокУсловиямПродаж" Тогда
			
			СформироватьЗапросСоответствиеСкидокНаценокУсловиямПродаж(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда
			
			СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда
			
			СформироватьЗапросПринадлежностьТоваровСегментуНоменклатуры(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СформироватьЗапросПринадлежностьПартнераСегментуПартнеров(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьДатыПлатежа" Тогда
			
			СформироватьЗапросКорректностьДатыПлатежа(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда
			
			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "НаличиеУслуг" Тогда
			
			СформироватьЗапросНаличиеУслугВДокументеПродажи(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьЗаполненияСклада" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда
			
			СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары" Тогда
			
			СформироватьЗапросКорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения(ТекстЗапроса, ИспользоватьЦеновыеГруппы, ИспользоватьОграниченияПоПользователям, ИспользоватьОграниченияПоСоглашениям);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграниченияРучныхСкидок" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграниченияРучныхСкидок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияТипового" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда
			
			СформироватьЗапросСоответствиеСуммыПредоплатыГрафикуОплат(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗавершенияРасчетов" Тогда
			
			СформироватьЗапросКонтрольЗавершенияРасчетов(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗавершенияОтгрузки" Тогда
			
			СформироватьЗапросКонтрольЗавершенияОтгрузки(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ЗаполнениеПодразделенияПриНаличииРабот" Тогда
			
			СформироватьЗапросЗаполнениеПодразделенияПриНаличииРабот(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КонтрольЗаполненияЦен" Тогда
			
			СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	// Сообщим пользователю о результатах проверки для каждого результата запроса
	
	Если ПроверятьСкидкиРассчитаны Тогда
		СообщитьОбОшибкахСкидкиНеРассчитаны(ДокументПродажи, Отказ);
	КонецЕсли;
	
	НевозможноПровестиБезСогласования = Ложь;
	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл
		
		Выборка = МассивРезультатов[ТекИндекс].Выбрать();
		
		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахШапкаДокументаПродажи(Выборка,ДокументПродажи,НевозможноПровестиБезСогласования);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДублиТоваров" Тогда
			
			СообщитьОбОшибкахНаличиеДублейТоваровДокументаПродажи(Выборка, ДокументПродажи, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямПродаж" Тогда
			
			СообщитьОбОшибкахТоварыДокументаПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ДублиСкидокНаценок" Тогда

			СообщитьОбОшибкахНаличиеДублейСкидокНаценокДокументаПродажи(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ДублиЦеновыхГрупп" Тогда

			СообщитьОбОшибкахНаличиеДублейЦеновыхГруппДокументаПродажи(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеСкидокНаценокУсловиямПродаж" Тогда

			СообщитьОбОшибкахСоответствиеСкидокНаценокУсловиямПродаж(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда

			СообщитьОбОшибкахСоответствиеГруппЦенНоменклатурыУсловиямПродаж(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьТоваровСегментуНоменклатуры" Тогда

			СообщитьОбОшибкахПринадлежностьТоваровСегментуНоменклатуры(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ПринадлежностьПартнераСегментуПартнеров" Тогда
			
			СообщитьОбОшибкахПринадлежностьПартнераСегментуПартнеров(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда

			СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьДатыПлатежа" Тогда

			СообщитьОбОшибкахКорректностьДатыПлатежа(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда

			СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда

			СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, НевозможноПровестиБезСогласования, ИспользоватьРучныеСкидки Или ИспользоватьАвтоматическиеСкидки);

		ИначеЕсли МассивПроверок[ТекИндекс] = "НаличиеУслуг" Тогда

			СообщитьОбОшибкахНаличиеУслугВДокументеПродажи(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда

			СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Выборка, ДокументПродажи, ИмяТЧ, ПредставлениеТЧ, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСклада" Тогда

			СообщитьОбОшибкахКорректностьЗаполненияСклада(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЗаполненияСкладаВТабличнойЧастиТовары" Тогда

			СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары" Тогда

			СообщитьОбОшибкахКорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповОплатыСоглашения" Тогда

			СообщитьОбОшибкахКорректностьЭтаповОплатыСоглашения(Выборка, ДокументПродажи, НевозможноПровестиБезСогласования);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда

			СообщитьОбОшибкахКорректностьКоличестваЭтаповОплатыСоглашения(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеСуммыПредоплатыГрафикуОплат" Тогда

			СообщитьОбОшибкахСоответствиеСуммыПредоплатыГрафикуОплат(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗавершенияРасчетов" Тогда

			СообщитьОбОшибкахКонтрольЗавершенияРасчетов(Выборка, ДокументПродажи, Отказ);
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗавершенияОтгрузки" Тогда

			СообщитьОбОшибкахКонтрольЗавершенияОтгрузки(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "ЗаполнениеПодразделенияПриНаличииРабот" Тогда

			СообщитьОбОшибкахЗаполнениеПодразделенияПриНаличииРабот(Выборка, ДокументПродажи, Отказ);

		ИначеЕсли МассивПроверок[ТекИндекс] = "КонтрольЗаполненияЦен" Тогда

			СообщитьОбОшибкахКонтрольЗаполненияЦен(Выборка, ДокументПродажи, ИмяТЧ, Отказ);

		КонецЕсли;
		
	КонецЦикла;
	
	Если НевозможноПровестиБезСогласования Тогда
		ТекстОшибки = НСтр("ru='Недостаточно прав на отклонение от условий продаж. 
		|Документ не может быть проведен без согласования.'");
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			,
			,
			Отказ
		);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Проверяет корректность заполнения этапов графика оплаты в документе продажи
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументПродажи                  - ДокументОбъект, для которого необходимо осуществить проверки
// СуммаДокумента                   - Число - Сумма документа, в котором необходимо осуществить проверку
// УчитыватьВариантОплаты           - Булево - признак необходимости проверки корректности вариантов оплаты
// Отказ                            - Булево - Флаг отказа от записи документа
// ПривязыватьСообщенияКГиперссылке - Булево - флаг, указывающий на необходимость привязки сообщений к гиперссылке
//
Процедура ПроверитьКорректностьЭтаповГрафикаОплаты(Знач ДокументПродажи,
	                                               СуммаДокумента,
	                                               УчитыватьВариантОплаты,
	                                               Отказ,
	                                               ПривязыватьСообщенияКГиперссылке = Ложь) Экспорт

	Если ЗначениеЗаполнено(ДокументПродажи.Дата) Тогда
		ДатаДокумента = НачалоДня(ДокументПродажи.Дата);
	КонецЕсли;
	
	СуммаВсего = Окр(СуммаДокумента, 2);
		
	Если ДокументПродажи.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если СуммаВсего > 0 Тогда 
			
			ТекстОшибки = НСтр("ru='Необходимо заполнить этапы графика оплаты'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты"),
					,
					Отказ);
					
		КонецЕсли;
		
	Иначе
	
		Для ТекИндекс = 0 По ДокументПродажи.ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы графика оплаты""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Вариант оплаты""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ВариантОплаты")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ПроцентПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Процент платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ПроцентПлатежа")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].СуммаПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "СуммаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
				ЗначениеЗаполнено(ДокументПродажи.Дата) И
				ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа < ДатаДокумента Тогда

				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(ДокументПродажи.Дата, "ДЛФ=DD"));

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

			Если УчитыватьВариантОплаты Тогда
			
				// Дата платежа по авансовому этапу должна быть не больше даты отгрузки в шапке
				Если ЗначениеЗаполнено(ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
					ЗначениеЗаполнено(ДокументПродажи.ЖелаемаяДатаОтгрузки) И
					(ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
					ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) И
					ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа > ДокументПродажи.ЖелаемаяДатаОтгрузки Тогда

					ТекстОшибки = НСтр("ru='Дата платежа по авансовому этапу должна быть не больше желаемой даты отгрузки %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(ДокументПродажи.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты",ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
						,
						Отказ
					);

				// Дата платежа по кредитному этапу должна быть не меньше даты отгрузки в шапке
				ИначеЕсли ЗначениеЗаполнено(ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И 
					ЗначениеЗаполнено(ДокументПродажи.ЖелаемаяДатаОтгрузки) И
					ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки И
					ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа < ДокументПродажи.ЖелаемаяДатаОтгрузки Тогда

					ТекстОшибки = НСтр("ru='Дата платежа по кредитному этапу должна быть не меньше желаемой даты отгрузки %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(ДокументПродажи.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
						,
						Отказ
					);

				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
		
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ДокументПродажи.ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			ПроцентПоЭтапам = ДокументПродажи.ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа");

			Если ПроцентПоЭтапам <> 100 Тогда

				ТекстОшибки = НСтр("ru='Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться 100%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ПроцентПоЭтапам);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

		// Сумма платежей в в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций
			
		Если ДокументПродажи.ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			СуммаВсего    = Окр(СуммаДокумента, 2);
			СуммаПоЭтапам = Окр(ДокументПродажи.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа"), 2);
			
			Если СуммаПоЭтапам <> СуммаВсего Тогда

				ТекстОшибки = НСтр("ru='Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы заказанных строк ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", СуммаПоЭтапам);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        ДокументПродажи.Валюта);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты[0].СуммаПлатежа"),
					,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

		КоличествоЭтапов = ДокументПродажи.ЭтапыГрафикаОплаты.Количество();

		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл

			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;

			Если УчитыватьВариантОплаты Тогда
			
				ПредыдущееЗначениеВариантаОплаты = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
				
				// В табличной части Этапы не должно быть строк со значением АвансДоОбеспечения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоОтгрузки
				// КредитПослеОтгрузки
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки ИЛИ
					 ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоОтгрузки
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеОтгрузки
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки) Тогда
				
					ТекстОшибки = НСтр("ru='Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
					|не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты")),
						,
						Отказ
						);

				КонецЕсли;
				
			КонецЕсли;

			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию
			Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И 
				ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
				ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
				|списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет корректность заполнения документа продажи в соответствии с массивом проверок
// путем выполнения пакета запросов. Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументПродажи  - ДокументСсылка, для которого необходимо осуществить проверки
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьНеобходимостьСогласованияУсловийПродажи(Знач ДокументПродажи,
	                                                       ЕстьОтклоненияОтЦеновыхУсловий,
	                                                       ЕстьОтклоненияОтФинансовыхУсловий,
	                                                       ЕстьОтклоненияОтЛогистическихУсловий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Проверим нужно ли проверять диапазон допустимых цен
	ВидМаксимальноДопустимыхЦенПродажи = Константы.ВидМаксимальноДопустимыхЦенПродажи.Получить();
	ВидМинимальноДопустимыхЦенПродажи  = Константы.ВидМинимальноДопустимыхЦенПродажи.Получить();
	ПроверятьДиапазонЦен               = ЗначениеЗаполнено(ВидМаксимальноДопустимыхЦенПродажи) Или ЗначениеЗаполнено(ВидМинимальноДопустимыхЦенПродажи);
	
	// Проверим нужно ли проверять скидки и наценки
	ИспользоватьАвтоматическиеСкидки = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьРучныеСкидки         = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ПроверятьСкидкиНаценки           = ИспользоватьАвтоматическиеСкидки Или ИспользоватьРучныеСкидки;
	ИспользоватьЦеновыеГруппы                    = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
	ИспользоватьОграниченияПоПользователям = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоПользователям");
	ИспользоватьОграниченияПоСоглашениям         = ПолучитьФункциональнуюОпцию("ИспользоватьОграниченияРучныхСкидокВПродажахПоСоглашениям");
	ОграничиватьРучныеСкидки          = ИспользоватьРучныеСкидки И (ИспользоватьОграниченияПоПользователям ИЛИ ИспользоватьОграниченияПоСоглашениям);
	
	// Заполним массив необходимых проверок в зависимости от типа документа
	МассивПроверок  = Новый Массив();
	ИмяТаблицы = ДокументПродажи.Метаданные().ПолноеИмя();
	
	ЗапросПоШапке = Новый Запрос("
		|ВЫБРАТЬ
		|	ДокументПродажи.Дата КАК Дата,
		|" + ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","
		|	ДокументПродажи.Типовое КАК Типовое
		|","
		|	ЛОЖЬ КАК Типовое
		|") + "
		|ИЗ
		|" + ИмяТаблицы + " КАК ДокументПродажи
		|ГДЕ
		|	ДокументПродажи.Ссылка = &ДокументПродажи
		|");
	
	ЗапросПоШапке.УстановитьПараметр("ДокументПродажи", ДокументПродажи);
	ВыборкаПоШапке = ЗапросПоШапке.Выполнить().Выбрать();
	ВыборкаПоШапке.Следующий();
	
	ВозвратМногооборотнойТары = Ложь;
	
	// СОГЛАШЕНИЕ С КЛИЕНТОМ
	
	Если ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
		
		Если Не ВыборкаПоШапке.Типовое Тогда
		
			МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
			МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияТипового");
			МассивПроверок.Добавить("ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального");
			МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
			МассивПроверок.Добавить("ВременнаяТаблицаТовары");
			МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
			МассивПроверок.Добавить("КорректностьЭтаповОплатыСоглашения");
			МассивПроверок.Добавить("КорректностьКоличестваЭтаповОплатыСоглашения");
			
			ВозвратМногооборотнойТары = ДокументПродажи.ВозвращатьМногооборотнуюТару;
			
			Если ПроверятьДиапазонЦен Тогда
				МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
			КонецЕсли;
			
			МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
			
			ИспользоватьЦеновыеГруппы = ПолучитьФункциональнуюОпцию("ИспользоватьЦеновыеГруппы");
			
			Если ИспользоватьЦеновыеГруппы Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаЦеновыеГруппы");
				МассивПроверок.Добавить("СоответствиеЦеновыхГруппУсловиямПродаж");
			
			КонецЕсли;
			
			Если ПроверятьСкидкиНаценки Тогда
				
				МассивПроверок.Добавить("ВременнаяТаблицаСкидкиНаценки");
				МассивПроверок.Добавить("СоответствиеСкидокНаценокУсловиямПродаж");
				
			КонецЕсли;

		КонецЕсли;
			
	// ЗАКАЗ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
		МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		
		Если ОграничиватьРучныеСкидки Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
			
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
		
	// ЗАЯВКА НА ВОЗВРАТ ТОВАРОВ ОТ КЛИЕНТА
	
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
		МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		
		Если ОграничиватьРучныеСкидки Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
			
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
		МассивПроверок.Добавить("ВременнаяТаблицаЭтапыГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьЭтаповГрафикаОплаты");
		МассивПроверок.Добавить("КорректностьКоличестваЭтаповГрафикаОплаты");
		
	// КОММЕРЧЕСКОЕ ПРЕДЛОЖЕНИЕ КЛИЕНТУ
	
	ИначеЕсли ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" Тогда
		
		МассивПроверок.Добавить("ВременнаяТаблицаДокументПродажи");
		МассивПроверок.Добавить("ВременнаяТаблицаСкладыКорректныеПоСоглашению");
		МассивПроверок.Добавить("СоответствиеШапкиУсловиямПродаж");
		МассивПроверок.Добавить("ВременнаяТаблицаТовары");
		МассивПроверок.Добавить("ВременнаяТаблицаКурсыВалют");
		МассивПроверок.Добавить("СоответствиеТоваровУсловиямПродаж");
		
		ВозвратМногооборотнойТары = ДокументПродажи.ВернутьМногооборотнуюТару;
		
		Если ОграничиватьРучныеСкидки Тогда
			Если ИспользоватьОграниченияПоПользователям Тогда
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей");
				МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям");
			КонецЕсли;
			МассивПроверок.Добавить("ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения");
			МассивПроверок.Добавить("ВременнаяТаблицаОграниченияРучныхСкидок");
			МассивПроверок.Добавить("ДопустимостьРучныхСкидокНаценок");
		КонецЕсли;
		
		Если ПроверятьДиапазонЦен Тогда
			МассивПроверок.Добавить("ВхождениеЦенВДопустимыйДиапазон");
		КонецЕсли;
		
	Иначе
		
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
		
	КонецЕсли;
	
	УчитыватьСкидкиНаценки = Не ((ИмяТаблицы = "Справочник.СоглашенияСКлиентами") Или (ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю"));
	
	// Сформируем текст запроса необходимых проверок в соответствие с массивом проверок

	ТекстЗапроса     = "";
	ПараметрыЗапроса = Новый Структура();
	
	ПараметрыЗапроса.Вставить("Дата", ВыборкаПоШапке.Дата);
	ПараметрыЗапроса.Вставить("ЭтоСоглашение", ИмяТаблицы = "Справочник.СоглашенияСКлиентами");
	ПараметрыЗапроса.Вставить("Пользователь",  Пользователи.ТекущийПользователь());
	ПараметрыЗапроса.Вставить("ИспользоватьГрафикиОплаты", ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты"));
	ПараметрыЗапроса.Вставить("ВозвратМногооборотнойТары", ВозвратМногооборотнойТары);
	
	Если ИспользоватьОграниченияПоСоглашениям Тогда
		ПараметрыЗапроса.Вставить("СоглашениеСКлиентом", ДокументПродажи.Соглашение);
	КонецЕсли;

	ПоСсылке = Истина;
	
	Для Каждого ТекЭлемент Из МассивПроверок Цикл

		Если ТекЭлемент = "ВременнаяТаблицаДокументПродажи" Тогда
		
			СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаТовары" Тогда
		
			СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ИмяТаблицы, УчитыватьСкидкиНаценки, ПоСсылке);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЦеновыеГруппы" Тогда
		
			СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкидкиНаценки" Тогда
		
			СформироватьЗапросВременнаяТаблицаСкидкиНаценкиДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
		
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыГрафикаОплаты" Тогда
		
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаКурсыВалют" Тогда
			
			СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаСкладыКорректныеПоСоглашению" Тогда
			
			СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "СоответствиеШапкиУсловиямПродаж" Тогда
			
			СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы);

		ИначеЕсли ТекЭлемент = "СоответствиеТоваровУсловиямПродаж" Тогда

			СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы);

		ИначеЕсли ТекЭлемент = "СоответствиеСкидокНаценокУсловиямПродаж" Тогда

			СформироватьЗапросСоответствиеСкидокНаценокУсловиямПродаж(ТекстЗапроса);

		ИначеЕсли ТекЭлемент = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда

			СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса);

		ИначеЕсли ТекЭлемент = "КорректностьЭтаповГрафикаОплаты" Тогда

			СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса);

		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда

			СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса,ПараметрыЗапроса);

		ИначеЕсли ТекЭлемент = "ВхождениеЦенВДопустимыйДиапазон" Тогда

			СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса);

		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокГруппыПользователей(ТекстЗапроса);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамПользователей(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОграниченияПоГруппамИПользователям(ТекстЗапроса, ИспользоватьЦеновыеГруппы);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграничениеРучныхСкидокОбщиеОграничения(ТекстЗапроса, ИспользоватьЦеновыеГруппы, ИспользоватьОграниченияПоПользователям, ИспользоватьОграниченияПоСоглашениям);
			
		ИначеЕсли  ТекЭлемент = "ВременнаяТаблицаОграниченияРучныхСкидок" Тогда
			
			НастройкиПродажДляПользователейСервер.СформироватьЗапросВременнаяТаблицаОграниченияРучныхСкидок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияТипового" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "ВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального" Тогда
			
			СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи, ПоСсылке, ИмяТаблицы);
			
		ИначеЕсли ТекЭлемент = "КорректностьЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса);
			
		ИначеЕсли ТекЭлемент = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса);
			
		КонецЕсли;

	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		УстановитьПривилегированныйРежим(Ложь);
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для Каждого ПараметрЗапроса Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ПараметрЗапроса.Ключ, ПараметрЗапроса.Значение);
	КонецЦикла;
	
	МассивРезультатов = Запрос.ВыполнитьПакет();

	// Сообщим пользователю о результатах проверки для каждого результата запроса

	Для ТекИндекс = 0 По МассивРезультатов.Количество()-1 Цикл

		Выборка = МассивРезультатов[ТекИндекс].Выбрать();

		Если МассивПроверок[ТекИндекс] = "СоответствиеШапкиУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий И ЕстьОтклоненияОтФинансовыхУсловий И ЕстьОтклоненияОтЛогистическихУсловий Тогда
				Продолжить;
			КонецЕсли;

			Если Выборка.Следующий() Тогда

				Если Выборка.ЕстьОшибкиЗаполненияВалюта Или
					Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Или
					Выборка.ЕстьОшибкиЗаполненияВидЦен Или
					Выборка.ЕстьОшибкиЗаполненияНалогообложениеНДС Или
					Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Или
					Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Или
					Выборка.ЕстьОшибкиЗаполненияПроцентРучнойСкидки Или
					Выборка.ЕстьОшибкиЗаполненияПроцентРучнойНаценки Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					
				КонецЕсли;
					
				Если Выборка.ЕстьОшибкиЗаполненияГрафикОплаты Или
					Выборка.ЕстьОшибкиЗаполненияФормыОплаты Или
					Выборка.ЕстьОшибкиЗаполненияФормыОплатыСоглашения Или
					Выборка.ЕстьОшибкиЗаполненияКалендаря Тогда

					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					
				КонецЕсли;

				Если Выборка.ЕстьОшибкиЗаполненияСклад Или
					Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда
					
					ЕстьОтклоненияОтЛогистическихУсловий = Истина;
					
				КонецЕсли;

			КонецЕсли;

			
		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеТоваровУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл

				Если Выборка.ЕстьОшибкиЗаполненияЦена Или
					(Выборка.ЕстьОшибкиЗаполненияВидЦены И Выборка.ЦенаСоглашение = 0) Или
					Выборка.ЕстьОшибкиЗаполненияНалогообложениеНДС Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Продолжить;
				
				КонецЕсли;

			КонецЦикла;

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеСкидокНаценокУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;

			Пока Выборка.Следующий() Цикл

				Если Выборка.ЛишняяСкидкаНаценкаВДокументе Или
					Выборка.ОтсутствуетСкидкаНаценкаВДокументе Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Продолжить;
					
				КонецЕсли;

			КонецЦикла;

		ИначеЕсли МассивПроверок[ТекИндекс] = "СоответствиеЦеновыхГруппУсловиямПродаж" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл

				Если Выборка.ЕстьОшибкиЗаполненияЦеновыеГруппы
					Или Выборка.ЕстьОшибкиЗаполненияВидЦен
					Или Выборка.ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки
					Или Выборка.ЕстьОшибкиЗаполненияРучнойСкидки
					Или Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Продолжить;
					
					
				КонецЕсли;

			КонецЦикла;

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповГрафикаОплаты" Тогда

			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПроцентов = 0;
			СуммаПроцентовШаблона = 0;
			
			Пока Выборка.Следующий() Цикл
				
				Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
					Прервать;
				КонецЕсли;
				
				Если Выборка.ЭтапШаблонаОтсутствует Тогда
					Продолжить;
				КонецЕсли;
				
				Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Календарь) Тогда
					
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Выборка.Календарь,
						?(Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки,
							?(ЗначениеЗаполнено(Выборка.ЖелаемаяДатаОтгрузки), Выборка.ЖелаемаяДатаОтгрузки, Выборка.Дата), Выборка.Дата),
						Выборка.Сдвиг);
						
				Иначе
						
					ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
					
				КонецЕсли;
				
				Если ДатаПлатежаШаблона < Выборка.ДатаПлатежа Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
				
				КонецЕсли;
				
				// Проверка отклонений процентов платежей
				СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
				СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
				Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;

		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповГрафикаОплаты" Тогда

			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Выборка.Следующий();

			Если Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
				ЕстьОтклоненияОтФинансовыхУсловий = Истина;
			КонецЕсли;

		ИначеЕсли МассивПроверок[ТекИндекс] = "ВхождениеЦенВДопустимыйДиапазон" Тогда

			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЕстьОшибкиМинимальноДопустимаяЦена Или
					Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда
					
					ЕстьОтклоненияОтЦеновыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "ДопустимостьРучныхСкидокНаценок" Тогда
			
			Если ЕстьОтклоненияОтЦеновыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			Если Выборка.Следующий() Тогда
				ЕстьОтклоненияОтЦеновыхУсловий = Истина;
			КонецЕсли;
			
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьЭтаповОплатыСоглашения" Тогда
			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПроцентов = 0;
			СуммаПроцентовШаблона = 0;
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ЭтапШаблонаОтсутствует Тогда
					Продолжить;
				КонецЕсли;
				
				
				Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Или
					Выборка.СдвигШаблона < Выборка.Сдвиг Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;

				СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
				СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
				Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
					
					ЕстьОтклоненияОтФинансовыхУсловий = Истина;
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли МассивПроверок[ТекИндекс] = "КорректностьКоличестваЭтаповОплатыСоглашения" Тогда
			
			Если ЕстьОтклоненияОтФинансовыхУсловий Тогда
				Продолжить;
			КонецЕсли;
			
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЕстьОшибкиЗаполненияЭтапыОплатыСоглашения Тогда
						ЕстьОтклоненияОтФинансовыхУсловий = Истина;
						Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Проверяет корректность заполнения товаров документа возврата в соответствии 
// с реализованными товарами с учетом корректировок.
// Вызывается из процедуры документа "ОбработкаПроверкиЗаполнения"
//
// Параметры:
// ДокументПродажи  - ДокументОбъект, для которого необходимо осуществить проверки
// ИмяТаблицы - Имя таблицы Товары
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура ПроверитьКорректностьВозвращаемыхТоваров(Знач ДокументПродажи, ИмяТаблицы, Отказ) Экспорт
	
	Если ИмяТаблицы = "ВозвращаемыеТовары" Тогда
		ПараметрыОтбора = Новый Структура("Отменено", Ложь); 
		ТаблицаПроверяемыеТовары = ДокументПродажи[ИмяТаблицы].Выгрузить(ПараметрыОтбора);
	Иначе
		ТаблицаПроверяемыеТовары = ДокументПродажи[ИмяТаблицы].Выгрузить();
	КонецЕсли;
	
	ТаблицаПроверяемыеТовары.Свернуть("Номенклатура,Характеристика,ДокументРеализации", "Количество, КоличествоУпаковок");
	
	ВозвратПоЧеку = ЗначениеЗаполнено(ДокументПродажи.ЧекККМ);
	
	Если ТаблицаПроверяемыеТовары.Количество() > 0 Тогда
		
		Если НЕ ВозвратПоЧеку Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
			|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
			|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок КАК КоличествоУпаковок,
			|	ВозвратТоваровОтКлиентаТовары.Количество КАК Количество,
			|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации КАК ДокументРеализации
			|ПОМЕСТИТЬ ПроверяемыеТовары
			|ИЗ
			|	&ТаблицаПроверяемыеТовары КАК ВозвратТоваровОтКлиентаТовары
			|ГДЕ
			|	ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> НЕОПРЕДЕЛЕНО
			|	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
			|	И ВозвратТоваровОтКлиентаТовары.ДокументРеализации <> ЗНАЧЕНИЕ(Документ.ОтчетОРозничныхПродажах.ПустаяСсылка)
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(КорректировкаРеализации.Дата) КАК Дата,
			|	ПроверяемыеТовары.ДокументРеализации КАК СсылкаРеализации
			|ПОМЕСТИТЬ ДанныеКорректировки
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|		ПО (КорректировкаРеализации.ДокументОснование = ПроверяемыеТовары.ДокументРеализации)
			|ГДЕ
			|	КорректировкаРеализации.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ПроверяемыеТовары.ДокументРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	СсылкаРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	МАКСИМУМ(КорректировкаРеализации.Ссылка) КАК Ссылка,
			|	МАКСИМУМ(КорректировкаРеализации.Ссылка.Дата) КАК Дата,
			|	КорректировкаРеализации.Ссылка.ДокументОснование КАК СсылкаРеализации
			|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
			|ИЗ
			|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
			|ГДЕ
			|	(КорректировкаРеализации.Ссылка.ДокументОснование, КорректировкаРеализации.Ссылка.Дата) В
			|			(ВЫБРАТЬ
			|				ДанныеКорректировки.СсылкаРеализации КАК СсылкаРеализации,
			|				ДанныеКорректировки.Дата КАК Дата
			|			ИЗ
			|				ДанныеКорректировки)
			|
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализации.Ссылка.ДокументОснование
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка,
			|	СсылкаРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
			|			ТОГДА ПроверяемыеТовары.ДокументРеализации
			|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
			|	КОНЕЦ КАК Ссылка
			|ПОМЕСТИТЬ СсылкиНаРеализации
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
			|		ПО ПроверяемыеТовары.ДокументРеализации = ДанныеПоследнейКорректировки.СсылкаРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
			|	КорректировкаРеализацииТовары.Характеристика КАК Характеристика,
			|	СУММА(КорректировкаРеализацииТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(КорректировкаРеализацииТовары.Количество) КАК Количество,
			|	КорректировкаРеализацииТовары.Цена,
			|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование КАК ДокументРеализации
			|ПОМЕСТИТЬ ДанныеРеализации
			|ИЗ
			|	Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
			|
			|ГДЕ
			|	КорректировкаРеализацииТовары.Ссылка.Проведен
			|	И (Номенклатура,Характеристика) В 
			|	(ВЫБРАТЬ 
			|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|		ПроверяемыеТовары.Характеристика КАК Характеристика
			|	ИЗ
			|		ПроверяемыеТовары КАК ПроверяемыеТовары	
			|	) И  (Ссылка) В 
			|	(ВЫБРАТЬ 
			|		СсылкиНаРеализации.Ссылка КАК Ссылка
			|	ИЗ
			|		СсылкиНаРеализации КАК СсылкиНаРеализации	
			|	) 
			|СГРУППИРОВАТЬ ПО
			|	КорректировкаРеализацииТовары.Номенклатура,
			|	КорректировкаРеализацииТовары.Характеристика,
			|	КорректировкаРеализацииТовары.Цена,
			|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	РеализацияТоваровУслугТовары.Номенклатура,
			|	РеализацияТоваровУслугТовары.Характеристика,
			|	СУММА(РеализацияТоваровУслугТовары.КоличествоУпаковок),
			|	СУММА(РеализацияТоваровУслугТовары.Количество),
			|	РеализацияТоваровУслугТовары.Цена,
			|	РеализацияТоваровУслугТовары.Ссылка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
			|
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка.Проведен
			|	И (Номенклатура,Характеристика) В 
			|	(ВЫБРАТЬ 
			|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|		ПроверяемыеТовары.Характеристика КАК Характеристика
			|	ИЗ
			|		ПроверяемыеТовары КАК ПроверяемыеТовары	
			|	) И  (Ссылка) В 
			|	(ВЫБРАТЬ 
			|		СсылкиНаРеализации.Ссылка КАК Ссылка
			|	ИЗ
			|		СсылкиНаРеализации КАК СсылкиНаРеализации	
			|	) 
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.Номенклатура,
			|	РеализацияТоваровУслугТовары.Характеристика,
			|	РеализацияТоваровУслугТовары.Цена,
			|	РеализацияТоваровУслугТовары.Ссылка
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ОтчетОРозничныхПродажахТовары.Номенклатура,
			|	ОтчетОРозничныхПродажахТовары.Характеристика,
			|	СУММА(ОтчетОРозничныхПродажахТовары.КоличествоУпаковок),
			|	СУММА(ОтчетОРозничныхПродажахТовары.Количество),
			|	ОтчетОРозничныхПродажахТовары.Цена,
			|	ОтчетОРозничныхПродажахТовары.Ссылка
			|ИЗ
			|	Документ.ОтчетОРозничныхПродажах.Товары КАК ОтчетОРозничныхПродажахТовары
			|
			|ГДЕ
			|	ОтчетОРозничныхПродажахТовары.Ссылка.Проведен
			|	И (Номенклатура,Характеристика) В 
			|	(ВЫБРАТЬ 
			|		ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|		ПроверяемыеТовары.Характеристика КАК Характеристика
			|	ИЗ
			|		ПроверяемыеТовары КАК ПроверяемыеТовары	
			|	) И  (Ссылка) В 
			|	(ВЫБРАТЬ 
			|		СсылкиНаРеализации.Ссылка КАК Ссылка
			|	ИЗ
			|		СсылкиНаРеализации КАК СсылкиНаРеализации	
			|	) 
			|СГРУППИРОВАТЬ ПО
			|	ОтчетОРозничныхПродажахТовары.Номенклатура,
			|	ОтчетОРозничныхПродажахТовары.Характеристика,
			|	ОтчетОРозничныхПродажахТовары.Цена,
			|	ОтчетОРозничныхПродажахТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
			|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации
			|ПОМЕСТИТЬ ДанныеДокументовВозврата
			|ИЗ
			|	ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
			|		ПО (ТаблицаПроверяемыеТовары.ДокументРеализации = ПроверяемыеТовары.ДокументРеализации)
			|			И ПроверяемыеТовары.Номенклатура = ТаблицаПроверяемыеТовары.Номенклатура
			|			И ПроверяемыеТовары.Характеристика = ТаблицаПроверяемыеТовары.Характеристика
			|ГДЕ
			|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
			|	И ТаблицаПроверяемыеТовары.Ссылка <> &ЭтотВозвратСсылка
			|	И ТаблицаПроверяемыеТовары.Ссылка.ЗаявкаНаВозвратТоваровОтКлиента <> &ЭтотВозвратСсылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаПроверяемыеТовары.Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(ДанныеРеализации.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) КАК Количество,
			|	ПроверяемыеТовары.Характеристика КАК Характеристика,
			|	ПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
			|	ПроверяемыеТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ПроверяемыеТовары.ДокументРеализации.Номер КАК НомерРеализации
			|ИЗ
			|	ДанныеРеализации КАК ДанныеРеализации
			|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
			|		ПО ДанныеРеализации.ДокументРеализации = ДанныеДокументовВозврата.ДокументРеализации
			|			И ДанныеРеализации.Номенклатура = ДанныеДокументовВозврата.Номенклатура
			|			И ДанныеРеализации.Характеристика = ДанныеДокументовВозврата.Характеристика
			|		ПОЛНОЕ СОЕДИНЕНИЕ ПроверяемыеТовары КАК ПроверяемыеТовары
			|		ПО ДанныеРеализации.ДокументРеализации = ПроверяемыеТовары.ДокументРеализации
			|			И ДанныеРеализации.Номенклатура = ПроверяемыеТовары.Номенклатура
			|			И ДанныеРеализации.Характеристика = ПроверяемыеТовары.Характеристика
			|ГДЕ
			|	ЕСТЬNULL(ДанныеРеализации.Количество, 0) - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) - ЕСТЬNULL(ПроверяемыеТовары.Количество, 0) < 0
			|	И ПроверяемыеТовары.Номенклатура.ТипНоменклатуры В
			|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))";
			
			Запрос.УстановитьПараметр("ТаблицаПроверяемыеТовары", ТаблицаПроверяемыеТовары);
			Запрос.УстановитьПараметр("ЭтотВозвратСсылка", ДокументПродажи.Ссылка);
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст ="ВЫБРАТЬ
			|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
			|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
			|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
			|	ВозвратТоваровОтКлиентаТовары.Количество
			|ПОМЕСТИТЬ ЗаполняемыеТовары
			|ИЗ
			|	&ТаблицаТовары КАК ВозвратТоваровОтКлиентаТовары
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекККМТовары.Ссылка КАК ДокументРеализации,
			|	ЧекККМТовары.Номенклатура КАК Номенклатура,
			|	ЧекККМТовары.Характеристика КАК Характеристика,
			|	ЧекККМТовары.Упаковка КАК Упаковка,
			|	СУММА(ЧекККМТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(ЧекККМТовары.Количество) КАК Количество,
			|	ЧекККМТовары.Ссылка.Дата КАК ДатаРеализации,
			|	ЧекККМТовары.Сумма КАК Сумма
			|ПОМЕСТИТЬ ЧекиККМ
			|ИЗ
			|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
			|ГДЕ
			|	ЧекККМТовары.Ссылка.Проведен
			|	И ЧекККМТовары.Ссылка = &ЧекККМ
			|
			|СГРУППИРОВАТЬ ПО
			|	ЧекККМТовары.Ссылка,
			|	ЧекККМТовары.Номенклатура,
			|	ЧекККМТовары.Характеристика,
			|	ЧекККМТовары.Упаковка,
			|	ЧекККМТовары.Ссылка.Дата,
			|	ЧекККМТовары.Сумма
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументРеализации,
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекККМВозвратТовары.Ссылка КАК ДокументРеализации,
			|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
			|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
			|	ЧекККМВозвратТовары.Упаковка КАК Упаковка,
			|	СУММА(ЧекККМВозвратТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
			|	ЧекККМВозвратТовары.Ссылка.Дата КАК ДатаРеализации,
			|	СУММА(ЧекККМВозвратТовары.Сумма) КАК Сумма
			|ПОМЕСТИТЬ ЧекиККМВозврат
			|ИЗ
			|	ЧекиККМ КАК ЧекиККМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
			|		ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ЧекККМВозвратТовары.Ссылка.КассоваяСмена
			|ГДЕ
			|	ЧекККМВозвратТовары.Ссылка.Проведен
			|
			|СГРУППИРОВАТЬ ПО
			|	ЧекККМВозвратТовары.Ссылка,
			|	ЧекККМВозвратТовары.Номенклатура,
			|	ЧекККМВозвратТовары.Характеристика,
			|	ЧекККМВозвратТовары.Упаковка,
			|	ЧекККМВозвратТовары.Ссылка.Дата
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДокументРеализации,
			|	Номенклатура,
			|	Характеристика
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
			|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
			|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
			|	ТаблицаПроверяемыеТовары.Ссылка
			|ПОМЕСТИТЬ ДанныеВозврата
			|ИЗ
			|	ЧекиККМ КАК ЧекиККМ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
			|		ПО ЧекиККМ.ДокументРеализации = ТаблицаПроверяемыеТовары.Ссылка.ЧекККМ
			|ГДЕ
			|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
			|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаПроверяемыеТовары.Номенклатура,
			|	ТаблицаПроверяемыеТовары.Характеристика,
			|	ТаблицаПроверяемыеТовары.ДокументРеализации,
			|	ТаблицаПроверяемыеТовары.Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика,
			|	ДокументРеализации
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЧекиККМ.ДокументРеализации КАК ДокументРеализации,
			|	ЧекиККМ.Номенклатура КАК Номенклатура,
			|	ЧекиККМ.Характеристика КАК Характеристика,
			|	ЕСТЬNULL(ЧекиККМ.Количество, 0) - ЕСТЬNULL(ЗаполняемыеТовары.Количество, 0) - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) КАК Количество,
			|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации,
			|	ЧекиККМ.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЧекиККМ.ДокументРеализации.Номер КАК НомерРеализации
			|ИЗ
			|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
			|		ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМ КАК ЧекиККМ
			|			ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМВозврат КАК ЧекиККМВозврат
			|			ПО ЧекиККМ.ДокументРеализации = ЧекиККМВозврат.ДокументРеализации.ЧекККМ
			|				И ЧекиККМ.Номенклатура = ЧекиККМВозврат.Номенклатура
			|				И ЧекиККМ.Характеристика = ЧекиККМВозврат.Характеристика
			|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозврата КАК ДанныеВозврата
			|			ПО ЧекиККМ.ДокументРеализации = ДанныеВозврата.Ссылка.ЧекККМ
			|				И ЧекиККМ.Номенклатура = ДанныеВозврата.Номенклатура
			|				И ЧекиККМ.Характеристика = ДанныеВозврата.Характеристика
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
			|			ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
			|		ПО ЗаполняемыеТовары.Номенклатура = ЧекиККМ.Номенклатура
			|			И ЗаполняемыеТовары.Характеристика = ЧекиККМ.Характеристика
			|ГДЕ
			|	ЕСТЬNULL(ЧекиККМ.Количество, 0) - ЕСТЬNULL(ЗаполняемыеТовары.Количество, 0) - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) < 0
			|	И ЧекиККМ.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаРеализации УБЫВ";
			Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыеТовары);
			Запрос.УстановитьПараметр("ДокументВозврата", ДокументПродажи.Ссылка);
			Запрос.УстановитьПараметр("ЧекККМ", ДокументПродажи.ЧекККМ);
		КонецЕсли;
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() > 0 Тогда
			Отказ = Истина;
			СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Результат, ВозвратПоЧеку);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции расчета цен и скидок в документах продажи.

// Заполняет реквизит "Цена" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения
// 			Обязательные поля:
// 				"Дата" - Дата - Дата документа
// 				"Валюта" - СправочникСсылка.Валюты - Валюта документа
// 				"Соглашение" - СправочникСсылка.СоглашенияСКлиентами - если параметр отсутствует, значит должен быть заполнен параметр "ВидЦены"
// 				"ВидЦены" - СправочникСсылка.ВидыЦен - если параметр отсутствует, значит должен быть заполнен параметр "Соглашение"
// 			Необязательные поля:
// 				"ПоляЗаполнения" - Строка - Строка с перечислением заполняемых полей в таблице. Значение по-умолчанию: "Цена". Дополнительные поля: "ВидЦены, СрокПоставки, СтавкаНДС"
// 				"КолонкиПоЗначению" - Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 				"ДругиеИменаКолонок" - Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 		СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
// 		КэшированныеЗначения - Структура - Структура кэшированных значений
// 		
//
Функция ЗаполнитьЦены(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	ЦеныЗаполнены = Ложь;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Параметры заполнения не указаны'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	// Получение структуры параметров по-умолчанию
	Параметры = Новый Структура(
		"ПоляЗаполнения, КолонкиПоЗначению, ДругиеИменаКолонок",
		"Цена", Новый Структура, Новый Структура
	);
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	// Проверки входящих данных
	Если Не Параметры.Свойство("Соглашение") И Не Параметры.Свойство("ВидЦены") Тогда
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Соглашение"" или ""ВидЦены""'");
		Возврат ЦеныЗаполнены;
	ИначеЕсли Не Параметры.Свойство("Дата") Или Не Параметры.Свойство("Валюта") Тогда
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Валюта"" и ""Дата""'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	// Получение выгрузки по табличной части
	Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		ТабличнаяЧасть,
		ВыделенныеСтроки,
		"НомерСтроки, Номенклатура, Характеристика, Упаковка",
		Параметры.КолонкиПоЗначению,
		Параметры.ДругиеИменаКолонок
	);
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Параметры.Дата), Параметры.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Валюта", Параметры.Валюта);
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыТоваров("втТаблицаТовары");
	
	Если Параметры.Свойство("ВидЦены") Тогда
		
		Запрос.УстановитьПараметр("ВидЦены", Параметры.ВидЦены);
		
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦены", "втТаблицаТовары", Истина);
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	втТаблицаТовары.НомерСтроки КАК НомерСтроки,
		|	втТаблицаЦены.ВидЦены КАК ВидЦены,
		|	втТаблицаЦены.Цена КАК Цена
		|ИЗ
		|	втТаблицаТовары КАК втТаблицаТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЦены КАК втТаблицаЦены
		|		ПО (втТаблицаЦены.НомерСтроки = втТаблицаТовары.НомерСтроки)";
		
	ИначеЕсли Параметры.Свойство("Соглашение") Тогда
		
		Запрос.УстановитьПараметр("Соглашение", Параметры.Соглашение);
		
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦенПоСоглашению("втТаблицаЦеныПоСоглашению", "втТаблицаТовары");
		Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыЦен("втТаблицаЦеныПоВидуЦен", "втТаблицаЦеныПоСоглашению", Ложь);
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ
		|	втТаблицаЦеныПоСоглашению.НомерСтроки КАК НомерСтроки,
		|	втТаблицаЦеныПоСоглашению.ВидЦены КАК ВидЦены,
		|	втТаблицаЦеныПоСоглашению.СтавкаНДС КАК СтавкаНДС,
		|	втТаблицаЦеныПоСоглашению.СрокПоставки КАК СрокПоставки,
		|	ВЫБОР
		|		КОГДА втТаблицаЦеныПоСоглашению.Цена = 0
		|			ТОГДА втТаблицаЦеныПоВидуЦен.Цена
		|		ИНАЧЕ втТаблицаЦеныПоСоглашению.Цена
		|	КОНЕЦ КАК Цена
		|ИЗ
		|	втТаблицаЦеныПоСоглашению КАК втТаблицаЦеныПоСоглашению
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЦеныПоВидуЦен КАК втТаблицаЦеныПоВидуЦен
		|		ПО (втТаблицаЦеныПоВидуЦен.НомерСтроки = втТаблицаЦеныПоСоглашению.НомерСтроки)";
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура(Параметры.ПоляЗаполнения);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
		СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
		Если СтруктураДействий <> Неопределено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Заполняет реквизит "Цена" в товарной табличной части
//
// Параметры:
// 		ТабличнаяЧасть - ДанныеФормыКоллекция, ТабличнаяЧасть - Товарная табличная часть документа
// 		ВыделенныеСтроки - Массив - Массив выделенных строк
// 		ПараметрыЗаполнения - Структура - Структура параметров заполнения
// 			Обязательные поля:
// 				"Дата" - Дата - Дата документа
// 				"Валюта" - СправочникСсылка.Валюты - Валюта документа
//				"Организация" - СправочникСсылка.Организации - Органиация документа
//				"ПредварительныйРасчет" - Булево - Если истина - предварительный расчет, иначе - фактический
// 			Необязательные поля:
// 				"ПоляЗаполнения" - Строка - Строка с перечислением заполняемых полей в таблице. Значение по-умолчанию: "Цена". Дополнительные поля: "ВидЦены, СрокПоставки, СтавкаНДС"
// 				"КолонкиПоЗначению" - Структура - Структура для передачи в качестве параметра "КолонкиПоЗначению" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 				"ДругиеИменаКолонок" - Структура - Структура для передачи в качестве параметра "НовыеИменаКолонок" в функцию "ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений"
// 		СтруктураДействий - Структура - Стандартная структура действий со строками для вызова "ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ"
// 		КэшированныеЗначения - Структура - Структура кэшированных значений
// 		
//
Функция ЗаполнитьЦеныПоСебестоимости(ТабличнаяЧасть, ВыделенныеСтроки = Неопределено, ПараметрыЗаполнения, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	ЦеныЗаполнены = Ложь;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Параметры заполнения не указаны'");
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	// Получение структуры параметров по-умолчанию
	Параметры = Новый Структура(
		"ПоляЗаполнения,  ДругиеИменаКолонок",
		"Цена", Новый Структура
	);                                                                           
	ОбщегоНазначенияУТКлиентСервер.ДополнитьСтруктуру(Параметры, ПараметрыЗаполнения, Истина);
	
	// Проверки входящих данных
	Если Не Параметры.Свойство("Дата") 
		Или Не Параметры.Свойство("Организация") 
		Или Не Параметры.Свойство("Склад") 
		Или Не Параметры.Свойство("ПредварительныйРасчет") Тогда
		
		ВызватьИсключение НСтр("ru='В параметрах заполнения должны быть указаны ""Дата"", ""Организация"", ""Склад"" и ""ПредварительныйРасчет""'");
		Возврат ЦеныЗаполнены;
		
	КонецЕсли;
	
	// Получение выгрузки по табличной части
	Таблица = ОбщегоНазначенияУТ.ВыгрузитьТаблицуЗначений(
		ТабличнаяЧасть,
		ВыделенныеСтроки,
		"НомерСтроки, Номенклатура, Характеристика",
		Неопределено,
		Параметры.ДругиеИменаКолонок
	);
	
	// Получение запроса
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Параметры.Дата), Параметры.Дата, ТекущаяДата()));
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	Запрос.УстановитьПараметр("Склад", Параметры.Склад);

	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыТоваровСписания("втТаблицаТоварыСписания");
	
	Запрос.Текст = Запрос.Текст + ПолучитьТекстЗапросаВременнойТаблицыСебестоимостей("втТаблицаСебестоимости", "втТаблицаТоварыСписания", Параметры.ПредварительныйРасчет);
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	втТаблицаТоварыСписания.НомерСтроки КАК НомерСтроки,
	|	втТаблицаСебестоимости.Цена КАК Цена
	|ИЗ
	|	втТаблицаТоварыСписания КАК втТаблицаТоварыСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСебестоимости КАК втТаблицаСебестоимости
	|		ПО (втТаблицаСебестоимости.НомерСтроки = втТаблицаТоварыСписания.НомерСтроки)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ЦеныЗаполнены;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура(Параметры.ПоляЗаполнения);
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураЗаполнения, Выборка);
		СтрокаТЧ = ТабличнаяЧасть[Выборка.НомерСтроки - 1];
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураЗаполнения);
		Если СтруктураДействий <> Неопределено Тогда
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает цену по отбору
//
// Параметры:
//		ПараметрыОтбора - Структура - Структура с обязательными полями
//			"Дата" - Дата - Дата получения цены
// 			"Номенклатура" - СправочникСсылка.Номенклатура
// 			"Характеристика" - СправочникСсылка.ХарактеристикиНоменклатуры
// 			"Упаковка" - СправочникСсылка.УпаковкиНоменклатуры
// 			"ВидЦены" - СправочникСсылка.ВидыЦен
// 			"Валюта" - СправочникСсылка.Валюты
//
// Возвращаемое значение:
// 		Число - Цена
//
Функция ПолучитьЦенуПоОтбору(ПараметрыОтбора) Экспорт
	
	Запрос = Новый Запрос;
	Для Каждого Параметр Из ПараметрыОтбора Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕстьNULL(ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент, 1)
	|	* ВЫБОР КОГДА ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)>0 Тогда 
	|			ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)
	|      ИНАЧЕ 
	|      ЕстьNULL(ЦеныАртикул.Цена,0)
	|КОНЕЦ /ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент,1)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	 РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|				ВидЦены = ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен)
	|				И Номенклатура = ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)
	|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|) КАК ЦеныАртикул	
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	|				ВидЦены = ВЫРАЗИТЬ(&ВидЦены КАК Справочник.ВидыЦен)
	|				И Номенклатура = ВЫРАЗИТЬ(&Номенклатура КАК Справочник.Номенклатура)
	|				И Характеристика = ВЫРАЗИТЬ(&Характеристика КАК Справочник.ХарактеристикиНоменклатуры)
	|) КАК ЦеныНоменклатурыСрезПоследних
	| ПО  ЦеныНоменклатурыСрезПоследних.Номенклатура=ЦеныАртикул.Номенклатура
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|ПО 
	|	ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Цена;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации правил продаж.

// Возвращает структуру условий продаж по торговому соглашению.
//
// Параметры:
// Соглашение - СправочникСсылка.СоглашенияСКлиентами - ссылка на соглашение с клиентом
//
// Возвращаемое значение:
// Структура
// Структура, включающая условия продаж
//
Функция ПолучитьУсловияПродаж(Знач Соглашение,
	                          Знач УчитыватьГруппыСкладов=Ложь,
	                          Знач ИсключитьГруппыСкладовДоступныеВЗаказах=Ложь) Экспорт

	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
		|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
		|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
		|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
		|	СоглашениеСКлиентом.Организация                                 КАК Организация,
		|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
		|	СоглашениеСКлиентом.ГрафикОплаты                                КАК ГрафикОплаты,
		|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты                    КАК ФормаОплаты,
		|	СоглашениеСКлиентом.ПорядокОплаты                               КАК ПорядокОплаты,
		|	СоглашениеСКлиентом.ГруппаФинансовогоУчета                      КАК ГруппаФинансовогоУчета,
		|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
		|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
		|	СоглашениеСКлиентом.Период                                      КАК Период,
		|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
		|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
		|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
		|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА
		|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		КОГДА
		|			СоглашениеСКлиентом.Склад.ЭтоГруппа
		|			И &УчитыватьГруппыСкладов
		|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
		|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
		|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
		|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
		|	СоглашениеСКлиентом.ОграничиватьРучныеСкидки                    КАК ОграничиватьРучныеСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
		|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
		|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
		|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
		|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
		|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	СоглашениеСКлиентом.Ссылка = &Соглашение");
	
		Запрос.УстановитьПараметр("Соглашение",             Соглашение);
		Запрос.УстановитьПараметр("ВыборГруппыСкладов",     Справочники.Склады.ВариантыВыбораГруппыСкладов(ИсключитьГруппыСкладовДоступныеВЗаказах));
		Запрос.УстановитьПараметр("УчитыватьГруппыСкладов", УчитыватьГруппыСкладов);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка          = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
		
		СтруктураРеквизитов = ПолучитьСтруктуруУсловийПродаж();
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
		
		Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает структуру условий продаж по партнеру.
//
// Параметры:
// Партнер           - Ссылка на партнера, для которого необходимо получить условия продаж
// ПараметрыОтбора   - Структура - содержит параметры отбора соглашения
//
// Возвращаемое значение:
// Структура.
// Структура, включающая условия продаж
//
Функция ПолучитьУсловияПродажПоУмолчанию(Знач Партнер = Неопределено, ПараметрыОтбора = Неопределено) Экспорт
	
	// Учтем вариант использования соглашений
	ИспользоватьТиповыеСоглашенияСКлиентами        = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	
	ТолькоТиповые = ИспользоватьТиповыеСоглашенияСКлиентами И НЕ ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	
	ВсеПараметрыОтбора = Новый Структура();
	ВсеПараметрыОтбора.Вставить("ТолькоТиповые",                           ТолькоТиповые);
	ВсеПараметрыОтбора.Вставить("ТолькоИндивидуальные",                    ТолькоИндивидуальные);
	ВсеПараметрыОтбора.Вставить("ТолькоИспользуемыеВРаботеТП",             Ложь);
	ВсеПараметрыОтбора.Вставить("УчитыватьГруппыСкладов",                  Ложь);
	ВсеПараметрыОтбора.Вставить("ИсключитьГруппыСкладовДоступныеВЗаказах", Ложь);
	ВсеПараметрыОтбора.Вставить("ХозяйственнаяОперация",                   Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	ВсеПараметрыОтбора.Вставить("ВыбранноеСоглашение",                     Справочники.СоглашенияСКлиентами.ПустаяСсылка());
	
	Если ПараметрыОтбора <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВсеПараметрыОтбора, ПараметрыОтбора);
	КонецЕсли;
	
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
		|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
		|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
		|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
		|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
		|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
		|	СоглашениеСКлиентом.Организация                                 КАК Организация,
		|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
		|	СоглашениеСКлиентом.ГрафикОплаты                                КАК ГрафикОплаты,
		|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты                    КАК ФормаОплаты,
		|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
		|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
		|	СоглашениеСКлиентом.Период                                      КАК Период,
		|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
		|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
		|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
		|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
		|	//+АК
		|	СоглашениеСКлиентом.АК_УсловияПоставки                          КАК АК_УсловияПоставки,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА
		|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		КОГДА
		|			СоглашениеСКлиентом.Склад.ЭтоГруппа
		|			И &УчитыватьГруппыСкладов
		|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
		|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
		|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
		|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
		|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
		|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
		|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
		|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	НЕ СоглашениеСКлиентом.ПометкаУдаления И
		|	СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) И
		|	СоглашениеСКлиентом.Типовое И НЕ &ТолькоИндивидуальные И 
		|" + ?(ВсеПараметрыОтбора.ТолькоИспользуемыеВРаботеТП," СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей И ","") + "
		|" + ?(ЗначениеЗаполнено(ВсеПараметрыОтбора.ХозяйственнаяОперация)," СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация И ","") + "
		|" + ?(Не ЗначениеЗаполнено(Партнер),"СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка) ", "
		|
		|	(СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|	ИЛИ СоглашениеСКлиентом.СегментПартнеров В
		|		(ВЫБРАТЬ
		|			ПартнерыСегмента.Сегмент
		|		ИЗ
		|			РегистрСведений.ПартнерыСегмента КАК ПартнерыСегмента
		|		ГДЕ
		|			ПартнерыСегмента.Партнер = &Партнер))
		|") + "
		|
		|" + ?(ВсеПараметрыОтбора.ТолькоТиповые Или Не ЗначениеЗаполнено(Партнер),";","
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
		|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
		|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
		|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
		|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
		|	СоглашениеСКлиентом.Организация                                 КАК Организация,
		|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
		|	СоглашениеСКлиентом.ГрафикОплаты                                КАК ГрафикОплаты,
		|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты                    КАК ФормаОплаты,
		|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
		|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
		|	СоглашениеСКлиентом.Период                                      КАК Период,
		|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
		|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
		|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
		|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА
		|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		КОГДА
		|			СоглашениеСКлиентом.Склад.ЭтоГруппа
		|			И &УчитыватьГруппыСкладов
		|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
		|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
		|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
		|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
		|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
		|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
		|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
		|//+АК
		|	СоглашениеСКлиентом.АК_УсловияПоставки                          КАК АК_УсловияПоставки,
		|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	НЕ СоглашениеСКлиентом.ПометкаУдаления
		|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) И
		|	НЕ СоглашениеСКлиентом.Типовое И НЕ &ТолькоТиповые И
		|" + ?(ВсеПараметрыОтбора.ТолькоИспользуемыеВРаботеТП," СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей И ","") + "
		|" + ?(ЗначениеЗаполнено(ВсеПараметрыОтбора.ХозяйственнаяОперация)," СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация И ","") + "
		|	СоглашениеСКлиентом.Партнер = &Партнер
		|УПОРЯДОЧИТЬ ПО
		|	Типовое ВОЗР;
		|") + "
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашениеСКлиентом.Ссылка                                      КАК Соглашение,
		|	СоглашениеСКлиентом.Типовое                                     КАК Типовое,
		|	СоглашениеСКлиентом.Партнер                                     КАК Партнер,
		|	СоглашениеСКлиентом.Контрагент                                  КАК Контрагент,
		|	СоглашениеСКлиентом.КонтактноеЛицо                              КАК КонтактноеЛицо,
		|	СоглашениеСКлиентом.Организация                                 КАК Организация,
		|	СоглашениеСКлиентом.Валюта                                      КАК Валюта,
		|	СоглашениеСКлиентом.ГрафикОплаты                                КАК ГрафикОплаты,
		|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты                    КАК ФормаОплаты,
		|	СоглашениеСКлиентом.СуммаДокумента                              КАК СуммаДокумента,
		|	СоглашениеСКлиентом.Регулярное                                  КАК Регулярное,
		|	СоглашениеСКлиентом.Период                                      КАК Период,
		|	СоглашениеСКлиентом.КоличествоПериодов                          КАК КоличествоПериодов,
		|	СоглашениеСКлиентом.СрокПоставки                                КАК СрокПоставки,
		|	СоглашениеСКлиентом.ВидЦен                                      КАК ВидЦен,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                             КАК ЦенаВключаетНДС,
		|	СоглашениеСКлиентом.НалогообложениеНДС                          КАК НалогообложениеНДС,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей   КАК ИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА
		|			НЕ СоглашениеСКлиентом.Склад.ЭтоГруппа
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		КОГДА
		|			СоглашениеСКлиентом.Склад.ЭтоГруппа
		|			И &УчитыватьГруппыСкладов
		|			И СоглашениеСКлиентом.Склад.ВыборГруппы В (&ВыборГруппыСкладов)
		|		ТОГДА
		|			СоглашениеСКлиентом.Склад
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	КОНЕЦ КАК Склад,
		|	СоглашениеСКлиентом.СегментНоменклатуры                         КАК СегментНоменклатуры,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                          КАК ДатаНачалаДействия,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                       КАК ДатаОкончанияДействия,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                       КАК ХозяйственнаяОперация,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                         КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                        КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.СпособРасчетаВознаграждения                 КАК СпособРасчетаВознаграждения,
		|	СоглашениеСКлиентом.ПроцентВознаграждения                       КАК ПроцентВознаграждения,
		|	СоглашениеСКлиентом.УдержатьВознаграждение                      КАК УдержатьВознаграждение,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов            КАК ИспользуютсяДоговорыКонтрагентов,
		|	СоглашениеСКлиентом.ПорядокРасчетов                             КАК ПорядокРасчетов,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям                КАК ДоступноВнешнимПользователям,
		|	СоглашениеСКлиентом.Статус                                      КАК СтатусСоглашения,
		|	СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару                КАК ВозвращатьМногооборотнуюТару,
		|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары              КАК СрокВозвратаМногооборотнойТары,
		|//+АК
		|	СоглашениеСКлиентом.АК_УсловияПоставки                          КАК АК_УсловияПоставки,
		|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю     КАК РассчитыватьДатуВозвратаТарыПоКалендарю
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ГДЕ
		|	НЕ СоглашениеСКлиентом.ПометкаУдаления
		|	И СоглашениеСКлиентом.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийСКлиентами.Действует) 
		|	И СоглашениеСКлиентом.Ссылка = &ВыбранноеСоглашение 
		|	И (СоглашениеСКлиентом.Типовое ИЛИ СоглашениеСКлиентом.Партнер = &Партнер)
		|" + ?(ВсеПараметрыОтбора.ТолькоИспользуемыеВРаботеТП,"И СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей ","") + "
		|" + ?(ЗначениеЗаполнено(ВсеПараметрыОтбора.ХозяйственнаяОперация),"И СоглашениеСКлиентом.ХозяйственнаяОперация = &ХозяйственнаяОперация ","") + "
		|");

	
	Запрос.УстановитьПараметр("Партнер",                Партнер);
	Запрос.УстановитьПараметр("ВыборГруппыСкладов",     Справочники.Склады.ВариантыВыбораГруппыСкладов(ВсеПараметрыОтбора.ИсключитьГруппыСкладовДоступныеВЗаказах));
	Запрос.УстановитьПараметр("ХозяйственнаяОперация",  ВсеПараметрыОтбора.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("УчитыватьГруппыСкладов", ВсеПараметрыОтбора.УчитыватьГруппыСкладов);
	Запрос.УстановитьПараметр("ТолькоТиповые",          ВсеПараметрыОтбора.ТолькоТиповые);
	Запрос.УстановитьПараметр("ТолькоИндивидуальные",   ВсеПараметрыОтбора.ТолькоИндивидуальные);
	Запрос.УстановитьПараметр("ВыбранноеСоглашение",    ВсеПараметрыОтбора.ВыбранноеСоглашение);

	РезультатЗапроса = Запрос.ВыполнитьПакет();

	// Если не найдено ни одного соглашения - возвращаем Неопределено 
	Если РезультатЗапроса[0].Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;

	Выборка = РезультатЗапроса[0].Выбрать();

	НайденноеСоглашение = Неопределено;

	// Если в выборке одно соглашение - используем его
	Если Выборка.Количество() = 1 Тогда
		
		Выборка.Следующий();
		НайденноеСоглашение = Выборка.Соглашение;
		
	КонецЕсли;

	// Если необходимы только типовые соглашения - дальнейшие проверки не имеют смысла
	Если НайденноеСоглашение = Неопределено И Не ВсеПараметрыОтбора.ТолькоТиповые Тогда
		
		// В выборке два или более соглашений
		Выборка.Следующий();
		
		ПервоеСоглашение        = Выборка.Соглашение;
		ПервоеСоглашениеТиповое = Выборка.Типовое;

		Выборка.Следующий();
		
		ВтороеСоглашениеТиповое = Выборка.Типовое;
		
		Выборка.Сбросить();
		Выборка.Следующий();
	
		// Если в выборке два соглашения разного типа - используем индивидуальное
		Если ПервоеСоглашениеТиповое <> ВтороеСоглашениеТиповое Тогда
			НайденноеСоглашение = ПервоеСоглашение;
		КонецЕсли;
	КонецЕсли;
	
	
	Если НайденноеСоглашение = Неопределено Тогда
		Если НЕ РезультатЗапроса[1].Пустой() Тогда
			Выборка = РезультатЗапроса[1].Выбрать();
			Выборка.Следующий();
			НайденноеСоглашение = Выборка.Соглашение;
		КонецЕсли;
	КонецЕсли;

	СтруктураРеквизитов = ПолучитьСтруктуруУсловийПродаж();
	Если НайденноеСоглашение <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);
	Иначе
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Справочники.СоглашенияСКлиентами.ПустаяСсылка())
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает дату последнего этапа по графику.
//
// Параметры:
// ДатаДокумента - Дата - дата, от которой необходимо получить последнюю дату по графику
// ГрафикОплаты  - СправочникСсылка.ГрафикиОплаты -ссылка на график оплаты
// СоглашениеСКлиентом - СправочникСсылка.СоглашенияСКлиентами - ссылка на соглашение с клиентом
//
// Возвращаемое значение:
// Число.
// Последняя дата по графику с учетом календаря
//
Функция ПолучитьПоследнююДатуПоГрафику(Знач ДатаДокумента, Знач ГрафикОплаты,  Знач СоглашениеСКлиентом) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрафикОплаты) Тогда
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг)  КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
			|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента,День,ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг),0)),День) КАК ДатаПлатежа
			|	
			|ИЗ
			|	Справочник.ГрафикиОплаты.Этапы КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ГрафикОплаты
			|	И ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыГрафикаОплаты.Ссылка
			|");
			
		Запрос.УстановитьПараметр("ГрафикОплаты",  ГрафикОплаты);
		
	ИначеЕсли ЗначениеЗаполнено(СоглашениеСКлиентом) Тогда
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг) КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь,
			|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаДокумента, ДЕНЬ, ЕСТЬNULL(МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг), 0)), ДЕНЬ) КАК ДатаПлатежа
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &СоглашениеСКлиентом
			|	И ЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
			|
			|СГРУППИРОВАТЬ ПО
			|	ЭтапыГрафикаОплаты.Ссылка
			|");
			
		Запрос.УстановитьПараметр("СоглашениеСКлиентом", СоглашениеСКлиентом);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаДокумента", ДатаДокумента);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Календарь = Выборка.Календарь;
	Если НЕ ЗначениеЗаполнено(Календарь) Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	Если ЗначениеЗаполнено(Календарь) Тогда
		ДатаПлатежа = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, ДатаДокумента, Выборка.Сдвиг);
	Иначе
		ДатаПлатежа = Выборка.ДатаПлатежа;
	КонецЕсли;
	
	Возврат ДатаПлатежа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции получения значений реквизитов по умолчанию.

// Возвращает структуру по ответственному лицу указанного склада
// В случае если склад является группой, возвращает значения,
// 		использовавшиеся в последнем документе указанного менеджера с указанным складом
//
// Параметры:
// 		Склад - СправочникСсылка.Склады
//
// Возвращаемое значение:
// 		Стуктура - Структура с полями: "Ответственный" и "ОтветственныйДолжность"
//
Функция ПолучитьОтветственногоПоСкладу(Склад, Менеджер) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Справочники.Склады.ЭтоГруппа(Склад) Тогда
		СтруктураОтветственного = ЗначениеНастроекПовтИсп.ПолучитьОтветственногоПоСкладу(Склад);
		Если СтруктураОтветственного <> Неопределено Тогда
			Возврат СтруктураОтветственного;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Отпустил КАК Ответственный,
	|	РеализацияТоваровУслуг.ОтпустилДолжность КАК ОтветственныйДолжность
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Склад = &Склад
	|	И РеализацияТоваровУслуг.Менеджер = &Менеджер
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И (РеализацияТоваровУслуг.Отпустил <> ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ИЛИ РеализацияТоваровУслуг.ОтпустилДолжность <> """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеализацияТоваровУслуг.МоментВремени УБЫВ");
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Менеджер", Менеджер);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Ответственный, ОтветственныйДолжность", Выборка.Ответственный, Выборка.ОтветственныйДолжность);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Выполняет поиск действующего договора с контрагентом по заданным реквизитам.
// Если найден один действующий договор, возвращает ссылку на него, в противном случае - пустую ссылку.
//
// Параметры:
// 		ТекущийДоговор - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на текущий договор
// 		Партнер - СправочникСсылка.Партнеры - Деловой партнер предприятия, которому осуществляются продажи;
//		Контрагент - СправочникСсылка.Контрагенты - Контрагент, с которым заключен договор;
//		Организация - СправочникСсылка.Организации - Организация предприятия, от имени которой заключен договор;
//		ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации, Массив - Одна или несколько хозяйственных операций (тип договора);
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером по договору;
//		Соглашение - СправочникСсылка.СоглашенияСКлиентами - Если не задан порядок, он будет получен из соглашения с клиентом.
// 
// Возвращаемое значение:
// 		СправочникСсылка.ДоговорыКонтрагентов
//
Функция ПолучитьДоговорПоУмолчанию(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации = Неопределено,
	ВалютаВзаиморасчетов = Неопределено,
	Соглашение = Неопределено,
	ПорядокРасчетовПоДоговорам = Неопределено) Экспорт
	
	СписокПартнеров = Новый СписокЗначений;
	ПартнерыИКонтрагенты.ЗаполнитьСписокПартнераСРодителями(Партнер, СписокПартнеров);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	
	|	ВЫБОР КОГДА ДоговорыКонтрагентов.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК РасчетыПоДоговору,
	|	
	|	ВЫБОР
	|		КОГДА &ТекущийДоговор = ДоговорыКонтрагентов.Ссылка
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Порядок
	|
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|
	|ГДЕ
	|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
	|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
	|	И ДоговорыКонтрагентов.Партнер В (&СписокПартнеров)
	|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ((НЕ &ОтборХозяйственнаяОперация)
	|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
	|	И ((НЕ &ОтборВалютаВзаиморасчетов)
	|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
	|	И ((НЕ &ОтборСоглашение)
	|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ПорядокОплаты = ДоговорыКонтрагентов.ПорядокОплаты
	|				И ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ИспользуютсяДоговорыКонтрагентов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ
	|");
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("СписокПартнеров", СписокПартнеров);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов", ВалютаВзаиморасчетов <> Неопределено);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОтборСоглашение", Соглашение <> Неопределено);
	Запрос.УстановитьПараметр("Соглашение", ?(Соглашение=Неопределено, Справочники.СоглашенияСКлиентами.ПустаяСсылка(), Соглашение));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	ИначеЕсли Выборка.Ссылка = ТекущийДоговор Тогда
		ДоговорПоУмолчанию = ТекущийДоговор;
	ИначеЕсли Выборка.Количество() = 1
	 И (ПорядокРасчетовПоДоговорам = Неопределено
	 ИЛИ ПорядокРасчетовПоДоговорам = Выборка.РасчетыПоДоговору) Тогда
		ДоговорПоУмолчанию = Выборка.Ссылка;
	Иначе
		ДоговорПоУмолчанию = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДоговорПоУмолчанию;
	
КонецФункции

// Устанавливает видимость реквизита договора в зависимости от данных по соглашению
//
// Параметры:
// 		Соглашение - СправочникСсылка.СоглашенияСПоставщиками
// 		ДоступностьЭлемента - Булево
// 		Договор - СправочникСсылка.ДоговорыКонтрагентов
//
Процедура УстановитьДоступностьДоговора(Объект, ДоступностьЭлемента, ВидимостьЭлемента, Договор = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаполненыВлияющиеПоля = 
		ЗначениеЗаполнено(Объект.Партнер)
		И ЗначениеЗаполнено(Объект.Контрагент)
		И ЗначениеЗаполнено(Объект.Соглашение)
		И ЗначениеЗаполнено(Объект.Организация);
		
	ИспользуютсяДоговорыКонтрагентов = 
		ЗначениеЗаполнено(Объект.Соглашение)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов");
		
	ДоступностьЭлемента = ЗаполненыВлияющиеПоля И ИспользуютсяДоговорыКонтрагентов;
	
	ВидимостьЭлемента = ИспользуютсяДоговорыКонтрагентов;
	
	Если НЕ ДоступностьЭлемента И ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры 

// Процедура заполняет банковский счета документа по договору.
//
// Параметры:
//		Договор - СправочникСсылка.ДоговорыКонтрагентов - Договор;
//		БанковскийСчетОрганизации - СправочникСсылка.БанковскиеСчетаОрганизаций - Банковский счет организации;
//		БанковскийСчетКонтрагента - СправочникСсылка.БанковскиеСчетаКонтрагентов - Банковский счет контрагента.
//
Процедура ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации = Неопределено, БанковскийСчетКонтрагента = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Договор) Тогда
		Справочники.ДоговорыКонтрагентов.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчетОрганизации, БанковскийСчетКонтрагента);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Процедура пересчитывает сумму документа в новую валюту.
//
// Параметры:
// Объект           - ДанныеФормыСтруктура - Текущий документ
// СтараяВалюта     - СправочникСсылка.Валюты - Исходная валюта
// НоваяВалюта      - СправочникСсылка.Валюты - Новая валюта
// ЕстьСуммаПродажи - Булево - признак наличия колонки СуммаПродаж в табличной части
// ЕстьСуммаПродажиНДС - Булево - признак наличия колонки СуммаПродажНДС в табличной части
//
Процедура ПересчитатьСуммуДокументаВВалюту(Объект, Знач СтараяВалюта, Знач НоваяВалюта, Знач ЕстьСуммаПродажи = Истина, Знач ЕстьСуммаПродажиНДС = Ложь) Экспорт

	СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, Объект.Дата);
	СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, Объект.Дата);
	
	ИтогСумма = Объект.Товары.Итог("Сумма");
	Если ЕстьСуммаПродажи Тогда
		ИтогСуммаПродажи = Объект.Товары.Итог("СуммаПродажи");
	Иначе
		ИтогСуммаПродажи = 0;
	КонецЕсли;
	
	НоваяСумма = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		ИтогСумма,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты.Курс,
		СтруктураКурсовНовойВалюты.Курс,
		СтруктураКурсовСтаройВалюты.Кратность,
		СтруктураКурсовНовойВалюты.Кратность
	);
	
	НоваяСуммаПродажи = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
		ИтогСуммаПродажи,
		СтараяВалюта,
		НоваяВалюта,
		СтруктураКурсовСтаройВалюты.Курс,
		СтруктураКурсовНовойВалюты.Курс,
		СтруктураКурсовСтаройВалюты.Кратность,
		СтруктураКурсовНовойВалюты.Кратность
	);
	
	Если ИтогСумма <> 0 ИЛИ ИтогСуммаПродажи <> 0 Тогда
	
		Для Каждого СтрокаТаблицы Из Объект.Товары Цикл
			
			Если ИтогСумма <> 0 Тогда
				СтрокаТаблицы.Сумма = Окр(НоваяСумма * СтрокаТаблицы.Сумма / ИтогСумма, 2, 1);
				СтрокаТаблицы.Цена = ?(СтрокаТаблицы.КоличествоУпаковок <> 0, Окр(СтрокаТаблицы.Сумма / СтрокаТаблицы.КоличествоУпаковок, 2, 1), 0);
				СтрокаТаблицы.СуммаНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.Сумма, СтрокаТаблицы.СтавкаНДС, Объект.ЦенаВключаетНДС);
				СтрокаТаблицы.СуммаСНДС = СтрокаТаблицы.Сумма + ?(Объект.ЦенаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
			КонецЕсли;
			
			Если ИтогСуммаПродажи <> 0 Тогда
				СтрокаТаблицы.СуммаПродажи = Окр(НоваяСуммаПродажи * СтрокаТаблицы.СуммаПродажи / ИтогСуммаПродажи, 2, 1);
				СтрокаТаблицы.ЦенаПродажи = ?(СтрокаТаблицы.КоличествоУпаковок <> 0, Окр(СтрокаТаблицы.СуммаПродажи / СтрокаТаблицы.КоличествоУпаковок, 2, 1), 0);
				СтрокаТаблицы.СуммаВознаграждения = 0;
				Если ЕстьСуммаПродажиНДС Тогда
					СтрокаТаблицы.СуммаПродажиНДС = Ценообразование.РассчитатьСуммуНДС(СтрокаТаблицы.СуммаПродажи, СтрокаТаблицы.СтавкаНДС, Истина);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Объект.Свойство("СуммаВознаграждения") Тогда
			Объект.СуммаВознаграждения = 0;
			Объект.СуммаНДСВознаграждения = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Свойство("ЭтапыГрафикаОплаты") Тогда
		
		ИтогСуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		Если ИтогСуммаЭтаповОплаты <> 0 Тогда
			
			Для Каждого СтрокаТаблицы Из Объект.ЭтапыГрафикаОплаты Цикл
				СтрокаТаблицы.СуммаПлатежа = Окр(НоваяСуммаПродажи * СтрокаТаблицы.СуммаПлатежа / ИтогСуммаЭтаповОплаты, 2, 1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура пересчитывает сумму документа в новую валюту.
//
// Параметры:
// ДокументОбъект - ДанныеФормыСтруктура - документ, в котором необходимо заполнить суммы аванса и предоплаты
//
Процедура ЗаполнитьСуммыАвансаПредоплаты(ДокументОбъект) Экспорт
	
	ТаблицаЭтапов = ДокументОбъект.ЭтапыГрафикаОплаты.Выгрузить(, "ВариантОплаты, СуммаПлатежа");
	ТаблицаЭтапов.Свернуть("ВариантОплаты", "СуммаПлатежа");
	
	СтрокаАвансаДоОбеспечения = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения, "ВариантОплаты");
	
	Если СтрокаАвансаДоОбеспечения = Неопределено Тогда
		
		ДокументОбъект.СуммаАвансаДоОбеспечения = 0;
		
	Иначе
		
		ДокументОбъект.СуммаАвансаДоОбеспечения = СтрокаАвансаДоОбеспечения.СуммаПлатежа;
		
	КонецЕсли;
	
	СтрокаПредоплатыДоОтгрузки = ТаблицаЭтапов.Найти(Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки, "ВариантОплаты");
	
	Если СтрокаПредоплатыДоОтгрузки = Неопределено Тогда
		
		ДокументОбъект.СуммаПредоплатыДоОтгрузки = 0;
		
	Иначе
		
		ДокументОбъект.СуммаПредоплатыДоОтгрузки = СтрокаПредоплатыДоОтгрузки.СуммаПлатежа;
		
	КонецЕсли;

КонецПроцедуры

// Возвращает структуру параметров представления счета-фактуры в документе.
//
// Параметры:
//  Основание - ДокументСсылка - Документ, на основании которого вводится счет-фактура;
//  Организация - СправочникСсылка.Организации - Организация, на имя которой оформляется счет-фактура;
//	НеТребуется - Булево - Истина - для документа не требуется вводить счет-фактуру.
//
// Возвращаемое значение:
//  Структура
//		ТекстСчетФактура - Строка - Представление счета-фактуры;
//		ТекстСписок - Строка - Представление команды открытия списка счетов-фактур;
//		ГиперссылкаСчетФактура - Булево - Признак гиперссылки представления счета-фактуры;
//		РазрешеныИсправления - Булево - Истина - Доступен ввод исправлений счета-фактуры.
//
Функция ПараметрыПредставленияСчетаФактуры(Основание, Организация, НеТребуется = Ложь) Экспорт
	
	Перем РеквизитыСчетаФактуры;
	
	СчетаФактуры = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(Основание, Организация, РеквизитыСчетаФактуры);
	Если СчетаФактуры.Количество() > 0 Тогда
		ТекстСчетФактура = ПредставлениеСчетаФактуры(РеквизитыСчетаФактуры.Номер, РеквизитыСчетаФактуры.Дата);
		Если СчетаФактуры.Количество() > 1 Тогда
			ТекстСписок = НСтр("ru='Открыть список'") + " (" + Строка(СчетаФактуры.Количество()) + ")"; 
		Иначе
			ТекстСписок = "";
		КонецЕсли;
		ГиперссылкаСчетФактура = Истина;
		РазрешеныИсправления = ПравоДоступа("Добавление", Метаданные.Документы.СчетФактураВыданный);
		
	ИначеЕсли НеТребуется Тогда
		ТекстСчетФактура = НСтр("ru='Не требуется'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;
		РазрешеныИсправления = Ложь;
		
	ИначеЕсли Не ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.СчетФактураВыданный) Тогда
		ТекстСчетФактура = НСтр("ru='Не введен'");
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Ложь;
		РазрешеныИсправления = Ложь;
		
	Иначе
		ТекстСчетФактура = НСтр("ru='Создать счет-фактуру'"); ;
		ТекстСписок = "";
		ГиперссылкаСчетФактура = Истина;
		РазрешеныИсправления = Ложь;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления",
		ТекстСчетФактура, ТекстСписок, ГиперссылкаСчетФактура, РазрешеныИсправления);
	
КонецФункции

// Функция формирует представление счет-фактуры.
//
// Параметры:
//  Номер - Строка - Номер счета-фактуры;
//  Дата - Дата - Дата счета-фактуры;
//
// Возвращаемое значение:
//	Строка - Представление счета-фактуры.
//
Функция ПредставлениеСчетаФактуры(Номер, Дата) Экспорт
	
	Возврат "№ " + СокрЛП(Номер) + " от " + Формат(Дата, "ДФ=dd.MM.yyyy") + " г.";
	
КонецФункции

// Устанавливает режим выбора групп и элементов у склада на форме
//
Процедура УстановитьРежимВыбораГруппЭлементовСклада(Склад) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи") Тогда
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
	Иначе
		Склад.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость выбора налогообложения "Продажа облагается ЕНВД" в форме.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	Поле - ПолеФормы - Поле формы для выбора налогообложения
//
Процедура ЗаполнитьСписокВыбораНалогообложения(ХозяйственнаяОперация, Поле) Экспорт
	
	СписокНалогообложений = Поле.СписокВыбора;
	СписокНалогообложений.Очистить();
	
	СписокНалогообложений.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	СписокНалогообложений.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	СписокНалогообложений.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНаЭкспорт);
	Если ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
	 И ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера Тогда
		СписокНалогообложений.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
	КонецЕсли;
	
КонецПроцедуры

// Получает все доступные договоры для переданных параметров
//
// Параметры:
// 		ТекущийДоговор - СправочникСсылка.ДоговорыКонтрагентов - Ссылка на текущий договор
// 		Партнер - СправочникСсылка.Партнеры - Деловой партнер предприятия, которому осуществляются продажи;
//		Контрагент - СправочникСсылка.Контрагенты - Контрагент, с которым заключен договор;
//		Организация - СправочникСсылка.Организации - Организация предприятия, от имени которой заключен договор;
//		ХозяйственныеОперации - ПеречислениеСсылка.ХозяйственныеОперации, Массив - Одна или несколько хозяйственных операций (тип договора);
//		ВалютаВзаиморасчетов - СправочникСсылка.Валюты - Валюта взаиморасчетов с партнером по договору;
//		Соглашение - СправочникСсылка.СоглашенияСКлиентами - Если не задан порядок, он будет получен из соглашения с клиентом.
// 
// Возвращаемое значение:
// 		Массив - массив доступных договоров
//
Функция ПолучитьДоступныеДоговоры(
	ТекущийДоговор,
	Партнер,
	Контрагент,
	Организация,
	ХозяйственныеОперации = Неопределено,
	ВалютаВзаиморасчетов = Неопределено,
	Соглашение = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ВЫБОР
		|		КОГДА &ТекущийДоговор = ДоговорыКонтрагентов.Ссылка
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	(НЕ ДоговорыКонтрагентов.ПометкаУдаления)
		|	И ДоговорыКонтрагентов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровКонтрагентов.Действует)
		|	И ДоговорыКонтрагентов.Партнер = &Партнер
		|	И ДоговорыКонтрагентов.Контрагент = &Контрагент
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И ((НЕ &ОтборХозяйственнаяОперация)
		|			ИЛИ ДоговорыКонтрагентов.ХозяйственнаяОперация В (&ХозяйственнаяОперация))
		|	И ((НЕ &ОтборВалютаВзаиморасчетов)
		|			ИЛИ ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов)
		|	И ((НЕ &ОтборСоглашение)
		|			ИЛИ ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ПорядокОплаты = ДоговорыКонтрагентов.ПорядокОплаты
		|				И ВЫРАЗИТЬ(&Соглашение КАК Справочник.СоглашенияСКлиентами).ИспользуютсяДоговорыКонтрагентов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок УБЫВ"
	);
	Запрос.УстановитьПараметр("ТекущийДоговор", ТекущийДоговор);
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ОтборХозяйственнаяОперация", ХозяйственныеОперации <> Неопределено);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственныеОперации);
	Запрос.УстановитьПараметр("ОтборВалютаВзаиморасчетов", ВалютаВзаиморасчетов <> Неопределено);
	Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	Запрос.УстановитьПараметр("ОтборСоглашение", Соглашение <> Неопределено);
	Запрос.УстановитьПараметр("Соглашение", ?(Соглашение=Неопределено, Справочники.СоглашенияСКлиентами.ПустаяСсылка(), Соглашение));
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе 
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

// Проверяет наличие корректировок и счетов-фактур, введенных на основании изменяемого документа.
//
// Параметры:
// Ссылка - ДокументСсылка - Изменяемый документ
// Основание - ДокументСсылка - Основание для корректировок
// ЕстьКорректировки - ВозвращаемыйПараметр. Признак наличия корректировок изменяемого документа.
// ЕстьСчетаФактуры - ВозвращаемыйПараметр. Признак наличия счетов-фактур изменяемого документа.
//
Процедура ПроверитьНаличиеКорректировокИСчетовФактур(Ссылка, Основание, ЕстьКорректировки, ЕстьСчетаФактуры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДанныеДокумента.Ссылка КАК Корректировка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументОснование = &Основание
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеДокумента.МоментВремени УБЫВ
	|");
	Запрос.УстановитьПараметр("Основание", Основание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЕстьКорректировки = Выборка.Корректировка <> Ссылка;
	Иначе
		ЕстьКорректировки = НЕ РезультатЗапроса.Пустой();
	КонецЕсли;	
	
	Если НЕ ЕстьКорректировки Тогда
		СчетаФактуры = Документы.СчетФактураВыданный.СчетаФактурыПоОснованию(Ссылка);
		ЕстьСчетаФактуры = СчетаФактуры.Количество() > 0;
	Иначе
		ЕстьСчетаФактуры = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе ЗаказКлиента по графику соглашения
//
// Параметры:
//		ДокументПродажи - ДокументОбъект.ЗаказКлиента, в котором необходимо заполнить
//			авансовые этапы оплаты
//		СуммаКРаспределению - Число, сумма, распределяющаяся по этапам графика оплаты
//		ЗаполнятьФормуОплаты - Булево - признак, указывающий на необходимость заполнения формы оплаты
//			в документе формой оплаты по графику, указанной в соглашении
//
Процедура ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(ДокументРеализации,
	                                              Знач СуммаКРаспределению,
	                                              ЗаполнятьФормуОплаты = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.НомерСтроки КАК НомерСтроки,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ВариантОплаты КАК ВариантОплаты,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка.ФормаОплаты КАК ФормаОплаты,
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка.Календарь КАК Календарь
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК СоглашенияСКлиентамиЭтапыГрафикаОплаты
	|ГДЕ
	|	СоглашенияСКлиентамиЭтапыГрафикаОплаты.Ссылка = &Соглашение
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки");
		
	Запрос.УстановитьПараметр("Соглашение", ДокументРеализации.Соглашение);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка         = РезультатЗапроса.Выгрузить();
	
	Если  СуммаКРаспределению = 0 ИЛИ  Выгрузка.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗаполнятьФормуОплаты Тогда
		
		ФормаОплаты = Выгрузка[0].ФормаОплаты;
		
		Если ЗначениеЗаполнено(ФормаОплаты) И ДокументРеализации.ФормаОплаты <> ФормаОплаты Тогда
			ДокументРеализации.ФормаОплаты = ФормаОплаты;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЭтапыГрафикаОплатыПоШаблону(ДокументРеализации, СуммаКРаспределению, Выгрузка, Выгрузка[0].Календарь);
	
КонецПроцедуры

// Заполняет этапы графика оплаты в документе ЗаказКлиента по таблице значений
//
// Параметры:
//		ДокументРеализации - ДокументОбъект.ЗаказКлиента, в котором необходимо заполнить этапы графика оплаты
//		СуммаКРаспределению - Число, сумма, распределяющаяся по этапам графика оплаты
//		ШаблонГрафика - ТаблицаЗначений, по которой необходимо заполнить этапы графика оплаты
//		Календарь - СправочникСсылка.Календари, по которому вычисляются даты
//
Процедура ЗаполнитьЭтапыГрафикаОплатыПоШаблону(ДокументРеализации,
	                                           Знач СуммаКРаспределению,
	                                           ШаблонГрафика,
	                                           Знач Календарь) Экспорт
	
	ЭтапыГрафикаОплаты = Новый ТаблицаЗначений();
	
	ЭтапыГрафикаОплаты.Колонки.Добавить("ВариантОплаты");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ДатаПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("ПроцентПлатежа");
	ЭтапыГрафикаОплаты.Колонки.Добавить("СуммаПлатежа");

	РаспределеннаяСумма = 0;
	ТекущийЭтап         = 0;
	ОдинДень            = 86400;
	
	КоличествоЭтапов = ШаблонГрафика.Количество();

	Если НЕ ЗначениеЗаполнено(Календарь) Тогда
		Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	КонецЕсли;
	
	ДатаДокумента = ?(ЗначениеЗаполнено(ДокументРеализации.Дата), ДокументРеализации.Дата, ТекущаяДата());
	ДатаРеализации = ДокументРеализации.ЖелаемаяДатаОтгрузки;
	
	// Определим календарную дату для каждого этапа графика оплаты
	УчитыватьКалендарь = Ложь;
	
	Если ЗначениеЗаполнено(Календарь) Тогда
		
		УчитыватьКалендарь = Истина;
		
		СдвигиАвансовыхЭтапов = Новый Массив();
		СдвигиКредитныхЭтапов = Новый Массив();
		МассивДатПоКалендарю  = Новый Массив();
		
		Для Каждого Этап Из ШаблонГрафика Цикл
			
			Если Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Или
				Этап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
				СдвигиАвансовыхЭтапов.Добавить(Этап.Сдвиг);
			Иначе
				СдвигиКредитныхЭтапов.Добавить(Этап.Сдвиг);
			КонецЕсли;
			
		КонецЦикла;
		
		Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
			
			МассивДатПоКалендарюАвансовыхЭтапов = КалендарныеГрафики.ПолучитьМассивДатПоКалендарю(Календарь, ДатаДокумента, СдвигиАвансовыхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюАвансовыхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СдвигиКредитныхЭтапов.Количество() > 0 Тогда
			
			Если Не ЗначениеЗаполнено(ДатаРеализации) Тогда
				
				Если СдвигиАвансовыхЭтапов.Количество() > 0 Тогда
					Если МассивДатПоКалендарюАвансовыхЭтапов.Количество() > 0 Тогда
						ДатаРеализации = МассивДатПоКалендарюАвансовыхЭтапов[МассивДатПоКалендарюАвансовыхЭтапов.Количество()-1];
					КонецЕсли;
				Иначе
					ДатаРеализации = ДатаДокумента;
				КонецЕсли;
				
			КонецЕсли;
			
			МассивДатПоКалендарюКредитныхЭтапов = КалендарныеГрафики.ПолучитьМассивДатПоКалендарю(Календарь, ДатаРеализации, СдвигиКредитныхЭтапов);
			
			Для Каждого ДатаПоКалендарю Из МассивДатПоКалендарюКредитныхЭтапов Цикл
				МассивДатПоКалендарю.Добавить(ДатаПоКалендарю);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(ДатаРеализации) Тогда
			
			МаксСдвигАванса = 0;
		
			Для Каждого ТекЭтап Из ШаблонГрафика Цикл
				
				Если ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Или
					ТекЭтап.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
					
					МаксСдвигАванса = Макс(МаксСдвигАванса, ТекЭтап.Сдвиг);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ДатаРеализации = ДатаДокумента + МаксСдвигАванса * ОдинДень;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним этапы в соответствии с графиком оплаты	
	ДокументРеализации.ЭтапыГрафикаОплаты.Очистить();
	Для Каждого Этап Из ШаблонГрафика Цикл
		
		ТекущийЭтап                     = ТекущийЭтап + 1;
		ЭтапГрафикаОплаты               = ЭтапыГрафикаОплаты.Добавить();
		ЭтапГрафикаОплаты.ВариантОплаты = Этап.ВариантОплаты;
		
		Если УчитыватьКалендарь Тогда
			ДатаПлатежа = МассивДатПоКалендарю[ТекущийЭтап-1];
		Иначе
			ДатаПлатежа = ?(ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки, ДатаРеализации, ДатаДокумента) + Этап.Сдвиг * ОдинДень;
		КонецЕсли;
		
		Если (ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки
			Или ЭтапГрафикаОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения)
			И ЗначениеЗаполнено(ДокументРеализации.ЖелаемаяДатаОтгрузки)
			И ДатаПлатежа > ДокументРеализации.ЖелаемаяДатаОтгрузки Тогда
			ДатаПлатежа = ДокументРеализации.ЖелаемаяДатаОтгрузки;
		КонецЕсли;
		
		ЭтапГрафикаОплаты.ДатаПлатежа    = ДатаПлатежа;
		ЭтапГрафикаОплаты.ПроцентПлатежа = Этап.ПроцентПлатежа;
		СуммаЭтапа                       = Окр(СуммаКРаспределению * Этап.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
		ЭтапГрафикаОплаты.СуммаПлатежа   = ?(ТекущийЭтап = КоличествоЭтапов, СуммаКРаспределению - РаспределеннаяСумма, СуммаЭтапа);
		РаспределеннаяСумма              = РаспределеннаяСумма + ЭтапГрафикаОплаты.СуммаПлатежа;
		
	КонецЦикла;
	
	ДокументРеализации.ЭтапыГрафикаОплаты.Загрузить(ЭтапыГрафикаОплаты);

КонецПроцедуры

// Заполняет документы реализаций и цены в табличной части документов возврата
//
// Параметры:
//		ДокументВозврата - ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента или ДокументОбъект.ВозвратТоваровОтКлиента
//		ИмяТаблицы - Имя таблицы Товары
Процедура ЗаполнитьРеализацииИЦены(ДокументВозврата, ИмяТаблицы) Экспорт
	Запрос = Новый Запрос;
	
	ТаблицаПроверяемыхТоваров = ДокументВозврата[ИмяТаблицы].Выгрузить();
	ТабличнаяЧастьВозврата    = ДокументВозврата[ИмяТаблицы];
	
	ВозвратОтРозничногоПокупателя = (ДокументВозврата.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя);
	
	Если НЕ ВозвратОтРозничногоПокупателя Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка,
		|	ВозвратТоваровОтКлиентаТовары.Количество
		|ПОМЕСТИТЬ ЗаполняемыеТовары
		|ИЗ
		|	&ТаблицаТовары КАК ВозвратТоваровОтКлиентаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыРеализации
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО ЗаполняемыеТовары.Номенклатура = РеализацияТоваровУслугТовары.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = РеализацияТоваровУслугТовары.Характеристика
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Проведен
		|	И РеализацияТоваровУслугТовары.Ссылка.Контрагент = &Контрагент
		|	И РеализацияТоваровУслугТовары.Ссылка.Организация = &Организация
		|	И РеализацияТоваровУслугТовары.Ссылка.Соглашение = &Соглашение
		|	И РеализацияТоваровУслугТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
		|	И РеализацияТоваровУслугТовары.Ссылка.Партнер = &Партнер
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КорректировкаРеализации.Дата) КАК Дата,
		|	ДокументыРеализации.Ссылка КАК СсылкаРеализации
		|ПОМЕСТИТЬ ДанныеКорректировки
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|		ПО (КорректировкаРеализации.ДокументОснование = ДокументыРеализации.Ссылка)
		|ГДЕ
		|	КорректировкаРеализации.Проведен
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыРеализации.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	СсылкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(КорректировкаРеализации.Ссылка) КАК Ссылка,
		|	МАКСИМУМ(КорректировкаРеализации.Ссылка.Дата) КАК Дата,
		|	КорректировкаРеализации.Ссылка.ДокументОснование КАК СсылкаРеализации
		|ПОМЕСТИТЬ ДанныеПоследнейКорректировки
		|ИЗ
		|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
		|ГДЕ
		|	(КорректировкаРеализации.Ссылка.ДокументОснование, КорректировкаРеализации.Ссылка.Дата) В
		|			(ВЫБРАТЬ
		|				ДанныеКорректировки.СсылкаРеализации КАК СсылкаРеализации,
		|				ДанныеКорректировки.Дата КАК Дата
		|			ИЗ
		|				ДанныеКорректировки)
		|
		|СГРУППИРОВАТЬ ПО
		|	КорректировкаРеализации.Ссылка.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	СсылкаРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА ДанныеПоследнейКорректировки.Ссылка ЕСТЬ NULL 
		|			ТОГДА ДокументыРеализации.Ссылка
		|		ИНАЧЕ ДанныеПоследнейКорректировки.Ссылка
		|	КОНЕЦ КАК Ссылка
		|ПОМЕСТИТЬ СсылкиНаРеализации
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеПоследнейКорректировки КАК ДанныеПоследнейКорректировки
		|		ПО ДокументыРеализации.Ссылка = ДанныеПоследнейКорректировки.СсылкаРеализации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КорректировкаРеализацииТовары.Номенклатура КАК Номенклатура,
		|	КорректировкаРеализацииТовары.Характеристика КАК Характеристика,
		|	КорректировкаРеализацииТовары.КоличествоУпаковок,
		|	КорректировкаРеализацииТовары.Количество,
		|	КорректировкаРеализацииТовары.Цена,
		|	КорректировкаРеализацииТовары.Упаковка,
		|	КорректировкаРеализацииТовары.Сумма,
		|	0 КАК СуммаРучнойСкидки,
		|	0 КАК СуммаАвтоматическойСкидки,
		|	КорректировкаРеализацииТовары.Ссылка.ДокументОснование КАК ДокументРеализации
		|ПОМЕСТИТЬ ДанныеРеализации
		|ИЗ
		|	СсылкиНаРеализации КАК СсылкиНаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
		|		ПО (КорректировкаРеализацииТовары.Ссылка = СсылкиНаРеализации.Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.Характеристика,
		|	РеализацияТоваровУслугТовары.КоличествоУпаковок,
		|	РеализацияТоваровУслугТовары.Количество,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугТовары.СуммаРучнойСкидки + РеализацияТоваровУслугТовары.СуммаАвтоматическойСкидки = 0
		|				ИЛИ РеализацияТоваровУслугТовары.КоличествоУпаковок = 0
		|			ТОГДА РеализацияТоваровУслугТовары.Цена
		|		ИНАЧЕ РеализацияТоваровУслугТовары.Сумма / РеализацияТоваровУслугТовары.КоличествоУпаковок
		|	КОНЕЦ,
		|	РеализацияТоваровУслугТовары.Упаковка,
		|	РеализацияТоваровУслугТовары.Сумма,
		|	РеализацияТоваровУслугТовары.СуммаРучнойСкидки,
		|	РеализацияТоваровУслугТовары.СуммаАвтоматическойСкидки,
		|	РеализацияТоваровУслугТовары.Ссылка
		|ИЗ
		|	СсылкиНаРеализации КАК СсылкиНаРеализации
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|		ПО (РеализацияТоваровУслугТовары.Ссылка = СсылкиНаРеализации.Ссылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ДокументРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации
		|ПОМЕСТИТЬ ДанныеДокументовВозврата
		|ИЗ
		|	ДокументыРеализации КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
		|		ПО (ТаблицаПроверяемыеТовары.ДокументРеализации = ДокументыРеализации.Ссылка)
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ДокументРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеРеализации.Номенклатура КАК Номенклатура,
		|	ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) КАК Количество,
		|	ДанныеРеализации.Характеристика КАК Характеристика,
		|	ВЫБОР
		|		КОГДА ДанныеРеализации.Упаковка = ЗаполняемыеТовары.Упаковка
		|			ТОГДА ВЫБОР
		|					КОГДА ДанныеРеализации.Упаковка ЕСТЬ NULL 
		|							ИЛИ ДанныеРеализации.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|						ТОГДА ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
		|					ИНАЧЕ (ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / ДанныеРеализации.Упаковка.Коэффициент
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)
		|				ИНАЧЕ (ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / ЗаполняемыеТовары.Упаковка.Коэффициент
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) = 0
		|			ТОГДА ДанныеРеализации.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ДанныеРеализации.Упаковка = ЗаполняемыеТовары.Упаковка
		|					ТОГДА ВЫБОР
		|							КОГДА ДанныеРеализации.Упаковка ЕСТЬ NULL 
		|									ИЛИ ДанныеРеализации.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|								ТОГДА ДанныеРеализации.Сумма / (ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0))
		|							ИНАЧЕ ДанныеРеализации.Сумма / ((ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / ДанныеРеализации.Упаковка.Коэффициент)
		|						КОНЕЦ
		|				ИНАЧЕ ВЫБОР
		|						КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|								ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|							ТОГДА ДанныеРеализации.Сумма / (ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0))
		|						ИНАЧЕ ДанныеРеализации.Сумма / ((ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0)) / ЗаполняемыеТовары.Упаковка.Коэффициент)
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ДанныеРеализации.ДокументРеализации
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРеализации КАК ДанныеРеализации
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеДокументовВозврата КАК ДанныеДокументовВозврата
		|			ПО ДанныеРеализации.ДокументРеализации = ДанныеДокументовВозврата.ДокументРеализации
		|				И ДанныеРеализации.Номенклатура = ДанныеДокументовВозврата.Номенклатура
		|				И ДанныеРеализации.Характеристика = ДанныеДокументовВозврата.Характеристика
		|		ПО ЗаполняемыеТовары.Номенклатура = ДанныеРеализации.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = ДанныеРеализации.Характеристика
		|ГДЕ
		|	ДанныеРеализации.Количество - ЕСТЬNULL(ДанныеДокументовВозврата.Количество, 0) > 0
		|	И ДанныеРеализации.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|УПОРЯДОЧИТЬ ПО
		|	ДанныеРеализации.ДокументРеализации.Дата УБЫВ";
		Запрос.УстановитьПараметр("Партнер", ДокументВозврата.Партнер);
		Запрос.УстановитьПараметр("Контрагент", ДокументВозврата.Контрагент);
		Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
		Запрос.УстановитьПараметр("Соглашение", ДокументВозврата.Соглашение);
		Запрос.УстановитьПараметр("НалогообложениеНДС", ДокументВозврата.НалогообложениеНДС);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыхТоваров);
		Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратТоваровОтКлиентаТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровОтКлиентаТовары.Характеристика КАК Характеристика,
		|	ВозвратТоваровОтКлиентаТовары.КоличествоУпаковок,
		|	ВозвратТоваровОтКлиентаТовары.Количество,
		|	ВозвратТоваровОтКлиентаТовары.НомерСтроки,
		|	ВозвратТоваровОтКлиентаТовары.Упаковка
		|ПОМЕСТИТЬ ЗаполняемыеТовары
		|ИЗ
		|	&ТаблицаТовары КАК ВозвратТоваровОтКлиентаТовары
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЧекККМТовары.Ссылка КАК ДокументРеализации,
		|	ЧекККМТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМТовары.Характеристика КАК Характеристика,
		|	ЧекККМТовары.Упаковка КАК Упаковка,
		|	СУММА(ЧекККМТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ЧекККМТовары.Количество) КАК Количество,
		|	ВЫБОР
		|		КОГДА СУММА(ЧекККМТовары.СуммаРучнойСкидки) + СУММА(ЧекККМТовары.СуммаАвтоматическойСкидки) = 0
		|				ИЛИ СУММА(ЧекККМТовары.КоличествоУпаковок) = 0
		|			ТОГДА ЧекККМТовары.Цена
		|		ИНАЧЕ СУММА(ЧекККМТовары.Сумма) / СУММА(ЧекККМТовары.КоличествоУпаковок)
		|	КОНЕЦ КАК Цена,
		|	ЧекККМТовары.Ссылка.Дата КАК ДатаРеализации,
		|	Сумма(ЧекККМТовары.Сумма),
		|	ЧекККМТовары.СуммаАвтоматическойСкидки,
		|	ЧекККМТовары.СуммаРучнойСкидки
		|ПОМЕСТИТЬ ЧекиККМ
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ЧекККМТовары
		|		ПО ЗаполняемыеТовары.Номенклатура = ЧекККМТовары.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = ЧекККМТовары.Характеристика
		|ГДЕ
		|	ЧекККМТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
		|	И (ЧекККМТовары.Ссылка.Партнер = &Партнер
		|			ИЛИ &Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка))
		|	И ЧекККМТовары.Ссылка.Проведен
		|	И ЧекККМТовары.Ссылка.Организация = &Организация
		|	И (ЧекККМТовары.Ссылка = &ЧекККМ ИЛИ &ЧекККМ = ЗНАЧЕНИЕ(Документ.ЧекККМ.ПустаяСсылка))
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМТовары.Ссылка,
		|	ЧекККМТовары.Номенклатура,
		|	ЧекККМТовары.Характеристика,
		|	ЧекККМТовары.Упаковка,
		|	ЧекККМТовары.Цена,
		|	ЧекККМТовары.Ссылка.Дата,
		|	ЧекККМТовары.СуммаАвтоматическойСкидки,
		|	ЧекККМТовары.СуммаРучнойСкидки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРеализации,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЧекККМВозвратТовары.Ссылка КАК ДокументРеализации,
		|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
		|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
		|	ЧекККМВозвратТовары.Упаковка КАК Упаковка,
		|	СУММА(ЧекККМВозвратТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
		|	ЧекККМВозвратТовары.Цена КАК Цена,
		|	ЧекККМВозвратТовары.Ссылка.Дата КАК ДатаРеализации,
		|	ЧекККМВозвратТовары.Сумма
		|ПОМЕСТИТЬ ЧекиККМВозврат
		|ИЗ
		|	Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
		|ГДЕ
		|	ЧекККМВозвратТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
		|	И ЧекККМВозвратТовары.Ссылка.Проведен
		|	И ЧекККМВозвратТовары.Ссылка.Организация = &Организация
		|
		|СГРУППИРОВАТЬ ПО
		|	ЧекККМВозвратТовары.Упаковка,
		|	ЧекККМВозвратТовары.Номенклатура,
		|	ЧекККМВозвратТовары.Ссылка,
		|	ЧекККМВозвратТовары.Характеристика,
		|	ЧекККМВозвратТовары.Цена,
		|	ЧекККМВозвратТовары.Ссылка.Дата,
		|	ЧекККМВозвратТовары.Сумма
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументРеализации,
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаПроверяемыеТовары.Номенклатура КАК Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика КАК Характеристика,
		|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
		|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации КАК ДокументРеализации,
		|	ТаблицаПроверяемыеТовары.Ссылка
		|ПОМЕСТИТЬ ДанныеВозврата
		|ИЗ
		|	ЧекиККМ КАК ЧекиККМ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
		|	ПО (ТаблицаПроверяемыеТовары.ДокументРеализации = ЧекиККМ.ДокументРеализации)
		|ГДЕ
		|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
		|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПроверяемыеТовары.Номенклатура,
		|	ТаблицаПроверяемыеТовары.Характеристика,
		|	ТаблицаПроверяемыеТовары.ДокументРеализации,
		|	ТаблицаПроверяемыеТовары.Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	ДокументРеализации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации,
		|	ЧекиККМ.Номенклатура,
		|	ЧекиККМ.Характеристика,
		|	ЧекиККМ.Упаковка,
		|	ВЫБОР
		|		КОГДА ЧекиККМ.Упаковка = ЗаполняемыеТовары.Упаковка ТОГДА
		|			ВЫБОР
		|				КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)
		|				ИНАЧЕ (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / ЧекиККМ.Упаковка.Коэффициент
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ВЫБОР
		|				КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)
		|				ИНАЧЕ (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / ЗаполняемыеТовары.Упаковка.Коэффициент
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоУпаковок,
		|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) = 0
		|			ТОГДА ЧекиККМ.Цена
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЧекиККМ.Упаковка = ЗаполняемыеТовары.Упаковка ТОГДА
		|					ВЫБОР
		|						КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
		|							ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|						ТОГДА ЧекиККМ.Сумма / (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0))
		|					ИНАЧЕ ЧекиККМ.Сумма / ((ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / ЧекиККМ.Упаковка.Коэффициент)
		|				КОНЕЦ
		|			ИНАЧЕ
		|				ВЫБОР
		|					КОГДА ЗаполняемыеТовары.Упаковка ЕСТЬ NULL 
		|						ИЛИ ЗаполняемыеТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|					ТОГДА ЧекиККМ.Сумма / (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0))
		|					ИНАЧЕ ЧекиККМ.Сумма / ((ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / ЗаполняемыеТовары.Упаковка.Коэффициент)
		|				КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК Цена,
		|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации
		|ИЗ
		|	ЗаполняемыеТовары КАК ЗаполняемыеТовары
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМ КАК ЧекиККМ
		|			ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМВозврат КАК ЧекиККМВозврат
		|			ПО ЧекиККМ.ДокументРеализации = ЧекиККМВозврат.ДокументРеализации.ЧекККМ
		|				И ЧекиККМ.Номенклатура = ЧекиККМВозврат.Номенклатура
		|				И ЧекиККМ.Характеристика = ЧекиККМВозврат.Характеристика
		|			ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозврата КАК ДанныеВозврата
		|			ПО ЧекиККМ.ДокументРеализации = ДанныеВозврата.Ссылка.ЧекККМ
		|				И ЧекиККМ.Номенклатура = ДанныеВозврата.Номенклатура
		|				И ЧекиККМ.Номенклатура = ДанныеВозврата.Характеристика
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
		|			ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
		|		ПО ЗаполняемыеТовары.Номенклатура = ЧекиККМ.Номенклатура
		|			И ЗаполняемыеТовары.Характеристика = ЧекиККМ.Характеристика
		|ГДЕ
		|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) > 0
		|	И ЧекиККМ.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаРеализации УБЫВ";
		
		Запрос.УстановитьПараметр("Партнер", ДокументВозврата.Партнер);
		Запрос.УстановитьПараметр("ТаблицаТовары", ТаблицаПроверяемыхТоваров);
		Запрос.УстановитьПараметр("НалогообложениеНДС", ДокументВозврата.НалогообложениеНДС);
		Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
		Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
		Запрос.УстановитьПараметр("ЧекККМ", ДокументВозврата.ЧекККМ);
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТовары Из ТабличнаяЧастьВозврата Цикл
		НайденныеСтроки = РезультатЗапроса.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", СтрокаТовары.Номенклатура, СтрокаТовары.Характеристика));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			Если СтрокаТовары.Количество <= НайденнаяСтрока.Количество Тогда
				
				СтрокаТовары.ДокументРеализации = НайденнаяСтрока.ДокументРеализации;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				НайденнаяСтрока.Количество = НайденнаяСтрока.Количество - СтрокаТовары.Количество;
				НайденнаяСтрока.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок - СтрокаТовары.КоличествоУпаковок;
				Если НайденнаяСтрока.Количество = 0 Тогда
					РезультатЗапроса.Удалить(НайденнаяСтрока);
				КонецЕсли;
			Иначе
				СтрокаТовары.ДокументРеализации = НайденнаяСтрока.ДокументРеализации;
				СтрокаТовары.Цена = НайденнаяСтрока.Цена;
				ДобавленнаяСтрока = ТабличнаяЧастьВозврата.Добавить();
				ЗаполнитьЗначенияСвойств(ДобавленнаяСтрока, СтрокаТовары);
				ДобавленнаяСтрока.КоличествоУпаковок = СтрокаТовары.КоличествоУпаковок -  НайденнаяСтрока.КоличествоУпаковок;
				ДобавленнаяСтрока.Количество = СтрокаТовары.Количество - НайденнаяСтрока.Количество;
				СтрокаТовары.КоличествоУпаковок = НайденнаяСтрока.КоличествоУпаковок;
				СтрокаТовары.Количество = НайденнаяСтрока.Количество;
				РезультатЗапроса.Удалить(НайденнаяСтрока);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаТовары.ДокументРеализации = Документы.РеализацияТоваровУслуг.ПустаяСсылка();
			СтрокаТовары.Цена = 0;
		КонецЕсли;
	КонецЦикла;
		
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументВозврата);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	Если ТипЗнч(ДокументВозврата.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		СтруктураДействий.Вставить("ЗаполнитьДубликатыЗависимыхРеквизитов", Новый Структура("Отменено", "Сумма, СуммаНДС, СуммаСНДС"));
	КонецЕсли;
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ТабличнаяЧастьВозврата, СтруктураДействий, Неопределено);

КонецПроцедуры

// Обновляет информацию о количестве документов реализаций в табличной части документа возврата
//
// Параметры:
//		СписокРеализаций - Список значений, содержащий список документов реализаций
//		РеализацияВШапке - Ссылка на документ реализации в шапке документа
//		НадписьЗаголовок - Надпись, содержащая информацию о количестве документов реализаций
//		ЭлементыФормы - Элементы формы документа возврата
//		КолонкаВТабличнойЧасти - Колонка табличной части, содержащая документы реализации
//		ТабличнаяЧасть - Табличная часть документа возврата
//		ИмяРеализацииВТабличнойЧасти - Название колонки с документами реализаций в табличной части
//		
Процедура ОбновитьИнформациюПоРеализациямВФорме(СписокРеализаций,
	                                            РеализацияВШапке,
	                                            НадписьЗаголовок,
	                                            ЭлементыФормы,
	                                            КолонкаВТабличнойЧасти,
	                                            Знач ТабличнаяЧасть,
	                                            Знач ИмяРеализацииВТабличнойЧасти) Экспорт
	
	СписокРеализаций.Очистить();
	Для Каждого ТекСтрока Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ТекСтрока[ИмяРеализацииВТабличнойЧасти]) И СписокРеализаций.НайтиПоЗначению(ТекСтрока[ИмяРеализацииВТабличнойЧасти]) = Неопределено Тогда
			СписокРеализаций.Добавить(ТекСтрока[ИмяРеализацииВТабличнойЧасти]);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокРеализаций.Количество() = 1 Тогда
		РеализацияВШапке = СписокРеализаций[0].Значение;
	КонецЕсли;
	
	Если СписокРеализаций.Количество() > 1 Тогда
		НадписьЗаголовок = СтрЗаменить(
			НСтр("ru='Всего документов: %КоличествоРеализаций%'"), "%КоличествоРеализаций%",
			СписокРеализаций.Количество()
		);
		РеализацияВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокРеализаций.Количество() < 1 Тогда
		РеализацияВШапке = Неопределено;
	КонецЕсли;
	
	Если СписокРеализаций.Количество() <= 1 Тогда
		ЭлементыФормы.СтраницыРеализации.ТекущаяСтраница = ЭлементыФормы.СтраницаРеализация;
	Иначе
		ЭлементыФормы.СтраницыРеализации.ТекущаяСтраница = ЭлементыФормы.СтраницаРеализации;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет документ возврата товарами по чеку ККМ
//
// Параметры:
//		ДокументВозврата - ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента или ДокументОбъект.ВозвратТоваровОтКлиента
//		ИмяТаблицы - Имя таблицы Товары
Процедура ЗаполнитьВозвращаемыеТоварыПоЧеку (ДокументВозврата, ИмяТаблицы) Экспорт
	
	ТаблицаПроверяемыеТовары = ДокументВозврата[ИмяТаблицы].Выгрузить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМТовары.Ссылка КАК ДокументРеализации,
	|	ЧекККМТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМТовары.Характеристика КАК Характеристика,
	|	ЧекККМТовары.Упаковка КАК Упаковка,
	|	СУММА(ЧекККМТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЧекККМТовары.Количество) КАК Количество,
	|	ЧекККМТовары.Цена КАК Цена,
	|	СУММА(ЧекККМТовары.Сумма) КАК Сумма,
	|	ЧекККМТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЧекККМТовары.СуммаНДС) КАК СуммаНДС,
	|	ЧекККМТовары.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	СУММА(ЧекККМТовары.СуммаАвтоматическойСкидки) КАК СуммаАвтоматическойСкидки,
	|	ЧекККМТовары.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	СУММА(ЧекККМТовары.СуммаРучнойСкидки) КАК СуммаРучнойСкидки,
	|	ЧекККМТовары.Ссылка.Дата КАК ДатаРеализации,
	|	ЧекККМТовары.Ссылка.Номер КАК НомерРеализации,
	|	ЧекККМТовары.Ссылка.Валюта КАК ВалютаРеализации,
	|	ЧекККМТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекККМТовары.Ссылка.Партнер КАК Партнер
	|ПОМЕСТИТЬ ЧекиККМ
	|ИЗ
	|	Документ.ЧекККМ.Товары КАК ЧекККМТовары
	|ГДЕ
	|	ЧекККМТовары.Ссылка = &ЧекККМ
	|	И ЧекККМТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
	|	И ЧекККМТовары.Ссылка.Проведен
	|	И ЧекККМТовары.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМТовары.Ссылка,
	|	ЧекККМТовары.Номенклатура,
	|	ЧекККМТовары.Характеристика,
	|	ЧекККМТовары.Упаковка,
	|	ЧекККМТовары.Цена,
	|	ЧекККМТовары.СтавкаНДС,
	|	ЧекККМТовары.ПроцентАвтоматическойСкидки,
	|	ЧекККМТовары.ПроцентРучнойСкидки,
	|	ЧекККМТовары.Ссылка.Дата,
	|	ЧекККМТовары.Ссылка.Номер,
	|	ЧекККМТовары.Ссылка.Валюта,
	|	ЧекККМТовары.Ссылка.ЦенаВключаетНДС,
	|	ЧекККМТовары.Ссылка.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЧекККМВозвратТовары.Ссылка КАК ДокументРеализации,
	|	ЧекККМВозвратТовары.Номенклатура КАК Номенклатура,
	|	ЧекККМВозвратТовары.Характеристика КАК Характеристика,
	|	ЧекККМВозвратТовары.Упаковка КАК Упаковка,
	|	СУММА(ЧекККМВозвратТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ЧекККМВозвратТовары.Количество) КАК Количество,
	|	ЧекККМВозвратТовары.Цена КАК Цена,
	|	СУММА(ЧекККМВозвратТовары.Сумма) КАК Сумма,
	|	ЧекККМВозвратТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ЧекККМВозвратТовары.СуммаНДС) КАК СуммаНДС,
	|	ЧекККМВозвратТовары.Ссылка.Дата КАК ДатаРеализации,
	|	ЧекККМВозвратТовары.Ссылка.Номер КАК НомерРеализации,
	|	ЧекККМВозвратТовары.Ссылка.Валюта КАК ВалютаРеализации,
	|	ЧекККМВозвратТовары.Ссылка.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекККМВозвратТовары.Ссылка.Партнер КАК Партнер
	|ПОМЕСТИТЬ ЧекиККМВозврат
	|ИЗ
	|	Документ.ЧекККМВозврат.Товары КАК ЧекККМВозвратТовары
	|ГДЕ
	|	ЧекККМВозвратТовары.Ссылка.ЧекККМ = &ЧекККМ
	|	И ЧекККМВозвратТовары.Ссылка.НалогообложениеНДС = &НалогообложениеНДС
	|	И ЧекККМВозвратТовары.Ссылка.Проведен
	|	И ЧекККМВозвратТовары.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ЧекККМВозвратТовары.Упаковка,
	|	ЧекККМВозвратТовары.Номенклатура,
	|	ЧекККМВозвратТовары.СтавкаНДС,
	|	ЧекККМВозвратТовары.Ссылка,
	|	ЧекККМВозвратТовары.Характеристика,
	|	ЧекККМВозвратТовары.Цена,
	|	ЧекККМВозвратТовары.Ссылка.Дата,
	|	ЧекККМВозвратТовары.Ссылка.Номер,
	|	ЧекККМВозвратТовары.Ссылка.Валюта,
	|	ЧекККМВозвратТовары.Ссылка.ЦенаВключаетНДС,
	|	ЧекККМВозвратТовары.Ссылка.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПроверяемыеТовары.Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика,
	|	СУММА(ТаблицаПроверяемыеТовары.КоличествоУпаковок) КАК КоличествоУпаковок,
	|	СУММА(ТаблицаПроверяемыеТовары.Количество) КАК Количество,
	|	ТаблицаПроверяемыеТовары.ДокументРеализации,
	|	ТаблицаПроверяемыеТовары.Ссылка,
	|	СУММА(ТаблицаПроверяемыеТовары.Сумма) КАК Сумма,
	|	СУММА(ТаблицаПроверяемыеТовары.СуммаНДС) КАК СуммаНДС,
	|	СУММА(ТаблицаПроверяемыеТовары.СуммаСНДС) КАК СуммаСНДС
	|ПОМЕСТИТЬ ДанныеВозврата
	|ИЗ
	|	ЧекиККМ КАК ЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтКлиента.Товары КАК ТаблицаПроверяемыеТовары
	|		ПО ЧекиККМ.ДокументРеализации = ТаблицаПроверяемыеТовары.Ссылка.ЧекККМ
	|ГДЕ
	|	ТаблицаПроверяемыеТовары.Ссылка.Проведен
	|	И ТаблицаПроверяемыеТовары.Ссылка <> &ДокументВозврата
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПроверяемыеТовары.Номенклатура,
	|	ТаблицаПроверяемыеТовары.Характеристика,
	|	ТаблицаПроверяемыеТовары.ДокументРеализации,
	|	ТаблицаПроверяемыеТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтчетОРозничныхПродажах.Ссылка КАК ДокументРеализации,
	|	ЧекиККМ.Номенклатура КАК Номенклатура,
	|	ЧекиККМ.Характеристика КАК Характеристика,
	|	ЧекиККМ.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
	|				ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)
	|		ИНАЧЕ (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / ЧекиККМ.Упаковка.Коэффициент
	|	КОНЕЦ КАК КоличествоУпаковок,
	|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) КАК Количество,
	|	ВЫБОР
	|		КОГДА ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) = 0
	|			ТОГДА ЧекиККМ.Цена
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЧекиККМ.Упаковка ЕСТЬ NULL 
	|						ИЛИ ЧекиККМ.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|					ТОГДА ЧекиККМ.Сумма / (ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0))
	|				ИНАЧЕ ЧекиККМ.Сумма / ((ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0)) / ЧекиККМ.Упаковка.Коэффициент)
	|			КОНЕЦ
	|	КОНЕЦ КАК Цена,
	|	ЧекиККМ.Сумма - ЕСТЬNULL(ДанныеВозврата.Сумма, 0) - ЕСТЬNULL(ЧекиККМВозврат.Сумма, 0) КАК Сумма,
	|	ЧекиККМ.СтавкаНДС КАК СтавкаНДС,
	|	ЧекиККМ.СуммаНДС - ЕСТЬNULL(ДанныеВозврата.СуммаНДС, 0) - ЕСТЬNULL(ЧекиККМВозврат.СуммаНДС, 0) КАК СуммаНДС,
	|	ЧекиККМ.ПроцентАвтоматическойСкидки КАК ПроцентАвтоматическойСкидки,
	|	ЧекиККМ.СуммаАвтоматическойСкидки КАК СуммаАвтоматическойСкидки,
	|	ЧекиККМ.ПроцентРучнойСкидки КАК ПроцентРучнойСкидки,
	|	ЧекиККМ.СуммаРучнойСкидки КАК СуммаРучнойСкидки,
	|	ЧекиККМ.ДатаРеализации КАК ДатаРеализации,
	|	ЧекиККМ.НомерРеализации КАК НомерРеализации,
	|	ЧекиККМ.ВалютаРеализации КАК ВалютаРеализации,
	|	ЧекиККМ.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ЧекиККМ.Партнер КАК Партнер,
	|	ЧекиККМ.ДокументРеализации.Склад КАК Склад
	|ИЗ
	|	ЧекиККМ КАК ЧекиККМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЧекиККМВозврат КАК ЧекиККМВозврат
	|		ПО ЧекиККМ.ДокументРеализации = ЧекиККМВозврат.ДокументРеализации.ЧекККМ
	|			И ЧекиККМ.Номенклатура = ЧекиККМВозврат.Номенклатура
	|			И ЧекиККМ.Характеристика = ЧекиККМВозврат.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеВозврата КАК ДанныеВозврата
	|		ПО ЧекиККМ.ДокументРеализации = ДанныеВозврата.Ссылка.ЧекККМ
	|			И ЧекиККМ.Номенклатура = ДанныеВозврата.Номенклатура
	|			И ЧекиККМ.Характеристика = ДанныеВозврата.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|		ПО ЧекиККМ.ДокументРеализации.КассоваяСмена = ОтчетОРозничныхПродажах.КассоваяСмена
	|ГДЕ
	|	ЧекиККМ.Количество - ЕСТЬNULL(ДанныеВозврата.Количество, 0) - ЕСТЬNULL(ЧекиККМВозврат.Количество, 0) > 0
	|	И ЧекиККМ.Номенклатура.ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРеализации УБЫВ";
	
	Запрос.УстановитьПараметр("НалогообложениеНДС", ДокументВозврата.НалогообложениеНДС);
	Запрос.УстановитьПараметр("Организация", ДокументВозврата.Организация);
	Запрос.УстановитьПараметр("ЧекККМ", ДокументВозврата.ЧекККМ);
	Запрос.УстановитьПараметр("ДокументВозврата", ДокументВозврата.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДокументВозврата[ИмяТаблицы].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если ДокументВозврата.Валюта <> Выборка.ВалютаРеализации Тогда
			КурсНовойВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументВозврата.Валюта, ДокументВозврата.Дата);
			КурсСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Выборка.ВалютаРеализации, ДокументВозврата.Дата);
			
			НоваяСтрока.Цена = РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(
				НоваяСтрока.Цена,
				Выборка.ВалютаРеализации,ДокументВозврата.Валюта,
				КурсСтаройВалюты.Курс,КурсНовойВалюты.Курс,
				КурсСтаройВалюты.Кратность,КурсНовойВалюты.Кратность
			);
		
		КонецЕсли;
		
		Ценообразование.ПересчитатьСуммыВСтроке(
				НоваяСтрока,
				Ложь,
				Истина,
				Ложь,
				ДокументВозврата.ЦенаВключаетНДС
			);
		
	КонецЦикла;
		
КонецПроцедуры

// Проверяет корректность заполнения этапов графика оплаты в таблице значений
//
// Параметры:
// ЭтапыГрафикаОплаты                  - Таблица значений, для которой необходимо осуществить проверки
// СуммаДокумента                   - Число - Сумма документа, в котором необходимо осуществить проверку
// УчитыватьВариантОплаты           - Булево - признак необходимости проверки корректности вариантов оплаты
// Отказ                            - Булево - Флаг отказа от записи документа
// ПривязыватьСообщенияКГиперссылке - Булево - флаг, указывающий на необходимость привязки сообщений к гиперссылке
//
Процедура ПроверитьКорректностьЭтаповГрафикаОплатыПоТаблицеЗначений(Знач ЭтапыГрафикаОплаты,
	                                               СуммаДокумента,
	                                               УчитыватьВариантОплаты,
	                                               Отказ,
	                                               ПривязыватьСообщенияКГиперссылке = Ложь,
	                                               СтруктураПараметров) Экспорт

	Если ЗначениеЗаполнено(СтруктураПараметров.Дата) Тогда
		ДатаДокумента = НачалоДня(СтруктураПараметров.Дата);
	КонецЕсли;

	СуммаВсего = Окр(СуммаДокумента, 2);
		
	Если ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		
		Если СуммаВсего > 0 Тогда 
			
			ТекстОшибки = НСтр("ru='Необходимо заполнить этапы графика оплаты'");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "Объект.ЭтапыГрафикаОплаты"),
					,
					Отказ);
					
		КонецЕсли;
		
	Иначе
	
		Для ТекИндекс = 0 По ЭтапыГрафикаОплаты.Количество()-1 Цикл
			
			АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы графика оплаты""'");
			АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки);
			
			// Все реквизиты этапа оплаты должны быть заполнены
			
			Если УчитыватьВариантОплаты И Не ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Вариант оплаты""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ВариантОплаты")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Дата платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ПроцентПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Процент платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ПроцентПлатежа")),
					,
					Отказ
				);

			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].СуммаПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Не заполнена колонка ""Сумма платежа""'");
			 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "СуммаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

			// Дата платежа в тч ЭтапыГрафикаОплаты должна быть не меньше даты документа
			Если ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
				ЗначениеЗаполнено(СтруктураПараметров.Дата) И
				ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа < ДатаДокумента Тогда

				ТекстОшибки = НСтр("ru='Дата платежа должна быть не меньше даты документа %ДатаДокумента%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ДатаДокумента%", Формат(СтруктураПараметров.Дата, "ДЛФ=DD"));

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

			Если УчитыватьВариантОплаты Тогда
			
				// Дата платежа по авансовому этапу должна быть не больше даты отгрузки в шапке
				Если ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаОтгрузки) И
					(ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
					ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки) И
					ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа > СтруктураПараметров.ЖелаемаяДатаОтгрузки Тогда

					ТекстОшибки = НСтр("ru='Дата платежа по авансовому этапу должна быть не больше желаемой даты отгрузки %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(СтруктураПараметров.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты",ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
						,
						Отказ
					);

				// Дата платежа по кредитному этапу должна быть не меньше даты отгрузки в шапке
				ИначеЕсли ЗначениеЗаполнено(ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа) И 
					ЗначениеЗаполнено(СтруктураПараметров.ЖелаемаяДатаОтгрузки) И
					ЭтапыГрафикаОплаты[ТекИндекс].ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки И
					ЭтапыГрафикаОплаты[ТекИндекс].ДатаПлатежа < СтруктураПараметров.ЖелаемаяДатаОтгрузки Тогда

					ТекстОшибки = НСтр("ru='Дата платежа по кредитному этапу должна быть не меньше желаемой даты отгрузки %ДатаОтгрузки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОтгрузки%", Формат(СтруктураПараметров.ЖелаемаяДатаОтгрузки, "ДЛФ=DD")); 

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ТекИндекс].НомерСтроки, "ДатаПлатежа")),
						,
						Отказ
					);

				КонецЕсли;
				
			КонецЕсли;
				
		КонецЦикла;
		
		// Процент платежей в в тч ЭтапыГрафикаОплаты должен равняться 100%
		
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			ПроцентПоЭтапам = ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа");

			Если ПроцентПоЭтапам <> 100 Тогда

				ТекстОшибки = НСтр("ru='Процент платежей по всем этапам ""%ПроцентПоЭтапам%%"" должен равняться 100%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПоЭтапам%", ПроцентПоЭтапам);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "ЭтапыГрафикаОплаты[0].ПроцентПлатежа"),
					,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

		// Сумма платежей в в тч ЭтапыГрафикаОплаты должна равняться сумме заказа с учетом отмененных позиций
			
		Если ЭтапыГрафикаОплаты.Количество() > 0 Тогда

			СуммаВсего    = Окр(СуммаДокумента, 2);
			СуммаПоЭтапам = Окр(ЭтапыГрафикаОплаты.Итог("СуммаПлатежа"), 2);
			
			Если СуммаПоЭтапам <> СуммаВсего Тогда

				ТекстОшибки = НСтр("ru='Сумма платежей по всем этапам ""%СуммаПоЭтапам% %Валюта%"" не должна отличаться от суммы заказанных строк ""%СуммаВсего% %Валюта%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПоЭтапам%", СуммаПоЭтапам);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаВсего%",    СуммаВсего);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",        СтруктураПараметров.Валюта);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", "ЭтапыГрафикаОплаты[0].СуммаПлатежа"),
					,
					Отказ
				);

			КонецЕсли;

		КонецЕсли;

		КоличествоЭтапов = ЭтапыГрафикаОплаты.Количество();

		Для ВнешнийСчетчик = 2 По КоличествоЭтапов Цикл

			ИндексПредыдущегоЭтапа = ВнешнийСчетчик - 2;
			ИндексТекущегоЭтапа    = ВнешнийСчетчик - 1;
			ПредыдущееЗначениеДатыПлатежа    = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ДатаПлатежа;
			ТекущееЗначениеДатыПлатежа       = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ДатаПлатежа;

			Если УчитыватьВариантОплаты Тогда
			
				ПредыдущееЗначениеВариантаОплаты = ЭтапыГрафикаОплаты[ИндексПредыдущегоЭтапа].ВариантОплаты;
				ТекущееЗначениеВариантаОплаты    = ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].ВариантОплаты;
				
				// В табличной части Этапы не должно быть строк со значением АвансДоОбеспечения
				// в поле ВариантОплаты, идущих после строк со значением ПредоплатаДоОтгрузки
				// КредитПослеОтгрузки
				Если (ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения И 
					(ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки ИЛИ
					 ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки)) ИЛИ
					// В табличной части Этапы не должно быть строк со значением ПредоплатаДоОтгрузки
					// в поле ВариантОплаты, идущих после строк со значением КредитПослеОтгрузки
					(ТекущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки И 
					ПредыдущееЗначениеВариантаОплаты = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки) Тогда
				
					ТекстОшибки = НСтр("ru='Вариант оплаты ""%ТекущееЗначениеВариантаОплаты%"" в строке %ИндексТекущегоЭтапа%
					|не может идти после варианта оплаты ""%ПредыдущееЗначениеВариантаОплаты%"" в строке %ИндексПредыдущегоЭтапа%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ПредыдущееЗначениеВариантаОплаты%", ПредыдущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ТекущееЗначениеВариантаОплаты%",    ТекущееЗначениеВариантаОплаты);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",              ИндексТекущегоЭтапа + 1);
					ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%",           ИндексПредыдущегоЭтапа + 1);

					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ВариантОплаты")),
						,
						Отказ
						);

				КонецЕсли;
				
			КонецЕсли;

			// Значение поля ДатаПлатежа табличной части ЭтапыГрафикаОплаты должно идти по возрастанию
			Если ТекущееЗначениеДатыПлатежа < ПредыдущееЗначениеДатыПлатежа И 
				ЗначениеЗаполнено(ТекущееЗначениеДатыПлатежа) И
				ЗначениеЗаполнено(ПредыдущееЗначениеДатыПлатежа) Тогда

				ТекстОшибки = НСтр("ru='Дата платежа в строке %ИндексТекущегоЭтапа%
				|списка ""Этапы оплаты"" должна быть не меньше, чем в строке %ИндексПредыдущегоЭтапа%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексТекущегоЭтапа%",    ИндексТекущегоЭтапа + 1);
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ИндексПредыдущегоЭтапа%", ИндексПредыдущегоЭтапа + 1);

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					?(ПривязыватьСообщенияКГиперссылке, "НадписьЭтапыОплаты", ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты[ИндексТекущегоЭтапа].НомерСтроки, "ДатаПлатежа")),
					,
					Отказ
				);

			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет отображение ограничения задолженности в форме документа
//
// Параметры:
//	Договор           - СправочникСсылка.ДоговорыКонтрагентов - Договор, указанный в документе
//	Текст             - Строка - Реквизит, которому присваивается текстовая строка об остатке допустимого кредита
//	ВидимостьТекста   - Булево - Реквизит, которому присвается значение видимости строки об остатке допустимого кредита
//	ЦветТекста        - ЦветаСтиля - Реквизит, которому присвается значение цвета строки об остатке допустимого кредита
//	ВидимостьКартинки - Булево - Реквизит, которому присваивается значение видимости картинки о запрете отгрузки
//
Процедура ОбновитьОграничениеЗадолженности(Договор, Дата, Текст, ВидимостьТекста, ЦветТекста, ВидимостьКартинки) Экспорт
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ДоговорыКонтрагентов)
	 И ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.РасчетыСКлиентами) Тогда
		
		СоставРеквизитов = "
		|ОграничиватьСуммуЗадолженности,
		|ДопустимаяСуммаЗадолженности,
		|ВалютаВзаиморасчетов,
		|ЗапрещаетсяПросроченнаяЗадолженность";
		
		Если ЗначениеЗаполнено(Договор) Тогда
			ДанныеДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, СоставРеквизитов);
		Иначе
			ДанныеДоговора = Новый Структура(СоставРеквизитов, Ложь, 0, Неопределено, Ложь);
		КонецЕсли;
		
		ПревышенаСумма = Ложь;
		Если ДанныеДоговора.ОграничиватьСуммуЗадолженности Тогда
			ОстатокДопустимогоКредита = ОстатокДопустимогоКредита(Договор, ДанныеДоговора.ДопустимаяСуммаЗадолженности);
			ПревышенаСумма = ОстатокДопустимогоКредита < 0;
		КонецЕсли;
		
		ПревышенСрок = Ложь;
		Если ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность Тогда
			СуммаПросроченнойЗадолженности = СуммаПросроченнойЗадолженности(Договор, Дата);
			ПревышенСрок = СуммаПросроченнойЗадолженности > 0;
		КонецЕсли;
		
		Если ПревышенаСумма ИЛИ ПревышенСрок Тогда
			Текст = НСтр("ru='Отгрузка запрещена'");
			ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
			ВидимостьТекста = Истина;
			ВидимостьКартинки = Истина;
		ИначеЕсли ДанныеДоговора.ОграничиватьСуммуЗадолженности Тогда
			Текст = НСтр("ru='Остаток допустимого кредита: '") + Формат(ОстатокДопустимогоКредита, "ЧДЦ=2; ЧН=0,00") + " " + Строка(ДанныеДоговора.ВалютаВзаиморасчетов);
			ЦветТекста = ЦветаСтиля.ЦветГиперссылки;
			ВидимостьТекста = Истина;
			ВидимостьКартинки = Ложь;
		Иначе
			ВидимостьТекста = Ложь;
			ВидимостьКартинки = Ложь;
		КонецЕсли;
		
	Иначе
		
		ВидимостьТекста = Ложь;
		ВидимостьКартинки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует временную таблицу, содержащую данные счетов-фактур по таблице данных документов-оснований.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаДанныхДокументов с полями:
//		Ссылка,
//		Организация,
//		Подразделение,
//		Склад.
//
Процедура ПоместитьВременнуюТаблицуСчетовФактур(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаФактуры.ДокументОснование          КАК ДокументОснование,
	|	СчетаФактуры.Покупатель                 КАК Покупатель,
	|
	|	ВЫБОР КОГДА СчетаФактуры.Исправление ТОГДА
	|		ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, Неопределено)
	|	ИНАЧЕ
	|		СчетаФактуры.Дата
	|	КОНЕЦ КАК Дата,
	|
	|	МАКСИМУМ(СчетаФактуры.НомерИсправления) КАК НомерИсправления
	|
	|ПОМЕСТИТЬ НомераИсправлений
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетаФактуры
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ТаблицаДанныхДокументов КАК ДанныеДокументов
	|	ПО
	|		СчетаФактуры.ДокументОснование = ДанныеДокументов.Ссылка
	|
	|ГДЕ
	|	НЕ СчетаФактуры.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаФактуры.ДокументОснование,
	|	СчетаФактуры.Покупатель,
	|	ВЫБОР КОГДА СчетаФактуры.Исправление ТОГДА
	|		ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, Неопределено)
	|	ИНАЧЕ
	|		СчетаФактуры.Дата
	|	КОНЕЦ
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокументов.Ссылка КАК Ссылка,
	|	
	|	ВЫБОР КОГДА ДанныеОрганизаций.ОбособленноеПодразделение ТОГДА
	|		ДанныеОрганизаций.ГоловнаяОрганизация
	|	ИНАЧЕ
	|		ДанныеОрганизаций.Ссылка
	|	КОНЕЦ КАК ГоловнаяОрганизация,
	|	
	|	ВЫБОР КОГДА ДанныеОрганизаций.ОбособленноеПодразделение ТОГДА
	|		ДанныеОрганизаций.Ссылка
	|	ИНАЧЕ
	|		ДанныеПодразделений.РегистрацияВНалоговомОргане
	|	КОНЕЦ КАК Грузоотправитель,
	|	
	|	ВЫБОР КОГДА ДанныеОрганизаций.ОбособленноеПодразделение ТОГДА
	|		ДанныеОрганизаций.ЦифровойИндексОбособленногоПодразделения
	|	ИНАЧЕ
	|		ДанныеПодразделений.РегистрацияВНалоговомОргане.ЦифровойИндексОбособленногоПодразделения
	|	КОНЕЦ КАК ЦифровойИндекс,
	|	
	|	ВЫБОР КОГДА ДанныеОрганизаций.ОбособленноеПодразделение ТОГДА
	|		ИСТИНА
	|	КОГДА НЕ ДанныеПодразделений.РегистрацияВНалоговомОргане ЕСТЬ NULL ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ВыводитьКППГрузоотправителя
	|
	|ПОМЕСТИТЬ ДанныеПодразделений
	|ИЗ
	|	ТаблицаДанныхДокументов КАК ДанныеДокументов
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Организации КАК ДанныеОрганизаций
	|	ПО
	|		ДанныеДокументов.Организация = ДанныеОрганизаций.Ссылка
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РегистрацииВНалоговомОргане КАК ДанныеПодразделений
	|	ПО
	|		(НЕ ДанныеДокументов.Организация.ОбособленноеПодразделение)
	|		И ДанныеПодразделений.Организация = ДанныеДокументов.Организация
	|		И (ДанныеПодразделений.Подразделение = ДанныеДокументов.Склад.Подразделение
	|			ИЛИ (ДанныеДокументов.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			И ДанныеПодразделений.Подразделение = ДанныеДокументов.Подразделение))
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаФактуры.ДокументОснование                  КАК ДокументОснование,
	|	СчетаФактуры.Покупатель                         КАК Покупатель,
	|	СчетаФактуры.Исправление                        КАК Исправление,
	|	СчетаФактуры.Номер                              КАК Номер,
	|
	|	ВЫБОР КОГДА СчетаФактуры.Исправление ТОГДА
	|		ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, ДАТАВРЕМЯ(1,1,1))
	|	ИНАЧЕ
	|		СчетаФактуры.Дата
	|	КОНЕЦ КАК Дата,
	|
	|	ВЫБОР КОГДА СчетаФактуры.Исправление ТОГДА
	|		СчетаФактуры.НомерИсправления
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НомерИсправления,
	|
	|	ВЫБОР КОГДА СчетаФактуры.Исправление ТОГДА
	|		СчетаФактуры.Дата
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДатаИсправления,
	|
	|	СчетаФактуры.НомерИсходногоДокумента            КАК НомерСчетаФактуры,
	|	СчетаФактуры.ДатаИсходногоДокумента             КАК ДатаСчетаФактуры,
	|	СчетаФактуры.НомерИсправленияИсходногоДокумента КАК НомерИсправленияСчетаФактуры,
	|	СчетаФактуры.ДатаИсправленияИсходногоДокумента  КАК ДатаИсправленияСчетаФактуры,
	|	СчетаФактуры.Корректировочный                   КАК Корректировочный,
	|	СчетаФактуры.Организация                        КАК Организация,
	|	СчетаФактуры.Валюта                             КАК Валюта,
	|	СчетаФактуры.СтрокаПлатежноРасчетныеДокументы   КАК СтрокаПлатежноРасчетныеДокументы,
	|	ДанныеПодразделений.ГоловнаяОрганизация         КАК ГоловнаяОрганизация,
	|	ДанныеПодразделений.Грузоотправитель            КАК Грузоотправитель,
	|	ДанныеПодразделений.ЦифровойИндекс              КАК ИндексПодразделения,
	|	ДанныеПодразделений.ВыводитьКППГрузоотправителя КАК ВыводитьКППГрузоотправителя
	|
	|ПОМЕСТИТЬ ТаблицаСчетовФактур
	|ИЗ
	|	НомераИсправлений КАК НомераИсправлений
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СчетФактураВыданный КАК СчетаФактуры
	|	ПО
	|		НомераИсправлений.ДокументОснование = СчетаФактуры.ДокументОснование
	|		И НомераИсправлений.Покупатель      = СчетаФактуры.Покупатель
	|		И НомераИсправлений.Дата            = ВЫБОР КОГДА СчетаФактуры.Исправление ТОГДА
	|		                                          ЕСТЬNULL(СчетаФактуры.СчетФактураОснование.Дата, НЕОПРЕДЕЛЕНО)
	|		                                      ИНАЧЕ
	|		                                          СчетаФактуры.Дата
	|	                                          КОНЕЦ
	|		И НомераИсправлений.НомерИсправления = СчетаФактуры.НомерИсправления
	|		И НЕ СчетаФактуры.ПометкаУдаления
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДанныеПодразделений КАК ДанныеПодразделений
	|	ПО
	|		НомераИсправлений.ДокументОснование = ДанныеПодразделений.Ссылка
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НомераИсправлений
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеПодразделений
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Формирует временную таблицу, содержащую коэффициенты упаковок по таблице товаров.
//
// Параметры:
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц, содержащий таблицу ТаблицаТоваров с полями:
//		Ссылка,
//		НомерСтроки,
//		Номенклатура,
//		Упаковка,
//		КоличествоУпаковок,
//		Количество.
//
Процедура ПоместитьВременнуюТаблицуКоэффициентыУпаковок(МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Упаковка КАК Упаковка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА УпаковкиНоменклатуры.Ссылка ЕСТЬ NULL 
	|				ТОГДА 1
	|			ИНАЧЕ УпаковкиНоменклатуры.Коэффициент
	|		КОНЕЦ) КАК Коэффициент
	|ПОМЕСТИТЬ Упаковки
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО (УпаковкиНоменклатуры.Родитель = ТаблицаТоваров.Упаковка)
	|			И (УпаковкиНоменклатуры.Владелец = ТаблицаТоваров.Номенклатура)
	|ГДЕ
	|	НЕ УпаковкиНоменклатуры.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Упаковки.Номенклатура,
	|	Упаковки.Упаковка КАК Упаковка,
	|	Упаковки.Упаковка.Коэффициент КАК КоэффициентУпаковки,
	|	МИНИМУМ(УпаковкиНоменклатуры.Ссылка) КАК ВложеннаяУпаковка,
	|	МИНИМУМ(УпаковкиНоменклатуры.Коэффициент) КАК КоэффициентВложеннойУпаковки
	|ПОМЕСТИТЬ ВложенныеУпаковки
	|ИЗ
	|	Упаковки КАК Упаковки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
	|		ПО Упаковки.Номенклатура = УпаковкиНоменклатуры.Владелец
	|			И Упаковки.Коэффициент = УпаковкиНоменклатуры.Коэффициент
	|ГДЕ
	|	УпаковкиНоменклатуры.Родитель = Упаковки.Упаковка
	|
	|СГРУППИРОВАТЬ ПО
	|	Упаковки.Номенклатура,
	|	Упаковки.Упаковка,
	|	Упаковки.Упаковка.Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров.КоличествоУпаковок,
	|	ТаблицаТоваров.Количество,
	|	ТаблицаТоваров.Упаковка,
	|	ТаблицаТоваров.НомерСтроки,
	|	ВЫБОР
	|		КОГДА ВложенныеУпаковки.ВложеннаяУпаковка ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ ТаблицаТоваров.Упаковка.Коэффициент
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныеУпаковки.КоэффициентУпаковки
	|	КОНЕЦ КАК КоэффициентУпаковки,
	|	ВЫБОР
	|		КОГДА ВложенныеУпаковки.ВложеннаяУпаковка ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА 1
	|					ИНАЧЕ ТаблицаТоваров.Упаковка.Коэффициент
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныеУпаковки.КоэффициентВложеннойУпаковки
	|	КОНЕЦ КАК КоэффициентВложеннойУпаковки,
	|	ВЫБОР
	|		КОГДА ВложенныеУпаковки.ВложеннаяУпаковка ЕСТЬ NULL 
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|						ТОГДА ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения
	|					ИНАЧЕ ТаблицаТоваров.Упаковка
	|				КОНЕЦ
	|		ИНАЧЕ ВложенныеУпаковки.ВложеннаяУпаковка
	|	КОНЕЦ КАК ВидУпаковки,
	|	ТаблицаТоваров.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ КоэффициентыУпаковок
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВложенныеУпаковки КАК ВложенныеУпаковки
	|		ПО ТаблицаТоваров.Номенклатура = ВложенныеУпаковки.Номенклатура
	|			И ТаблицаТоваров.Упаковка = ВложенныеУпаковки.Упаковка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Упаковки
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВложенныеУпаковки
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции заполнения по отгрузке.

// Возвращает текст запроса для заполнения табличных частей документам по фактической отгрузке
//
// Возвращаемое значение:
// 		Строка - Текст запроса
//
Функция ТекстЗапросаПоФактическойОтгрузке()
	
	Возврат
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОбороты.Серия КАК Серия,
	|	ТоварыКОтгрузкеОбороты.Номенклатура КАК Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика КАК Характеристика,
	|	ТоварыКОтгрузкеОбороты.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА &ЗаполнятьНесобраннымиТоварами
	|			ТОГДА СУММА(ТоварыКОтгрузкеОбороты.СобираетсяПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ + СУММА(ТоварыКОтгрузкеОбороты.КОтгрузкеРасход) + СУММА(ТоварыКОтгрузкеОбороты.СобраноПриход) КАК КоличествоОтгрузить
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Обороты(, , , ДокументОтгрузки = &ДокументОтгрузки) КАК ТоварыКОтгрузкеОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтгрузкеОбороты.Номенклатура,
	|	ТоварыКОтгрузкеОбороты.Характеристика,
	|	ТоварыКОтгрузкеОбороты.Серия,
	|	ТоварыКОтгрузкеОбороты.Склад
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА &ЗаполнятьНесобраннымиТоварами
	|			ТОГДА СУММА(ТоварыКОтгрузкеОбороты.СобираетсяПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ + СУММА(ТоварыКОтгрузкеОбороты.КОтгрузкеРасход) + СУММА(ТоварыКОтгрузкеОбороты.СобраноПриход) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады) КАК Склад,
	|	Товары.ДокументРезерваСерий КАК ДокументРезерваСерий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Товары.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(Товары.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	ВЫРАЗИТЬ(Товары.Упаковка КАК Справочник.УпаковкиНоменклатуры) КАК Упаковка,
	|	ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады) КАК Склад,
	|	Товары.ДокументРезерваСерий КАК ДокументРезерваСерий
	|ПОМЕСТИТЬ ВременнаяТаблицаТовары
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры В
	|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|	И ЕСТЬNULL(ВЫРАЗИТЬ(Товары.Склад КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриОтгрузке, ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Серии.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки
	|ПОМЕСТИТЬ ВременнаяТаблицаСерии
	|ИЗ
	|	&Серии КАК Серии
	|ГДЕ
	|	ЕСТЬNULL(ВЫРАЗИТЬ(Серии.Склад КАК Справочник.Склады).ИспользоватьОрдернуюСхемуПриОтгрузке, ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезервПоДокументам.Серия,
	|	РезервПоДокументам.Номенклатура,
	|	РезервПоДокументам.Характеристика,
	|	РезервПоДокументам.Склад,
	|	РезервПоДокументам.ДокументРезерваСерий,
	|	СУММА(РезервПоДокументам.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		РезервыСерийТоваровОстатки.Серия КАК Серия,
	|		РезервыСерийТоваровОстатки.Номенклатура КАК Номенклатура,
	|		РезервыСерийТоваровОстатки.Характеристика КАК Характеристика,
	|		РезервыСерийТоваровОстатки.Склад КАК Склад,
	|		РезервыСерийТоваровОстатки.ДокументРезерва КАК ДокументРезерваСерий,
	|		СУММА(РезервыСерийТоваровОстатки.КоличествоОстаток) КАК Количество
	|	ИЗ
	|		РегистрНакопления.РезервыСерийТоваров.Остатки(
	|				,
	|				(ДокументРезерва, Номенклатура, Характеристика, Склад) В
	|					(ВЫБРАТЬ
	|						Товары.ДокументРезерваСерий,
	|						Товары.Номенклатура,
	|						Товары.Характеристика,
	|						Товары.Склад
	|					ИЗ
	|						ВременнаяТаблицаТовары КАК Товары)) КАК РезервыСерийТоваровОстатки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РезервыСерийТоваровОстатки.Серия,
	|		РезервыСерийТоваровОстатки.Номенклатура,
	|		РезервыСерийТоваровОстатки.Характеристика,
	|		РезервыСерийТоваровОстатки.ДокументРезерва,
	|		РезервыСерийТоваровОстатки.Склад
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РезервыСерийТоваров.Серия,
	|		РезервыСерийТоваров.Номенклатура,
	|		РезервыСерийТоваров.Характеристика,
	|		РезервыСерийТоваров.Склад,
	|		РезервыСерийТоваров.ДокументРезерва,
	|		СУММА(РезервыСерийТоваров.Количество)
	|	ИЗ
	|		РегистрНакопления.РезервыСерийТоваров КАК РезервыСерийТоваров
	|	ГДЕ
	|		РезервыСерийТоваров.Регистратор = &ДокументОтгрузки
	|		И (РезервыСерийТоваров.ДокументРезерва, РезервыСерийТоваров.Номенклатура, РезервыСерийТоваров.Характеристика, РезервыСерийТоваров.Склад) В
	|				(ВЫБРАТЬ
	|					Товары.ДокументРезерваСерий,
	|					Товары.Номенклатура,
	|					Товары.Характеристика,
	|					Товары.Склад
	|				ИЗ
	|					ВременнаяТаблицаТовары КАК Товары)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РезервыСерийТоваров.ДокументРезерва,
	|		РезервыСерийТоваров.Номенклатура,
	|		РезервыСерийТоваров.Характеристика,
	|		РезервыСерийТоваров.Склад,
	|		РезервыСерийТоваров.Серия) КАК РезервПоДокументам
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервПоДокументам.Серия,
	|	РезервПоДокументам.Номенклатура,
	|	РезервПоДокументам.Характеристика,
	|	РезервПоДокументам.Склад,
	|	РезервПоДокументам.ДокументРезерваСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаТовары.НомерСтроки,
	|	ВременнаяТаблицаТовары.Упаковка.Коэффициент КАК КоэффициентУпаковки
	|ИЗ
	|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблицаСерии.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВременнаяТаблицаСерии КАК ВременнаяТаблицаСерии
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки УБЫВ";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования временных таблиц для проверки корректности заполнения документов.

// Формирует запрос к шапке документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса      - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса  - Структура - структура, содержащая параметры запроса
// ДокументПродажи   - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы        - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаШапкаДокументаПродажи(ТекстЗапроса,
	                                                              ПараметрыЗапроса,
	                                                              ДокументПродажи,
	                                                              ПоСсылке = Ложь,
	                                                              ИмяТаблицы = "")
	
	Если ПоСсылке Тогда
		
		Если ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	NULL                                  КАК ЖелаемаяДатаОтгрузки,
				|	NULL                                  КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	СрокПоставки                          КАК СрокПоставки,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
				|";
			
		ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ДокументПродажи.ЖелаемаяДатаОтгрузки  КАК ЖелаемаяДатаОтгрузки,
				|	ДокументПродажи.Контрагент            КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	NULL                                  КАК СрокПоставки,
				|	NULL                                  КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
				|";
				
		ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.ГрафикОплаты          КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
				|	ДокументПродажи.ЖелаемаяДатаОтгрузки  КАК ЖелаемаяДатаОтгрузки,
				|	ДокументПродажи.Контрагент            КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента        КАК СуммаДокумента,
				|	ДокументПродажи.Подразделение         КАК Подразделение,
				|	NULL                                  КАК ВидЦен,
				|	ДокументПродажи.Склад                 КАК Склад,
				|	ДокументПродажи.ФормаОплаты           КАК ФормаОплаты,
				|	NULL                                  КАК ВалютаВзаиморасчетов,
				|	NULL                                  КАК Регулярное,
				|	NULL                                  КАК Типовое,
				|	NULL                                  КАК Период,
				|	NULL                                  КАК КоличествоПериодов,
				|	NULL                                  КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	NULL                                  КАК СегментПартнеров,
				|	NULL                                  КАК СегментНоменклатуры,
				|	NULL                                  КАК ДатаНачалаДействия,
				|	NULL                                  КАК ДатаОкончанияДействия,
				|	NULL                                  КАК СрокПоставки,
				|	NULL                                  КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары КАК СрокВозвратаМногооборотнойТары
				|";
				
		ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.ГрафикОплаты                              КАК ГрафикОплаты,
				|	ДокументПродажи.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
				|	NULL                                                      КАК ЖелаемаяДатаОтгрузки,
				|	ДокументПродажи.Контрагент                                КАК Контрагент,
				|	ДокументПродажи.СуммаДокумента                            КАК СуммаДокумента,
				|	ДокументПродажи.ВидЦен                                    КАК ВидЦен,
				|	ДокументПродажи.Склад                                     КАК Склад,
				|	NULL                                                      КАК ФормаОплаты,
				|	NULL                                                      КАК ВалютаВзаиморасчетов,
				|	ДокументПродажи.Регулярное                                КАК Регулярное,
				|	ДокументПродажи.Типовое                                   КАК Типовое,
				|	ДокументПродажи.Период                                    КАК Период,
				|	ДокументПродажи.КоличествоПериодов                        КАК КоличествоПериодов,
				|	ДокументПродажи.ИспользуетсяВРаботеТорговыхПредставителей КАК ИспользуетсяВРаботеТорговыхПредставителей,
				|	ДокументПродажи.СегментПартнеров                          КАК СегментПартнеров,
				|	ДокументПродажи.СегментНоменклатуры                       КАК СегментНоменклатуры,
				|	ДокументПродажи.ДатаНачалаДействия                        КАК ДатаНачалаДействия,
				|	ДокументПродажи.ДатаОкончанияДействия                     КАК ДатаОкончанияДействия,
				|	ДокументПродажи.СрокПоставки                              КАК СрокПоставки,
				|	ДокументПродажи.ПроцентРучнойСкидки                       КАК ПроцентРучнойСкидки,
				|	ДокументПродажи.ПроцентРучнойНаценки                      КАК ПроцентРучнойНаценки,
				|	ДокументПродажи.ОграничиватьРучныеСкидки                  КАК ОграничиватьРучныеСкидки,
				|	ДокументПродажи.Календарь                                 КАК Календарь,
				|	ДокументПродажи.ФормаОплаты                               КАК ФормаОплатыСоглашения,
				|	ДокументПродажи.ДоступноВнешнимПользователям              КАК ДоступноВнешнимПользователям,
				|	ДокументПродажи.ИспользуютсяДоговорыКонтрагентов          КАК ИспользуютсяДоговорыКонтрагентов,
				|	ДокументПродажи.РассчитыватьДатуВозвратаТарыПоКалендарю   КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
				|	ДокументПродажи.СрокВозвратаМногооборотнойТары            КАК СрокВозвратаМногооборотнойТары
				|";
				
		ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг"
			ИЛИ ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
			
			ВременныйТекст = "
				|	ДокументПродажи.Договор                        КАК Договор
				|	ДокументПродажи.СуммаВзаиморасчетов            КАК СуммаВзаиморасчетов,
				|	ДокументПродажи.СуммаПредоплаты                КАК СуммаПредоплаты
				|";
				
		КонецЕсли;
			
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ДокументПродажи.Партнер                                   КАК Партнер,
			|	ДокументПродажи.Валюта                                    КАК Валюта,
			|	ДокументПродажи.ЦенаВключаетНДС                           КАК ЦенаВключаетНДС,
			|	ДокументПродажи.НалогообложениеНДС                        КАК НалогообложениеНДС,
			|	ДокументПродажи.Соглашение                                КАК Соглашение,
			|	ДокументПродажи.Дата                                      КАК Дата,
			|	ДокументПродажи.Организация                               КАК Организация,"
			+ ВременныйТекст + "
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаДокументПродажи
			|ИЗ
			|" + ИмяТаблицы + " КАК ДокументПродажи
			|ГДЕ
			|	ДокументПродажи.Ссылка = &ДокументПродажи
			|;
			|";
		
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
		
	Иначе

		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ДокументПродажи.Партнер                                   КАК Партнер,
			|	ДокументПродажи.Контрагент                                КАК Контрагент,
			|	ДокументПродажи.Валюта                                    КАК Валюта,
			|	ДокументПродажи.ВалютаВзаиморасчетов                      КАК ВалютаВзаиморасчетов,
			|	ДокументПродажи.ЦенаВключаетНДС                           КАК ЦенаВключаетНДС,
			|	ДокументПродажи.НалогообложениеНДС                        КАК НалогообложениеНДС,
			|	ДокументПродажи.Соглашение                                КАК Соглашение,
			|	ДокументПродажи.Дата                                      КАК Дата,
			|	ДокументПродажи.ВидЦен                                    КАК ВидЦен,
			|	ДокументПродажи.Организация                               КАК Организация,
			|	ДокументПродажи.Склад                                     КАК Склад,
			|	ДокументПродажи.Подразделение                             КАК Подразделение,
			|	ДокументПродажи.ГрафикОплаты                              КАК ГрафикОплаты,
			|	ДокументПродажи.ФормаОплаты                               КАК ФормаОплаты,
			|	ДокументПродажи.Календарь                                 КАК Календарь,
			|	ДокументПродажи.ДатаПлатежа                               КАК ДатаПлатежа,
			|	ДокументПродажи.Регулярное                                КАК Регулярное,
			|	ДокументПродажи.Типовое                                   КАК Типовое,
			|	ДокументПродажи.Период                                    КАК Период,
			|	ДокументПродажи.КоличествоПериодов                        КАК КоличествоПериодов,
			|	ДокументПродажи.ИспользуетсяВРаботеТорговыхПредставителей КАК ИспользуетсяВРаботеТорговыхПредставителей,
			|	ДокументПродажи.СегментПартнеров                          КАК СегментПартнеров,
			|	ДокументПродажи.СегментНоменклатуры                       КАК СегментНоменклатуры,
			|	ДокументПродажи.ДатаНачалаДействия                        КАК ДатаНачалаДействия,
			|	ДокументПродажи.ДатаОкончанияДействия                     КАК ДатаОкончанияДействия,
			|	ДокументПродажи.СрокПоставки                              КАК СрокПоставки,
			|	ДокументПродажи.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
			|	ДокументПродажи.СуммаДокумента                            КАК СуммаДокумента,
			|	ДокументПродажи.ЖелаемаяДатаОтгрузки                      КАК ЖелаемаяДатаОтгрузки,
			|	ДокументПродажи.ПроцентРучнойСкидки                       КАК ПроцентРучнойСкидки,
			|	ДокументПродажи.ПроцентРучнойНаценки                      КАК ПроцентРучнойНаценки,
			|	ДокументПродажи.ОграничиватьРучныеСкидки                  КАК ОграничиватьРучныеСкидки,
			|	ДокументПродажи.ДоступноВнешнимПользователям              КАК ДоступноВнешнимПользователям,
			|	ДокументПродажи.ИспользуютсяДоговорыКонтрагентов          КАК ИспользуютсяДоговорыКонтрагентов,
			|	ДокументПродажи.Договор                                   КАК Договор,
			|	ДокументПродажи.СуммаВзаиморасчетов                       КАК СуммаВзаиморасчетов,
			|	ДокументПродажи.СуммаПредоплаты                           КАК СуммаПредоплаты,
			|	ДокументПродажи.РассчитыватьДатуВозвратаТарыПоКалендарю   КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
			|	ДокументПродажи.СрокВозвратаМногооборотнойТары            КАК СрокВозвратаМногооборотнойТары
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаДокументПродажи
			|ИЗ
			|	&ДокументПродажи КАК ДокументПродажи
			|;
			|";
			
		// Сформируем необходимые колонки таблицы шапки документа продажи
			
		ТипВалюта = Новый ОписаниеТипов("СправочникСсылка.Валюты");
		ТипБулево = Новый ОписаниеТипов("Булево");
		ТипЧисло  = Новый ОписаниеТипов("Число");
		ТипДата   = Новый ОписаниеТипов("Дата");
			
		ТаблицаДокумента = Новый ТаблицаЗначений();
		ТаблицаДокумента.Колонки.Добавить("Партнер",                                   Новый ОписаниеТипов("СправочникСсылка.Партнеры"));
		ТаблицаДокумента.Колонки.Добавить("Контрагент",                                Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
		ТаблицаДокумента.Колонки.Добавить("Валюта",                                    ТипВалюта);
		ТаблицаДокумента.Колонки.Добавить("ВалютаВзаиморасчетов",                      ТипВалюта);
		ТаблицаДокумента.Колонки.Добавить("ЦенаВключаетНДС",                           ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("НалогообложениеНДС",                        Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНалогообложенияНДС"));
		ТаблицаДокумента.Колонки.Добавить("ХозяйственнаяОперация",                     Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
		ТаблицаДокумента.Колонки.Добавить("Дата",                                      ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ВидЦен",                                    Новый ОписаниеТипов("СправочникСсылка.ВидыЦен"));
		ТаблицаДокумента.Колонки.Добавить("Организация",                               Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаДокумента.Колонки.Добавить("Склад",                                     Новый ОписаниеТипов("СправочникСсылка.Склады"));
		ТаблицаДокумента.Колонки.Добавить("Подразделение",                             Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
		ТаблицаДокумента.Колонки.Добавить("Соглашение",                                Новый ОписаниеТипов("СправочникСсылка.СоглашенияСКлиентами"));
		ТаблицаДокумента.Колонки.Добавить("ГрафикОплаты",                              Новый ОписаниеТипов("СправочникСсылка.ГрафикиОплаты"));
		ТаблицаДокумента.Колонки.Добавить("ФормаОплаты",                               Новый ОписаниеТипов("ПеречислениеСсылка.ФормыОплаты"));
		ТаблицаДокумента.Колонки.Добавить("Календарь",                                 Новый ОписаниеТипов("СправочникСсылка.Календари"));
		ТаблицаДокумента.Колонки.Добавить("ДатаПлатежа",                               ТипДата);
		ТаблицаДокумента.Колонки.Добавить("СегментНоменклатуры",                       Новый ОписаниеТипов("СправочникСсылка.СегментыНоменклатуры"));
		ТаблицаДокумента.Колонки.Добавить("СтавкаНДС",                                 Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
		ТаблицаДокумента.Колонки.Добавить("Регулярное",                                ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Типовое",                                   ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Период",                                    Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
		ТаблицаДокумента.Колонки.Добавить("КоличествоПериодов",                        ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ИспользуетсяВРаботеТорговыхПредставителей", ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("СегментПартнеров",                          Новый ОписаниеТипов("СправочникСсылка.СегментыПартнеров"));
		ТаблицаДокумента.Колонки.Добавить("ДатаНачалаДействия",                        ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ДатаОкончанияДействия",                     ТипДата);
		ТаблицаДокумента.Колонки.Добавить("СрокПоставки",                              ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("СуммаДокумента",                            ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ЖелаемаяДатаОтгрузки",                      ТипДата);
		ТаблицаДокумента.Колонки.Добавить("ПроцентРучнойСкидки",                       ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ПроцентРучнойНаценки",                      ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("ОграничиватьРучныеСкидки",                  ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ДоступноВнешнимПользователям",              ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("ИспользуютсяДоговорыКонтрагентов",          ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("Договор"                         ,          Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		ТаблицаДокумента.Колонки.Добавить("СуммаВзаиморасчетов",                       ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("СуммаПредоплаты",                           ТипЧисло);
		ТаблицаДокумента.Колонки.Добавить("РассчитыватьДатуВозвратаТарыПоКалендарю",   ТипБулево);
		ТаблицаДокумента.Колонки.Добавить("СрокВозвратаМногооборотнойТары",            ТипЧисло);
		
		// Добавим строку и заполним значениями из шапки документа
		
		НоваяСтрока = ТаблицаДокумента.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДокументПродажи);
		
		ПараметрыЗапроса.Вставить("ДокументПродажи", ТаблицаДокумента);
		
	КонецЕсли;

КонецПроцедуры

// Формирует запрос к тч Товары документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса           - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса       - Структура - структура, содержащая параметры запроса
// ДокументПродажи        - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ИмяТаблицы             - Строка - имя таблицы документа, к которой необходимо сформировать запрос
// УчитыватьСкидкиНаценки - флаг, определяющий наличие в проверяемом документе скидок и наценок
// ПоСсылке               - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
//
Процедура СформироватьЗапросВременнаяТаблицаТоварыДокументаПродажи(ТекстЗапроса,
	                                                               ПараметрыЗапроса,
	                                                               ДокументПродажи,
	                                                               ИмяТаблицы,
	                                                               УчитыватьСкидкиНаценки,
	                                                               ПоСсылке = Ложь)
	
	
	Если ТипЗнч(ДокументПродажи) = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	Товары.ДатаОтгрузки                     КАК ДатаОтгрузки,
			|	Товары.Склад                            КАК Склад,
			|	Товары.СрокПоставки                     КАК СрокПоставки,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|ДатаОтгрузки,
			|Склад,
			|СрокПоставки";
		
	ИначеЕсли ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки    КАК НомерСтроки,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Цена           КАК Цена,
			|	Товары.ВидЦены        КАК ВидЦены,
			|	Товары.Упаковка       КАК Упаковка,
			|	Товары.Цена           КАК ЦенаСоСкидкой,
			|	Товары.СрокПоставки   КАК СрокПоставки,
			|	ИСТИНА                КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|СрокПоставки";
			
	ИначеЕсли ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	0                                       КАК СрокПоставки,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки";
		
	ИначеЕсли ИмяТаблицы = "Документ.ЗаданиеТорговомуПредставителю" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки    КАК НомерСтроки,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Цена           КАК Цена,
			|	Товары.ВидЦены        КАК ВидЦены,
			|	Товары.Упаковка       КАК Упаковка,
			|	Товары.СтавкаНДС      КАК СтавкаНДС,
			|	Товары.Цена           КАК ЦенаСоСкидкой,
			|	0                     КАК СрокПоставки,
			|	ЛОЖЬ                  КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС";
			
	ИначеЕсли ИмяТаблицы = "Документ.ЗаказКлиента" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	Товары.ДатаОтгрузки                     КАК ДатаОтгрузки,
			|	Товары.Отменено                         КАК Отменено,
			|	Товары.Склад                            КАК Склад,
			|	Товары.СрокПоставки                     КАК СрокПоставки,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|ДатаОтгрузки,
			|Отменено,
			|Склад,
			|СрокПоставки";
			
	ИначеЕсли ИмяТаблицы = "Документ.АктВыполненныхРабот" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки                                     КАК НомерСтроки,
			|	Товары.Номенклатура                                    КАК Номенклатура,
			|	Товары.Характеристика                                  КАК Характеристика,
			|	Товары.Цена                                            КАК Цена,
			|	Товары.ВидЦены                                         КАК ВидЦены,
			|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
			|	Товары.СтавкаНДС                                       КАК СтавкаНДС,
			|	Товары.КлючСвязи                                       КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки                     КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки                       КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки                             КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                               КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	0                                                      КАК СрокПоставки,
			|	ЛОЖЬ                                                   КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Услуги";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|СтавкаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки";
			
	ИначеЕсли ИмяТаблицы = "Документ.РеализацияТоваровУслуг" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	Товары.Склад                            КАК Склад,
			|	Товары.СрокПоставки                     КАК СрокПоставки,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|Склад,
			|СрокПоставки";
			
	ИначеЕсли ИмяТаблицы = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.Цена                             КАК Цена,
			|	Товары.ВидЦены                          КАК ВидЦены,
			|	Товары.Упаковка                         КАК Упаковка,
			|	Товары.СтавкаНДС                        КАК СтавкаНДС,
			|	Товары.КлючСвязи                        КАК КлючСвязи,
			|	Товары.ПроцентАвтоматическойСкидки      КАК ПроцентАвтоматическойСкидки,
			|	Товары.СуммаАвтоматическойСкидки        КАК СуммаАвтоматическойСкидки,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	Товары.Цена - Товары.Цена * (Товары.ПроцентАвтоматическойСкидки + Товары.ПроцентРучнойСкидки) / 100 КАК ЦенаСоСкидкой,
			|	Товары.ДатаОтгрузки                     КАК ДатаОтгрузки,
			|	Товары.Отменено                         КАК Отменено,
			|	Товары.СрокПоставки                     КАК СрокПоставки,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "ЗаменяющиеТовары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|ВидЦены,
			|Упаковка,
			|СтавкаНДС,
			|КлючСвязи,
			|ПроцентАвтоматическойСкидки,
			|СуммаАвтоматическойСкидки,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки,
			|ДатаОтгрузки,
			|Отменено,
			|СрокПоставки";
			
	ИначеЕсли ИмяТаблицы = "Документ.ВозвратТоваровОтКлиента" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки    КАК НомерСтроки,
			|	Товары.Номенклатура   КАК Номенклатура,
			|	Товары.Характеристика КАК Характеристика,
			|	Товары.Цена           КАК Цена,
			|	Товары.Упаковка       КАК Упаковка,
			|	Товары.СтавкаНДС      КАК СтавкаНДС,
			|	Товары.Цена           КАК ЦенаСоСкидкой,
			|	0                     КАК СрокПоставки,
			|	ЛОЖЬ                  КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|Цена,
			|Упаковка,
			|СтавкаНДС";
			
	ИначеЕсли ИмяТаблицы = "Документ.ЧекККМ" Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	Товары.НомерСтроки                      КАК НомерСтроки,
			|	Товары.Номенклатура                     КАК Номенклатура,
			|	Товары.Характеристика                   КАК Характеристика,
			|	Товары.ПроцентРучнойСкидки              КАК ПроцентРучнойСкидки,
			|	Товары.СуммаРучнойСкидки                КАК СуммаРучнойСкидки,
			|	0                                       КАК СрокПоставки,
			|	ЛОЖЬ                                    КАК ПроверятьОшибкиЗаполненияСрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаТовары
			|ИЗ
			|	%ИмяТаблицы% КАК Товары
			|	%УсловиеОтбора%
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура,
			|	Характеристика
			|;
			|";
			
		ИмяТабличнойЧасти = "Товары";
		ИменаКолонок = "НомерСтроки,
			|Номенклатура,
			|Характеристика,
			|ПроцентРучнойСкидки,
			|СуммаРучнойСкидки";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИмяТаблицы%", ?(ПоСсылке, ИмяТаблицы + "." + ИмяТабличнойЧасти, "&Товары"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%УсловиеОтбора%", ?(ПоСсылке, "ГДЕ Товары.Ссылка = &ДокументПродажи", ""));
	
	Если ПоСсылке Тогда
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
	Иначе
		ПараметрыЗапроса.Вставить("Товары",  ДокументПродажи[ИмяТабличнойЧасти].Выгрузить(, ИменаКолонок));
	КонецЕсли;
	
КонецПроцедуры

// Формирует запрос к тч ЦеновыеГруппы документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка -  текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЦеновыеГруппыДокументаПродажи(ТекстЗапроса,
	                                                                      ПараметрыЗапроса,
	                                                                      ДокументПродажи,
	                                                                      ПоСсылке = Ложь,
	                                                                      ИмяТаблицы = "")
	
	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЦеновыеГруппы.НомерСтроки          КАК НомерСтроки,
			|	ЦеновыеГруппы.ЦеноваяГруппа        КАК ЦеноваяГруппа,
			|	ЦеновыеГруппы.ВидЦен               КАК ВидЦен,
			|	ЦеновыеГруппы.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидки,
			|	ЦеновыеГруппы.ПроцентРучнойНаценки КАК ПроцентРучнойНаценки,
			|	ЦеновыеГруппы.СрокПоставки         КАК СрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЦеновыеГруппы
			|ИЗ
			|" + ИмяТаблицы + ".ЦеновыеГруппы КАК ЦеновыеГруппы
			|ГДЕ
			|	ЦеновыеГруппы.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	ЦеноваяГруппа
			|;
			|";
			
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
			
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЦеновыеГруппы.НомерСтроки          КАК НомерСтроки,
			|	ЦеновыеГруппы.ЦеноваяГруппа        КАК ЦеноваяГруппа,
			|	ЦеновыеГруппы.ВидЦен               КАК ВидЦен,
			|	ЦеновыеГруппы.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидки,
			|	ЦеновыеГруппы.ПроцентРучнойНаценки КАК ПроцентРучнойНаценки,
			|	ЦеновыеГруппы.СрокПоставки         КАК СрокПоставки
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЦеновыеГруппы
			|ИЗ
			|	&ЦеновыеГруппы КАК ЦеновыеГруппы
			|ИНДЕКСИРОВАТЬ ПО
			|	ЦеноваяГруппа
			|;
			|";
			
		ПараметрыЗапроса.Вставить("ЦеновыеГруппы", ДокументПродажи.ЦеновыеГруппы.Выгрузить(,"НомерСтроки,ЦеноваяГруппа,ВидЦен, ПроцентРучнойСкидки, ПроцентРучнойНаценки, СрокПоставки"));
			
	КонецЕсли;
	

КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплатыДокументаПродажи(ТекстЗапроса,
	                                                                    ПараметрыЗапроса,
	                                                                    ДокументПродажи,
	                                                                    ПоСсылке = Ложь,
	                                                                    ИмяТаблицы = "")

	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|" + ИмяТаблицы + ".ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.ДатаПлатежа     КАК ДатаПлатежа,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты
			|ИЗ
			|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|;
			|";
	
		ПараметрыЗапроса.Вставить("ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты.Выгрузить(, "НомерСтроки,ДатаПлатежа,ВариантОплаты,ПроцентПлатежа"));
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты соглашения и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияИндивидуального(ТекстЗапроса,
	                                                                    ПараметрыЗапроса,
	                                                                    ДокументПродажи,
	                                                                    ПоСсылке = Ложь,
	                                                                    ИмяТаблицы = "")

	Если ПоСсылке Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашения
			|ИЗ
			|" + ИмяТаблицы + ".ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
			
		
		Иначе
			
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашения
			|ИЗ
			|	&ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|;
			|";
	
		ПараметрыЗапроса.Вставить("ЭтапыГрафикаОплаты", ДокументПродажи.ЭтапыГрафикаОплаты.Выгрузить(, "НомерСтроки,Сдвиг,ВариантОплаты,ПроцентПлатежа"));
		
	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос к тч ЭтапыОплаты соглашения и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаЭтапыОплатыСоглашенияТипового(ТекстЗапроса,
	                                                                    ПараметрыЗапроса,
	                                                                    ДокументПродажи,
	                                                                    ПоСсылке = Ложь,
	                                                                    ИмяТаблицы = "")

	Если ПоСсылке Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашенияОснования
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = ВЫРАЗИТЬ(&ДокументПродажи КАК Справочник.СоглашенияСКлиентами).Соглашение
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|";
			
			ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);

	Иначе
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ЭтапыГрафикаОплаты.НомерСтроки     КАК НомерСтроки,
			|	ЭтапыГрафикаОплаты.ВариантОплаты   КАК ВариантОплаты,
			|	ЭтапыГрафикаОплаты.Сдвиг           КАК Сдвиг,
			|	ЭтапыГрафикаОплаты.ПроцентПлатежа  КАК ПроцентПлатежа
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаЭтапыОплатыСоглашенияОснования
			|ИЗ
			|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты  КАК ЭтапыГрафикаОплаты
			|ГДЕ
			|	ЭтапыГрафикаОплаты.Ссылка = &Соглашение
			|;
			|";
	
			ПараметрыЗапроса.Вставить("Соглашение", ДокументПродажи.Соглашение);

	КонецЕсли;
		
КонецПроцедуры

// Формирует запрос к тч СкидкиНаценки документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса     - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ПараметрыЗапроса - Структура - структура, содержащая параметры запроса
// ДокументПродажи  - ДокументОбъект, ДокументСсылка , документ, к которому необходимо сформировать запрос
// ПоСсылке         - Булево - флаг, если Истина проверка осуществляется по ссылке на объект
// ИмяТаблицы       - Строка - имя таблицы документа, к которой необходимо сформировать запрос
//
Процедура СформироватьЗапросВременнаяТаблицаСкидкиНаценкиДокументаПродажи(ТекстЗапроса,
	                                                                      ПараметрыЗапроса,
	                                                                      ДокументПродажи,
	                                                                      ПоСсылке = Ложь,
	                                                                      ИмяТаблицы = "")

	Если ПоСсылке Тогда
			
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	СкидкиНаценки.НомерСтроки   КАК НомерСтроки,
			|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаСкидкиНаценки
			|ИЗ
			|" + ИмяТаблицы + ".СкидкиНаценки КАК СкидкиНаценки
			|ГДЕ
			|	СкидкиНаценки.Ссылка = &ДокументПродажи
			|ИНДЕКСИРОВАТЬ ПО
			|	СкидкаНаценка
			|;
			|";
				
		ПараметрыЗапроса.Вставить("ДокументПродажи", ДокументПродажи);
			
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	СкидкиНаценки.НомерСтроки   КАК НомерСтроки,
			|	СкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка
			|ПОМЕСТИТЬ
			|	ВременнаяТаблицаСкидкиНаценки
			|ИЗ
			|	&СкидкиНаценки КАК СкидкиНаценки
			|ИНДЕКСИРОВАТЬ ПО
			|	СкидкаНаценка
			|;
			|";
				
		ПараметрыЗапроса.Вставить("СкидкиНаценки", ДокументПродажи.СкидкиНаценки.Выгрузить(, "НомерСтроки,СкидкаНаценка"));
			
	КонецЕсли;
		

КонецПроцедуры

// Формирует запрос к курсам валют на дату документа и помещает во временную таблицу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВременнаяТаблицаКурсыВалют(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта    КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс      КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ПОМЕСТИТЬ
		|	ВременнаяТаблицаКурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыВалютСрезПоследних
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|";

КонецПроцедуры

// Формирует запрос по элементам справочника "Склады" и помещает во временную таблицу
// К корректным складам относятся:
// 		- Склад, равный складу соглашения
// 		- Склады, входящие в иерархию склада соглашения
//
Процедура СформироватьЗапросВременнаяТаблицаСкладыКорректныеПоСоглашению(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
	|ВЫБРАТЬ
	|	Склады.Ссылка КАК Склад
	|ПОМЕСТИТЬ СкладыКорректныеПоСоглашению
	|ИЗ
	|	Справочник.Склады КАК Склады
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокумента
	|ПО
	|	ИСТИНА
	|ГДЕ
	|	ВременнаяТаблицаДокумента.Соглашение.Склад ЕСТЬ НЕ NULL
	|	И ВременнаяТаблицаДокумента.Соглашение.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|	И Склады.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ВременнаяТаблицаДокумента.Соглашение.Склад
	|			ИЗ
	|				ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокумента)
	|;
	|";

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования запросов проверки корректности заполнения документов.

// Формирует запрос для проверки наличия дублей в тч Товары документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеДублейТоваровДокументаПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументТовары.НомерСтроки)    КАК НомерСтроки,
		|	ДокументТовары.Номенклатура             КАК Номенклатура,
		|	ДокументТовары.Характеристика           КАК Характеристика
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|СГРУППИРОВАТЬ ПО
		|	ДокументТовары.Номенклатура,
		|	ДокументТовары.Характеристика
		|ИМЕЮЩИЕ 
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки наличия дублей в тч СкидкиНаценки документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеДублейСкидокНаценокДокументаПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументСкидкиНаценки.НомерСтроки) КАК НомерСтроки,
		|	ДокументСкидкиНаценки.СкидкаНаценка         КАК СкидкаНаценка
		|ИЗ
		|	ВременнаяТаблицаСкидкиНаценки КАК ДокументСкидкиНаценки
		|СГРУППИРОВАТЬ ПО
		|	ДокументСкидкиНаценки.СкидкаНаценка
		|ИМЕЮЩИЕ 
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки наличия дублей в тч ЦеновыеГруппы документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеДублейЦеновыхГруппДокументаПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	МАКСИМУМ(ДокументЦеновыеГруппы.НомерСтроки) КАК НомерСтроки,
		|	ДокументЦеновыеГруппы.ЦеноваяГруппа         КАК ЦеноваяГруппа
		|ИЗ
		|	ВременнаяТаблицаЦеновыеГруппы КАК ДокументЦеновыеГруппы
		|СГРУППИРОВАТЬ ПО
		|	ДокументЦеновыеГруппы.ЦеноваяГруппа
		|ИМЕЮЩИЕ 
		|	КОЛИЧЕСТВО (*) > 1
		|;
		|";

КонецПроцедуры

// Формирует текст запроса для проверки заполненности склада
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЗаполненияСклада(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьОшибкиЗаполненияСклад
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаДокументПродажи.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки заполенности реквизита "Склад" в строках табличной части товаров
// Проверка должна выполняться только если:
// 		- в строке табличной части выбрана номенклатура типа товар;
// 		- в шапке документа указан заполнен реквизит "Склад".
//
Процедура СформироватьЗапросКорректностьЗаполненияСкладовВТабличнойЧастиТовары(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументПродажи.Склад.ЭтоГруппа
		|	И ВременнаяТаблицаДокументПродажи.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|	И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|	И ВременнаяТаблицаТовары.Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки отсутствия подакцизного товара строках табличной части товаров
// Проверка должна выполняться только если:
// - в строке табличной части выбрана номенклатура типа товар;
// - в шапке выбран режим налогообложения ЕНВД.
//
Процедура СформироватьЗапросКорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаТовары.Номенклатура.ПодакцизныйТовар
		|	И ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности количества этапов оплаты в соглашении
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьКоличестваЭтаповОплатыСоглашения(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашения) <> СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашенияОснования)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыОплатыСоглашения,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашения) КАК КоличествоЭтаповСоглашения,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповСоглашенияОснования) КАК КоличествоЭтаповСоглашенияОснования
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыСоглашения.НомерСтроки) КАК КоличествоЭтаповСоглашения,
			|		NULL КАК КоличествоЭтаповСоглашенияОснования
			|	ИЗ
			|		ВременнаяТаблицаЭтапыОплатыСоглашения КАК ЭтапыСоглашения
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповСоглашения,
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыСоглашенияОснования.НомерСтроки) КАК КоличествоЭтаповСоглашенияОснования
			|	ИЗ
			|		ВременнаяТаблицаЭтапыОплатыСоглашенияОснования КАК ЭтапыСоглашенияОснования
			|	) КАК ВложенныйЗапрос
			|;
			|";
			
КонецПроцедуры

// Формирует запрос для проверки корректности заполнения этапов оплаты в соглашении
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЭтаповОплатыСоглашения(ТекстЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.НомерСтроки ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтапШаблонаОтсутствует,
			|	ЭтапыДокумента.НомерСтроки КАК НомерСтроки,
			|	ЭтапыДокумента.ВариантОплаты КАК ВариантОплаты,
			|	ЭтапыДокумента.Сдвиг КАК Сдвиг,
			|	ЭтапыДокумента.ПроцентПлатежа КАК ПроцентПлатежа,
			|	ЭтапыШаблона.НомерСтроки КАК НомерСтрокиШаблона,
			|	ЭтапыШаблона.ВариантОплаты КАК ВариантОплатыШаблона,
			|	ЭтапыШаблона.ПроцентПлатежа КАК ПроцентПлатежаШаблона,
			|	ЭтапыШаблона.Сдвиг КАК СдвигШаблона,
			|	ВЫБОР
			|		КОГДА ЭтапыДокумента.ВариантОплаты <> ЭтапыШаблона.ВариантОплаты
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВариантаОплаты
			|ИЗ
			|	ВременнаяТаблицаЭтапыОплатыСоглашения КАК ЭтапыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыШаблона
			|		ПО ЭтапыДокумента.НомерСтроки = ЭтапыШаблона.НомерСтроки
			|			И ЭтапыШаблона.Ссылка В (ВЫБРАТЬ ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение ИЗ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|";

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования запросов проверки соответствия документов условиям продаж.

// Формирует запрос для проверки шапки документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ИмяТаблицы   - Строка - имя таблицы документа, к которой необходимо сформировать проверочный запрос
//
Процедура СформироватьЗапросШапкаДокументаПродажи(ТекстЗапроса, ИмяТаблицы)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Партнер ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Типовое = ЛОЖЬ И
		|			ДокументПродажи.Партнер <> СоглашениеСКлиентом.Партнер
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПартнер,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Организация ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) И
		|			ДокументПродажи.Организация <> СоглашениеСКлиентом.Организация
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОрганизация,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ЦенаВключаетНДС ЕСТЬ НЕ NULL И
		|			ДокументПродажи.Валюта <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) И
		|			ДокументПродажи.ЦенаВключаетНДС <> СоглашениеСКлиентом.ЦенаВключаетНДС
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦенаВключаетНДС,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.НалогообложениеНДС ЕСТЬ НЕ NULL И
		|			ДокументПродажи.НалогообложениеНДС <> СоглашениеСКлиентом.НалогообложениеНДС
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияНалогообложениеНДС,
		|	ЕСТЬNULL(СоглашениеСКлиентом.Склад.ЭтоГруппа, ЛОЖЬ) КАК СкладСоглашениеЕстьГруппа,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Склад ЕСТЬ НЕ NULL
		|			И СоглашениеСКлиентом.Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			И СкладыКорректныеПоСоглашению.Склад ЕСТЬ NULL
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСклад,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ВозвращатьМногооборотнуюТару <> &ВозвратМногооборотнойТары
		|		ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару,
		|" + ?(ИмяТаблицы = "Документ.РеализацияТоваровУслуг","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияГрафикОплаты,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Валюта ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ВалютаВзаиморасчетов <> СоглашениеСКлиентом.Валюта
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВалюта,
		|	ЛОЖЬ КАК ЕстьОшибкиДатаПлатежа,
		|	ИСТИНА КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|","
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ГрафикОплаты ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.ГрафикОплаты <> ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка) И
		|			ДокументПродажи.ГрафикОплаты <> СоглашениеСКлиентом.ГрафикОплаты И
		|			(ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|			 ИЛИ ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка)
		|			 ИЛИ ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияГрафикОплаты,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВалютаВзаиморасчетов,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Валюта ЕСТЬ НЕ NULL И
		|			ДокументПродажи.Валюта <> СоглашениеСКлиентом.Валюта
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВалюта,
		|	ЛОЖЬ КАК ЕстьОшибкиДатаПлатежа,
		|	ЛОЖЬ КАК ЕстьОшибкиДатаВозвратаМногооборотнойТары,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.СрокВозвратаМногооборотнойТары <> СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары,
		|") + "
		|
		|	// Проверки только для торговых соглашений
		|
		|" + ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами","
		|
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ВидЦен ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ВидЦен <> СоглашениеСКлиентом.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦен,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.СегментНоменклатуры ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.СегментНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) И
		|			ДокументПродажи.СегментНоменклатуры <> СоглашениеСКлиентом.СегментНоменклатуры
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСегментНоменклатуры,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Регулярное ЕСТЬ НЕ NULL И
		|			ДокументПродажи.Регулярное <> СоглашениеСКлиентом.Регулярное
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРегулярное,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Период ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Регулярное = ИСТИНА И 
		|			ДокументПродажи.Период <> СоглашениеСКлиентом.Период
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПериод,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.КоличествоПериодов ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Регулярное = ИСТИНА И
		|			ДокументПродажи.КоличествоПериодов < СоглашениеСКлиентом.КоличествоПериодов
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКоличествоПериодов,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ИспользуетсяВРаботеТорговыхПредставителей <> СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ДоступноВнешнимПользователям ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ДоступноВнешнимПользователям <> СоглашениеСКлиентом.ДоступноВнешнимПользователям
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияДоступноВнешнимПользователям,
		|	ВЫБОР
		|		КОГДА Не ДокументПродажи.Типовое И
		|			СоглашениеСКлиентом.ДатаНачалаДействия ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.ДатаНачалаДействия <> ДАТАВРЕМЯ(1,1,1) И
		|			СоглашениеСКлиентом.ДатаНачалаДействия > ДокументПродажи.ДатаНачалаДействия
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияДатаНачалаДействия,
		|	ВЫБОР
		|		КОГДА Не ДокументПродажи.Типовое И
		|			СоглашениеСКлиентом.ДатаОкончанияДействия ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.ДатаОкончанияДействия <> ДАТАВРЕМЯ(1,1,1) И
		|			(СоглашениеСКлиентом.ДатаОкончанияДействия < ДокументПродажи.ДатаОкончанияДействия
		|			ИЛИ ДокументПродажи.ДатаОкончанияДействия = ДАТАВРЕМЯ(1,1,1))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияДатаОкончанияДействия,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ПроцентРучнойСкидки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойСкидки > СоглашениеСКлиентом.ПроцентРучнойСкидки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПроцентРучнойСкидки,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ПроцентРучнойНаценки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойНаценки > СоглашениеСКлиентом.ПроцентРучнойНаценки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияПроцентРучнойНаценки,
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.ОграничиватьРучныеСкидки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ОграничиватьРучныеСкидки <> СоглашениеСКлиентом.ОграничиватьРучныеСкидки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.Календарь <> СоглашениеСКлиентом.Календарь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКалендаря,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.ФормаОплаты <> СоглашениеСКлиентом.ФормаОплаты
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияФормыОплатыСоглашения,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.ИспользуютсяДоговорыКонтрагентов <> СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов,
		|	ВЫБОР
		|		КОГДА ДокументПродажи.РассчитыватьДатуВозвратаТарыПоКалендарю <> СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю,
		|	СоглашениеСКлиентом.СегментНоменклатуры                       КАК СегментНоменклатурыСоглашение,
		|	СоглашениеСКлиентом.Регулярное                                КАК РегулярноеСоглашение ,
		|	СоглашениеСКлиентом.Период                                    КАК ПериодСоглашение,
		|	СоглашениеСКлиентом.КоличествоПериодов                        КАК КоличествоПериодовСоглашение,
		|	СоглашениеСКлиентом.ИспользуетсяВРаботеТорговыхПредставителей КАК ИспользуетсяВРаботеТорговыхПредставителейСоглашение,
		|	СоглашениеСКлиентом.ПроцентРучнойСкидки                       КАК ПроцентРучнойСкидки,
		|	СоглашениеСКлиентом.ПроцентРучнойНаценки                      КАК ПроцентРучнойНаценки,
		|	СоглашениеСКлиентом.Календарь                                 КАК Календарь,
		|	СоглашениеСКлиентом.ФормаОплаты                               КАК ФормаОплатыСоглашенияСКлиентом,
		|	СоглашениеСКлиентом.ДоступноВнешнимПользователям              КАК ДоступноВнешнимПользователям,
		|	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов          КАК ИспользуютсяДоговорыКонтрагентов, 
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияВидЦен,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСегментНоменклатуры,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияРегулярное,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПериод,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКоличествоПериодов,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияДоступноВнешнимПользователям,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияДатаНачалаДействия,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияДатаОкончанияДействия,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПроцентРучнойСкидки,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияПроцентРучнойНаценки,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКалендаря,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияФормыОплатыСоглашения,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю,
		|	NULL КАК СегментНоменклатурыСоглашение,
		|	NULL КАК РегулярноеСоглашение,
		|	NULL КАК ПериодСоглашение,
		|	NULL КАК КоличествоПериодовСоглашение,
		|	NULL КАК ИспользуетсяВРаботеТорговыхПредставителейСоглашение,
		|	NULL КАК ПроцентРучнойСкидки,
		|	NULL КАК ПроцентРучнойНаценки,
		|	NULL КАК Календарь,
		|	NULL КАК ФормаОплатыСоглашенияСКлиентом,
		|	ЛОЖЬ КАК ИспользуютсяДоговорыКонтрагентов,
		|") + "
		|
		|	// Проверки только для соглашений и коммерческих предложений
		|
		|" + ?(ИмяТаблицы = "Справочник.СоглашенияСКлиентами" Или ИмяТаблицы = "Документ.КоммерческоеПредложениеКлиенту","
		|
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.СрокПоставки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.СрокПоставки < СоглашениеСКлиентом.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		|	СоглашениеСКлиентом.СрокПоставки КАК СрокПоставкиСоглашение,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияФормыОплаты,
		|	NULL КАК ФормаОплатыГрафик,
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		|	NULL КАК СрокПоставкиСоглашение,
		|	ВЫБОР
		|		КОГДА
		|			ДокументПродажи.ГрафикОплаты.ФормаОплаты <> ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)
		|			И ДокументПродажи.ГрафикОплаты.ФормаОплаты <> ДокументПродажи.ФормаОплаты
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияФормыОплаты,
		|	СоглашениеСКлиентом.ГрафикОплаты.ФормаОплаты КАК ФормаОплатыГрафик,
		|") + "
		|
		|	// Проверки только для не коммерческих предложений
		|
		|" + ?(ИмяТаблицы <> "Документ.КоммерческоеПредложениеКлиенту","
		|" + ?(ИмяТаблицы <> "Документ.ЗаявкаНаВозвратТоваровОтКлиента","
		|
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСКлиентом.ХозяйственнаяОперация ЕСТЬ NULL
		|			И НЕ ДокументПродажи.ХозяйственнаяОперация ЕСТЬ NULL
		|			И ДокументПродажи.ХозяйственнаяОперация <> СоглашениеСКлиентом.ХозяйственнаяОперация
		|			И ДокументПродажи.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиентуРеглУчет)
		|			И СоглашениеСКлиентом.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|","
		|	ВЫБОР
		|		КОГДА НЕ СоглашениеСКлиентом.ХозяйственнаяОперация ЕСТЬ NULL
		|			И НЕ ДокументПродажи.ХозяйственнаяОперация ЕСТЬ NULL
		|			И ((ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера)
		|				И СоглашениеСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту))
		|				ИЛИ
		|				(ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровОтКлиента)
		|				И СоглашениеСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию))
		|				ИЛИ
		|				(ДокументПродажи.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя)
		|				И СоглашениеСКлиентом.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|") + "
		|	ВЫБОР
		|		КОГДА СоглашениеСКлиентом.Контрагент ЕСТЬ НЕ NULL И
		|			СоглашениеСКлиентом.Типовое = ЛОЖЬ И
		|			СоглашениеСКлиентом.Контрагент <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) И
		|			ДокументПродажи.Контрагент <> СоглашениеСКлиентом.Контрагент
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияКонтрагент,
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияХозяйственнаяОперация,
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияКонтрагент,
		|") + "
		|	ДокументПродажи.Соглашение,
		|	СоглашениеСКлиентом.Партнер                                 КАК ПартнерСоглашение,
		|	СоглашениеСКлиентом.Контрагент                              КАК КонтрагентСоглашение,
		|	СоглашениеСКлиентом.Организация                             КАК ОрганизацияСоглашение,
		|	СоглашениеСКлиентом.Валюта                                  КАК ВалютаСоглашение,
		|	СоглашениеСКлиентом.Склад                                   КАК СкладСоглашение,
		|	СоглашениеСКлиентом.ВидЦен                                  КАК ВидЦенСоглашение,
		|	СоглашениеСКлиентом.ЦенаВключаетНДС                         КАК ЦенаВключаетНДССоглашение,
		|	СоглашениеСКлиентом.НалогообложениеНДС                      КАК НалогообложениеНДССоглашение,
		|	СоглашениеСКлиентом.ХозяйственнаяОперация                   КАК ХозяйственнаяОперацияСоглашение,
		|	СоглашениеСКлиентом.Статус                                  КАК СтатусСоглашение,
		|	СоглашениеСКлиентом.ДатаНачалаДействия                      КАК ДатаНачалаДействияСоглашение,
		|	СоглашениеСКлиентом.ДатаОкончанияДействия                   КАК ДатаОкончанияДействияСоглашение,
		|	СоглашениеСКлиентом.ГрафикОплаты                            КАК ГрафикОплатыСоглашение,
		|	СоглашениеСКлиентом.СрокВозвратаМногооборотнойТары          КАК СрокВозвратаМногооборотнойТары,
		|	СоглашениеСКлиентом.РассчитыватьДатуВозвратаТарыПоКалендарю КАК РассчитыватьДатуВозвратаТарыПоКалендарю,
		|	&ЭтоСоглашение                                              КАК ЭтоСоглашение,
		|	&ВозвратМногооборотнойТары                                  КАК ВозвратМногооборотнойТары
		|ИЗ
		|	ВременнаяТаблицаДокументПродажи           КАК ДокументПродажи
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами              КАК СоглашениеСКлиентом
		|ПО
		|	ДокументПродажи.Соглашение = СоглашениеСКлиентом.Ссылка
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	СкладыКорректныеПоСоглашению КАК СкладыКорректныеПоСоглашению
		|ПО 
		|	ДокументПродажи.Склад = СкладыКорректныеПоСоглашению.Склад
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки тч Товары документа продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
// ИмяТаблицы   - Строка - имя таблицы документа, к которой необходимо сформировать проверочный запрос
//
Процедура СформироватьЗапросТоварыДокументаПродажи(ТекстЗапроса, ИмяТаблицы)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	&ЭтоСоглашение                              КАК ЭтоСоглашение,
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаТовары.Цена                 КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			(СоглашениеТовары.Номенклатура ЕСТЬ НЕ NULL)
		|		ТОГДА
		|			ВЫРАЗИТЬ(ЕСТЬNULL(СоглашениеТовары.Цена,0)
		|			/ ЕстьNULL(СоглашениеТовары.Упаковка.Коэффициент,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА
		|					ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					СоглашениеШапка.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыДокументаПродажи.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыДокументаПродажи.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.Курс, 0) > 0
		|						ТОГДА
		|							(КурсыВалютыСоглашения.Курс * КурсыВалютыДокументаПродажи.Кратность)
		|							/ (КурсыВалютыДокументаПродажи.Курс * КурсыВалютыСоглашения.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|		ИНАЧЕ
		|			0
		|	КОНЕЦ КАК ЦенаСоглашение,
		|
		|	ВЫБОР
		|
		| // ВИД ЦЕНЫ И ЦЕНА В СОГЛАШЕНИИ НЕ ОПРЕДЕЛЕНЫ
		|
		|		КОГДА
		|			СоглашениеШапка.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И (СоглашениеТовары.ВидЦены ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|			И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
		|			И (СоглашениеТовары.Номенклатура ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.Цена = 0)
		|			
		|		ТОГДА
		|			ИСТИНА
		|
		| // ВИД ЦЕНЫ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ С ВИДОМ ЦЕН В ТЧ СОГЛАШЕНИЯ ЦЕНОВЫЕ ГРУППЫ
		|
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|			И ВременнаяТаблицаТовары.ВидЦены <> СоглашениеЦеновыеГруппы.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|
		| // ВИД ЦЕНЫ В ТЧ ДОКУМЕНТА СРАВНИВАЕМ С ВИДОМ ЦЕНЫ В ТЧ СОГЛАШЕНИЯ ТОВАРЫ
		|
		|		КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
		|			И ВременнаяТаблицаТовары.ВидЦены <> СоглашениеТовары.ВидЦены
		|		ТОГДА
		|			ИСТИНА
		|
		| // ВИД ЦЕН В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ С ВИДОМ ЦЕН В ШАПКЕ СОГЛАШЕНИЯ
		|
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка) ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|			И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			И ВременнаяТаблицаТовары.ВидЦены <> СоглашениеШапка.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦены,
		|
		|	ВЫБОР
		|
		| // СРОК ПОСТАВКИ НЕ ПРОВЕРЯЕТСЯ
		|		КОГДА
		|			НЕ ВременнаяТаблицаТовары.ПроверятьОшибкиЗаполненияСрокПоставки
		|		ТОГДА
		|			ЛОЖЬ
		|
		| // СРОК ПОСТАВКИ В СОГЛАШЕНИИ НЕ ОПРЕДЕЛЕН
		|
		|		КОГДА
		|			СоглашениеШапка.СрокПоставки = 0
		|			И (СоглашениеТовары.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И (СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеЦеновыеГруппы.СрокПоставки = 0)
		|			
		|		ТОГДА
		|			ИСТИНА
		|
		| // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ТЧ СОГЛАШЕНИЯ ЦЕНОВЫЕ ГРУППЫ
		|
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ НЕ NULL И СоглашениеЦеновыеГруппы.СрокПоставки > 0
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеЦеновыеГруппы.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|
		| // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ТЧ СОГЛАШЕНИЯ ТОВАРЫ
		|
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ НЕ NULL И СоглашениеТовары.СрокПоставки > 0)
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеТовары.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|
		| // СРОК ПОСТАВКИ В ТЧ ДОКУМЕНТА ТОВАРЫ СРАВНИВАЕМ СО СРОКОМ ПОСТАВКИ В ШАПКЕ СОГЛАШЕНИЯ
		|
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И (СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ NULL ИЛИ СоглашениеЦеновыеГруппы.СрокПоставки = 0)
		|			И СоглашениеШапка.СрокПоставки <> 0
		|			И ВременнаяТаблицаТовары.СрокПоставки < СоглашениеШапка.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		|	ВЫБОР
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ НЕ NULL
		|			И СоглашениеЦеновыеГруппы.СрокПоставки > 0
		|		ТОГДА
		|			СоглашениеЦеновыеГруппы.СрокПоставки
		|		КОГДА (СоглашениеТовары.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеТовары.СрокПоставки = 0)
		|			И (СоглашениеЦеновыеГруппы.СрокПоставки ЕСТЬ NULL
		|			ИЛИ СоглашениеЦеновыеГруппы.СрокПоставки = 0)
		|		ТОГДА
		|			СоглашениеШапка.СрокПоставки
		|		ИНАЧЕ
		|			СоглашениеТовары.СрокПоставки
		|	КОНЕЦ КАК СрокПоставкиСоглашение,
		|
		|	ВременнаяТаблицаТовары.ВидЦены КАК ВидЦены,
		|	ВЫБОР
		|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
		|		ТОГДА
		|			СоглашениеЦеновыеГруппы.ВидЦен
		|		КОГДА	(СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
		|			ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
		|			И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
		|		ТОГДА
		|			СоглашениеШапка.ВидЦен
		|		ИНАЧЕ
		|			СоглашениеТовары.ВидЦены
		|	КОНЕЦ КАК ВидЦеныСоглашение,
		|	ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС КАК СтавкаНДСНоменклатура,
		|	ВЫБОР
		|		КОГДА (СоглашениеТовары.Номенклатура ЕСТЬ НЕ NULL) И
		|		СоглашениеТовары.Цена > 0 И
		|		ВременнаяТаблицаТовары.Цена <
		|		ВЫРАЗИТЬ(ЕСТЬNULL(СоглашениеТовары.Цена,0)
		|		/ ЕстьNULL(СоглашениеТовары.Упаковка.Коэффициент,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА
		|					ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					СоглашениеШапка.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыДокументаПродажи.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыДокументаПродажи.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыСоглашения.Курс, 0) > 0
		|						ТОГДА 
		|							(КурсыВалютыСоглашения.Курс * КурсыВалютыДокументаПродажи.Кратность)
		|							/ (КурсыВалютыДокументаПродажи.Курс * КурсыВалютыСоглашения.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦена,
		|" + ?(ИмяТаблицы <> "Справочник.СоглашенияСКлиентами","
		|	ВЫБОР
		|		КОГДА 
		|			ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) 
		|			И &ВозвратМногооборотнойТары
		|		ТОГДА
		|			ЛОЖЬ
		|		КОГДА
		|			ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
		|			И ВременнаяТаблицаТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			(ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
		|			ИЛИ ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД))
		|			И ВременнаяТаблицаТовары.СтавкаНДС <> ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|			И ВременнаяТаблицаТовары.СтавкаНДС <> ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияНалогообложениеНДС,
		|	ВременнаяТаблицаДокументПродажи.НалогообложениеНДС КАК НалогообложениеНДС,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
		|		ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|		КОГДА
		|			ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС)
		|			ИЛИ ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
		|		ТОГДА
		|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|		КОГДА
		|			ВременнаяТаблицаДокументПродажи.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|		ТОГДА
		|			ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС
		|	КОНЕЦ КАК СтавкаНДС
		|","
		|	ЛОЖЬ КАК ЕстьОшибкиЗаполненияНалогообложениеНДС,
		|	ВременнаяТаблицаДокументПродажи.НалогообложениеНДС КАК НалогообложениеНДС,
		|	NULL                                               КАК СтавкаНДС
		|") + "
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|
		|// СОЕДИНЕНИЯ С ТОРГОВЫМ СОГЛАШЕНИЕМ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Соглашение = СоглашениеТовары.Ссылка
		|			И ВременнаяТаблицаТовары.Номенклатура = СоглашениеТовары.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = СоглашениеТовары.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Соглашение = СоглашениеЦеновыеГруппы.Ссылка
		|			И ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Соглашение = СоглашениеШапка.Ссылка
		|
		|/////////////////////////////////////////////////////////////////////////////
		|// СОЕДИНЕНИЯ С КУРСАМИ ВАЛЮТ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыДокументаПродажи
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Валюта = КурсыВалютыДокументаПродажи.Валюта
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыСоглашения
		|		ПО
		|			СоглашениеШапка.Валюта = КурсыВалютыСоглашения.Валюта
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
КонецПроцедуры

// Формирует запрос для проверки соответствия тч СкидкиНаценки условиям продаж
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросСоответствиеСкидокНаценокУсловиямПродаж(ТекстЗапроса)

		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВложенныйЗапрос.СкидкаНаценка        КАК СкидкаНаценка,
			|	МИНИМУМ(ВложенныйЗапрос.НомерСтроки) КАК НомерСтроки,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(ВложенныйЗапрос.СкидкаВТекущемДокументе) = 0
			|			И КОЛИЧЕСТВО(ВложенныйЗапрос.СкидкаВТорговомСоглашении) <> 0 ТОГДА
			|			ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ КАК ОтсутствуетСкидкаНаценкаВДокументе,
			|	ВЫБОР
			|		КОГДА КОЛИЧЕСТВО(ВложенныйЗапрос.СкидкаВТекущемДокументе) <> 0
			|			И КОЛИЧЕСТВО(ВложенныйЗапрос.СкидкаВТорговомСоглашении) = 0 ТОГДА
			|			ИСТИНА
			|		ИНАЧЕ
			|			ЛОЖЬ
			|	КОНЕЦ КАК ЛишняяСкидкаНаценкаВДокументе
			|ИЗ
			|	(ВЫБРАТЬ
			|		ДокументПродажиСкидкиНаценки.СкидкаНаценка  КАК СкидкаНаценка,
			|		ДокументПродажиСкидкиНаценки.НомерСтроки    КАК НомерСтроки,
			|		1                                           КАК СкидкаВТекущемДокументе,
			|		NULL                                        КАК СкидкаВТорговомСоглашении
			|	ИЗ
			|		ВременнаяТаблицаСкидкиНаценки КАК ДокументПродажиСкидкиНаценки
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		СоглашениеСКлиентомСкидкиНаценки.СкидкаНаценка КАК СкидкаНаценка,
			|		NULL                                           КАК НомерСтроки,
			|		NULL                                           КАК СкидкаВТекущемДокументе,
			|		1                                              КАК СкидкаВТорговомСоглашении
			|	ИЗ
			|		Справочник.СоглашенияСКлиентами.СкидкиНаценки КАК СоглашениеСКлиентомСкидкиНаценки
			|	ГДЕ
			|		СоглашениеСКлиентомСкидкиНаценки.Ссылка В
			|			(ВЫБРАТЬ
			|				ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение
			|			ИЗ
			|				ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|) КАК ВложенныйЗапрос
			|
			|СГРУППИРОВАТЬ ПО
			|	ВложенныйЗапрос.СкидкаНаценка
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки ВОЗР
			|;
			|";

КонецПроцедуры

// Формирует запрос для проверки соответствия тч ЦеновыеГруппы условиям продаж
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросСоответствиеГруппЦенНоменклатурыУсловиямПродаж(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументПродажи.ЦеноваяГруппа   КАК ЦеноваяГруппа,
		|	ДокументПродажи.ВидЦен          КАК ВидЦен,
		|	Соглашение.ЦеноваяГруппа        КАК ЦеноваяГруппаСоглашение,
		|	Соглашение.ПроцентРучнойСкидки  КАК ПроцентРучнойСкидкиСоглашение,
		|	Соглашение.ПроцентРучнойНаценки КАК ПроцентРучнойНаценкиСоглашение,
		|	Соглашение.ВидЦен               КАК ВидЦенСоглашение,
		|	Соглашение.СрокПоставки         КАК СрокПоставкиСоглашение,
		|	ВЫБОР
		|		КОГДА Соглашение.ЦеноваяГруппа ЕСТЬ NULL
		|			ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЦеновыеГруппы,
		|	ВЫБОР
		|		КОГДА Соглашение.ВидЦен ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ВидЦен <> Соглашение.ВидЦен
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВидЦен,
		
		|	ВЫБОР
		|		КОГДА Соглашение.ПроцентРучнойСкидки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойСкидки > Соглашение.ПроцентРучнойСкидки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРучнойСкидки,
		|	ВЫБОР
		|		КОГДА Соглашение.ПроцентРучнойНаценки ЕСТЬ НЕ NULL И
		|			ДокументПродажи.ПроцентРучнойНаценки > Соглашение.ПроцентРучнойНаценки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияРучнойНаценки,
		
		|	ВЫБОР
		|		КОГДА Соглашение.СрокПоставки ЕСТЬ НЕ NULL И
		|			Соглашение.СрокПоставки <> 0 И
		|			ДокументПродажи.СрокПоставки < Соглашение.СрокПоставки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСрокПоставки,
		
		|	ДокументПродажи.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ВременнаяТаблицаЦеновыеГруппы КАК ДокументПродажи
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК Соглашение
		|ПО 
		|	ДокументПродажи.ЦеноваяГруппа = Соглашение.ЦеноваяГруппа
		|	И Соглашение.Ссылка В
		|			(ВЫБРАТЬ
		|				ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение
		|			ИЗ
		|				ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки принадлежности товаров сегменту номенклатуры
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросПринадлежностьТоваровСегментуНоменклатуры(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                         КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                        КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика                      КАК Характеристика,
		|	ВложенныйЗапрос.НоменклатураСегмента                КАК НоменклатураСегмента,
		|	ВложенныйЗапрос.ХарактеристикаНоменклатурыСегмента  КАК ХарактеристикаНоменклатурыСегмента,
		|	ВложенныйЗапрос.СегментНоменклатуры                 КАК СегментНоменклатуры
		|ИЗ
		|(ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки                          КАК НомерСтроки,
		|	ДокументТовары.Номенклатура                         КАК Номенклатура,
		|	ДокументТовары.Характеристика                       КАК Характеристика,
		|	НоменклатураСегмента.Номенклатура                   КАК НоменклатураСегмента,
		|	НоменклатураСегмента.Характеристика                 КАК ХарактеристикаНоменклатурыСегмента,
		|	ВЫБОР
		|		КОГДА
		|			&ЭтоСоглашение
		|		ТОГДА
		|			ВременнаяТаблицаДокументПродажи.СегментНоменклатуры
		|		ИНАЧЕ
		|			СоглашениеСКлиентом.СегментНоменклатуры
		|	КОНЕЦ КАК СегментНоменклатуры
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|ПО
		|	ИСТИНА
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ПО
		|	СоглашениеСКлиентом.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|ПО
		|	ДокументТовары.Номенклатура = НоменклатураСегмента.Номенклатура
		|	И ДокументТовары.Характеристика = НоменклатураСегмента.Характеристика
		|	И НоменклатураСегмента.Сегмент = 
		|	ВЫБОР
		|		КОГДА
		|			&ЭтоСоглашение
		|		ТОГДА
		|			ВременнаяТаблицаДокументПродажи.СегментНоменклатуры
		|		ИНАЧЕ
		|			СоглашениеСКлиентом.СегментНоменклатуры
		|	КОНЕЦ
		|	И
		|	ВЫБОР
		|		КОГДА
		|			&ЭтоСоглашение
		|		ТОГДА
		|			ВременнаяТаблицаДокументПродажи.СегментНоменклатуры
		|		ИНАЧЕ
		|			СоглашениеСКлиентом.СегментНоменклатуры
		|	КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка)
		|) КАК ВложенныйЗапрос
		|ГДЕ
		|	ВложенныйЗапрос.СегментНоменклатуры <> ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка) И
		|	(ВложенныйЗапрос.НоменклатураСегмента ЕСТЬ NULL
		|	ИЛИ ВложенныйЗапрос.ХарактеристикаНоменклатурыСегмента ЕСТЬ NULL)
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки принадлежности партнера сегменту партнеров
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросПринадлежностьПартнераСегментуПартнеров(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	СоглашениеСКлиентом.СегментПартнеров        КАК СегментПартнеров,
		|	ВЫБОР
		|		КОГДА
		|			СоглашениеСКлиентом.СегментПартнеров = ЗНАЧЕНИЕ(Справочник.СегментыПартнеров.ПустаяСсылка)
		|		ТОГДА
		|			ЛОЖЬ
		|		КОГДА
		|			ПартнерыСегмента.Партнер ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиЗаполненияСегментПартнеров
		|ИЗ
		|	ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		|ПО
		|	СоглашениеСКлиентом.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ПартнерыСегмента            КАК ПартнерыСегмента
		|ПО
		|	ПартнерыСегмента.Сегмент = СоглашениеСКлиентом.СегментПартнеров
		|	И ПартнерыСегмента.Партнер = ВременнаяТаблицаДокументПродажи.Партнер
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для проверки корректности заполнения этапов графика оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВременнаяТаблицаДокументПродажи.СуммаДокумента = 0
			|				ИЛИ ВременнаяТаблицаДокументПродажи.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.НомерСтроки ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтапШаблонаОтсутствует,
			|	ЭтапыДокумента.НомерСтроки КАК НомерСтроки,
			|	ЭтапыДокумента.ВариантОплаты КАК ВариантОплаты,
			|	ЭтапыДокумента.ДатаПлатежа КАК ДатаПлатежа,
			|	ЭтапыДокумента.ПроцентПлатежа КАК ПроцентПлатежа,
			|	ЭтапыШаблона.НомерСтроки КАК НомерСтрокиШаблона,
			|	ЭтапыШаблона.ВариантОплаты КАК ВариантОплатыШаблона,
			|	ЭтапыШаблона.ПроцентПлатежа КАК ПроцентПлатежаШаблона,
			|	ЭтапыШаблона.Сдвиг КАК Сдвиг,
			|	ЭтапыШаблона.Ссылка.Календарь КАК Календарь,
			|	ВременнаяТаблицаДокументПродажи.Дата КАК Дата,
			|	ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
			|			ТОГДА ВЫБОР
			|					КОГДА ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
			|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.Дата, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|					ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|				КОНЕЦ
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.Дата, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|	КОНЕЦ КАК ДатаПлатежаШаблона,
			|	ВЫБОР
			|		КОГДА ЭтапыДокумента.ВариантОплаты <> ЭтапыШаблона.ВариантОплаты
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВариантаОплаты
			|ИЗ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты.Этапы КАК ЭтапыШаблона
			|		ПО (ВременнаяТаблицаДокументПродажи.ГрафикОплаты = ЭтапыШаблона.Ссылка)
			|			И ЭтапыДокумента.НомерСтроки = ЭтапыШаблона.НомерСтроки
			|ГДЕ
			|	&ИспользоватьГрафикиОплаты
			|	И 0 В (
			|	ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки) КАК КоличествоЭтаповГрафика
			|	ИЗ
			|		Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ГрафикиОплатыЭтапы
			|	ГДЕ
			|		ГрафикиОплатыЭтапы.Ссылка В (ВЫБРАТЬ ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение ИЗ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|)
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ВременнаяТаблицаДокументПродажи.СуммаДокумента = 0
			|				ИЛИ ВременнаяТаблицаДокументПродажи.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.НомерСтроки ЕСТЬ NULL 
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтапШаблонаОтсутствует,
			|	ЭтапыДокумента.НомерСтроки КАК НомерСтроки,
			|	ЭтапыДокумента.ВариантОплаты КАК ВариантОплаты,
			|	ЭтапыДокумента.ДатаПлатежа КАК ДатаПлатежа,
			|	ЭтапыДокумента.ПроцентПлатежа КАК ПроцентПлатежа,
			|	ЭтапыШаблона.НомерСтроки КАК НомерСтрокиШаблона,
			|	ЭтапыШаблона.ВариантОплаты КАК ВариантОплатыШаблона,
			|	ЭтапыШаблона.ПроцентПлатежа КАК ПроцентПлатежаШаблона,
			|	ЭтапыШаблона.Сдвиг КАК Сдвиг,
			|	ЭтапыШаблона.Ссылка.Календарь КАК Календарь,
			|	ВременнаяТаблицаДокументПродажи.Дата КАК Дата,
			|	ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
			|	ВЫБОР
			|		КОГДА ЭтапыШаблона.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
			|			ТОГДА ВЫБОР
			|					КОГДА ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки = ДАТАВРЕМЯ(1, 1, 1)
			|						ТОГДА НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.Дата, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|					ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.ЖелаемаяДатаОтгрузки, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|				КОНЕЦ
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(ВременнаяТаблицаДокументПродажи.Дата, ДЕНЬ, ЭтапыШаблона.Сдвиг), ДЕНЬ)
			|	КОНЕЦ КАК ДатаПлатежаШаблона,
			|	ВЫБОР
			|		КОГДА ЭтапыДокумента.ВариантОплаты <> ЭтапыШаблона.ВариантОплаты
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияВариантаОплаты
			|ИЗ
			|	ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ЭтапыШаблона
			|		ПО ЭтапыДокумента.НомерСтроки = ЭтапыШаблона.НомерСтроки
			|			И (ВременнаяТаблицаДокументПродажи.Соглашение.Ссылка = ЭтапыШаблона.Ссылка)
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки
			|;
			|";

КонецПроцедуры

// Формирует запрос для проверки корректности заполнения даты платежа
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьДатыПлатежа(ТекстЗапроса, ПараметрыЗапроса, ДокументПродажи)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(МАКСИМУМ(ВложенныйЗапрос.Дата),День,ЕСТЬNULL(МАКСИМУМ(ВложенныйЗапрос.Сдвиг),0)),День) КАК ДатаПлатежаШаблона,
		|	НАЧАЛОПЕРИОДА(МАКСИМУМ(ВложенныйЗапрос.Дата),День) КАК Дата,
		|	МАКСИМУМ(ВложенныйЗапрос.ДатаПлатежа)              КАК ДатаПлатежа,
		|	МАКСИМУМ(ВложенныйЗапрос.Календарь)                КАК Календарь,
		|	ВЫБОР
		|		КОГДА
		|			КОЛИЧЕСТВО(ВложенныйЗапрос.ГрафикОплаты) = 1
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ГрафикОплатыНеУказан,
		|	МАКСИМУМ(ВложенныйЗапрос.Сдвиг) КАК Сдвиг
		|ИЗ (
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЭтапыГрафикаОплаты.Сдвиг) КАК Сдвиг,
		|	ЭтапыГрафикаОплаты.Ссылка          КАК ГрафикОплаты,
		|	NULL                               КАК Дата,
		|	NULL                               КАК ДатаПлатежа,
		|	NULL                               КАК Календарь
		|ИЗ
		|	Справочник.ГрафикиОплаты.Этапы КАК ЭтапыГрафикаОплаты
		|ГДЕ
		|	ЭтапыГрафикаОплаты.Ссылка В (
		|		ВЫБРАТЬ
		|			ВременнаяТаблицаДокументПродажи.Соглашение.ГрафикОплаты
		|		ИЗ
		|			ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыГрафикаОплаты.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	NULL                                                              КАК Сдвиг,
		|	ВременнаяТаблицаДокументПродажи.Соглашение.ГрафикОплаты           КАК ГрафикОплаты,
		|	ВременнаяТаблицаДокументПродажи.Дата                              КАК Дата,
		|	ВременнаяТаблицаДокументПродажи.ДатаПлатежа                       КАК ДатаПлатежа,
		|	ВременнаяТаблицаДокументПродажи.Соглашение.ГрафикОплаты.Календарь КАК Календарь
		|ИЗ
		|	ВременнаяТаблицаДокументПродажи
		|) КАК ВложенныйЗапрос
		|СГРУППИРОВАТЬ ПО
		|	ГрафикОплаты
		|;
		|";

КонецПроцедуры

// Формирует запрос для проверки корректности количества авансовых этапов оплаты
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКорректностьКоличестваЭтаповГрафикаОплаты(ТекстЗапроса, ПараметрыЗапроса)
	
		ТекстЗапроса = ТекстЗапроса + "
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) <> СУММА(ВложенныйЗапрос.КоличествоЭтаповГрафика)
			|				И МАКСИМУМ(ВложенныйЗапрос.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты) = ИСТИНА
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) КАК КоличествоЭтаповДокумента,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповГрафика) КАК КоличествоЭтаповГрафика
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыДокумента.НомерСтроки) КАК КоличествоЭтаповДокумента,
			|		NULL КАК КоличествоЭтаповГрафика,
			|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповДокумента,
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки) КАК КоличествоЭтаповГрафика,
			|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		Справочник.ГрафикиОплаты.Этапы КАК ГрафикиОплатыЭтапы
			|	ГДЕ
			|		ГрафикиОплатыЭтапы.Ссылка В
			|				(ВЫБРАТЬ
			|					ВременнаяТаблицаДокументПродажи.ГрафикОплаты КАК ГрафикОплаты
			|				ИЗ
			|					ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповДокумента,
			|		NULL КАК КоличествоЭтаповГрафика,
			|		ВЫБОР
			|			КОГДА ВременнаяТаблицаДокументПродажи.СуммаДокумента = 0
			|					ИЛИ ВременнаяТаблицаДокументПродажи.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи) КАК ВложенныйЗапрос
			|ГДЕ
			|	0 В
			|			(ВЫБРАТЬ
			|				КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки) КАК КоличествоЭтаповГрафика
			|			ИЗ
			|				Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ГрафикиОплатыЭтапы
			|			ГДЕ
			|				ГрафикиОплатыЭтапы.Ссылка В
			|					(ВЫБРАТЬ
			|						ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение
			|					ИЗ
			|						ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи))
			|
			|ИМЕЮЩИЕ
			|	МАКСИМУМ(&ИспользоватьГрафикиОплаты) = ИСТИНА
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) <> СУММА(ВложенныйЗапрос.КоличествоЭтаповГрафика)
			|				И МАКСИМУМ(ВложенныйЗапрос.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты) = ИСТИНА
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповДокумента) КАК КоличествоЭтаповДокумента,
			|	СУММА(ВложенныйЗапрос.КоличествоЭтаповГрафика) КАК КоличествоЭтаповГрафика
			|ИЗ
			|	(ВЫБРАТЬ
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыДокумента.НомерСтроки) КАК КоличествоЭтаповДокумента,
			|		NULL КАК КоличествоЭтаповГрафика,
			|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		ВременнаяТаблицаЭтапыГрафикаОплаты КАК ЭтапыДокумента
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповДокумента,
			|		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиОплатыЭтапы.НомерСтроки) КАК КоличествоЭтаповГрафика,
			|		NULL КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ГрафикиОплатыЭтапы
			|	ГДЕ
			|		ГрафикиОплатыЭтапы.Ссылка В
			|				(ВЫБРАТЬ
			|					ВременнаяТаблицаДокументПродажи.Соглашение КАК Соглашение
			|				ИЗ
			|					ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL КАК КоличествоЭтаповДокумента,
			|		NULL КАК КоличествоЭтаповГрафика,
			|		ВЫБОР
			|			КОГДА ВременнаяТаблицаДокументПродажи.СуммаДокумента = 0
			|					ИЛИ ВременнаяТаблицаДокументПродажи.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)
			|				ТОГДА ЛОЖЬ
			|			ИНАЧЕ ИСТИНА
			|		КОНЕЦ КАК ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты
			|	ИЗ
			|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи) КАК ВложенныйЗапрос
			|;
			|";
			
КонецПроцедуры

// Формирует запрос для проверки вхождения цен документа продажи в допустимый диапазон
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросВхождениеЦенВДопустимыйДиапазон(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВложенныйЗапрос.НомерСтроки                 КАК НомерСтроки,
		|	ВложенныйЗапрос.Номенклатура                КАК Номенклатура,
		|	ВложенныйЗапрос.Характеристика              КАК Характеристика,
		|	ВложенныйЗапрос.ВалютаЦены                  КАК ВалютаЦены,
		|	ВложенныйЗапрос.Цена                        КАК Цена,
		|	ВложенныйЗапрос.МинимальноДопустимаяЦена    КАК МинимальноДопустимаяЦена,
		|	ВложенныйЗапрос.МаксимальноДопустимаяЦена   КАК МаксимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МинимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена < ВложенныйЗапрос.МинимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиМинимальноДопустимаяЦена,
		|	ВЫБОР
		|		КОГДА
		|			НЕ МаксимальнаяЦенаОтсутствует
		|			И ВложенныйЗапрос.Цена > ВложенныйЗапрос.МаксимальноДопустимаяЦена
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиМаксимальноДопустимаяЦена
		|ИЗ (
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки          КАК НомерСтроки,
		|	ВременнаяТаблицаТовары.Номенклатура         КАК Номенклатура,
		|	ВременнаяТаблицаТовары.Характеристика       КАК Характеристика,
		|	ВременнаяТаблицаДокументПродажи.Валюта      КАК ВалютаЦены,
		|	ВременнаяТаблицаТовары.ЦенаСоСкидкой        КАК Цена,
		|	ВЫБОР
		|		КОГДА
		|			МинимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МинимальнаяЦенаОтсутствует,
		|	ВЫБОР
		|		КОГДА
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Цена ЕСТЬ NULL
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК МаксимальнаяЦенаОтсутствует,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(МинимальныеЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент,1)
		|			* ВЫБОР
		|				КОГДА
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА
		|					ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МинимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМинимальнойЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМинимальнойЦены.Курс, 0) > 0
		|						ТОГДА 
		|							(КурсыВалютыМинимальнойЦены.Курс * КурсыВалютыЦены.Кратность)
		|							/ (КурсыВалютыЦены.Курс * КурсыВалютыМинимальнойЦены.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|				КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КАК МинимальноДопустимаяЦена,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(МаксимальныеЦеныНоменклатурыСрезПоследних.Цена,0)
		|		/ ЕстьNULL(МаксимальныеЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент,1)
		|			* ВЫБОР 
		|				КОГДА 
		|					ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА
		|					ВременнаяТаблицаТовары.Упаковка.Коэффициент
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|			* ВЫБОР
		|				КОГДА
		|					МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта <> ВременнаяТаблицаДокументПродажи.Валюта
		|				ТОГДА
		|					ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.Кратность, 0) > 0
		|							И ЕСТЬNULL(КурсыВалютыМаксимальнойЦены.Курс, 0) > 0
		|						ТОГДА 
		|							(КурсыВалютыМаксимальнойЦены.Курс * КурсыВалютыЦены.Кратность)
		|							/ (КурсыВалютыЦены.Курс * КурсыВалютыМаксимальнойЦены.Кратность)
		|						ИНАЧЕ
		|							0
		|					КОНЕЦ
		|				ИНАЧЕ 
		|					1
		|			КОНЕЦ КАК ЧИСЛО(15, 2))
		|	КАК МаксимальноДопустимаяЦена
		|
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|		ПО
		|			ИСТИНА
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыЦены
		|		ПО
		|			ВременнаяТаблицаДокументПродажи.Валюта = КурсыВалютыЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		|// СОЕДИНЕНИЯ С МИНИМАЛЬНО ДОПУСТИМЫМИ ЦЕНАМИ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦены В (
		|					ВЫБРАТЬ
		|						Константы.ВидМинимальноДопустимыхЦенПродажи КАК ВидЦены
		|					ИЗ
		|						Константы КАК Константы
		|					)
		|				И (Номенклатура,Характеристика) В (
		|					ВЫБРАТЬ
		|						Товары.Номенклатура,
		|						Товары.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Товары
		|					)
		|			) КАК МинимальныеЦеныНоменклатурыСрезПоследних
		|		ПО
		|			ВременнаяТаблицаТовары.Номенклатура = МинимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = МинимальныеЦеныНоменклатурыСрезПоследних.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМинимальнойЦены
		|		ПО
		|			МинимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМинимальнойЦены.Валюта
		|
		|/////////////////////////////////////////////////////////////////////////////
		|// СОЕДИНЕНИЯ С МАКСИМАЛЬНО ДОПУСТИМЫМИ ЦЕНАМИ
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|				ВидЦены В (
		|					ВЫБРАТЬ
		|						Константы.ВидМаксимальноДопустимыхЦенПродажи КАК ВидЦены
		|					ИЗ
		|						Константы КАК Константы
		|					)
		|				И (Номенклатура,Характеристика) В (
		|					ВЫБРАТЬ 
		|						Товары.Номенклатура,
		|						Товары.Характеристика
		|					ИЗ
		|						ВременнаяТаблицаТовары КАК Товары
		|					)
		|			) КАК МаксимальныеЦеныНоменклатурыСрезПоследних
		|		ПО
		|			ВременнаяТаблицаТовары.Номенклатура = МаксимальныеЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ВременнаяТаблицаТовары.Характеристика = МаксимальныеЦеныНоменклатурыСрезПоследних.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаКурсыВалют КАК КурсыВалютыМаксимальнойЦены
		|		ПО
		|			МаксимальныеЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыМаксимальнойЦены.Валюта
		|
		|ГДЕ
		|	ВременнаяТаблицаТовары.Цена > 0
		|) КАК ВложенныйЗапрос
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
		
КонецПроцедуры

// Формирует текст запроса для проверки наличия услуг в документе продажи
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросНаличиеУслугВДокументеПродажи(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ДокументТовары.НомерСтроки  КАК НомерСтроки,
		|	ДокументТовары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ДокументТовары
		|ГДЕ
		|	ДокументТовары.Номенклатура.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

// Формирует текст запроса для проверки допустимости ручных скидок и наценок
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросДопустимостьРучныхСкидокНаценок(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки               КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.ПроцентРучнойСкидки > 0
		|			И ВременнаяТаблицаТовары.ПроцентРучнойСкидки > ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойСкидки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияРучнойСкидки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.ПроцентРучнойСкидки < 0
		|			И -ВременнаяТаблицаТовары.ПроцентРучнойСкидки > ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойНаценки
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияРучнойНаценки,
		|	ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойСкидки          КАК МаксимальнаяСуммаРучнойСкидки,
		|	ВременнаяТаблицаОграниченияРучныхСкидок.ПроцентРучнойНаценки         КАК МаксимальнаяСуммаРучнойНаценки
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|	
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаОграниченияРучныхСкидок КАК ВременнаяТаблицаОграниченияРучныхСкидок
		|		ПО ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа = ВременнаяТаблицаОграниченияРучныхСкидок.ЦеноваяГруппа
		|		ИЛИ (ВременнаяТаблицаТовары.Номенклатура.ЦеноваяГруппа Не В (Выбрать Т.ЦеноваяГруппа Из ВременнаяТаблицаОграниченияРучныхСкидок КАК Т) И ВременнаяТаблицаОграниченияРучныхСкидок.ЦеноваяГруппа = ЗНАЧЕНИЕ(Справочник.ЦеновыеГруппы.ПустаяСсылка))
		
		|ГДЕ
		|	ВременнаяТаблицаТовары.ПроцентРучнойСкидки <> 0
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

Процедура СформироватьЗапросСоответствиеСуммыПредоплатыГрафикуОплат(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			ВЫРАЗИТЬ(СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаВзаиморасчетов) КАК ЧИСЛО(15,2)) <> МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаПредоплаты)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСоответствиеСуммыПредоплатыГрафикуОплат,
		|
		|	ВЫРАЗИТЬ(СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаВзаиморасчетов) КАК ЧИСЛО(15,2)) КАК СуммаПредоплатыПоГрафику
		|
		|ИЗ
		|	Справочник.СоглашенияСКлиентами.ЭтапыГрафикаОплаты КАК ДанныеГрафикаОплаты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|	ПО
		|		ДанныеГрафикаОплаты.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|
		|ГДЕ
		|	&ИспользоватьСтатусыРеализацийТоваровУслуг
		|	И ДанныеГрафикаОплаты.Ссылка.ГрафикОплаты = ЗНАЧЕНИЕ(Справочник.ГрафикиОплаты.ПустаяСсылка)
		|	И (ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)
		|	ИЛИ ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки))
		|
		|ИМЕЮЩИЕ
		|	ВЫРАЗИТЬ(СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаВзаиморасчетов) КАК ЧИСЛО(15,2)) <> МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаПредоплаты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА
		|			ВЫРАЗИТЬ(СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаВзаиморасчетов) КАК ЧИСЛО(15,2)) <> МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаПредоплаты)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибкиСоответствиеСуммыПредоплатыГрафикуОплат,
		|
		|	ВЫРАЗИТЬ(СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаВзаиморасчетов) КАК ЧИСЛО(15,2)) КАК СуммаПредоплатыПоГрафику
		|
		|ИЗ
		|	Справочник.ГрафикиОплаты.Этапы КАК ДанныеГрафикаОплаты
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.СоглашенияСКлиентами КАК ДанныеСоглашения
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ВременнаяТаблицаДокументПродажи КАК ВременнаяТаблицаДокументПродажи
		|		ПО
		|			ДанныеСоглашения.Ссылка = ВременнаяТаблицаДокументПродажи.Соглашение
		|		
		|	ПО
		|		ДанныеГрафикаОплаты.Ссылка = ДанныеСоглашения.ГрафикОплаты
		|
		|ГДЕ
		|	&ИспользоватьСтатусыРеализацийТоваровУслуг
		|	И (ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения)
		|	ИЛИ ДанныеГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки))
		|
		|ИМЕЮЩИЕ
		|	ВЫРАЗИТЬ(СУММА(ДанныеГрафикаОплаты.ПроцентПлатежа) / 100 * МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаВзаиморасчетов) КАК ЧИСЛО(15,2)) <> МАКСИМУМ(ВременнаяТаблицаДокументПродажи.СуммаПредоплаты)
		|;
		|";
	
КонецПроцедуры

// Формирует запрос для контроля завершения расчетов по заказу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольЗавершенияРасчетов(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) <= 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьНезавершенныеРасчеты,
		|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
		|	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &Ссылка) КАК РасчетыСКлиентамиОстатки
		|;
		|";
		
КонецПроцедуры

// Формирует запрос для контроля завершения отгрузки по заказу
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольЗавершенияОтгрузки(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) <= 0
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьНезавершеннаяОтгрузка
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &Ссылка) КАК ЗаказыКлиентовОстатки
		|;
		|";
КонецПроцедуры

// Формирует запрос для контроля заполнения подразделения при наличии работ
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросЗаполнениеПодразделенияПриНаличииРабот(ТекстЗапроса)

	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ Первые 1
		|	ВременнаяТаблицаТовары.Номенклатура
		|ИЗ
		|ВременнаяТаблицаДокументПродажи
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВременнаяТаблицаТовары
		|		ПО ИСТИНА
		|ГДЕ
		|	ВременнаяТаблицаДокументПродажи.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|	И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
		|
		|;
		|";

КонецПроцедуры

// Формирует текст запроса для проверки заполнения цен в документе
//
// Параметры:
// ТекстЗапроса - Строка - текстовая строка, к которой необходимо добавить текст запроса
//
Процедура СформироватьЗапросКонтрольЗаполненияЦен(ТекстЗапроса)
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТовары.НомерСтроки               КАК НомерСтроки,
		|	ВЫБОР
		|		КОГДА
		|			ВременнаяТаблицаТовары.Цена = 0
		|		ТОГДА 
		|			ВЫБОР 
		|				КОГДА &ВозвратМногооборотнойТары 
		|					И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара) ТОГДА
		|					
		|					ЛОЖЬ
		|				ИНАЧЕ
		|					ИСТИНА
		|			КОНЕЦ
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ                                            КАК ЕстьОшибкиЗаполненияЦен
		|ИЗ
		|	ВременнаяТаблицаТовары КАК ВременнаяТаблицаТовары
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки ВОЗР
		|;
		|";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры для вывода сообщений об ошибках заполнения документов.

// Выводит сообщения об ошибках наличия дублей в тч Товары документа продажи
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеДублейТоваровДокументаПродажи(Знач Выборка,
	                                                            Знач ДокументПродажи,
	                                                            Отказ)

	Пока Выборка.Следующий() Цикл

		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" повторяется'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",   Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);

		Иначе
				
			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" повторяется'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);

		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ
		);

	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках наличия дублей в тч СкидкиНаценки документа продажи
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеДублейСкидокНаценокДокументаПродажи(Знач Выборка,
	                                                                  Знач ДокументПродажи,
	                                                                  Отказ)

	Пока Выборка.Следующий() Цикл

		ТекстОшибки = НСтр("ru='Скидка (наценка) ""%СкидкаНаценка%"" повторяется'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкидкаНаценка%", Выборка.СкидкаНаценка);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СкидкиНаценки", Выборка.НомерСтроки, "СкидкаНаценка"),
			,
			Отказ
		);
			
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках наличия дублей в тч ЦеновыеГруппы документа продажи
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеДублейЦеновыхГруппДокументаПродажи(Знач Выборка,
	                                                                 Знач ДокументПродажи,
	                                                                 Отказ)

	Пока Выборка.Следующий() Цикл

		ТекстОшибки = НСтр("ru='Ценовая группа ""%ЦеноваяГруппа%"" повторяется'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Выборка.ЦеноваяГруппа);

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ЦеноваяГруппа"),
			,
			Отказ
		);

	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в документе продажи
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСклада(Знач Выборка,
	                                                    Знач ДокументПродажи,
	                                                    Отказ)
	
	Если Выборка.Следующий() Тогда
		
		ТекстОшибки = НСтр("ru='Поле ""Склад"" не заполнено'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			"Склад",
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения склада в табличной части "Товары" документа продажи
//
Процедура СообщитьОбОшибкахКорректностьЗаполненияСкладаВТабличнойЧастиТовары(Знач Выборка,
	                                                    Знач ДокументПродажи,
	                                                    Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Не заполнена колонка ""Склад"" в строке %НомерСтроки% списка ""Товары""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Склад"),
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках указания подакцизного товара в табличной части "Товары" документа продажи
//
Процедура СообщитьОбОшибкахКорректностьУказанияПодакцизногоТовараВТабличнойЧастиТовары(Знач Выборка,
	                                                                                   Знач ДокументПродажи,
	                                                                                   Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='При режиме налогообложения ""Продажа облагается ЕНВД"" запрещено выбирать подакцизный товар в строке %НомерСтроки% списка ""Товары""'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "Номенклатура"),
			,
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках заполнения цен в табличной части "Товары" документа продажи
//
Процедура СообщитьОбОшибкахКонтрольЗаполненияЦен(Знач Выборка,
	                                             Знач ДокументПродажи,
												 Знач ИмяТЧ,
	                                             Отказ)
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЕстьОшибкиЗаполненияЦен Тогда
			
			ТекстОшибки = НСтр("ru='Не заполнена колонка ""Цена"" в строке %НомерСтроки% списка ""%ТабЧасть%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",  Выборка.НомерСтроки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТабЧасть%", ИмяТЧ);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"Цена"),
				,
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры для вывода сообщений об ошибках соответствия документов условиям продаж.

Процедура СообщитьПользователюОбОшибке(ТекстОшибки, ДокументПродажи, Поле="", Отказ)

	Если ТипЗнч(ДокументПродажи) = Тип("ОбработкаОбъект.ПомощникПродаж") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект." + Поле,
			,
			Отказ
		);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			ДокументПродажи,
			Поле,
			,
			Отказ
		);
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках в шапке документа продажи
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахШапкаДокументаПродажи(Знач Выборка,
	                                             Знач ДокументПродажи,
	                                             Отказ)

	Если Выборка.Следующий() Тогда

		Если Выборка.ЕстьОшибкиЗаполненияПартнер Тогда

			ТекстОшибки = НСтр("ru='Партнер не должен отличаться от значения в соглашении ""%ПартнерСоглашение%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПартнерСоглашение%", Выборка.ПартнерСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"Партнер",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияКонтрагент Тогда

			ТекстОшибки = НСтр("ru='Контрагент не должен отличаться от значения в соглашении ""%КонтрагентСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КонтрагентСоглашение%", Выборка.КонтрагентСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"Контрагент",
				Отказ
			);

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияОрганизация Тогда

			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Организация не должна отличаться от значения в типовом соглашении ""%ОрганизацияСоглашение%""'");
			Иначе
				ТекстОшибки = НСтр("ru='Организация не должна отличаться от значения в соглашении ""%ОрганизацияСоглашение%""'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОрганизацияСоглашение%", Выборка.ОрганизацияСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"Организация",
				Отказ
			);

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВалюта Тогда

			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Валюта не должна отличаться от значения в типовом соглашении ""%ВалютаСоглашение%""'");
			Иначе
				ТекстОшибки = НСтр("ru='Валюта не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"Валюта",
				Отказ
			);

		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияВалютаВзаиморасчетов Тогда

			ТекстОшибки = НСтр("ru='Валюта взаиморасчетов не должна отличаться от значения в соглашении ""%ВалютаСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаСоглашение%", Выборка.ВалютаСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ВалютаВзаиморасчетов",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияОграничиватьРучныеСкидки Тогда

			ТекстОшибки = НСтр("ru='Признак ограничивать ручные скидки не должен отличаться от значения в соглашении'");

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ОграничиватьРучныеСкидки",
				Отказ
			);

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВидЦен Тогда

			Если ЗначениеЗаполнено(Выборка.ВидЦенСоглашение) Тогда
			
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='Вид цен не должен отличаться от значения в типовом соглашении ""%ВидЦенСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Вид цен не должен отличаться от значения в соглашении ""%ВидЦенСоглашение%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);

			Иначе
				
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='Вид цен в типовом соглашении не определен. Вид цен не может быть установлен без согласования'");
				Иначе
					ТекстОшибки = НСтр("ru='Вид цен в соглашении не определен. Вид цен не может быть установлен без согласования'");
				КонецЕсли;
					
			КонецЕсли;
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ВидЦен",
				Отказ
			);
			
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияНалогообложениеНДС Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Налогообложение НДС не должно отличаться от значения в типовом соглашении ""%НалогообложениеНДС%""'");
			Иначе
				ТекстОшибки = НСтр("ru='Налогообложение НДС не должно отличаться от значения в соглашении ""%НалогообложениеНДС%""'");
			КонецЕсли;
				
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НалогообложениеНДС%", Выборка.НалогообложениеНДССоглашение); 
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"НалогообложениеНДС",
				Отказ
			);
			
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияХозяйственнаяОперация Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Операция не должна отличаться от значения в типовом соглашении ""%Операция%""'");
			Иначе
				ТекстОшибки = НСтр("ru='Операция не должна отличаться от значения в соглашении ""%Операция%""'");
			КонецЕсли;
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Операция%", Выборка.ХозяйственнаяОперацияСоглашение); 
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ХозяйственнаяОперация",
				Отказ
			);
				
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияЦенаВключаетНДС Тогда

			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Признак ""Цена включает НДС"" не должен отличаться от значения в типовом соглашении ""%ЦенаВключаетНДС%""'");
			Иначе
				ТекстОшибки = НСтр("ru='Признак ""Цена включает НДС"" не должен отличаться от значения в соглашении ""%ЦенаВключаетНДС%""'");
			КонецЕсли;
				
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаВключаетНДС%", ?(Выборка.ЦенаВключаетНДССоглашение, "Цена включает НДС","Цена не включает НДС"));

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ЦенаВключаетНДС",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияДатаНачалаДействия Тогда

			ТекстОшибки = НСтр("ru='Дата начала действия должна быть не меньше, чем дата начала действия типового соглашения ""%ДатаНачалаДействияСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаНачалаДействияСоглашение%", Формат(Выборка.ДатаНачалаДействияСоглашение, "ДЛФ=DD"));
		
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ДатаНачалаДействия",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияДатаОкончанияДействия Тогда

			ТекстОшибки = НСтр("ru='Дата окончания действия должна быть не больше, чем дата окончания действия типового соглашения ""%ДатаОкончанияДействияСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаОкончанияДействияСоглашение%", Формат(Выборка.ДатаОкончанияДействияСоглашение, "ДЛФ=DD"));
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ДатаОкончанияДействия",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияГрафикОплаты Тогда

			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='График оплаты не должен отличаться от значения в типовом соглашении ""%ГрафикОплатыСоглашение%""'");
			Иначе
				ТекстОшибки = НСтр("ru='График оплаты не должен отличаться от значения в соглашении ""%ГрафикОплатыСоглашение%""'");
			КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ГрафикОплатыСоглашение%", Выборка.ГрафикОплатыСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ГрафикОплаты",
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСклад Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				Если Выборка.СкладСоглашениеЕстьГруппа Тогда
					ТекстОшибки = НСтр("ru='Склад должен входить в группу складов типового соглашения ""%СкладСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Склад не должен отличаться от значения в типовом соглашении ""%СкладСоглашение%""'");
				КонецЕсли;
			Иначе
				Если Выборка.СкладСоглашениеЕстьГруппа Тогда
					ТекстОшибки = НСтр("ru='Склад должен входить в группу складов соглашения ""%СкладСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Склад не должен отличаться от значения в соглашении ""%СкладСоглашение%""'");
				КонецЕсли;
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкладСоглашение%", Выборка.СкладСоглашение);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"Склад",
				Отказ
			);

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияВозвращатьМногооборотнуюТару Тогда
			
			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Признак возврата многообортной тары не должен отличаться от значения в типовом соглашении'");
			Иначе
				ТекстОшибки = НСтр("ru='Признак возврата многообортной тары не должен отличаться от значения в соглашении'");
			КонецЕсли;
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				?(Выборка.ЭтоСоглашение,"ВозвращатьМногооборотнуюТару","ВернутьМногооборотнуюТару"),
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияРассчитыватьДатуВозвратаТарыПоКалендарю Тогда
			
			ТекстОшибки = НСтр("ru='Способ расчета даты возврата многообортной тары не должен отличаться от значения в типовом соглашении'");
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"РассчитыватьДатуВозвратаТарыПоКалендарю",
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			ТекстОшибки = НСтр("ru='Срок возврата многообортной тары не должен отличаться от значения в соглашении'");
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"СрокВозвратаМногооборотнойТары",
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиДатаВозвратаМногооборотнойТары И Выборка.ВозвратМногооборотнойТары Тогда
			
			ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
				ДокументПродажи.Дата,
				Выборка.СрокВозвратаМногооборотнойТары,
				Выборка.РассчитыватьДатуВозвратаТарыПоКалендарю);
			
			Если ДатаВозвратаМногооборотнойТары <> ДокументПродажи.ДатаВозвратаМногооборотнойТары Тогда
				ТекстОшибки = НСтр("ru='Дата возврата многообортной тары не должна отличаться от срока возврата в соглашении'");
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки,
					ДокументПродажи,
					"ДатаВозвратаМногооборотнойТары",
					Отказ
				);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСегментНоменклатуры Тогда

			ТекстОшибки = НСтр("ru='Сегмент номенклатуры не должен отличаться от значения в типовом соглашении ""%СегментНоменклатурыСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатурыСоглашение%", Выборка.СегментНоменклатурыСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"СегментНоменклатуры",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияПроцентРучнойСкидки Тогда
			
			ТекстОшибки = НСтр("ru='Процент ручной скидки не должен быть больше значения, чем в типовом соглашении (%ПроцентРучнойСкидки%%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойСкидки%", Выборка.ПроцентРучнойСкидки);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ПроцентРучнойСкидки",
				Отказ
			);
			
		КонецЕсли;
			
		Если Выборка.ЕстьОшибкиЗаполненияПроцентРучнойНаценки Тогда
			
			ТекстОшибки = НСтр("ru='Процент ручной наценки не должен быть больше значения, чем в типовом соглашении (%ПроцентРучнойНаценки%%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентРучнойНаценки%", Выборка.ПроцентРучнойНаценки);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ПроцентРучнойНаценки",
				Отказ
			);
			
		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияРегулярное Тогда

			ТекстОшибки = НСтр("ru='Признак регулярности не должен отличаться от значения в типовом соглашении'");

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"Регулярное",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияПериод Тогда

			ТекстОшибки = НСтр("ru='Период не должен отличаться от значения в типовом соглашении ""%ПериодСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПериодСоглашение%", Выборка.ПериодСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"Период",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияКоличествоПериодов Тогда

			ТекстОшибки = НСтр("ru='Количество периодов не должен быть меньше, чем в типовом соглашении - %КоличествоПериодовСоглашение%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоПериодовСоглашение%", Выборка.КоличествоПериодовСоглашение);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"КоличествоПериодов",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияИспользуетсяВРаботеТорговыхПредставителей Тогда

			ТекстОшибки = НСтр("ru='Признак использования в работе торговых представителей не должен отличаться от значения в типовом соглашении'");
		
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ИспользуетсяВРаботеТорговыхПредставителей",
				Отказ
			);

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияДоступноВнешнимПользователям Тогда

			ТекстОшибки = НСтр("ru='Признак доступности внешним пользователям не должен отличаться от значения в типовом соглашении'");
		
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ДоступноВнешнимПользователям",
				Отказ
			);

		КонецЕсли;


		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда

			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем в типовом соглашении - %СрокПоставкиСоглашение%'");
			Иначе
				ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем в соглашении - %СрокПоставкиСоглашение%'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
	
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"СрокПоставки",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияФормыОплаты Тогда

			ТекстОшибки = НСтр("ru='Форма оплаты не должна отличаться от значения в графике оплаты ""%ФормаОплатыГрафик%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыГрафик);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ФормаОплаты",
				Отказ
			);

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияКалендаря Тогда

			ТекстОшибки = НСтр("ru='Календарь не должен отличаться от значения ""%Календарь%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Календарь%", Выборка.Календарь);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"Календарь",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияФормыОплатыСоглашения Тогда

			ТекстОшибки = НСтр("ru='Форма оплаты не должна отличаться от значения в типовом соглашении ""%ФормаОплатыГрафик%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ФормаОплатыГрафик%", Выборка.ФормаОплатыСоглашенияСКлиентом);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ФормаОплаты",
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияИспользуютсяДоговорыКонтрагентов Тогда

			Если Выборка.ИспользуютсяДоговорыКонтрагентов Тогда
				ТекстОшибки = НСтр("ru='Использование договоров не должно отличаться от значения в типовом соглашении ""Требуется указание договора""'");
			Иначе
				ТекстОшибки = НСтр("ru='Использование договоров не должно отличаться от значения в типовом соглашении ""Договоры не используются""'");
			КонецЕсли;
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ИспользуютсяДоговорыКонтрагентов",
				Отказ
			);

		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках в тч Товары документа продажи
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахТоварыДокументаПродажи(Знач Выборка,
	                                              Знач ДокументПродажи,
	                                              Знач ИмяТЧ,
	                                              Знач ПредставлениеТЧ,
	                                              Отказ)

	Пока Выборка.Следующий() Цикл

		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);

		Если Выборка.ЕстьОшибкиЗаполненияЦена Тогда

			Если Выборка.ЭтоСоглашение Тогда
				ТекстОшибки = НСтр("ru='Цена должна быть не ниже фиксированной цены в типовом соглашении ""%ЦенаСоглашение%""'");
			Иначе
				ТекстОшибки = НСтр("ru='Цена должна быть не ниже фиксированной цены в соглашении ""%ЦенаСоглашение%""'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦенаСоглашение%", Формат(Выборка.ЦенаСоглашение,"ЧДЦ=2"));

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
				Отказ
			);

		ИначеЕсли Выборка.ЕстьОшибкиЗаполненияВидЦены И Выборка.ЦенаСоглашение = 0 Тогда

			Если ЗначениеЗаполнено(Выборка.ВидЦеныСоглашение) Тогда
				
				Если ЗначениеЗаполнено (Выборка.ВидЦены) Тогда
					
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='Вид цены не должен отличаться от вида цены в типовом соглашении ""%ВидЦеныСоглашение%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Вид цены не должен отличаться от вида цены в соглашении ""%ВидЦеныСоглашение%""'");
				КонецЕсли;
					
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныСоглашение%", Выборка.ВидЦеныСоглашение);
					
				Иначе
					
					Если Выборка.ЭтоСоглашение Тогда
						ТекстОшибки = НСтр("ru='Вид цены должен быть заполнен и не должен отличаться от вида цены в типовом соглашении ""%ВидЦеныСоглашение%""'");
					Иначе
						ТекстОшибки = НСтр("ru='Вид цены должен быть заполнен и не должен отличаться от вида цены в соглашении ""%ВидЦеныСоглашение%""'");
					КонецЕсли;
						
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦеныСоглашение%", Выборка.ВидЦеныСоглашение);
					
				КонецЕсли;
				
				СообщитьПользователюОбОшибке(
					ТекстОшибки + АдресОшибки,
					ДокументПродажи,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ВидЦены"),
					Отказ
				);
				
			Иначе
				
				Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
					
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='В типовом соглашении цены не определены. Вид цены ""%ВидЦены%"" по данному соглашению не может быть установлен без согласования'");
				Иначе
					ТекстОшибки = НСтр("ru='В соглашении цены не определены. Вид цены ""%ВидЦены%"" по данному соглашению не может быть установлен без согласования'");
				КонецЕсли;
					
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидЦены%", Выборка.ВидЦены);

					СообщитьПользователюОбОшибке(
						ТекстОшибки + АдресОшибки,
						ДокументПродажи,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "ВидЦены"),
						Отказ
					);
						
				Иначе
					
				Если Выборка.ЭтоСоглашение Тогда
					ТекстОшибки = НСтр("ru='В типовом соглашении цены не определены. Цена по данному соглашению не может быть установлена без согласования'");
				Иначе
					ТекстОшибки = НСтр("ru='В соглашении цены не определены. Цена по данному соглашению не может быть установлена без согласования'");
				КонецЕсли;
				
					СообщитьПользователюОбОшибке(
						ТекстОшибки + АдресОшибки,
						ДокументПродажи,
						ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
						Отказ
					);
					
				КонецЕсли;
					
			КонецЕсли;

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияНалогообложениеНДС Тогда

			ТекстОшибки = НСтр("ru='В режиме налогообложения ""%НалогообложениеНДС%"" необходимо установить ставку ""%СтавкаНДС%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НалогообложениеНДС%", Выборка.НалогообложениеНДС);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СтавкаНДС%",          Выборка.СтавкаНДС);

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "СтавкаНДС"),
				Отказ
			);
			
		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда

			Если Выборка.ЭтоСоглашение Тогда
				
				ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем в типовом соглашении - %СрокПоставкиСоглашение%'");
				
			Иначе
				
				ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем в соглашении - %СрокПоставкиСоглашение%'");
				
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "СрокПоставки"),
				Отказ
			);
	
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия тч СкидкиНаценки условиям продаж
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахСоответствиеСкидокНаценокУсловиямПродаж(Знач Выборка,
	                                                               Знач ДокументПродажи,
	                                                               Отказ)

	Пока Выборка.Следующий() Цикл

		Если Выборка.ЛишняяСкидкаНаценкаВДокументе Тогда

			ТекстОшибки = НСтр("ru='Скидка (наценка) ""%СкидкаНаценка%"" отсутствует в типовом соглашении в строке %НомерСтроки% списка ""Скидки наценки""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкидкаНаценка%", Выборка.СкидкаНаценка);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", Выборка.НомерСтроки);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СкидкиНаценки", Выборка.НомерСтроки, "СкидкаНаценка"),
				Отказ
			);

		КонецЕсли;

		Если Выборка.ОтсутствуетСкидкаНаценкаВДокументе Тогда

			ТекстОшибки = НСтр("ru='Скидка (наценка) ""%СкидкаНаценка%"", указанная в типовом соглашении, должна присутствовать в списке ""Скидки наценки""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СкидкаНаценка%", Выборка.СкидкаНаценка);

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"СкидкиНаценки",
				Отказ
			);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия тч ЦеновыеГруппы условиям продаж
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахСоответствиеГруппЦенНоменклатурыУсловиямПродаж(Знач Выборка,
	                                                                      Знач ДокументПродажи,
	                                                                      Отказ)

	Пока Выборка.Следующий() Цикл

		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Группы цен номенклатуры""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Выборка.НомерСтроки);

		Если Выборка.ЕстьОшибкиЗаполненияЦеновыеГруппы Тогда

			ТекстОшибки = НСтр("ru='Ценовая группа ""%ЦеноваяГруппа%"" отсутствует в типовом соглашении'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ЦеноваяГруппа%", Выборка.ЦеноваяГруппа);

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ЦеноваяГруппа"),
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияВидЦен Тогда

			ТекстОшибки = НСтр("ru='Вид цен не должен отличаться от значения в типовом соглашении ""%ВидЦенСоглашение%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%ВидЦенСоглашение%", Выборка.ВидЦенСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ВидЦен"),
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиЗаполненияРучнойСкидки Тогда

			ТекстОшибки = НСтр("ru='Процент ручной скидки не должен отличаться от значения в типовом соглашении (%Значение%%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Значение%", Выборка.ПроцентРучнойСкидкиСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ПроцентРучнойСкидки"),
				Отказ
			);

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда

			ТекстОшибки = НСтр("ru='Процент ручной наценки не должен отличаться от значения в типовом соглашении (%Значение%%)'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Значение%", Выборка.ПроцентРучнойНаценкиСоглашение);

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "ПроцентРучнойНаценки"),
				Отказ
			);

		КонецЕсли;
		
		Если Выборка.ЕстьОшибкиЗаполненияСрокПоставки Тогда

			ТекстОшибки = НСтр("ru='Срок поставки не должен быть меньше, чем значение в типовом соглашении - %СрокПоставкиСоглашение%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СрокПоставкиСоглашение%", Выборка.СрокПоставкиСоглашение);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ЦеновыеГруппы", Выборка.НомерСтроки, "СрокПоставки"),
				Отказ
			);
	
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия товаров сегменту номенклатуры
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахПринадлежностьТоваровСегментуНоменклатуры(Знач Выборка,
	                                                                 Знач ДокументПродажи,
	                                                                 Знач ИмяТЧ,
	                                                                 Знач ПредставлениеТЧ,
	                                                                 Отказ)

	Пока Выборка.Следующий() Цикл

		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);

		Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%"" с характеристикой ""%Характеристика%"" 
			| должна входить в сегмент номенклатуры ""%СегментНоменклатуры%"", определенный в соглашении'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",        Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",      Выборка.Характеристика);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментНоменклатуры%", Выборка.СегментНоменклатуры);

		Иначе

			ТекстОшибки = НСтр("ru='Номенклатура ""%Номенклатура%""
			| должна входить в сегмент номенклатуры ""%СегментНоменклатуры%"", определенный в соглашении'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Номенклатура%",        Выборка.Номенклатура);
			ТекстОшибки = СтрЗаменить(ТекстОшибки,"%СегментНоменклатуры%", Выборка.СегментНоменклатуры);

		КонецЕсли;

		СообщитьПользователюОбОшибке(
			ТекстОшибки + АдресОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Номенклатура"),
			Отказ
		);

	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках соответствия партнера сегменту партнеров
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахПринадлежностьПартнераСегментуПартнеров(Знач Выборка,
	                                                               Знач ДокументПродажи,
	                                                               Отказ)

	Если Выборка.Следующий() Тогда

		Если Выборка.ЕстьОшибкиЗаполненияСегментПартнеров Тогда
			
			ТекстОшибки = НСтр("ru='Партнер должен входить в сегмент партнеров ""%СегментПартнеров%"", определенный в типовом соглашении'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СегментПартнеров%", Выборка.СегментПартнеров); 

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"Партнер",
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЭтаповГрафикаОплаты(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Отказ)

	МаксДатаАванса = Дата(1,1,1);
	ОдинДень       = 86400;
	СуммаПроцентов = 0;
	СуммаПроцентовШаблона =0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
			Возврат;
		КонецЕсли;
		
		Если Выборка.ЭтапШаблонаОтсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы оплаты""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Выборка.НомерСтроки);

		Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда

			ТекстОшибки = НСтр("ru='Вариант оплаты отличается от значения в графике оплаты ""%ВариантОплатыШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплатыШаблона%", Выборка.ВариантОплатыШаблона); 

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				,
				"НадписьЭтапыОплаты",
				Отказ
			);

		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Календарь) Тогда
			Календарь = Выборка.Календарь;
		Иначе
			Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			
			Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
				Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаОтгрузки) Тогда
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.ЖелаемаяДатаОтгрузки, Выборка.Сдвиг );
				ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, МаксДатаАванса, Выборка.Сдвиг);
				Иначе
					ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
				КонецЕсли;
			Иначе
				ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(Выборка.ЖелаемаяДатаОтгрузки) Тогда
				ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
			ИначеЕсли ЗначениеЗаполнено(МаксДатаАванса) Тогда
				ДатаПлатежаШаблона = МаксДатаАванса + Выборка.Сдвиг * ОдинДень;
			Иначе
				ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Или
			Выборка.ВариантОплатыШаблона = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
			
			МаксДатаАванса = ДатаПлатежаШаблона;
			
		КонецЕсли;
		
		Если ДатаПлатежаШаблона < Выборка.ДатаПлатежа Тогда

			ТекстОшибки = НСтр("ru='Дата платежа должна быть не больше, чем в графике оплаты ""%ДатаПлатежаШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПлатежаШаблона%", Формат(ДатаПлатежаШаблона, "ДЛФ=DD")); 

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				,
				"НадписьЭтапыОплаты",
				Отказ
			);
		
		КонецЕсли;
		
		// Проверка отклонений процентов платежей
		СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
		СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
		Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
			
			ТекстОшибки = НСтр("ru='Проценты до следующего платежа по графику (""%ПроцентПлатежа%%"") не должны быть меньше процентов по графику соглашения (""%ПроцентПлатежаШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежа%", СуммаПроцентов);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежаШаблона%", СуммаПроцентовШаблона);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				,
				"НадписьЭтапыОплаты",
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения даты платежа
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьДатыПлатежа(Знач Выборка,
	                                               Знач ДокументПродажи,
	                                               Отказ)

	Если Выборка.Следующий() Тогда
		
		Если Выборка.ГрафикОплатыНеУказан Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Календарь) Тогда
			Календарь = Выборка.Календарь;
		Иначе
			Календарь = Константы.ОсновнойКалендарьПредприятия.Получить();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Календарь) Тогда
			ДатаПлатежаШаблона = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Календарь, Выборка.Дата, Выборка.Сдвиг);
		Иначе
			ДатаПлатежаШаблона = Выборка.ДатаПлатежаШаблона;
		КонецЕсли;
		
		Если Выборка.ДатаПлатежа > ДатаПлатежаШаблона Тогда

			ТекстОшибки = НСтр("ru='Дата платежа должна быть не больше, чем в графике оплаты, указанном в соглашении ""%ДатаПлатежаШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДатаПлатежаШаблона%", Формат(ДатаПлатежаШаблона, "ДЛФ=DD")); 

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				"ДатаПлатежа",
				Отказ
			);
		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности количества этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьКоличестваЭтаповГрафикаОплаты(Знач Выборка,
	                                                                 Знач ДокументПродажи,
	                                                                 Отказ)

	Выборка.Следующий();

	Если Выборка.ЕстьОшибкиЗаполненияЭтапыГрафикаОплаты Тогда
			
		ТекстОшибки = НСтр("ru='Количество этапов оплаты в документе (%КоличествоЭтаповДокумента%) должно совпадать с количеством этапов в графике (%КоличествоЭтаповГрафика%)'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповДокумента%", Выборка.КоличествоЭтаповДокумента);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповГрафика%",   Выборка.КоличествоЭтаповГрафика);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			,
			"НадписьЭтапыОплаты",
			Отказ
		);
	
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках вхождения цен документа продажи в допустимый диапазон
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахВхождениеЦенВДопустимыйДиапазон(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Знач ИмяТЧ,
	                                                       Знач ПредставлениеТЧ,
	                                                       Отказ,
	                                                       ИспользоватьСкидкиНаценки)

	Пока Выборка.Следующий() Цикл

		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Если Выборка.ЕстьОшибкиМинимальноДопустимаяЦена Тогда

			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",             Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%",           Выборка.Характеристика);  
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МинимальноДопустимаяЦена%", Выборка.МинимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",               Выборка.ВалютаЦены);

			Иначе

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" не должна быть ниже минимально допустимой цены ""%МинимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
				
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",             Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МинимальноДопустимаяЦена%", Выборка.МинимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",               Выборка.ВалютаЦены);

			КонецЕсли;

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
				Отказ
			);

		КонецЕсли;

		Если Выборка.ЕстьОшибкиМаксимальноДопустимаяЦена Тогда

			Если ЗначениеЗаполнено(Выборка.Характеристика) Тогда

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" с характеристикой ""%Характеристика%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%", Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Характеристика%", Выборка.Характеристика);  
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%", Выборка.ВалютаЦены);

			Иначе

				Если ИспользоватьСкидкиНаценки Тогда
					ТекстОшибки = НСтр("ru='Цена с учетом скидки (наценки) на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				Иначе
					ТекстОшибки = НСтр("ru='Цена на номенклатуру ""%Номенклатура%"" не должна быть выше максимально допустимой цены ""%МаксимальноДопустимаяЦена% %ВалютаЦены%""'");
				КонецЕсли;
					
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",              Выборка.Номенклатура);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальноДопустимаяЦена%", Выборка.МаксимальноДопустимаяЦена);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВалютаЦены%",                Выборка.ВалютаЦены);

			КонецЕсли;

			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Цена"),
				Отказ
			);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе продажи
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахНаличиеУслугВДокументеПродажи(Знач Выборка,
	                                                     Знач ДокументПродажи,
	                                                     Знач ИмяТЧ,
	                                                     Знач ПредставлениеТЧ,
	                                                     Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Нельзя указывать номенклатуру с типом ""Услуга"" (строка %НомерСтроки% списка ""%ПредставлениеТЧ%"")'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Номенклатура%",    Выборка.Номенклатура);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			ДокументПродажи,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки,"Номенклатура"),
			Отказ
		);
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения об ошибках наличия услуг в документе продажи
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахДопустимостьРучныхСкидокНаценок(Знач Выборка,
	                                                       Знач ДокументПродажи,
	                                                       Знач ИмяТЧ,
	                                                       Знач ПредставлениеТЧ,
	                                                       Отказ)
	
	Пока Выборка.Следующий() Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""%ПредставлениеТЧ%""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%",     Выборка.НомерСтроки);
		АдресОшибки = СтрЗаменить(АдресОшибки, "%ПредставлениеТЧ%", ПредставлениеТЧ);
		
		Если Выборка.ЕстьОшибкиЗаполненияРучнойСкидки Тогда
		
			ТекстОшибки = НСтр("ru='Ручная скидка превышает максимально допустимую скидку ""%МаксимальнаяСуммаРучнойСкидки% %""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальнаяСуммаРучнойСкидки%", Выборка.МаксимальнаяСуммаРучнойСкидки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",                   Выборка.НомерСтроки);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"ПроцентРучнойСкидки"),
				Отказ
			);
			
		ИначеЕсли Выборка.ЕстьОшибкиЗаполненияРучнойНаценки Тогда
				
			ТекстОшибки = НСтр("ru='Ручная наценка превышает максимально допустимую наценку ""%МаксимальнаяСуммаРучнойНаценки% %""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%МаксимальнаяСуммаРучнойНаценки%", Выборка.МаксимальнаяСуммаРучнойНаценки);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%",                    Выборка.НомерСтроки);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				ДокументПродажи,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки,"ПроцентРучнойСкидки"),
				Отказ
			);
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Выводит сообщения о том, что скидки не рассчитаны
//
// Параметры:
// Выборка         - Выборка из результата запроса
// ДокументПродажи - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ           - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахСкидкиНеРассчитаны(Знач ДокументПродажи, Отказ)

	ТекстОшибки = НСтр("ru='Автоматические скидки (наценки) не рассчитаны. Необходимо осуществить расчет автоматических скидок (наценок) в документе'");
	
	СообщитьПользователюОбОшибке(
		ТекстОшибки,
		ДокументПродажи,
		,
		Отказ
	);
	
КонецПроцедуры

// Выводит сообщения об ошибках корректности количества этапов оплаты соглашения
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьКоличестваЭтаповОплатыСоглашения(Знач Выборка,
	                                                                    Знач ДокументПродажи,
	                                                                    Отказ)

	Выборка.Следующий();

	Если Выборка.ЕстьОшибкиЗаполненияЭтапыОплатыСоглашения Тогда
			
		ТекстОшибки = НСтр("ru='Количество этапов оплаты в индивидуальном соглашении (%КоличествоЭтаповСоглашения%) должно совпадать с количеством этапов в типовом соглашении (%КоличествоЭтаповСоглашенияОснования%)'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповСоглашения%", Выборка.КоличествоЭтаповСоглашения);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КоличествоЭтаповСоглашенияОснования%",   Выборка.КоличествоЭтаповСоглашенияОснования);
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			,
			"КомандаПереходаКОплате",
			Отказ
		);
	
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения этапов графика оплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКорректностьЭтаповОплатыСоглашения(Знач Выборка,
	                                                          Знач ДокументПродажи,
	                                                          Отказ)

	СуммаПроцентов = 0;
	СуммаПроцентовШаблона =0;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтапШаблонаОтсутствует Тогда
			Продолжить;
		КонецЕсли;
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Этапы оплаты""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Выборка.НомерСтроки);

		Если Выборка.ЕстьОшибкиЗаполненияВариантаОплаты Тогда

			ТекстОшибки = НСтр("ru='Вариант оплаты отличается от значения в графике оплаты ""%ВариантОплатыШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВариантОплатыШаблона%", Выборка.ВариантОплатыШаблона); 

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				,
				"КомандаПереходаКОплате",
				Отказ
			);

		КонецЕсли;
		
		Если Выборка.СдвигШаблона < Выборка.Сдвиг Тогда

			ТекстОшибки = НСтр("ru='Сдвиг должен быть не больше, чем в соглашении ""%СдвигШаблона%""'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СдвигШаблона%", Выборка.СдвигШаблона); 

			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				,
				"КомандаПереходаКОплате",
				Отказ
			);
		
		КонецЕсли;
		
		// Проверка отклонений процентов платежей
		СуммаПроцентов = СуммаПроцентов + Выборка.ПроцентПлатежа;
		СуммаПроцентовШаблона = СуммаПроцентовШаблона + Выборка.ПроцентПлатежаШаблона;
		Если СуммаПроцентов < СуммаПроцентовШаблона Тогда
			
			ТекстОшибки = НСтр("ru='Проценты до следующего платежа по графику (""%ПроцентПлатежа%%"") не должны быть меньше процентов по соглашению (""%ПроцентПлатежаШаблона%%"")'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежа%", СуммаПроцентов);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПроцентПлатежаШаблона%", СуммаПроцентовШаблона);
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки + АдресОшибки,
				,
				"КомандаПереходаКОплате",
				Отказ
			);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения возвращаемых товаров
//
// Параметры:
// ТаблицаОшибок          - Выгрузка результата запроса
// ВозвратПоЧеку          - Булево
//
Процедура СообщитьОбОшибкахКорректностиВозвращаемыхТоваров(Знач ТаблицаОшибок, ВозвратПоЧеку)
	
	Для каждого СтрокаОшибки Из ТаблицаОшибок Цикл
		СообщениеОбОшибке = НСтр("ru='Возврат по номенклатуре %Номенклатура% \ %Характеристика% превышает количество реализованных товаров по документу продажи %НомерРеализации% на %Количество% %ЕдиницаИзмерения%'");
		Если СтрокаОшибки.Количество < 0 Тогда
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Номенклатура%",         СтрокаОшибки.Номенклатура);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Характеристика%",       СтрокаОшибки.Характеристика);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Количество%",          -СтрокаОшибки.Количество);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%ЕдиницаИзмерения%",     СтрокаОшибки.ЕдиницаИзмерения);
			СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%НомерРеализации%",      СтрокаОшибки.НомерРеализации);
			Если ВозвратПоЧеку Тогда 
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "документу продажи",  "чеку ККМ");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаОшибки.Характеристика) Тогда
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "\",      "");
			КонецЕсли; 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

// Выводит сообщения об ошибках корректности заполнения суммы предоплаты
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахСоответствиеСуммыПредоплатыГрафикуОплат(Знач Выборка,
	                                                          Знач ДокументПродажи,
	                                                          Отказ)

	Если Выборка.Следующий() И Выборка.ЕстьОшибкиСоответствиеСуммыПредоплатыГрафикуОплат Тогда
		
		ТекстОшибки = НСтр("ru='Сумма предоплаты не соответствует сумме, рассчитанной по графику оплаты соглашения %СуммаПредоплатыПоГрафику%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаПредоплатыПоГрафику%", Формат(Выборка.СуммаПредоплатыПоГрафику, "ЧДЦ=2; ЧН=0,00"));
		
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			,
			"КомандаПереходаКОплате",
			Отказ
		);
	
	КонецЕсли;

КонецПроцедуры

// Выводит сообщения об ошибках контроля завершения расчетов
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКонтрольЗавершенияРасчетов(Знач Выборка,
	                                                          Знач ДокументПродажи,
	                                                          Отказ)
	Если Выборка.Следующий() Тогда 
		Если Выборка.ЕстьНезавершенныеРасчеты  Тогда
			Если ТипЗнч(ДокументПродажи) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
				ТекстОшибки = НСтр("ru='Расчеты по заказу не завершены.
				|Для закрытия заказа требуется оплата %СуммаКОплате% %Валюта%.
				|Закрытие заказа возможно только с полностью оплаченными/отмененными строками'");
			Иначе
				ТекстОшибки = НСтр("ru='Расчеты по заявке не завершены. Требуется оплата %СуммаКОплате% %Валюта%.
				|Заявка может быть переведена в статус ""Выполнена"" только с полностью оплаченными/отмененными строками'");
			КонецЕсли;
			
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаКОплате%",      Строка(Выборка.КОплатеОстаток));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",      Строка(Выборка.Валюта));
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				,
				,
				Отказ
			);
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументПродажи.ЭтоНовый() Тогда
			Если ТипЗнч(ДокументПродажи) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
				ТекстОшибки = НСтр("ru='Заказ не оплачен. Закрытие заказа возможно только с полностью оплаченными/отмененными строками'");
			Иначе
				ТекстОшибки = НСтр("ru='Расчеты по заявке не завершены. Заявка может быть переведена в статус ""Выполнена"" только с полностью оплаченными/отмененными строками'");
			КонецЕсли;
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				,
				,
				Отказ
			);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках контроля завершения отгрузки
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахКонтрольЗавершенияОтгрузки (Знач Выборка,
	                                                          Знач ДокументПродажи,
	                                                          Отказ)
	Если Выборка.Следующий() Тогда 
		Если Выборка.ЕстьНезавершеннаяОтгрузка Тогда
			Если ТипЗнч(ДокументПродажи) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
				ТекстОшибки = НСтр("ru='Заказ отгружен не полностью.
				|Закрытие заказа возможно только с полностью отгруженными/отмененными строками'");
			Иначе
				ТекстОшибки = НСтр("ru='Заменяющие товары отгружены не полностью.
				|Заявка может быть переведена в статус ""Выполнена"" только с полностью оплаченными/отмененными строками'");
			КонецЕсли;
			
			СообщитьПользователюОбОшибке(
					ТекстОшибки,
					,
					,
					Отказ
				);
		КонецЕсли;
	КонецЕсли;
		
	Если ДокументПродажи.ЭтоНовый() Тогда
			Если ТипЗнч(ДокументПродажи) = Тип("ДокументОбъект.ЗаказКлиента") Тогда
				ТекстОшибки = НСтр("ru='Заказ не отгружен. Закрытие заказа невозможно.
				|Закрытие заказа возможно только с полностью отгруженными/отмененными строками'");
			Иначе
				ТекстОшибки = НСтр("ru='Заменяющие товары не отгружены. Заявка не может быть переведена в статус ""Выполнена"".
				|Заявка может быть переведена в статус ""Выполнена"" только с полностью отгруженными/отмененными строками'");
			КонецЕсли;
			
			СообщитьПользователюОбОшибке(
				ТекстОшибки,
				,
				,
				Отказ
			);
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения об ошибках контроля заполнения подразделения при наличии работ
//
// Параметры:
// Выборка          - Выборка из результата запроса
// ДокументПродажи  - ДокументОбъект, для которого необходимо вывести сообщения об ошибках
// Отказ            - Булево - Флаг отказа от проведения документа
//
Процедура СообщитьОбОшибкахЗаполнениеПодразделенияПриНаличииРабот(Знач Выборка, Знач ДокументПродажи, Отказ)
	
	Если Выборка.Следующий() Тогда 
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='В заказе имеются работы (%1). Заполните подразделение.'")
			, Выборка.Номенклатура
		);
		СообщитьПользователюОбОшибке(
			ТекстОшибки,
			,
			,
			Отказ
		);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции для расчета цен продажи.

// Возвращает текст запроса временной таблицы товаров
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыТоваров(ИмяТаблицы)
	
	Возврат "
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Упаковка КАК Упаковка
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	
КонецФункции

// Возвращает текст запроса временной таблицы товаров списания
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыТоваровСписания(ИмяТаблицы)
	
	Возврат "
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	&Таблица КАК Таблица
	|;
	|";
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
// 		ВидЦенКакПараметр - Булево - Истина, если в запросе "ВидЦен" должен использоваться как параметр; Ложь - если как поле временной таблицы товаров
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦен(ИмяТаблицы, ИмяВременнойТаблицыТоваров, ВидЦеныКакПараметр=Истина)
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ЦеныНоменклатурыСрезПоследних.ВидЦены КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА
	|			ВременнаяТаблицаТовары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|		ТОГДА
	|			ВременнаяТаблицаТовары.Упаковка.Коэффициент
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|	* ВЫБОР КОГДА  ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)>0 ТОГДА 
	|		 ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Цена,0)
	|      ИНАЧЕ
	|        ЕстьNULL(ЦеныАртикул.Цена,0)
	|КОНЕЦ /ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент,1)
	|	* ВЫБОР
	|		КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыВалютыЦены.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалютыЦены.Курс, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Кратность, 0) > 0
	|						И ЕСТЬNULL(КурсыВалюты.Курс, 0) > 0
	|					ТОГДА 
	|						(КурсыВалютыЦены.Курс * КурсыВалюты.Кратность)
	|						/ (КурсыВалюты.Курс * КурсыВалютыЦены.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	| " + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	| " + ?(ВидЦеныКакПараметр,"
	|				ВидЦены = &ВидЦены И
	|				(Номенклатура, Характеристика) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура ,
	|					ВременнаяТаблицаТовары.Характеристика
	|				ИЗ
	|					" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары)
	|", "
	|				(Номенклатура, Характеристика, ВидЦены) В
	
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура,
	|					ВременнаяТаблицаТовары.Характеристика,
	|					ВременнаяТаблицаТовары.ВидЦены
	|				ИЗ
	|					" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары)
	|") + "
	|) КАК ЦеныНоменклатурыСрезПоследних
	|ПО
	|	ВременнаяТаблицаТовары.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|   И ВременнаяТаблицаТовары.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|	" + ?(ВидЦеныКакПараметр,"", "И ВременнаяТаблицаТовары.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены") + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
	| " + ?(ВидЦеныКакПараметр,"
	|				ВидЦены = &ВидЦены И
	|				Характеристика =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) И
	|				Номенклатура В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура
	|  ИЗ
	|					" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары)
	|", "            Характеристика =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) И
	|				(Номенклатура,  ВидЦены) В
	|				(ВЫБРАТЬ
	|					ВременнаяТаблицаТовары.Номенклатура,
	|					ВременнаяТаблицаТовары.ВидЦены
	|				ИЗ
	|					" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары)
	|				
	|") + "
	|) КАК ЦеныАртикул
	|ПО
	|	ВременнаяТаблицаТовары.Номенклатура = ЦеныАртикул.Номенклатура
	|	И ЦеныАртикул.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|	" + ?(ВидЦеныКакПараметр,"", "И ВременнаяТаблицаТовары.ВидЦены = ЦеныАртикул.ВидЦены") + "
	|
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютыЦены
	|ПО 
	|	ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта
	|	
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалюты
	|	По Истина
	|;
	|";
	
КонецФункции

// Возвращает текст запроса временной таблицы себестоимости товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
// 		ПредварительныйРасчет - Булево - В зависимости от этого параметра будет выбираться способ получения стоимостей товаров
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыСебестоимостей(ИмяТаблицы, ИмяВременнойТаблицыТоваров, ПредварительныйРасчет)
	
	Если ПредварительныйРасчет Тогда
		
		Возврат "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоваров.НомерСтроки,
		|	ВременнаяТаблицаТоваров.Номенклатура,
		|	ВременнаяТаблицаТоваров.Характеристика,
		|	СправочникКлючейАналитики.Ссылка КАК КлючАналитикиУчетаНоменклатуры 
		| ПОМЕСТИТЬ ТаблицаТоваровСКлючамиАналитики
		|ИЗ 
		|	" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТоваров
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК СправочникКлючейАналитики
		|		ПО (СправочникКлючейАналитики.Номенклатура = ВременнаяТаблицаТоваров.Номенклатура)
		|			И (СправочникКлючейАналитики.Характеристика = ВременнаяТаблицаТоваров.Характеристика)
		|			И (СправочникКлючейАналитики.Склад = &Склад);
		|
		|	ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		ТаблицаТоваровСКлючамиАналитики.НомерСтроки КАК НомерСтроки,
		|		СРЕДНЕЕ(ЕСТЬNULL(ЦеныНоменклатуры.СтоимостьРегл, 0)) КАК Цена
		|ПОМЕСТИТЬ " + ИмяТаблицы + "
		|	ИЗ
		|		ТаблицаТоваровСКлючамиАналитики КАК ТаблицаТоваровСКлючамиАналитики
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтоимостьТоваров.СрезПоследних(
		|					КОНЕЦПЕРИОДА(&Дата, ДЕНЬ),
		|					(АналитикаУчетаНоменклатуры, Организация) В
		|						(ВЫБРАТЬ
		|							Таблица.КлючАналитикиУчетаНоменклатуры,
		|							&Организация				
		|						ИЗ
		|							ТаблицаТоваровСКлючамиАналитики КАК Таблица)) КАК ЦеныНоменклатуры
		|		ПО ТаблицаТоваровСКлючамиАналитики.КлючАналитикиУчетаНоменклатуры = ЦеныНоменклатуры.АналитикаУчетаНоменклатуры
		|			И (ЦеныНоменклатуры.Организация = &Организация)
		|			
		|СГРУППИРОВАТЬ ПО 
		|ТаблицаТоваровСКлючамиАналитики.НомерСтроки; 
		|";
		
		
	Иначе
		
		Возврат "
		|ВЫБРАТЬ
		|	ВременнаяТаблицаТоваров.НомерСтроки,
		|	ВременнаяТаблицаТоваров.Номенклатура,
		|	ВременнаяТаблицаТоваров.Характеристика,
		|	СправочникКлючейАналитики.Ссылка КАК КлючАналитикиУчетаНоменклатуры 
		| ПОМЕСТИТЬ ТаблицаТоваровСКлючамиАналитики
		|ИЗ 
		|	" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТоваров
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК СправочникКлючейАналитики
		|		ПО (СправочникКлючейАналитики.Номенклатура = ВременнаяТаблицаТоваров.Номенклатура)
		|			И (СправочникКлючейАналитики.Характеристика = ВременнаяТаблицаТоваров.Характеристика)
		|			И (СправочникКлючейАналитики.Склад = &Склад);
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаТоваровСКлючамиАналитики.НомерСтроки КАК НомерСтроки,
		|	ВЫБОР 
		|		КОГДА СУММА(ЕСТЬNULL(СебестоимостьТоваров.КоличествоОстаток, 0)) <> 0
		|			ТОГДА 
		|				СУММА (ЕСТЬNULL(СебестоимостьТоваров.СтоимостьРеглОстаток, 0)) / СУММА(ЕСТЬNULL(СебестоимостьТоваров.КоличествоОстаток, 0))
		|			ИНАЧЕ 0
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ " + ИмяТаблицы + "
		|ИЗ
		|ТаблицаТоваровСКлючамиАналитики КАК ТаблицаТоваровСКлючамиАналитики
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СебестоимостьТоваров.Остатки(КОНЕЦПЕРИОДА(&Дата, МЕСЯЦ), Организация = &Организация) КАК СебестоимостьТоваров
		|		ПО ТаблицаТоваровСКлючамиАналитики.КлючАналитикиУчетаНоменклатуры = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
		|			И (СебестоимостьТоваров.Организация = &Организация)
		|СГРУППИРОВАТЬ ПО 
		|	ТаблицаТоваровСКлючамиАналитики.НомерСтроки;
		|";		
		
	КонецЕсли;
	
КонецФункции

// Возвращает текст запроса временной таблицы цен товаров по номерам строк
//
// Параметры:
// 		ИмяТаблицы - Строка - Строка имени для временной таблицы
// 		ИмяВременнойТаблицыТоваров - Строка - Строка имени временной таблицы товаров
//
// Возвращаемое значение:
// 		Строка - Текст запроса временной таблицы
//
Функция ПолучитьТекстЗапросаВременнойТаблицыЦенПоСоглашению(ИмяТаблицы, ИмяВременнойТаблицыТоваров)
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВременнаяТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|	ВременнаяТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ВременнаяТаблицаТовары.Характеристика КАК Характеристика,
	|	ВременнаяТаблицаТовары.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА
	|			СоглашениеШапка.ВозвращатьМногооборотнуюТару
	|			И ВременнаяТаблицаТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|		ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|		КОГДА СоглашениеШапка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			ТОГДА ВременнаяТаблицаТовары.Номенклатура.СтавкаНДС
	|		КОГДА СоглашениеШапка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаНаЭкспорт)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|	КОНЕЦ КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ЕСТЬNULL(ВременнаяТаблицаТовары.Упаковка.Коэффициент, 1) * ЕСТЬNULL(СоглашениеТовары.Цена, 0) / ЕСТЬNULL(СоглашениеТовары.Упаковка.Коэффициент, 1) * ВЫБОР
	|		КОГДА &Валюта <> СоглашениеШапка.Валюта
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
	|							И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|							И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|						ТОГДА КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
	|			ТОГДА СоглашениеТовары.СрокПоставки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
	|					ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
	|				ИНАЧЕ СоглашениеШапка.СрокПоставки
	|			КОНЕЦ
	|	КОНЕЦ КАК СрокПоставки
	|ПОМЕСТИТЬ " + ИмяТаблицы + "
	|ИЗ
	|	" + ИмяВременнойТаблицыТоваров + " КАК ВременнаяТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И ВременнаяТаблицаТовары.Номенклатура = СоглашениеТовары.Номенклатура
	|			И ВременнаяТаблицаТовары.Характеристика = СоглашениеТовары.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = ВременнаяТаблицаТовары.Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|			И (СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаСоглашения
	|		ПО (КурсыСрезПоследнихВалютаСоглашения.Валюта = СоглашениеШапка.Валюта)
	|;
	|";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры инициализации правил продаж.

Функция ПолучитьСтруктуруУсловийПродаж()
	//АК изменено
	Возврат Новый Структура("
		|Партнер,
		|Контрагент,
		|КонтактноеЛицо,
		|Соглашение,
		|Организация,
		|Валюта,
		|Период,
		|ГрафикОплаты,
		|ФормаОплаты,
		|ПорядокОплаты,
		|ГруппаФинансовогоУчета,
		|СуммаДокумента,
		|Регулярное,
		|КоличествоПериодов,
		|СрокПоставки,
		|ВидЦен,
		|ЦенаВключаетНДС,
		|НалогообложениеНДС,
		|ИспользуетсяВРаботеТорговыхПредставителей,
		|Склад,
		|СегментНоменклатуры,
		|Типовое,
		|ДатаНачалаДействия,
		|ДатаОкончанияДействия,
		|ХозяйственнаяОперация,
		|ОграничиватьРучныеСкидки,
		|ПроцентРучнойСкидки,
		|ПроцентРучнойНаценки,
		|СпособРасчетаВознаграждения,
		|ПроцентВознаграждения,
		|УдержатьВознаграждение,
		|ИспользуютсяДоговорыКонтрагентов,
		|ПорядокРасчетов,
		|ДоступноВнешнимПользователям,
		|СтатусСоглашения,
		|ВозвращатьМногооборотнуюТару,
		|СрокВозвратаМногооборотнойТары,
		|РассчитыватьДатуВозвратаТарыПоКалендарю,
		|АК_УсловияПоставки
		|");
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции.

// Возвращает текст запроса, формирующего таблицу с объектами расчетов по договору
//
// Возвращаемое значение:
// 		Строка
//
Функция ТекстЗапросаОбъектыРасчетов()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеДоговора.Ссылка КАК ОбъектРасчетов
	|
	|ПОМЕСТИТЬ ОбъектыРасчетов
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
	|ГДЕ
	|	ДанныеДоговора.Ссылка = &Договор
	|	И ДанныеДоговора.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДанныеДокумента.Договор = &Договор
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|	И ДанныеДокумента.Договор = &Договор
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|	И ДанныеДокумента.Договор = &Договор
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДанныеДокумента.Договор = &Договор
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДанныеДокумента.Договор = &Договор
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДанныеДокумента.Договор = &Договор
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДанныеДокумента.Договор = &Договор
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК ОбъектРасчетов
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
	|	И ДанныеДокумента.Договор = &Договор
	|	И ДанныеДокумента.Проведен
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает остаток допустимого кредита по данным расчетов с клиентом и допустимой суммы задолженности
//
// Параметры:
//	Договор          - СправочникСсылка.Договор - Договор, по которому определяется задолженность клиента
//	ДопустимыйКредит - Число - Значение допустимой суммы задолженности
//
// Возвращаемое значение:
//	Число
//
Функция ОстатокДопустимогоКредита(Договор, ДопустимыйКредит)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(ТекстЗапросаОбъектыРасчетов() + "
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток КАК ОстатокДолга
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|		,
	|		ЗаказКлиента В (ВЫБРАТЬ ОбъектРасчетов ИЗ ОбъектыРасчетов)
	|	) КАК РасчетыСКлиентамиОстатки
	|");
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОстатокДопустимогоКредита = ДопустимыйКредит - Выборка.ОстатокДолга;
	Иначе
		ОстатокДопустимогоКредита = ДопустимыйКредит;
	КонецЕсли;
	
	Возврат ОстатокДопустимогоКредита;
	
КонецФункции

// Рассчитывает сумму предоплаты по реализации в сооветствии с графиком оплаты соглашения с клиентом
//
// Параметры:
//	Объект                               - ДокументОбъект - Документ, по которому рассчитывается сумма предоплаты
//	ЭтапыГрафикаОплаты                   - ТабличнаяЧасть - Табличная часть этапов оплаты
//	СуммаКОплате                         - Число - Реквизит, которому присваивается сумма взаиморасчетов по документу
//	ИмяКолонкиВзаиморасчетов             - Строка - Имя колонки табличной части "Товары", по которой рассчитывается сумма к оплате
//	НеПересчитыватьВВалютуВзаиморасчетов - Булево - Определяет необходимость пересчета суммы документа
//
// Возвращаемое значение:
//	Число
//
Функция СуммаПредоплатыПоСоглашению(Знач Объект, Знач ЭтапыГрафикаОплаты, СуммаКОплате, ИмяКолонкиВзаиморасчетов = "СуммаВзаиморасчетов", НеПересчитыватьВВалютуВзаиморасчетов = Ложь) Экспорт
	
	Перем СуммаПредоплаты;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
		Возврат 0;
	КонецЕсли;
	
	ГрафикОплаты             = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ГрафикОплаты");
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	
	Если ЗначениеЗаполнено(ГрафикОплаты) ИЛИ ГрафикСоглашенияЗаполнен Тогда
		
		Объект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС);
		
		Если Объект.Товары.НайтиСтроки(Новый Структура(ИмяКолонкиВзаиморасчетов, 0)).Количество()=0 ИЛИ НеПересчитыватьВВалютуВзаиморасчетов Тогда
			СуммаКОплате = Объект.Товары.Итог(ИмяКолонкиВзаиморасчетов);
		Иначе
			ВзаиморасчетыСервер.ЗаполнитьСуммуВзаиморасчетов(Объект);
			СуммаКОплате = Объект.СуммаВзаиморасчетов;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Соглашение", Объект.Соглашение);
		СтруктураПараметров.Вставить("Дата", Объект.Дата);
		СтруктураПараметров.Вставить("ЖелаемаяДатаОтгрузки", Объект.Дата);
		СтруктураПараметров.Вставить("ЭтапыГрафикаОплаты", ЭтапыГрафикаОплаты);
		СтруктураПараметров.Вставить("ГрафикОплаты", ГрафикОплаты);
		
		Если ГрафикСоглашенияЗаполнен Тогда
			ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(
				СтруктураПараметров,
				СуммаКОплате,
				Ложь // ЗаполнятьФормуОплаты
			);
		ИначеЕсли ЗначениеЗаполнено(ГрафикОплаты) Тогда
			ЗаполнитьЭтапыГрафикаОплаты(
				СтруктураПараметров,
				СуммаКОплате,
				Ложь // ЗаполнятьФормуОплаты
			);
		КонецЕсли;
		
		СуммаПредоплаты = 0;
		
		Для Каждого СтрокаЭтапа Из ЭтапыГрафикаОплаты Цикл
			Если СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения
			 ИЛИ СтрокаЭтапа.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
				СуммаПредоплаты = СуммаПредоплаты + СтрокаЭтапа.СуммаПлатежа;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СуммаПредоплаты;
	
КонецФункции

// Возвращает сумму просроченной задолженности по данным расчетов с клиентом
//
// Параметры:
//	Договор       - СправочникСсылка.Договор - Договор, по которому определяется задолженность клиента
//	ДатаДокумента - Дата - Дата документа, для которого выполняется контроль суммы просроченной задолженности
//
// Возвращаемое значение:
//	Число
//
Функция СуммаПросроченнойЗадолженности(Договор, ДатаДокумента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(ТекстЗапросаОбъектыРасчетов() + "
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток > РасчетыСКлиентамиОстатки.КОплатеОстаток ТОГДА
	|		РасчетыСКлиентамиОстатки.КОплатеОстаток
	|	ИНАЧЕ
	|		РасчетыСКлиентамиОстатки.СуммаОстаток
	|	КОНЕЦ), 0) КАК ПросроченнаяЗадолженность
	|
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(
	|		&ПериодКонтроляСрокаДолга,
	|		ЗаказКлиента В (ВЫБРАТЬ ОбъектРасчетов ИЗ ОбъектыРасчетов)
	|	) КАК РасчетыСКлиентамиОстатки
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ОбъектыРасчетов КАК ОбъектыРасчетов
	|	ПО
	|		РасчетыСКлиентамиОстатки.ЗаказКлиента = ОбъектыРасчетов.ОбъектРасчетов
	|
	|ГДЕ
	|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
	|	И РасчетыСКлиентамиОстатки.КОплатеОстаток > 0
	|");
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("ПериодКонтроляСрокаДолга", Макс(КонецДня(ТекущаяДата()), КонецДня(ДатаДокумента)));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаПросроченнойЗадолженности = Выборка.ПросроченнаяЗадолженность;
	Иначе
		СуммаПросроченнойЗадолженности = 0;
	КонецЕсли;
	
	Возврат СуммаПросроченнойЗадолженности;
	
КонецФункции
