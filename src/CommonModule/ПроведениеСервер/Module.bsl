///////////////////////////////////////////////////////////////////////////////////
// Процедуры для подготовки и записи движений документа.

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);

КонецПроцедуры

Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет пордготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
// Вызывается из модуля документов при проведении.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь) Экспорт
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		ИсключаемыеРегистры.Добавить("ГрафикДвиженияТоваров");
		
		// Регистры, движения по которым формируются не из модуля менеджера документа,
		// но должны удаляться при отмене проведения документа.
		Если Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
		 И НЕ Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			ИсключаемыеРегистры.Добавить("РасчетыСКлиентамиПоДокументам");
			ИсключаемыеРегистры.Добавить("РасчетыСПоставщикамиПоДокументам");
			ИсключаемыеРегистры.Добавить("Хозрасчетный");
			Если 
			 ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЗаписьКнигиПокупок")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЗаписьКнигиПродаж")
			 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
				ИсключаемыеРегистры.Добавить("ПартииПроизводственныхЗатрат");  
				ИсключаемыеРегистры.Добавить("ПартииНезавершенногоПроизводства");
				ИсключаемыеРегистры.Добавить("ПартииТоваровОрганизаций");
				ИсключаемыеРегистры.Добавить("ПартииТоваровПереданныеНаКомиссию");
				ИсключаемыеРегистры.Добавить("ПартииЗатратНаВыпуск");
				ИсключаемыеРегистры.Добавить("НДСЗаписиКнигиПокупок");
				ИсключаемыеРегистры.Добавить("НДСЗаписиКнигиПродаж");
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
			Объект.Ссылка,
			МетаданныеДвижения,
			ИсключаемыеРегистры);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля;

	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда

				// Установка флага регистрации изменений в наборе записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

				// Структура для передачи данных в модули наборов записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
						Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	//Для отработки случаев, когда документ перестает делать движения по регистру (при изменении вида операции). Очистим оффлайновые регистры.
	Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Если Объект.Движения.Найти("РасчетыСКлиентами") <> Неопределено Тогда

			Если Объект.Движения.РасчетыСКлиентами.Количество() = 0 И Объект.Движения.РасчетыСКлиентами.Записывать Тогда
				Объект.Движения.РасчетыСКлиентамиПоДокументам.Записывать = Истина;
			КонецЕсли;

		КонецЕсли;

		Если Объект.Движения.Найти("РасчетыСПоставщиками") <> Неопределено Тогда

			Если Объект.Движения.РасчетыСПоставщиками.Количество() = 0 И Объект.Движения.РасчетыСПоставщиками.Записывать Тогда
				Объект.Движения.РасчетыСПоставщикамиПоДокументам.Записывать = Истина;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	// Перед записью движений РасчетыСКлиентами используется дата регистратора.
	Если Объект.Движения.Найти("РасчетыСКлиентами") <> Неопределено Тогда

		Объект.Движения.РасчетыСКлиентами.ДополнительныеСвойства.Вставить("ДатаРегистратора", Объект.Дата);

	КонецЕсли;

	Объект.Движения.Записать();

КонецПроцедуры

/////////////////////////////////////////////а//////////////////////////////////////
// Процедуры контроля движений документов по регистрам.

// Функция проверяет наличие изменений в таблице регистра.
//
Функция ЕстьИзмененияВТаблице(СтруктураДанных, Ключ)
	Перем ЕстьИзменения;

	Возврат СтруктураДанных.Свойство(Ключ, ЕстьИзменения) И ЕстьИзменения;

КонецФункции

// Процедура выполняет контроль результатов проведения.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт

	Если Объект.ДополнительныеСвойства.ДляПроведения.РегистрыДляКонтроля.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ДанныеТаблиц    = Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ПакетЗапросов   = Новый Запрос;
	МассивКонтролей = Новый Массив;
	ТекстЗапроса    = "";

	// Контроль отрицательных остатков по товарам
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияСвободныеОстаткиИзменение")
		Или ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДвижениеТоваровИзменение") Тогда

		ТекстЗапроса = ТекстЗапроса + 
				СформироватьЗапросПоКонтролюДоступныхОстатков(ПакетЗапросов, МассивКонтролей, ДанныеТаблиц);

	КонецЕсли;

	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРезервыСерийТоваровИзменениеСводно") Тогда

		МассивКонтролей.Добавить(Врег("ДвиженияРезервыСерийТоваровСводно"));

		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	Остатки.Номенклатура      КАК Номенклатура,
		|	Остатки.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	Остатки.Характеристика    КАК Характеристика,
		|	Остатки.Склад             КАК Склад,
		|	Остатки.Серия             КАК Серия,
		|	СУММА(Остатки.Количество) КАК Количество
		|
		|ИЗ 
		|(ВЫБРАТЬ
		|	Т.Номенклатура       КАК Номенклатура,
		|	Т.Характеристика     КАК Характеристика,
		|	Т.Склад              КАК Склад,
		|	Т.Серия              КАК Серия,
		|	-Т.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.РезервыСерийТоваров.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад, Серия) В
		|				(ВЫБРАТЬ
		|					Т.Номенклатура,
		|					Т.Характеристика,
		|					Т.Склад,
		|					Т.Серия
		|				ИЗ
		|					ДвиженияРезервыСерийТоваровИзменениеСводно КАК Т)) КАК Т
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Номенклатура    КАК Номенклатура,
		|	Т.Характеристика  КАК Характеристика,
		|	Т.Склад           КАК Склад,
		|	Т.Серия           КАК Серия,
		|	Т.ВНаличииОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад, Серия) В
		|				(ВЫБРАТЬ
		|					Т.Номенклатура,
		|					Т.Характеристика,
		|					Т.Склад,
		|					Т.Серия
		|				ИЗ
		|					ДвиженияРезервыСерийТоваровИзменениеСводно КАК Т)) КАК Т
		|) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Номенклатура,
		|	Остатки.Характеристика,
		|	Остатки.Склад,
		|	Остатки.Серия
		|
		|ИМЕЮЩИЕ
		|	СУММА(Остатки.Количество) < 0	
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ОбеспечениеЗаказовИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ОбеспечениеЗаказов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	Таблица.Номенклатура                     КАК Номенклатура,
		|	Таблица.ЕдиницаИзмерения                 КАК ЕдиницаИзмерения,
		|	Таблица.Характеристика                   КАК Характеристика,
		|	Таблица.Склад                            КАК Склад,
		|	Таблица.Назначение                       КАК Назначение,
		|
		|	Таблица.Заказать                         КАК Заказать,
		|	Таблица.Заказано                         КАК Заказано,
		|	Таблица.Наличие                          КАК Наличие,
		|	Таблица.НаличиеСоСклада                  КАК НаличиеСоСклада,
		|
		|	Таблица.НаличиеИзменение                 КАК НаличиеИзменение,
		|	Таблица.НаличиеСоСкладаИзменение         КАК НаличиеСоСкладаИзменение,
		|	Таблица.ПотребностьИзменение             КАК ПотребностьИзменение,
		|	Таблица.ЗаказаноИзменение                КАК ЗаказаноИзменение,
		|	Таблица.ЗаказатьИзменение                КАК ЗаказатьИзменение,
		|
		|	Таблица.ОшибкаЗаказатьМеньшеНуля         КАК ОшибкаЗаказатьМеньшеНуля,
		|	Таблица.ВеличинаЗаказатьМеньшеНуля       КАК ВеличинаЗаказатьМеньшеНуля,
		|	Таблица.ОшибкаЗаказаноВМинусе            КАК ОшибкаЗаказаноВМинусе,
		|	Таблица.ОшибкаНаличиеВМинусе             КАК ОшибкаНаличиеВМинусе,
		|	Таблица.ОшибкаНаличиеСоСкладаВМинусе     КАК ОшибкаНаличиеСоСкладаВМинусе
		|ИЗ
		|(
		|ВЫБРАТЬ
		|	Остатки.Номенклатура                      КАК Номенклатура,
		|	Остатки.Номенклатура.ЕдиницаИзмерения     КАК ЕдиницаИзмерения,
		|	Остатки.Характеристика                    КАК Характеристика,
		|	Остатки.Склад                             КАК Склад,
		|	Остатки.Назначение                        КАК Назначение,
		|	Остатки.Заказать                          КАК Заказать,
		|	Остатки.Заказано                          КАК Заказано,
		|	Остатки.Наличие                           КАК Наличие,
		|	Остатки.НаличиеСоСклада                   КАК НаличиеСоСклада,
		// Ресурсы которые измениились
		|	ТаблицаИзменений.НаличиеИзменение         КАК НаличиеИзменение,
		|	ТаблицаИзменений.НаличиеСоСкладаИзменение КАК НаличиеСоСкладаИзменение,
		|	ТаблицаИзменений.ПотребностьИзменение     КАК ПотребностьИзменение,
		|	ТаблицаИзменений.ЗаказаноИзменение        КАК ЗаказаноИзменение,
		|	ТаблицаИзменений.ЗаказатьИзменение        КАК ЗаказатьИзменение,
		//Ошибка Заказать
		|	ВЫБОР КОГДА ТаблицаИзменений.ЗаказатьИзменение >0 И Остатки.Заказать < 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ            КАК ОшибкаЗаказатьМеньшеНуля,
		|	Остатки.Заказать КАК ВеличинаЗаказатьМеньшеНуля,
		|
		|
		// Ошибка перезаказа
		|	ВЫБОР КОГДА ТаблицаИзменений.ЗаказаноИзменение >0 И Остатки.Заказано < 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ          КАК ОшибкаЗаказаноВМинусе,
		|
		// Ошибка наличия товара под назначение
		|	ВЫБОР КОГДА ТаблицаИзменений.НаличиеИзменение >0 И Остатки.Наличие < 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ         КАК ОшибкаНаличиеВМинусе,
		|
		// Ошибка наличия под назначение со склада
		|	ВЫБОР КОГДА ТаблицаИзменений.НаличиеСоСкладаИзменение > 0 И Остатки.НаличиеСоСклада < 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ         КАК ОшибкаНаличиеСоСкладаВМинусе
		|
		|
		|ИЗ
		|(	ВЫБРАТЬ
		|		Остатки.Номенклатура                   КАК Номенклатура,
		|		Остатки.Характеристика                 КАК Характеристика,
		|		Остатки.Склад                          КАК Склад,
		|		Остатки.Назначение                     КАК Назначение,
		|		Остатки.КЗаказуОстаток                 КАК Заказать,
		|		Остатки.ЗаказаноОстаток                КАК Заказано,
		|		Остатки.НаличиеПодЗаказОстаток         КАК Наличие,
		|		Остатки.НаличиеСоСкладаОстаток         КАК НаличиеСоСклада
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|				(Номенклатура, Характеристика, Склад, Назначение) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Склад,
		|						Таблица.Назначение
		|					ИЗ
		|						ОбеспечениеЗаказовИзменение КАК Таблица)
		|
		|		) КАК Остатки
		|	) КАК Остатки
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ ОбеспечениеЗаказовИзменение КАК ТаблицаИзменений
		|	ПО
		|		Остатки.Номенклатура     = ТаблицаИзменений.Номенклатура
		|		И Остатки.Характеристика = ТаблицаИзменений.Характеристика
		|		И Остатки.Склад          = ТаблицаИзменений.Склад
		|		И Остатки.Назначение     = ТаблицаИзменений.Назначение
		|
		|) КАК Таблица
		|ГДЕ
		|	Таблица.ОшибкаЗаказатьМеньшеНуля = ИСТИНА
		|	ИЛИ Таблица.ВеличинаЗаказатьМеньшеНуля = ИСТИНА
		|	ИЛИ Таблица.ОшибкаЗаказаноВМинусе = ИСТИНА
		|	ИЛИ Таблица.ОшибкаНаличиеВМинусе = ИСТИНА
		|	ИЛИ Таблица.ОшибкаНаличиеСоСкладаВМинусе = ИСТИНА
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаСборку.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаСборкуИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыНаСборку"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказНаСборку      КАК ЗаказНаСборку,
		|	ТаблицаОстатков.Номенклатура       КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика     КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки          КАК КодСтроки,
		|	ТаблицаОстатков.ТипСборки          КАК ТипСборки,
		|	ТаблицаОстатков.КОформлениюОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыНаСборку.Остатки(,
		|			(ЗаказНаСборку, Номенклатура, Характеристика, ТипСборки, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказНаСборку,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.ТипСборки,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаказыНаСборкуИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаПеремещение.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаПеремещениеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыНаПеремещение"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказНаПеремещение КАК Заказ,
		|	ТаблицаОстатков.Номенклатура       КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика     КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки          КАК КодСтроки,
		|	НЕОПРЕДЕЛЕНО                       КАК Склад,
		|	НЕОПРЕДЕЛЕНО                       КАК Подразделение,
		|	ТаблицаОстатков.КОформлениюОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыНаПеремещение.Остатки(,
		|			(ЗаказНаПеремещение, Номенклатура, Характеристика, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказНаПеремещение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаказыНаПеремещениеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыНаВнутреннееПотребление.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыНаВнутреннееПотреблениеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыНаВнутреннееПотребление"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказНаВнутреннееПотребление  КАК Заказ,
		|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки                     КАК КодСтроки,
		|	ТаблицаОстатков.Склад                         КАК Склад,
		|	НЕОПРЕДЕЛЕНО                                  КАК Подразделение,
		|	ТаблицаОстатков.КОформлениюОстаток            КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(,
		|			(ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика, КодСтроки, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказНаВнутреннееПотребление,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияЗаказыНаВнутреннееПотреблениеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных остатков ТоварыКОтгрузке.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтгрузкеИзменение") Тогда
		
		МассивКонтролей.Добавить(Врег("ТоварыКОтгрузке"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ДокументОтгрузки              КАК ДокументОтгрузки,
		|	ТаблицаОстатков.Номенклатура                  КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                КАК Характеристика,
		|	ТаблицаОстатков.Серия                         КАК Серия,
		|	ТаблицаОстатков.Склад                         КАК Склад,
		|	ТаблицаОстатков.КОтгрузкеОстаток
		|	 - ТаблицаОстатков.СобираетсяОстаток
		|    - ТаблицаОстатков.СобраноОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыКОтгрузке.Остатки(,
		|			(ДокументОтгрузки, Номенклатура, Характеристика, Серия, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ДокументОтгрузки,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Серия,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияТоварыКОтгрузкеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОтгрузкеОстаток - ТаблицаОстатков.СобираетсяОстаток - ТаблицаОстатков.СобраноОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыКлиентов.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыКлиентовИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыКлиентов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказКлиента                   КАК Заказ,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки                      КАК КодСтроки,
		|	ТаблицаОстатков.Склад                          КАК Склад,
		|	ТаблицаОстатков.КОформлениюОстаток             КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыКлиентов.Остатки(,
		|			(ЗаказКлиента, Номенклатура, Характеристика, КодСтроки, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказКлиента,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияЗаказыКлиентовИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаказыПоставщикам.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаказыПоставщикамИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаказыПоставщикам"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаказПоставщику                КАК Заказ,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки                      КАК КодСтроки,
		|	ТаблицаОстатков.Склад                          КАК Склад,
		|	ТаблицаОстатков.КОформлениюОстаток             КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(,
		|			(ЗаказПоставщику, Номенклатура, Характеристика, КодСтроки, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаказПоставщику,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияЗаказыПоставщикамИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков ЗаявкиНаВозвратТоваровОтКлиентов.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ЗаявкиНаВозвратТоваровОтКлиентов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаявкаНаВозвратТоваровОтКлиента КАК Заявка,
		|	ТаблицаОстатков.Номенклатура                    КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения   КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                  КАК Характеристика,
		|	ТаблицаОстатков.КодСтроки                       КАК КодСтроки,
		|	ТаблицаОстатков.КОформлениюОстаток              КАК Количество
		|ИЗ
		|	РегистрНакопления.ЗаявкиНаВозвратТоваровОтКлиентов.Остатки(,
		|			(ЗаявкаНаВозвратТоваровОтКлиента, Номенклатура, Характеристика, КодСтроки) В
		|				(ВЫБРАТЬ
		|					Таблица.ЗаявкаНаВозвратТоваровОтКлиента,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.КодСтроки
		|				ИЗ
		|					ДвиженияЗаявкиНаВозвратТоваровОтКлиентовИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КОформлениюОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль отрицательных остатков по ДенежныеСредстваКВыплате.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДенежныеСредстваКВыплатеИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ДенежныеСредстваКВыплате"));
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств,
		|	ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств.Валюта КАК Валюта,
		|	ТаблицаОстатков.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам.Организация КАК Организация,
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент,
		|	ТаблицаОстатков.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
		|	ТаблицаОстатков.СтатьяРасходов КАК СтатьяРасходов,
		|	ТаблицаОстатков.АналитикаРасходов КАК АналитикаРасходов,
		|	ТаблицаОстатков.СуммаОстаток КАК Сумма,
		|
		|	Заявка.Организация КАК ОрганизацияЗаявки,
		|	Заявка.Контрагент КАК КонтрагентЗаявки,
		|	Заявка.ПодотчетноеЛицо КАК ПодотчетноеЛицоЗаявки,
		|	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредствЗаявки,
		|
		|	ВЫБОР КОГДА ТаблицаПартнеров.Партнер ЕСТЬ NULL
		|		И ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
		|	ТОГДА
		|		Истина
		|	ИНАЧЕ
		|		Ложь
		|	КОНЕЦ КАК РасхождениеПартнера,
		|
		|	ВЫБОР КОГДА ТаблицаАналитикиРасходов.АналитикаРасходов ЕСТЬ NULL
		|		И ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
		|	ТОГДА
		|		Истина
		|	ИНАЧЕ
		|		Ложь
		|	КОНЕЦ КАК РасхождениеАналитикиРасходов
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки(,
		|			(ЗаявкаНаРасходованиеДенежныхСредств,
		|				СтатьяДвиженияДенежныхСредств,
		|				АналитикаУчетаПоПартнерам,
		|				ПодотчетноеЛицо,
		|				СтатьяРасходов,
		|				АналитикаРасходов) В
		|			(ВЫБРАТЬ
		|				Таблица.ЗаявкаНаРасходованиеДенежныхСредств,
		|				Таблица.СтатьяДвиженияДенежныхСредств,
		|				Таблица.АналитикаУчетаПоПартнерам,
		|				Таблица.ПодотчетноеЛицо,
		|				Таблица.СтатьяРасходов,
		|				Таблица.АналитикаРасходов
		|			ИЗ
		|				ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
		|	ПО
		|		ТаблицаОстатков.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РасшифровкаПлатежа.Партнер КАК Партнер
		|		ИЗ
		|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица
		|		ПО
		|			РасшифровкаПлатежа.Ссылка = Таблица.ЗаявкаНаРасходованиеДенежныхСредств
		|		) КАК ТаблицаПартнеров
		|	ПО
		|		ТаблицаОстатков.АналитикаУчетаПоПартнерам.Партнер = ТаблицаПартнеров.Партнер
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ (
		|		ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			РасшифровкаПлатежа.СтатьяРасходов КАК СтатьяРасходов,
		|			РасшифровкаПлатежа.АналитикаРасходов КАК АналитикаРасходов
		|		ИЗ
		|			Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК РасшифровкаПлатежа
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|				ДвиженияДенежныеСредстваКВыплатеИзменение КАК Таблица
		|			ПО
		|				РасшифровкаПлатежа.Ссылка = Таблица.ЗаявкаНаРасходованиеДенежныхСредств
		|		) КАК ТаблицаАналитикиРасходов
		|	ПО
		|		ТаблицаОстатков.СтатьяРасходов = ТаблицаАналитикиРасходов.СтатьяРасходов
		|		И ТаблицаОстатков.АналитикаРасходов = ТаблицаАналитикиРасходов.АналитикаРасходов
		|
		|ГДЕ
		|	ТаблицаОстатков.СуммаОстаток > 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль предоплаты по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменение") Тогда

		МассивКонтролей.Добавить(Врег("РасчетыСКлиентами"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаЗаказы.ЗаказКлиента КАК ЗаказКлиента,
		|	ТаблицаЗаказы.Валюта       КАК Валюта,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ)                 КАК СуммаЗаказа,
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ)                 КАК СуммаОплаты
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК ТаблицаЗаказы
		|ГДЕ
		|	(ТаблицаЗаказы.ЗаказКлиента, ТаблицаЗаказы.Валюта, ТаблицаЗаказы.Активность) В
		|			(ВЫБРАТЬ
		|				Таблица.ЗаказКлиента,
		|				Таблица.Валюта,
		|				ИСТИНА
		|			ИЗ
		|				ДвиженияРасчетыСКлиентамиИзменение КАК Таблица)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказы.Валюта,
		|	ТаблицаЗаказы.ЗаказКлиента
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ) > 0
		|	И
		|	СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И НЕ ТаблицаЗаказы.ИсключатьПриКонтроле ТОГДА
		|				ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ) > СУММА(ВЫБОР
		|			КОГДА ТаблицаЗаказы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				ТОГДА ТаблицаЗаказы.КОплате
		|			ИНАЧЕ 0
		|		КОНЕЦ);
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

		// Контроли по РасчетыСКлиентами (временные таблицы).
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга")
	 ИЛИ ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда

		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаДанныеДоговоровПредварительные"));
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаДанныеДоговоров"));
		МассивКонтролей.Добавить(Врег("ВременнаяТаблицаОбъектыРасчетов"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента.Договор                КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
		|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
		|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ПОМЕСТИТЬ ДанныеДоговоровПредварительные
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента.Договор = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента                        КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности       КАК ОграничиватьСуммуЗадолженности,
		|	ДанныеДоговора.ДопустимаяСуммаЗадолженности         КАК ДопустимаяСуммаЗадолженности,
		|	ЛОЖЬ                                                КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ОграничиватьСуммуЗадолженности
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента.Договор                КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
		|	0                                                   КАК ДопустимаяСуммаЗадолженности,
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента.Договор = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДвижений.ЗаказКлиента                        КАК Договор,
		|	ДанныеДоговора.ВалютаВзаиморасчетов                 КАК Валюта,
		|	ЛОЖЬ                                                КАК ОграничиватьСуммуЗадолженности,
		|	0                                                   КАК ДопустимаяСуммаЗадолженности,
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность КАК ЗапрещаетсяПросроченнаяЗадолженность
		|
		|ИЗ
		|	ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга КАК ТаблицаДвижений
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	ПО
		|		ТаблицаДвижений.ЗаказКлиента = ДанныеДоговора.Ссылка
		|
		|ГДЕ
		|	ДанныеДоговора.ЗапрещаетсяПросроченнаяЗадолженность
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДоговоров.Договор                                        КАК Договор,
		|	ДанныеДоговоров.Валюта                                         КАК Валюта,
		|	МАКСИМУМ(ДанныеДоговоров.ОграничиватьСуммуЗадолженности)       КАК КонтрольСуммы,
		|	МАКСИМУМ(ДанныеДоговоров.ДопустимаяСуммаЗадолженности)         КАК ДопустимаяСумма,
		|	МАКСИМУМ(ДанныеДоговоров.ЗапрещаетсяПросроченнаяЗадолженность) КАК КонтрольСрока
		|
		|ПОМЕСТИТЬ ДанныеДоговоров
		|ИЗ
		|	ДанныеДоговоровПредварительные КАК ДанныеДоговоров
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеДоговоров.Договор,
		|	ДанныеДоговоров.Валюта
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДоговора.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДоговора.Ссылка  КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ПОМЕСТИТЬ ОбъектыРасчетов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДанныеДоговора
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДоговора.Ссылка = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДоговора.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.АктВыполненныхРабот КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ЗаказКлиента КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ОтчетКомиссионера КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)	
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ОтчетКомиссионераОСписании КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.ОтчетКомитенту КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеДокумента.Ссылка  КАК ЗаказКлиента,
		|	ДанныеДокумента.Договор КАК Договор,
		|	ДанныеДоговоров.Валюта КАК Валюта,
		|	ДанныеДоговоров.КонтрольСуммы КАК КонтрольСуммы,
		|	ДанныеДоговоров.КонтрольСрока КАК КонтрольСрока
		|
		|ИЗ
		|	Документ.РеализацияУслугПрочихАктивов КАК ДанныеДокумента
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		(ВЫБРАТЬ Договор, Валюта, КонтрольСуммы, КонтрольСрока ИЗ ДанныеДоговоров) КАК ДанныеДоговоров
		|	ПО
		|		ДанныеДокумента.Договор = ДанныеДоговоров.Договор
		|
		|ГДЕ
		|	ДанныеДокумента.Проведен
		|	И ДанныеДокумента.ПорядокРасчетов <> ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов)
		|;
		|
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль ограничения задолженности по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеСуммыДолга") Тогда

		МассивКонтролей.Добавить(Врег("ОграничениеСуммыЗадолженности"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Договор                                   КАК Договор,
		|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
		|	МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)                  КАК ДопустимаяСуммаЗадолженности,
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток)              КАК СуммаОстаток,
		|
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) -
		|		МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма) КАК СуммаПревышения
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|		,
		|		(ЗаказКлиента, Валюта) В (ВЫБРАТЬ ЗаказКлиента, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСуммы)
		|	) КАК РасчетыСКлиентамиОстатки
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ОбъектыРасчетов КАК ОбъектыРасчетов
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ДанныеДоговоров КАК ДанныеДоговоров
		|		ПО
		|			ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
		|			И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
		|	
		|	ПО
		|		РасчетыСКлиентамиОстатки.ЗаказКлиента = ОбъектыРасчетов.ЗаказКлиента
		|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Договор,
		|	РасчетыСКлиентамиОстатки.Валюта
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСКлиентамиОстатки.СуммаОстаток) > МИНИМУМ(ДанныеДоговоров.ДопустимаяСумма)
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль просроченной задолженности по РасчетыСКлиентами.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРасчетыСКлиентамиИзменениеКонтрольСрока") Тогда

		МассивКонтролей.Добавить(Врег("КонтрольСрокаЗадолженности"));
		ПакетЗапросов.УстановитьПараметр("ПериодКонтроляСрокаДолга", Макс(КонецДня(ТекущаяДата()), КонецДня(Объект.Дата)));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ОбъектыРасчетов.Договор                                   КАК Договор,
		|	РасчетыСКлиентамиОстатки.Валюта                           КАК Валюта,
		|	СУММА(ВЫБОР КОГДА РасчетыСКлиентамиОстатки.СуммаОстаток > РасчетыСКлиентамиОстатки.КОплатеОстаток ТОГДА
		|		РасчетыСКлиентамиОстатки.КОплатеОстаток
		|	ИНАЧЕ
		|		РасчетыСКлиентамиОстатки.СуммаОстаток
		|	КОНЕЦ) КАК ПросроченнаяЗадолженность
		|
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами.Остатки(
		|		&ПериодКонтроляСрокаДолга,
		|		(ЗаказКлиента, Валюта) В (ВЫБРАТЬ ЗаказКлиента, Валюта ИЗ ОбъектыРасчетов ГДЕ КонтрольСрока)
		|	) КАК РасчетыСКлиентамиОстатки
		|	
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ОбъектыРасчетов КАК ОбъектыРасчетов
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|			ДанныеДоговоров КАК ДанныеДоговоров
		|		ПО
		|			ОбъектыРасчетов.Договор = ДанныеДоговоров.Договор
		|			И ОбъектыРасчетов.Валюта = ДанныеДоговоров.Валюта
		|	
		|	ПО
		|		РасчетыСКлиентамиОстатки.ЗаказКлиента = ОбъектыРасчетов.ЗаказКлиента
		|		И РасчетыСКлиентамиОстатки.Валюта = ОбъектыРасчетов.Валюта
		|
		|ГДЕ
		|	РасчетыСКлиентамиОстатки.СуммаОстаток > 0
		|	И РасчетыСКлиентамиОстатки.КОплатеОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъектыРасчетов.Договор,
		|	РасчетыСКлиентамиОстатки.Валюта
		|
		|;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	// Контроль остатков в ячейках по ТоварыВЯчейках.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыВЯчейкахИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыВЯчейках"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
		|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
		|	ВЫБОР
		|		КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ТаблицаИзменений.Серия
		|	КОНЕЦ КАК Серия,
		|	ТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
		|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) КАК Количество
		|ИЗ
		|	ДвиженияТоварыВЯчейкахИзменение КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыВЯчейках.Остатки(
		|				,
		|				(Номенклатура, Характеристика, Упаковка, Ячейка) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Упаковка,
		|						Таблица.Ячейка
		|					ИЗ
		|						ДвиженияТоварыВЯчейкахИзменение КАК Таблица)) КАК ТоварыВЯчейкахОстатки
		|		ПО ТаблицаИзменений.Номенклатура = ТоварыВЯчейкахОстатки.Номенклатура
		|			И ТаблицаИзменений.Характеристика = ТоварыВЯчейкахОстатки.Характеристика
		|			И ТаблицаИзменений.Упаковка = ТоварыВЯчейкахОстатки.Упаковка
		|			И ТаблицаИзменений.Ячейка = ТоварыВЯчейкахОстатки.Ячейка
		|			И (ВЫБОР
		|				КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаИзменений.Серия = ТоварыВЯчейкахОстатки.Серия
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыВЯчейкахОстатки.Номенклатура,
		|	ТоварыВЯчейкахОстатки.Характеристика,
		|	ТоварыВЯчейкахОстатки.Упаковка,
		|	ВЫБОР
		|		КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ТаблицаИзменений.Серия
		|	КОНЕЦ,
		|	ТоварыВЯчейкахОстатки.Ячейка,
		|	ТоварыВЯчейкахОстатки.Упаковка.ЕдиницаИзмерения
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток) < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль остатков по ТоварыНаСкладах 
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыНаСкладахИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыНаСкладах"));
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
		|	ТоварыНаСкладахОстатки.Склад КАК Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
		|	ВЫБОР
		|		КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|		ИНАЧЕ ТаблицаИзменений.Серия
		|	КОНЕЦ КАК Серия,
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК Количество
		|ИЗ
		|	ДвиженияТоварыНаСкладахИзменение КАК ТаблицаИзменений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
		|				,
		|				(Номенклатура, Характеристика, Склад, Помещение) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика,
		|						Таблица.Склад,
		|						Таблица.Помещение
		|					ИЗ
		|						ДвиженияТоварыНаСкладахИзменение КАК Таблица)) КАК ТоварыНаСкладахОстатки
		|		ПО ТаблицаИзменений.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
		|			И ТаблицаИзменений.Характеристика = ТоварыНаСкладахОстатки.Характеристика
		|			И ТаблицаИзменений.Склад = ТоварыНаСкладахОстатки.Склад
		|			И ТаблицаИзменений.Помещение = ТоварыНаСкладахОстатки.Помещение
		|			И (ВЫБОР
		|				КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|					ТОГДА ИСТИНА
		|				ИНАЧЕ ТаблицаИзменений.Серия = ТоварыНаСкладахОстатки.Серия
		|			КОНЕЦ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика,
		|	ТоварыНаСкладахОстатки.Склад,
		|	ТоварыНаСкладахОстатки.Номенклатура.ЕдиницаИзмерения,
		|	ТоварыНаСкладахОстатки.Помещение,
		|	ВЫБОР
		|		КОГДА ТаблицаИзменений.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяССылка)
		|		ИНАЧЕ ТаблицаИзменений.Серия
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль остатков по ТоварыКОтбору.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыКОтборуИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыКОтбору"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	ТоварыКОтборуОстатки.Номенклатура                  КАК Номенклатура,
		|	ТоварыКОтборуОстатки.Характеристика                КАК Характеристика,
		|	ТоварыКОтборуОстатки.Серия                			КАК Серия,
		|	ТоварыКОтборуОстатки.Распоряжение               КАК Распоряжение,
		|	ТоварыКОтборуОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток КАК Количество,
		|	ТоварыКОтборуОстатки.ОтобраноОстаток КАК КоличествоОтобрано
		|ИЗ
		|	РегистрНакопления.ТоварыКОтбору.Остатки(
		|			,
		|			(Распоряжение, Номенклатура, Характеристика, Серия) В
		|				(ВЫБРАТЬ
		|					Таблица.Распоряжение,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Серия
		|				ИЗ
		|					ДвиженияТоварыКОтборуИзменение КАК Таблица)
		|			) КАК ТоварыКОтборуОстатки
		|ГДЕ
		|	ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток - ТоварыКОтборуОстатки.ОтбираетсяОстаток < 0
		|	ИЛИ ТоварыКОтборуОстатки.ОтобраноОстаток < 0;";
	КонецЕсли;
	
	// Контроль остатков по РезервыСерийТоваров.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияРезервыСерийТоваровИзменение") Тогда

		МассивКонтролей.Добавить(Врег("РезервыСерийТоваров"));
		ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ
		|	РезервыСерийТоваровОстатки.Номенклатура КАК Номенклатура,
		|	РезервыСерийТоваровОстатки.Характеристика КАК Характеристика,
		|	РезервыСерийТоваровОстатки.Серия КАК Серия,
		|	РезервыСерийТоваровОстатки.ДокументРезерва КАК ДокументРезерва,
		|	РезервыСерийТоваровОстатки.Склад КАК Склад,
		|	РезервыСерийТоваровОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	РезервыСерийТоваровОстатки.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.РезервыСерийТоваров.Остатки(
		|			,
		|			(ДокументРезерва, Склад, Номенклатура, Характеристика, Серия) В
		|				(ВЫБРАТЬ
		|					Таблица.ДокументРезерва,
		|					Таблица.Склад,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Серия
		|				ИЗ
		|					ДвиженияРезервыСерийТоваровИзменение КАК Таблица)) КАК РезервыСерийТоваровОстатки
		|ГДЕ
		|	РезервыСерийТоваровОстатки.КоличествоОстаток < 0;";
	КонецЕсли;
	
	// Контроль отрицательных остатков ТоварыОрганизацийКОформлению.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияТоварыОрганизацийКОформлениюИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ТоварыОрганизацийКОформлению"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Организация        КАК Организация,
		|	ТаблицаОстатков.Поставщик          КАК Поставщик,
		|	ТаблицаОстатков.Номенклатура       КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика     КАК Характеристика,
		|	ТаблицаОстатков.Склад              КАК Склад,
		|	ТаблицаОстатков.ВидЗапасов         КАК ВидЗапасов,
		|	ТаблицаОстатков.КоличествоОстаток  КАК Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизацийКОформлению.Остатки(,
		|			(Организация, Поставщик, Номенклатура, Характеристика, Склад, ВидЗапасов) В
		|				(ВЫБРАТЬ
		|					Таблица.Организация,
		|					Таблица.Поставщик,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Склад,
		|					Таблица.ВидЗапасов
		|				ИЗ
		|					ДвиженияТоварыОрганизацийКОформлениюИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных остатков ПринятаяВозвратнаяТара.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияПринятаяВозвратнаяТараИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ПринятаяВозвратнаяТара"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Партнер                        КАК Партнер,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.ДокументПоступления            КАК ДокументПоступления,
		|	ТаблицаОстатков.КоличествоОстаток              КАК Количество,
		|	ТаблицаОстатков.СуммаОстаток                   КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПринятаяВозвратнаяТара.Остатки(,
		|			(Партнер, Номенклатура, Характеристика, ДокументПоступления) В
		|				(ВЫБРАТЬ
		|					Таблица.Партнер,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.ДокументПоступления
		|				ИЗ
		|					ДвиженияПринятаяВозвратнаяТараИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	// Контроль отрицательных остатков ПереданнаяВозвратнаяТара.
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияПереданнаяВозвратнаяТараИзменение") Тогда

		МассивКонтролей.Добавить(Врег("ПринятаяВозвратнаяТара"));
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Партнер                        КАК Партнер,
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.ДокументПередачи               КАК ДокументПередачи,
		|	ТаблицаОстатков.КоличествоОстаток              КАК Количество,
		|	ТаблицаОстатков.СуммаОстаток                   КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПереданнаяВозвратнаяТара.Остатки(,
		|			(Партнер, Номенклатура, Характеристика, ДокументПередачи) В
		|				(ВЫБРАТЬ
		|					Таблица.Партнер,
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.ДокументПередачи
		|				ИЗ
		|					ДвиженияПереданнаяВозвратнаяТараИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.КоличествоОстаток < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;
	
	Если МассивКонтролей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов.Текст = ТекстЗапроса;
	ПакетЗапросов.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	МассивРезультатов = ПакетЗапросов.ВыполнитьПакет();

	Итератор = -1;
	Для Каждого Результат Из МассивРезультатов Цикл

		Итератор = Итератор + 1;
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		ИмяКонтроля = МассивКонтролей[Итератор];

		Если ИмяКонтроля = Врег("ТоварыКОтгрузке") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтгрузке(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("СвободныеОстатки") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструСвободныеОстатки(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ГрафикДвиженияТоваров") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструГрафикДвиженияТоваров(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ДенежныеСредстваКВыплате") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("РасчетыСКлиентами") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструРасчетыСКлиентами(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаДанныеДоговоровПредварительные") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаДанныеДоговоров") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ВременнаяТаблицаОбъектыРасчетов") Тогда

			// Временная таблица

		ИначеЕсли ИмяКонтроля = Врег("ОграничениеСуммыЗадолженности") Тогда

			СообщитьОбОшибкахПроведенияПриОграниченииСуммыЗадолженности(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("КонтрольСрокаЗадолженности") Тогда

			СообщитьОбОшибкахПроведенияПриКонтролеСрокаЗадолженности(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ЗаказыНаВнутреннееПотребление")
			  Или ИмяКонтроля = Врег("ЗаказыНаПеремещение") Тогда

			СообщитьОбОшибкахПроведенияПриОформленииДокументов(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ЗаказыКлиентов")
			  Или ИмяКонтроля = Врег("ЗаказыПоставщикам") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструЗаказыКлиентовПоставщикам(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ЗаявкиНаВозвратТоваровОтКлиентов") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструЗаявкиНаВозвратТоваровОтКлиентов(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ЗаказыНаСборку") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаСборку(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ТоварыВЯчейках") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыВЯчейках(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ТоварыНаСкладах") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ТоварыКОтбору") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтбору(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("РезервыСерийТоваров") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструРезервыСерийТоваров(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ТоварыОрганизацийКОформлению") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструТоварыОрганизацийКОформлению(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ОбеспечениеЗаказов") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструОбеспечениеЗаказов(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ДвиженияРезервыСерийТоваровСводно") Тогда

			СообщитьОбОшибкахПроведенияПоРегиструСерии(Объект, Отказ, Результат);

		ИначеЕсли ИмяКонтроля = Врег("ПринятаяВозвратнаяТара") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструПринятаяВозвратнаяТара(Объект, Отказ, Результат);
			
		ИначеЕсли ИмяКонтроля = Врег("ПереданнаяВозвратнаяТара") Тогда
			
			СообщитьОбОшибкахПроведенияПоРегиструПереданнаяВозвратнаяТара(Объект, Отказ, Результат);

		Иначе

			ВызватьИсключение НСтр("ru = 'Ошибка контроля проведения!'");

		КонецЕсли;
	КонецЦикла;

	Если Отказ Тогда

		Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Проведение не выполнено '");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена '");
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения + Строка(Объект), Объект);

	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Процедуры выдачи сообщений об ошибках проведения.

Процедура СообщитьОбОшибкахПроведенияПоРегиструДенежныеСредстваКВыплате(Объект, Отказ, РезультатЗапроса)
	
	ЕстьРасхожденияРеквизитов = Ложь;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = "";
		
		ЭтоЗаявкаНаРасходованиеДС = (ТипЗнч(Выборка.ЗаявкаНаРасходованиеДенежныхСредств) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));
		
		Если ЭтоЗаявкаНаРасходованиеДС И Выборка.Организация <> Выборка.ОрганизацияЗаявки Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Организация %1 в документе оплаты не соответствует организации %2 в заявке'"),
				Выборка.Организация,
				Выборка.ОрганизацияЗаявки
			);
			ЕстьРасхожденияРеквизитов = Истина;
		КонецЕсли;
		
		Если ЭтоЗаявкаНаРасходованиеДС И Выборка.Контрагент <> Выборка.КонтрагентЗаявки Тогда
			ТекстСообщения = ТекстСообщения
				+ ?(Не ПустаяСтрока(ТекстСообщения), Символы.ПС, "")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Контрагент %1 в документе оплаты не соответствует контрагенту %2 в заявке'"),
					Выборка.Контрагент,
					Выборка.КонтрагентЗаявки
				);
			ЕстьРасхожденияРеквизитов = Истина;
		КонецЕсли;
		
		Если ЭтоЗаявкаНаРасходованиеДС И Выборка.ПодотчетноеЛицо <> Выборка.ПодотчетноеЛицоЗаявки Тогда
			ТекстСообщения = ТекстСообщения
				+ ?(Не ПустаяСтрока(ТекстСообщения), Символы.ПС, "")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Подотчетное лицо %1 в документе оплаты не соответствует подотчетному лицу %2 в заявке'"),
					Выборка.ПодотчетноеЛицо,
					Выборка.ПодотчетноеЛицоЗаявки
				);
			ЕстьРасхожденияРеквизитов = Истина;
		КонецЕсли;
		
		Если ЭтоЗаявкаНаРасходованиеДС И Выборка.СтатьяДвиженияДенежныхСредств <> Выборка.СтатьяДвиженияДенежныхСредствЗаявки Тогда
			ТекстСообщения = ТекстСообщения
				+ ?(Не ПустаяСтрока(ТекстСообщения), Символы.ПС, "")
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Статья движения денежных средств %1 в документе оплаты не соответствует статье %2 в заявке'"),
					Выборка.СтатьяДвиженияДенежныхСредств,
					Выборка.СтатьяДвиженияДенежныхСредствЗаявки
				);
			ЕстьРасхожденияРеквизитов = Истина;
		КонецЕсли;
		
		Если Не ЕстьРасхожденияРеквизитов Тогда
			Если ЭтоЗаявкаНаРасходованиеДС И Выборка.РасхождениеПартнера Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Партнер %1 в документе оплаты не соответствует партнеру в заявке'"),
					Выборка.Партнер
				);
			ИначеЕсли ЭтоЗаявкаНаРасходованиеДС И Выборка.РасхождениеАналитикиРасходов Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Статья расходов %1 и аналитика %2 в документе оплаты не соответствует статье и аналитике в заявке'"),
					Выборка.СтатьяРасходов,
					Выборка.АналитикаРасходов
				);	
			Иначе
				Если ЭтоЗаявкаНаРасходованиеДС Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По заявке %1 
						|Оплачено больше, чем утверждено в заявке, на %2 %3'"),
						Строка(Выборка.ЗаявкаНаРасходованиеДенежныхСредств),
						Строка(Выборка.Сумма),
						Строка(Выборка.Валюта)
					);
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По документу %1 
						|Оплачено больше, чем утверждено в распоряжении, на %2 %3'"),
						Строка(Выборка.ЗаявкаНаРасходованиеДенежныхСредств),
						Строка(Выборка.Сумма),
						Строка(Выборка.Валюта)
					);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);
		
		Если ЕстьРасхожденияРеквизитов Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтгрузке(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Отгружено со склада %Склад% больше, чем указано в распоряжении на отгрузку, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыКлиентовПоставщикам(Объект, Отказ, РезультатЗапроса)
	//АСТЕК. Условия не соблюдаются
    Отказ = Ложь;
	Возврат;
	//-
	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%%Склад%
		|Оформлено больше чем указано в строке %КодСтроки% распоряжения %Заказ% на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заказ%",      Строка(Выборка.Заказ));

		Если ЗначениеЗаполнено(Выборка.Склад) Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", НСтр("ru = ' склад '") + Строка(Выборка.Склад));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", "");
		КонецЕсли;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаявкиНаВозвратТоваровОтКлиентов(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|По строке %КодСтроки% возвращено больше, чем указано в заявке на возврат, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструСвободныеОстатки(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
							|Превышен свободный остаток товара на складе %Склад% на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструГрафикДвиженияТоваров(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|Запланированные отгрузки превышают планируемый остаток товара на складе %Склад% на %Количество% %Единица% на %Период%'");

	СтруктураСтроки = Новый Структура("Номенклатура, Характеристика, Склад,
										 |Период, ЕдиницаИзмерения, Количество");
	Выборка    = РезультатЗапроса.Выбрать();
	ЕстьЗаписи = Выборка.Следующий();
	Пока ЕстьЗаписи Цикл

		ТекСклад          = Выборка.Склад;
		ТекНоменклатура   = Выборка.Номенклатура;
		ТекХарактеристика = Выборка.Характеристика;

		НарастающийИтог    = 0;
		ИзмениласьЗапись   = Ложь;
		ЕстьМинусыВПериоде = Ложь;

		// Цикл по одному сочетанию номенклатура\характеристика\склад.
		Пока Не ИзмениласьЗапись Цикл

			НарастающийИтог = НарастающийИтог + Выборка.НачОстаток + Выборка.ОборотЗаДень;
			Если НарастающийИтог < 0 Тогда

				СтруктураСтроки.Количество = НарастающийИтог;
				ЗаполнитьЗначенияСвойств(СтруктураСтроки, Выборка, "Номенклатура, Характеристика, Склад,
																	|Период, ЕдиницаИзмерения");

				ЕстьМинусыВПериоде = Истина;

			КонецЕсли;

			// Переход к следующей записи.
			ЕстьЗаписи       = Выборка.Следующий();
			ИзмениласьЗапись = Не ЕстьЗаписи Или (Выборка.Номенклатура <> ТекНоменклатура
							Или Выборка.Склад <> ТекСклад
							Или Выборка.Характеристика <> ТекХарактеристика);
		КонецЦикла;

		Если ЕстьМинусыВПериоде Тогда

			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
				НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтруктураСтроки.Номенклатура, СтруктураСтроки.Характеристика));

			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-СтруктураСтроки.Количество));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(СтруктураСтроки.Склад));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%",     Формат(СтруктураСтроки.Период, "ДЛФ=D"));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(СтруктураСтроки.ЕдиницаИзмерения));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструРасчетыСКлиентами(Объект, Отказ, РезультатЗапроса)
    //АК
	Отказ = Ложь;
	Возврат;
	//- 
	ШаблонСообщения = НСтр("ru = 'Нарушены условия оплаты, необходимые для обеспечения/отгрузки по заказу %Заказ%,
		|Требуется %СуммаЗаказа% %Валюта% оплачено %СуммаОплаты% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Заказ%",      Строка(Выборка.ЗаказКлиента));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%",      Строка(Выборка.Валюта));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаЗаказа%", Строка(Выборка.СуммаЗаказа));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаОплаты%", Строка(Выборка.СуммаОплаты));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПриОграниченииСуммыЗадолженности(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru='По договору %Договор% превышена допустимая сумма кредита на %СуммаПревышения% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Договор%",         Строка(Выборка.Договор));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%СуммаПревышения%", Строка(Выборка.СуммаПревышения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Валюта%",          Строка(Выборка.Валюта));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПриКонтролеСрокаЗадолженности(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru='По договору %Договор% имеется просроченная задолженность на сумму %ПросроченнаяЗадолженность% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Договор%",                   Строка(Выборка.Договор));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%ПросроченнаяЗадолженность%", Строка(Выборка.ПросроченнаяЗадолженность));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Валюта%",                    Строка(Выборка.Валюта));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПриОформленииДокументов(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%%Склад%%Подразделение% 
		|По строке %КодСтроки% оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));

		Если ЗначениеЗаполнено(Выборка.Склад) Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", НСтр("ru = ' склад '") + Строка(Выборка.Склад));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Подразделение) Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Подразделение%", НСтр("ru = ' подразделение '") + Строка(Выборка.Подразделение));
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Подразделение%", "");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструЗаказыНаСборку(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|По строке %КодСтроки% оформлено больше, чем указано в распоряжении на оформление, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодСтроки%",  Строка(Выборка.КодСтроки));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыВЯчейках(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Превышен свободный остаток в ячейке %Ячейка% на %Количество% %Упаковка%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ячейка%",     Строка(Выборка.Ячейка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Упаковка%",   Строка(Выборка.Упаковка));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект,,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыНаСкладах(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Превышен оперативный складской остаток на складе ""%Склад%"" на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",
									СкладыСервер.ПолучитьПредставлениеСклада(Выборка.Склад, Выборка.Помещение));		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыКОтбору(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияОтбор = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|Отобрано из ячеек больше, чем указано в распоряжении на отбор, на %Количество% %Единица%'");

	ШаблонСообщенияОтгрузка = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Отгружается больше, чем отобрано из ячеек по распоряжению на отбор, на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.КоличествоОтобрано >= 0 Тогда
			ТекстСообщения = СтрЗаменить(ШаблонСообщенияОтбор, "%Количество%", Строка(-Выборка.Количество));
		Иначе
			ТекстСообщения = СтрЗаменить(ШаблонСообщенияОтгрузка, "%Количество%", Строка(-Выборка.КоличествоОтобрано));
		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураХарактеристика%",
									НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика, Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%", Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструРезервыСерийТоваров(Объект, Отказ, РезультатЗапроса)

		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Не ЗначениеЗаполнено(Выборка.Серия) Тогда 
 			ШаблонСообщения = НСтр("ru = 'По товару %Товар% в количестве %Количество% %Единица% 
				|уже есть Распоряжение на отгрузку - серии в заказе указывать не нужно.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Товар %Товар% 
				|В Распоряжении на отгрузку серий указано больше, чем в документе резерва серий, на %Количество% %Единица%'");
		КонецЕсли;

		ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика,Выборка.Серия);
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%", ПредставлениеТовара );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%", Строка(Выборка.ЕдиницаИзмерения));

		//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект);

	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструТоварыОрганизацийКОформлению(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% 
		|Превышен остаток товара к оформлению на складе %Склад% на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",  Строка(Выборка.Склад));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструОбеспечениеЗаказов(Объект, Отказ, РезультатЗапроса)

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.ОшибкаЗаказатьМеньшеНуля Тогда

			ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% %Склад% назначение %Назначение%
				|	Заказано для обеспечения больше чем требуется на %Количество% %Единица%,'");

			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Строка(Выборка.Назначение));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.ВеличинаЗаказатьМеньшеНуля));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

		КонецЕсли;

		Если Выборка.ОшибкаЗаказаноВМинусе Тогда

			ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% %Склад% назначение %Назначение%
				|	Заказано больше чем требуется на %Количество% %Единица%'");

			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Строка(Выборка.Назначение));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Заказано));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

		КонецЕсли;

		Если Выборка.ОшибкаНаличиеВМинусе Тогда

			ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% %Склад% назначение %Назначение%
				|	Недостаточное количество товара в наличии на %Количество% %Единица%'");

			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Строка(Выборка.Назначение));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Наличие));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

		КонецЕсли;

		Если Выборка.ОшибкаНаличиеСоСкладаВМинусе Тогда

			ШаблонСообщения = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика% %Склад% назначение %Назначение%
				|	Недостаточное количество товара в наличии на %Количество% %Единица%'");

			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Склад%",      Строка(Выборка.Склад));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Назначение%", Строка(Выборка.Назначение));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.НаличиеСоСклада));

			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры


Процедура СообщитьОбОшибкахПроведенияПоРегиструСерии(Объект, Отказ, РезультатЗапроса)

		
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ШаблонСообщения = НСтр("ru = 'Товар %Товар% 
				|Недостаточное количество серии:%Серия% вналичии на %Количество% %Единица%'");

		ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика,Выборка.Серия);
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%", ПредставлениеТовара );
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Серия%", Строка(Выборка.Серия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%", Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструПринятаяВозвратнаяТара(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщенияСДокументом = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|Возвращается больше, чем принято по документу %ДокументПоступления% на %Количество% %Единица%'");
		
	ШаблонСообщенияБезДокумента = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|Возвращается больше, чем принято на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ШаблонСообщения = ?(ЗначениеЗаполнено(Выборка.ДокументПоступления), ШаблонСообщенияСДокументом, ШаблонСообщенияБезДокумента);
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументПоступления%",  Строка(Выборка.ДокументПоступления));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахПроведенияПоРегиструПереданнаяВозвратнаяТара(Объект, Отказ, РезультатЗапроса)
	
	ШаблонСообщенияСДокументом = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|Возвращается больше, чем передано по документу %ДокументПередачи% на %Количество% %Единица%'");
		
	ШаблонСообщенияБезДокумента = НСтр("ru = 'Номенклатура %НоменклатураХарактеристика%
		|Возвращается больше, чем передано на %Количество% %Единица%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ШаблонСообщения = ?(ЗначениеЗаполнено(Выборка.ДокументПоступления), ШаблонСообщенияСДокументом, ШаблонСообщенияБезДокумента);
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%НоменклатураХарактеристика%",
						НоменклатураКлиентСервер.ПредставлениеНоменклатуры(Выборка.Номенклатура, Выборка.Характеристика));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Количество%", Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументПередачи%",  Строка(Выборка.ДокументПередачи));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Единица%",    Строка(Выборка.ЕдиницаИзмерения));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект, ,, Отказ);

	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры

// Процедура для формирования запроса по контролю доступных остатков склада.
//
Функция СформироватьЗапросПоКонтролюДоступныхОстатков(ПакетЗапросов, МассивКонтролей, ДанныеТаблиц)

	Результат       = "";
	СтруктураКонтроляОстатков = ДанныеТаблиц.СтруктураКонтроляОстатков;

	Если ЕстьИзмененияВТаблице(ДанныеТаблиц, "ДвиженияСвободныеОстаткиИзменение") Тогда

		МассивКонтролей.Добавить(Врег("СвободныеОстатки"));
		Результат = Результат + 
		"
		|ВЫБРАТЬ
		|	ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
		|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
		|	ТаблицаОстатков.Характеристика                 КАК Характеристика,
		|	ТаблицаОстатков.Склад                          КАК Склад,
		|	ВЫБОР
		|		КОГДА ДвиженияСвободныеОстаткиИзменение.ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.Остатки) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток
		|		КОГДА ДвиженияСвободныеОстаткиИзменение.ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток - ТаблицаОстатков.ВРезервеОстаток
		|		КОГДА ДвиженияСвободныеОстаткиИзменение.ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ                                          КАК Количество
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|			(Номенклатура, Характеристика, Склад) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Склад
		|				ИЗ
		|					ДвиженияСвободныеОстаткиИзменение КАК Таблица)
		|	) КАК ТаблицаОстатков
		|	ЛЕВОЕ СОЕДИНЕНИЕ ДвиженияСвободныеОстаткиИзменение КАК ДвиженияСвободныеОстаткиИзменение
		|	ПО ТаблицаОстатков.Склад             = ДвиженияСвободныеОстаткиИзменение.Склад
		|		И ТаблицаОстатков.Номенклатура   = ДвиженияСвободныеОстаткиИзменение.Номенклатура
		|		И ТаблицаОстатков.Характеристика = ДвиженияСвободныеОстаткиИзменение.Характеристика
		|
		|ГДЕ
		|	ВЫБОР
		|		КОГДА ДвиженияСвободныеОстаткиИзменение.ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.Остатки) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток
		|		КОГДА ДвиженияСвободныеОстаткиИзменение.ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток - ТаблицаОстатков.ВРезервеОстаток
		|		КОГДА ДвиженияСвободныеОстаткиИзменение.ВариантКонтроля = Значение(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика) ТОГДА
		|			ТаблицаОстатков.ВНаличииОстаток
		|		ИНАЧЕ 0
		|	КОНЕЦ < 0;
		|///////////////////////////////////////////////////////////////////
		|";
	КонецЕсли;

	Если Не СтруктураКонтроляОстатков.НеобходимКонтрольГрафика Тогда
		Возврат Результат;
	КонецЕсли;

	ТекстЗапроса = "";
	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияСвободныеОстаткиИзменение") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.ГраницаКонтроля КАК ГраницаКонтроля
		|ИЗ
		|	ДвиженияСвободныеОстаткиИзменение КАК Таблица
		|ГДЕ
		|	Таблица.ВариантКонтроля = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
		// Т.к. в таблице изменений могут быть строки с различными вариантами контроля
		|";
	КонецЕсли;

	Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияДвижениеТоваровИзменение") Тогда
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса),""," ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ
		|	Таблица.Номенклатура    КАК Номенклатура,
		|	Таблица.Характеристика  КАК Характеристика,
		|	Таблица.Склад           КАК Склад,
		|	Таблица.ГраницаКонтроля КАК ГраницаКонтроля
		|ИЗ
		|	ДвиженияДвижениеТоваровИзменение КАК Таблица
		|
		|ГДЕ
		|	Таблица.Период <= Таблица.ГраницаКонтроля
		|";
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.Номенклатура              КАК Номенклатура,
	|	Таблица.Характеристика            КАК Характеристика,
	|	Таблица.Склад                     КАК Склад,
	|	МАКСИМУМ(Таблица.ГраницаКонтроля) КАК ГраницаКонтроля
	|
	|ПОМЕСТИТЬ ВтТаблицаГраницыКонтроля
	|	ИЗ ( " + ТекстЗапроса + " ) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Номенклатура,
	|	Таблица.Характеристика,
	|	Таблица.Склад
	|;";
	
	ТекущаяДата = НачалоДня(ТекущаяДата());
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();

	Если Выборка.Количество > 0 Тогда

		ПакетЗапросов.УстановитьПараметр("ТекущаяДата", ТекущаяДата);
		МассивКонтролей.Добавить(Врег("ГрафикДвиженияТоваров"));
		Результат = Результат +
		"ВЫБРАТЬ
        |	Таблица.Период КАК Период,
        |	Таблица.Номенклатура КАК Номенклатура,
        |	Таблица.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
        |	Таблица.Характеристика КАК Характеристика,
        |	Таблица.Склад КАК Склад,
        |	СУММА(Таблица.НачОстаток) КАК НачОстаток,
        |	СУММА(Таблица.ОборотЗаДень) КАК ОборотЗаДень
        |ИЗ
        |	(ВЫБРАТЬ
        |		График.Номенклатура КАК Номенклатура,
        |		График.Характеристика КАК Характеристика,
        |		График.Склад КАК Склад,
        |		ВЫБОР
        |			КОГДА График.ДатаСобытия <= &ТекущаяДата
        |				ТОГДА &ТекущаяДата
        |			ИНАЧЕ График.ДатаСобытия
        |		КОНЕЦ КАК Период,
        |		ВЫБОР
        |			КОГДА График.ДатаСобытия <= &ТекущаяДата
        |				ТОГДА График.КоличествоОстаток
        |			ИНАЧЕ 0
        |		КОНЕЦ КАК НачОстаток,
        |		ВЫБОР
        |			КОГДА График.ДатаСобытия <= &ТекущаяДата
        |				ТОГДА 0
        |			ИНАЧЕ График.КоличествоОстаток
        |		КОНЕЦ КАК ОборотЗаДень
        |	ИЗ
        |		РегистрНакопления.ГрафикДвиженияТоваров.Остатки(
        |				,
        |				(Номенклатура, Характеристика, Склад) В
        |					(ВЫБРАТЬ
        |						ТаблицаФильтр.Номенклатура,
        |						ТаблицаФильтр.Характеристика,
        |						ТаблицаФильтр.Склад
        |					ИЗ
        |						ВтТаблицаГраницыКонтроля КАК ТаблицаФильтр)) КАК График
        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТаблицаГраницыКонтроля КАК ГраницыКонтроля
        |			ПО График.Номенклатура = ГраницыКонтроля.Номенклатура
        |				И График.Характеристика = ГраницыКонтроля.Характеристика
        |				И График.Склад = ГраницыКонтроля.Склад
        |				И График.ДатаСобытия <= ГраницыКонтроля.ГраницаКонтроля
        |	
        |	ОБЪЕДИНИТЬ ВСЕ
        |	
        |	ВЫБРАТЬ
        |		Остатки.Номенклатура,
        |		Остатки.Характеристика,
        |		Остатки.Склад,
        |		&ТекущаяДата,
        |		Остатки.ВНаличииОстаток,
        |		0
        |	ИЗ
        |		РегистрНакопления.СвободныеОстатки.Остатки(
        |				,
        |				(Номенклатура, Характеристика, Склад) В
        |					(ВЫБРАТЬ
        |						ТаблицаФильтр.Номенклатура,
        |						ТаблицаФильтр.Характеристика,
        |						ТаблицаФильтр.Склад
        |					ИЗ
        |						ВтТаблицаГраницыКонтроля КАК ТаблицаФильтр)) КАК Остатки) КАК Таблица
        |
        |СГРУППИРОВАТЬ ПО
        |	Таблица.Период,
        |	Таблица.Склад,
        |	Таблица.Номенклатура,
        |	Таблица.Характеристика,
        |	Таблица.Номенклатура.ЕдиницаИзмерения
        |
        |УПОРЯДОЧИТЬ ПО
        |	Номенклатура,
        |	Характеристика,
        |	Склад,
        |	Период
		|;";
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Процедура получение данных для блокировки регистров при контрле остатков.
//
Функция ПолучитьДанныеДляБлокировки(НаборЗаписей) Экспорт 

	НеобходимКонтрольОстатков = Ложь; // показывает, нужен ли вообще контроль.
	НеобходимКонтрольГрафика  = Ложь; // показывает, есть ли в наборе записи с контролем графика.
	ЕстьБезКонтроля           = Ложь; // показывает, есть ли в наборе записи без контроля.

	// Массивы строк для блокировки наборов.
	МассивСтрокБлокировкиГрафика  = Новый Массив;
	МассивСтрокБлокировкиОстатков = Новый Массив;

	ЭтоДвижениеТоваров = ТипЗнч(НаборЗаписей) = Тип("РегистрНакопленияНаборЗаписей.ДвижениеТоваров");
	
	Если ЭтоДвижениеТоваров Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.НомерСтроки - 1                       КАК Индекс,
		|	Т.Номенклатура                          КАК Номенклатура,
		|	Т.Характеристика                        КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Склад КАК Справочник.Склады) КАК Склад,
		|	ВЫБОР
		|		КОГДА Т.ПланируемаяОтгрузка > 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ПланируемаяОтгрузка
		|
		|ПОМЕСТИТЬ НаборЗаписей
		|
		|ИЗ
		|	&НаборЗаписей КАК Т
		|ГДЕ
		|	Т.ПланируемаяОтгрузка <> 0 ИЛИ (Т.ПланируемаяОтгрузкаСоСклада > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборЗаписей.Индекс КАК Индекс,
		|	НаборЗаписей.Номенклатура КАК Номенклатура,
		|	НаборЗаписей.Характеристика КАК Характеристика,
		|	НаборЗаписей.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА НаборЗаписей.ПланируемаяОтгрузка
		|					И ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля,
		|						ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) В (ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва),
		|																										ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика))
		|				ИЛИ (НЕ НаборЗаписей.ПланируемаяОтгрузка)
		|					И ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля,
		|							ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) <> ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.НеКонтролировать)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК КонтрольОстатков,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля,
		|					ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтрольГрафика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля,
		|					ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.НеКонтролировать)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БезКонтроля
		|ИЗ
		|	НаборЗаписей КАК НаборЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаХарактеристика
		|		ПО НаборЗаписей.Склад = НастройкаХарактеристика.Склад
		|			И НаборЗаписей.Номенклатура = НастройкаХарактеристика.Номенклатура
		|			И НаборЗаписей.Характеристика = НастройкаХарактеристика.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаНоменклатура
		|		ПО НаборЗаписей.Склад = НастройкаНоменклатура.Склад
		|			И НаборЗаписей.Номенклатура = НастройкаНоменклатура.Номенклатура
		|			И (НастройкаНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаСклад
		|		ПО (НаборЗаписей.Склад = НастройкаСклад.Склад)
		|			И (НастройкаСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|			И (НастройкаСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL)
		|			И (НастройкаНоменклатура.Склад ЕСТЬ NULL)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Индекс
		|");
		Запрос.УстановитьПараметр("НаборЗаписей", НаборЗаписей.Выгрузить( , "НомерСтроки, Номенклатура, Характеристика, Склад, ПланируемаяОтгрузка, ПланируемаяОтгрузкаСоСклада"));
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.НомерСтроки - 1                       КАК Индекс,
		|	Т.Номенклатура                          КАК Номенклатура,
		|	Т.Характеристика                        КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Склад КАК Справочник.Склады) КАК Склад,
		|	ВЫБОР
		|		КОГДА Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И Т.ВРезерве > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПланируемаяОтгрузка
		|
		|ПОМЕСТИТЬ НаборЗаписей
		|
		|ИЗ
		|	&НаборЗаписей КАК Т
		|ГДЕ
		|	(Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|				И Т.ВНаличии > 0
		|			ИЛИ Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|				И Т.ВРезерве > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборЗаписей.Индекс КАК Индекс,
		|	НаборЗаписей.Номенклатура КАК Номенклатура,
		|	НаборЗаписей.Характеристика КАК Характеристика,
		|	НаборЗаписей.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА НаборЗаписей.ПланируемаяОтгрузка
		|					И ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля, ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) В (ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва), ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика))
		|				ИЛИ (НЕ НаборЗаписей.ПланируемаяОтгрузка)
		|					И ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля, ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) <> ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.НеКонтролировать)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтрольОстатков,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля, ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтрольГрафика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля, ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.НеКонтролировать)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БезКонтроля
		|ИЗ
		|	НаборЗаписей КАК НаборЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаХарактеристика
		|		ПО НаборЗаписей.Склад = НастройкаХарактеристика.Склад
		|			И НаборЗаписей.Номенклатура = НастройкаХарактеристика.Номенклатура
		|			И НаборЗаписей.Характеристика = НастройкаХарактеристика.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаНоменклатура
		|		ПО НаборЗаписей.Склад = НастройкаНоменклатура.Склад
		|			И НаборЗаписей.Номенклатура = НастройкаНоменклатура.Номенклатура
		|			И (НастройкаНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаСклад
		|		ПО (НаборЗаписей.Склад = НастройкаСклад.Склад)
		|			И (НастройкаСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|			И (НастройкаСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL)
		|			И (НастройкаНоменклатура.Склад ЕСТЬ NULL)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Индекс");
		
		Запрос.УстановитьПараметр("НаборЗаписей", НаборЗаписей.Выгрузить( , "НомерСтроки, ВидДвижения, Номенклатура, Характеристика, Склад, ВНаличии, ВРезерве"));
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Если хотя бы одна запись нуждается в контроле - флаг взводится.
			НеобходимКонтрольОстатков = НеобходимКонтрольОстатков ИЛИ Выборка.КонтрольОстатков;
			
			// Массив для блокировки строк набора свободных остатков.
			Если Выборка.КонтрольОстатков Тогда
				
				МассивСтрокБлокировкиОстатков.Добавить(НаборЗаписей.Получить(Выборка.Индекс));
				
			КонецЕсли;

			// Если хотя бы одна запись нуждается в контроле графика - флаг взводится.
			НеобходимКонтрольГрафика = НеобходимКонтрольГрафика ИЛИ Выборка.КонтрольГрафика;
			
			// Массив для блокировки строк набора графика движения товаров.
			Если Выборка.КонтрольГрафика Тогда
				
				МассивСтрокБлокировкиГрафика.Добавить(НаборЗаписей.Получить(Выборка.Индекс));
				
			КонецЕсли;

			// Если есть хотя бы одна запись без контроля - флаг взводится.
			ЕстьБезКонтроля = ЕстьБезКонтроля ИЛИ Выборка.БезКонтроля;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("СтруктураКонтроляОстатков, МассивСтрокБлокировкиГрафика, МассивСтрокБлокировкиОстатков",
						Новый Структура("НеобходимКонтрольОстатков, НеобходимКонтрольГрафика, ЕстьБезКонтроля",
										НеобходимКонтрольОстатков, НеобходимКонтрольГрафика, ЕстьБезКонтроля),
						МассивСтрокБлокировкиГрафика,
						МассивСтрокБлокировкиОстатков);
КонецФункции
					
// Функция вызывается из модулей наборов записей для проверки необходимости
// контроля изменений движений в регистре.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем РассчитыватьИзменения;

	Возврат ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения", РассчитыватьИзменения)
		И РассчитыватьИзменения;

КонецФункции

// Процедура формирует запрос по временной таблице.
//
// Параметры:
//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости выпуска"
//	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц
//	ИмяВременнойТаблицы - Строка - Имя временной таблицы
//
Процедура ПоказатьВременнуюТаблицу(МенеджерВременныхТаблиц,ИмяВременнойТаблицы, Комментарий = "") Экспорт

	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	*
	|ИЗ
	|	ИмяВременнойТаблицы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяВременнойТаблицы", ИмяВременнойТаблицы);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить().ВыбратьСтроку(ИмяВременнойТаблицы + ":" + Комментарий);
	
КонецПроцедуры // ПоказатьВременнуюТаблицу()

Процедура УстановитьРежимПроведения(ДокументОбъект, РежимЗаписи, РежимПроведения) Экспорт

	Если ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	Для каждого НаборЗаписей Из Объект.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	// Регистры, требующие принудительной очистки:
	МассивИменРегистровПринудительнойОчистки = Новый Массив;
	МассивИменРегистровПринудительнойОчистки.Добавить("РасходыПриУСН");
	МассивДвиженийДляПринудительнойОчистки = Новый Массив;
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
		Если МассивИменРегистровПринудительнойОчистки.Найти(ИмяРегистра) <> Неопределено
			ИЛИ НЕ ВыборочноОчищатьРегистры Тогда
			МассивДвиженийДляПринудительнойОчистки.Добавить(Объект.Движения[ИмяРегистра]);
		КонецЕсли; 
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Истина);
		КонецЦикла;
		ТекстСообщения = НСтр("ru = 'Движения документа отредактированы вручную и не могут быть автоматически актуализированы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);
		
	ИначеЕсли НЕ Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		
		Для каждого НаборЗаписей Из МассивДвиженийДляПринудительнойОчистки Цикл
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		Объект.Движения.Записать();
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
