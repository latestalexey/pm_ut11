////////////////////////////////////////////////////////////////////////////////
// ЭлектронныеДокументыПереопределяемый: механизм обмена электронными документами.
//

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получает значение функциональной опции.
//
// Параметры:
// НаименованиеФО - Строка, имя функциональной опции
// 
Функция ПолучитьЗначениеФункциональнойОпции(НаименованиеФО) Экспорт
	Возврат ПолучитьФункциональнуюОпцию(НаименованиеФО);
КонецФункции

// Осуществляет разбор файла с реквизитами контрагента
//
// Параметры:
//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента;
//  СтруктураВозврата - Структура - перечень параметров;
//  ОшибкаРазбора - текст, описание ошибки.
//
// Возвращаемое значение:
//  Булево - Истина - разбор файла выполнен; Ложь - разбор файла не выполнялся.
//
Функция РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, ОшибкаРазбора) Экспорт
	
	//Здесь можно внести изменения в структуру возвращаемых данных
	Возврат Ложь;
	
КонецФункции

// Определяет текст сообщения о необходимости настройки системы взависимости от вида операции.
//
// Параметры:
//  ВидОперации    - строка - признак выполняемой операции;
//  ТекстСообщения - строка - текст сообщения.
//
Процедура ТекстСообщенияОНеобходимостиНастройкиСистемы(ВидОперации, ТекстСообщения) Экспорт
	
	Если ВРег(ВидОперации) = "РАБОТАСЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для работы с электронными документами необходимо
			|в настройках системы включить использование обмена электронными документами'");
	ИначеЕсли ВРег(ВидОперации) = "ПОДПИСАНИЕЭД" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности подписания ЭД необходимо
			|в настройках системы включить опцию использования электронных цифровых подписей'");
	ИначеЕсли ВРег(ВидОперации) = "НАСТРОЙКАКРИПТОГРАФИИ" Тогда
		ТекстСообщения = НСтр("ru = 'Для возможности настройки криптографии необходимо 
			|в настройках системы включить опцию использования электронных цифровых подписей'");
	Иначе
		ТекстСообщения = НСтр("ru='Операция не может быть выполнена'");
	КонецЕсли;
	
КонецПроцедуры

// Переопределяет сообщение о нехватке прав доступа
//
// Параметры:
//  ТекстСообщения - строка сообщения
//
Процедура ПодготовитьТекстСообщенияОНарушенииПравДоступа(ТекстСообщения) Экспорт
	
	// При необходимости можно переопределить или дополнить текст сообщения
	
КонецПроцедуры

// Производит заполнение реквизитов формы переданными значениями 
//
// Параметры:
//  ДанныеФормы - Данные управляемой формы;
//  ЗначениеЗаполнения - ссылка данные во временном хранилище.
//
Процедура ЗаполнитьИсточник(ДанныеФормы, ЗначениеЗаполнения) Экспорт
	
	Если ЗначениеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеЗаполнения);
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		МассивСтрокКоллекции = ДанныеФормы.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с типами объектов

// Определяет параметры электронного документа по типу владельца.
//
// Параметры:
//  Источник - объекта либо ссылка документа/справочника-источника.
//  ФорматCML - булево, если истина, то для формирования ЭД будут использоваться схемы CML (не ФНС),
//    в параметрах должны быть указаны соответствующие виды ЭД.
//
// Возвращаемое значение:
//  ПараметрыЭД - структура параметров источника, необходимых для определения
//                настроек обмена ЭД. Обязательные параметры: НаправлениеЭД, ВидЭД,
//                Контрагент, СоглашениеЭД или Организация.
//
Процедура ЗаполнитьПараметрыЭДПоИсточнику(Источник, ПараметрыЭД, ФорматCML = Ложь) Экспорт
	
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		Если ФорматCML Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;
		Иначе
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.АктВыполненныхРабот")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.АктВыполненныхРабот") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПоступлениеУслугПрочихАктивов") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ПередачаТоваровМеждуОрганизациями") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.ОрганизацияПолучатель;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ВозвратТоваровМеждуОрганизациями") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.ОрганизацияПолучатель;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураВыданный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураВыданный") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		Если ЗначениеЗаполнено(Источник.ДокументОснование) И ЗначениеЗаполнено(Источник.ДокументОснование.Контрагент) Тогда
			ПараметрыЭД.Контрагент = Источник.ДокументОснование.Контрагент;
		КонецЕсли;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетФактураПолученный") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		Для Каждого Строка Из Источник.ДокументыОснования Цикл
			Если ЗначениеЗаполнено(Строка.ДокументОснование) И ЗначениеЗаполнено(Строка.ДокументОснование.Контрагент) Тогда
				ПараметрыЭД.Контрагент = Строка.ДокументОснование.Контрагент;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказПоставщику")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаказКлиента")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаказКлиента") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.СчетНаОплатуКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.СчетНаОплатуКлиенту") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.РегистрацияЦенНоменклатурыПоставщика")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.РегистрацияЦенНоменклатурыПоставщика") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = ?(Источник.Соглашение.Пустая(), "", Источник.Соглашение.Организация);
		ПараметрыЭД.Контрагент = ?(Источник.Соглашение.Пустая(), "", Источник.Соглашение.Контрагент);
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КоммерческоеПредложениеКлиенту") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = ?(Источник.Соглашение.Пустая(), "", Источник.Соглашение.Контрагент);
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитенту")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитенту") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомиссионера")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомиссионера") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.ОтчетКомитентуОСписании")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.ОтчетКомитентуОСписании") Тогда
		ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаРеализации") Тогда
		Если Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;
		ИначеЕсли ТипЗнч(Источник.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;
		КонецЕсли;
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	ИначеЕсли ТипИсточника = Тип("ДокументСсылка.КорректировкаПоступления")
		ИЛИ ТипИсточника = Тип("ДокументОбъект.КорректировкаПоступления") Тогда
		ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;
		ПараметрыЭД.Организация = Источник.Организация;
		ПараметрыЭД.Контрагент = Источник.Контрагент;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет имя реквизита итоговой суммы для конфигурации
Функция ОпределитьИмяРеквизитаСуммы() Экспорт
	
	Возврат "СуммаДокумента";
	
КонецФункции

// Определяет имя реквизита владельца справочника НоменклатураПоставщика.
//
// Параметры:
//  ИмяРеквизитаВладельца - строка - имя реквизита владельца.
//
Процедура ОпределитьИмяРеквизитаВладельцаНоменклатурыПоставщиков(ИмяРеквизитаВладельца) Экспорт
	
	Владелец = Справочники.НоменклатураПоставщиков.ПустаяСсылка().Владелец;
	Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ИмяРеквизитаВладельца = "Контрагент";
	ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Партнеры") Тогда
		ИмяРеквизитаВладельца = "Партнер";
	КонецЕсли;
	
КонецПроцедуры

// Определяет соответствие справочников библиотеки и прикладного решения,
// в случае различий в наименовании справочников.
//
// Параметры:
//  СоотвествиеСправочников - соотвествие - список справочников.
//
Процедура ПолучитьСоответствиеСправочников(СоотвествиеСправочников) Экспорт
	
	СоотвествиеСправочников.Вставить("Организации",                 "Организации");
	СоотвествиеСправочников.Вставить("Контрагенты",                 "Контрагенты");
	СоотвествиеСправочников.Вставить("Партнеры",                    "Партнеры");
	СоотвествиеСправочников.Вставить("Номенклатура",                "Номенклатура");
	СоотвествиеСправочников.Вставить("ХарактеристикиНоменклатуры",  "ХарактеристикиНоменклатуры");
	СоотвествиеСправочников.Вставить("ЕдиницыИзмерения",            "ЕдиницыИзмерения");
	СоотвествиеСправочников.Вставить("НоменклатураПоставщиков",     "НоменклатураПоставщиков");
	СоотвествиеСправочников.Вставить("Валюты",                      "Валюты");
	СоотвествиеСправочников.Вставить("Банки",                       "КлассификаторБанковРФ");
	СоотвествиеСправочников.Вставить("УпаковкиНоменклатуры",        "УпаковкиНоменклатуры");
	СоотвествиеСправочников.Вставить("БанковскиеСчетаОрганизаций",  "БанковскиеСчетаОрганизаций");
	СоотвествиеСправочников.Вставить("БанковскиеСчетаКонтрагентов", "БанковскиеСчетаКонтрагентов");
	
КонецПроцедуры

// Определяет соответствие функциональных опций библиотеки и прикладного решения,
// в случае различий в наименовании.
//
// Параметры:
//  СоотвествиеФО - соотвествие - список функциональных опций.
//
Процедура ПолучитьСоответствиеФункциональныхОпций(СоотвествиеФО) Экспорт
	
	// Электронные документы
	СоотвествиеФО.Вставить("ИспользоватьОбменЭДМеждуОрганизациями",  "ИспользоватьОбменЭДМеждуОрганизациями");
	СоотвествиеФО.Вставить("ИспользоватьОбменЭД",                    "ИспользоватьОбменЭД");
	СоотвествиеФО.Вставить("ИспользоватьЭлектронныеЦифровыеПодписи", "ИспользоватьЭлектронныеЦифровыеПодписи");
	СоотвествиеФО.Вставить("ИспользоватьОбменЭДСБанками",            Неопределено);
	// Конец электронные документы
	
	СоотвествиеФО.Вставить("ИспользоватьРучныеСкидкиВПродажах", "ИспользоватьРучныеСкидкиВПродажах");
	СоотвествиеФО.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах", "ИспользоватьАвтоматическиеСкидкиВПродажах");
	СоотвествиеФО.Вставить("ИспользоватьРучныеСкидкиВЗакупках", "ИспользоватьРучныеСкидкиВЗакупках");
	
КонецПроцедуры

// В функции описана структура сопоставления имен переменных библиотеки,
// наименованиям объектов и реквизитов метаданных прикладного решения.
// 
// Параметры:
//  Ключ соотвествия - имя переменной, используемой в коде библиотеки;
//  Значение соотвествия - наименование объекта метаданных или реквизита объекта
//  в прикладном решении.
//
Процедура ПолучитьСоотвествиеНаименованийОбъектовМДиРеквизитов(СоотвествиеРеквизитовОбъекта) Экспорт
	
	СоотвествиеРеквизитовОбъекта.Вставить("СчетФактураВыданныйВМетаданных",       "СчетФактураВыданный");
	СоотвествиеРеквизитовОбъекта.Вставить("СчетФактураПолученныйВМетаданных",     "СчетФактураПолученный");
	СоотвествиеРеквизитовОбъекта.Вставить("ДатаВыставленияВСчетеФактуреВыданном", "ДатаВыставления");
	СоотвествиеРеквизитовОбъекта.Вставить("ДатаПолученияВСчетеФактуреПолученном", "ДатаПолучения");
	
КонецПроцедуры

// Получает значение перечисления по имени объектов метаданных.
// 
// Параметры:
//  СоответствиеПеречислений - соответствие библиотечных и прикладных перечислений.
//
Процедура ПолучитьСоответствиеПеречислений(СоответствиеПеречислений) Экспорт
	
	СоответствиеПеречислений.Вставить("НДС", "СтавкиНДС");
	СоответствиеПеречислений.Вставить("ЮрФизЛицо", "ЮрФизЛицо");
	СоответствиеПеречислений.Вставить("ВариантыОплатыКлиентом", "ВариантыОплатыКлиентом");
	СоответствиеПеречислений.Вставить("ВариантыОплатыПоставщику", "ВариантыОплатыПоставщику");
	СоответствиеПеречислений.Вставить("ФормыОплаты", "ФормыОплаты");
	СоответствиеПеречислений.Вставить("СпособРасчета", "СпособыРасчетаКомиссионногоВознаграждения");
	
КонецПроцедуры
 
// Получает значение перечисления по имени перечисления и представлению в библиотеке.
// 
// Параметры:
//  ИмяПеречисления - Строка, наименование перечисления.
//  ПредставлениеПеречисления - Строка, наименование значения перечисления.
//  НайденноеЗначение - значение искомого перечисления.
//
Процедура ПолучитьЗначениеПеречисления(ИмяПеречисления, ПредставлениеПеречисления, НайденноеЗначение) Экспорт
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Найти(Врег(ЭлПеречисления.Синоним), Врег(ПредставлениеПеречисления)) > 0
			ИЛИ Найти(Врег(ЭлПеречисления.Имя), Врег(ПредставлениеПеречисления)) > 0 Тогда
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет массив актуальными видами электронных документов для прикладного решения.
//
// Параметры:
//  Массив - виды актуальных ЭД.
//
Процедура ПолучитьАктуальныеВидыЭД(Массив) Экспорт
	
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Продавец);
	Массив.Добавить(Перечисления.ВидыЭД.ТОРГ12Покупатель);
	Массив.Добавить(Перечисления.ВидыЭД.АктИсполнитель);
	Массив.Добавить(Перечисления.ВидыЭД.АктЗаказчик);
	Массив.Добавить(Перечисления.ВидыЭД.СчетФактура);
	Массив.Добавить(Перечисления.ВидыЭД.СчетНаОплату);
	Массив.Добавить(Перечисления.ВидыЭД.ПрайсЛист);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ОтветНаЗаказ);
	Массив.Добавить(Перечисления.ВидыЭД.ЗаказТовара);
	Массив.Добавить(Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель);
	Массив.Добавить(Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель);

	
КонецПроцедуры

// Проверяет на корректность заполнения параметров электронного документа.
//
// Параметры:
//  ПараметрыЭД - структура - перечень параметров ЭД.
//
// Возвращаемое значение:
//  Булево - Истина если правильно заполнен объект выгрузки
//
Функция ПроверитьПравильностьЗаполненияОбъекта(ПараметрыЭД) Экспорт
	
	Результат = Истина;
	
	Если ПараметрыЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист И НЕ ЗначениеЗаполнено(ПараметрыЭД.Контрагент) Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает структуру, содержащую информацию о юридическом адресе контрагента.
//
// Параметры:
//  СтруктураАдреса     - структура - содержит ссылки на элементы справочника;
//  СтруктураПараметров - структура - содержит ссылки на элементы справочника;
//  ВидКонтрагента      - строка - имя метаданных справочника;
//  ВидАдреса           - Строка - "Факт" или "Юр";
//  ТекстОшибки         - Строка - описание ошибки;
//
Процедура ПолучитьАдресСтруктурой(СтруктураАдреса, СтруктураПараметров, ВидКонтрагента, ВидАдреса, ТекстОшибки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КонтрагентыКонтактнаяИнформация.Страна,
	|	КонтрагентыКонтактнаяИнформация.Регион,
	|	КонтрагентыКонтактнаяИнформация.ЗначенияПолей,
	|	КонтрагентыКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.%1.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|ГДЕ
	|	КонтрагентыКонтактнаяИнформация.Ссылка = &Ссылка
	|	И КонтрагентыКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.%2Адрес%3)";
	Если ТипЗнч(СтруктураПараметров[ВидКонтрагента]) = Тип("СправочникСсылка.Организации") Тогда
		Параметр1 = "Организации";
		Параметр3 = "Организации"
	Иначе
		Параметр1 = "Контрагенты";
		параметр3 = "Контрагента";
	КонецЕсли;
	
	Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Запрос.Текст, Параметр1, ВидАдреса, Параметр3);
	Запрос.УстановитьПараметр("Ссылка", СтруктураПараметров[ВидКонтрагента]);
	Результат =Запрос.Выполнить().Выбрать();
	Параметр1 = ?(ВидКонтрагента = "Организация", "организации", ?(ВидКонтрагента = "Грузоотправитель", "грузоотправителя",
		?(ВидКонтрагента = "Контрагент", "контрагента", "грузополучателя")));
	Параметр2 = ?(ВидАдреса="Юр", "юридический", "фактический");
	Если Результат.Следующий() Тогда
		Если Не ЗначениеЗаполнено(Результат.ЗначенияПолей) Тогда
			Ошибка =  "Для %1 необходимо заполнить %2 адрес по классификатору";
			ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
			Возврат;
		КонецЕсли;
		СписокПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(результат.ЗначенияПолей);
	Иначе
		Ошибка = "Для %1 необходимо указать %2 адрес";
		ТекстОшибки = ТекстОшибки + Символы.ПС + Нстр("ru='" + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ошибка, Параметр1, Параметр2) + "'"); 
		Возврат;
	КонецЕсли;
		
	СтруктураРезультата = Новый Структура("Индекс,Регион,Район,Город,НаселенныйПункт,Улица,Дом,Корпус,Квартира");
	
	Для Каждого Поле ИЗ СписокПолей Цикл
		СтруктураРезультата.Вставить(Поле.Представление, Поле.Значение);
	КонецЦикла;
	
	СтруктураОтбора = УправлениеКонтактнойИнформациейКлассификаторы.ВернутьСтрокуАдресногоКлассификатораПоАдреснымЭлементам(СтруктураРезультата.Регион, "", "", "", "");
	АдресРФ = (Результат.Страна = "РОССИЯ" ИЛИ Результат.Страна = "");
	
	СтруктураАдреса.Вставить("АдресРФ", АдресРФ);
	СтруктураАдреса.Вставить("Индекс", СтруктураРезультата.Индекс);
	СтруктураАдреса.Вставить("КодРегион", Формат(СтруктураОтбора.КодАдресногоОбъектаВКоде,"ЧЦ=2; ЧВН=; ЧГ=" ));
	СтруктураАдреса.Вставить("Район", СтруктураРезультата.Район);
	СтруктураАдреса.Вставить("Город", СтруктураРезультата.Город);
	СтруктураАдреса.Вставить("НаселПункт", СтруктураРезультата.НаселенныйПункт);
	СтруктураАдреса.Вставить("Улица", СтруктураРезультата.Улица);
	СтруктураАдреса.Вставить("Дом", СтруктураРезультата.Дом);
	СтруктураАдреса.Вставить("Корпус", СтруктураРезультата.Корпус);
	СтруктураАдреса.Вставить("Кварт", СтруктураРезультата.Квартира);
	Если НЕ АдресРФ Тогда
		СтруктураАдреса.Вставить("КодСтр", СтруктураРезультата.КодСтраны);
		СтруктураАдреса.Вставить("АдрТекст",Результат.Представление);
	КонецЕсли;
	
КонецПроцедуры
 
//Возвращает название региона по коду
//
// Параметры:
// КодРегиона - Строка, содержащая двухсимвольный код региона
//
// Возвращаемое значение: Строка - название региона
//
Функция НазваниеРегиона(КодРегиона) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодРегиона) Тогда
		Возврат "";
	КонецЕсли;
	
	КодРегионаЧисло = Число(КодРегиона);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныйКлассификатор.КодАдресногоОбъектаВКоде,
	|	АдресныйКлассификатор.ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.Наименование,
	|	АдресныйКлассификатор.Код
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|ГДЕ
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента
	|	И АдресныйКлассификатор.КодАдресногоОбъектаВКоде = &КодАдресногоОбъектаВКоде";
	Запрос.УстановитьПараметр("КодАдресногоОбъектаВКоде", КодРегионаЧисло);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Наименование;
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

// Определяет, является ли объект корректировочным счетом-фактурой
//
// Параметры:
// СсылкаНаОбъект - ДокументСсылка.СчетФактураВыданный
//
// Возвращаемое значение: Булево 
//
Функция ЭтоКорректировочныйДокумент(СсылкаНаОбъект) экспорт
	
	Результат = Ложь;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Корректировочный");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Определяет возможно ли редактировать объект информационной базы
//
// Параметры
//  <СсылкаНаОбъект>  - <любая ссылка> - ссылка на проверяемый объект
/// <РедактированиеРазрешено> - <Булево>   - возвращает разрешено или нет редактирование
//
Функция ПроверитьВозможностьРедактированияОбъекта(СсылкаНаОбъект, РедактированиеРазрешено) Экспорт
	
	
КонецФункции

// Выполняет заполнение списка документов по виду электронного документа.
//
// Параметры:
//  ВидЭД           - Перечисления   - вид электронного документа;
//  СписокВозврата  - СписокЗначений - список ссылок на документы информационной базы.
//
Процедура СписокТиповДокументовПоВидуЭД(ВидЭД, СписокВозврата) Экспорт
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12 Тогда
		СписокВозврата.Добавить(Документы.ПоступлениеТоваровУслуг.ПустаяСсылка(), Метаданные.Документы.ПоступлениеТоваровУслуг.Представление());
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Определение ключевых реквизитов объектов для регистрации изменений

// Получает ключевые реквизиты объекта по текстовому представлению.
//
// Параметры: 
// ИмяОбъекта - Строка, текстовое представление объекта, ключевые реквизиты которого необходимо получить.
//
Процедура ПолучитьСтруктуруКлючевыхРеквизитовОбъекта(ИмяОбъекта, СтруктураКлючевыхРеквизитов) Экспорт
	
	Если ИмяОбъекта = "Документ.КоммерческоеПредложениеКлиенту" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, ЦенаВключаетНДС, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.РеализацияТоваровУслуг" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПоступлениеТоваровУслуг" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказКлиента" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаказПоставщику" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, НоменклатураПоставщика, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ВариантОплаты, ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетФактураВыданный" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, ДокументОснование, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПроизвольныйЭД" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Контрагент, Партнер, Сообщение");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.СчетНаОплатуКлиенту" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, БанковскийСчет, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомитенту" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, НоменклатураПоставщика, Цена, Сумма, СуммаНДС, СтавкаНДС, СуммаПродажи, СуммаВознаграждения");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		//ЭтапыГрафикаОплаты
		СтрокаРеквизитовОбъекта = ("ДатаПлатежа, ПроцентПлатежа, СуммаПлатежа");
		СтруктураКлючевыхРеквизитов.Вставить("ЭтапыГрафикаОплаты", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ОтчетКомитентуОСписании" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, НоменклатураПоставщика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.АктВыполненныхРабот" Тогда 
		// шапка
		СтрокаРеквизитовОбъекта = ("Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Услуги", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ПередачаТоваровМеждуОрганизациями" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, ОрганизацияПолучатель, 
			|ЦенаВключаетНДС, ПометкаУдаления, РасчетыЧерезОтдельногоКонтрагента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ВозвратТоваровМеждуОрганизациями" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, ОрганизацияПолучатель, 
			|ЦенаВключаетНДС, ПометкаУдаления, РасчетыЧерезОтдельногоКонтрагента");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.ЗаявкаНаРасходованиеДенежныхСредств" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Контрагент, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Партнер, Сумма");
		СтруктураКлючевыхРеквизитов.Вставить("РасшифровкаПлатежа", СтрокаРеквизитовОбъекта);
		
	ИначеЕсли ИмяОбъекта = "Документ.КорректировкаРеализации" Тогда
		// шапка
		СтрокаРеквизитовОбъекта = ("Дата, Номер, Организация, Валюта, СуммаДокумента, Партнер, Контрагент, ЦенаВключаетНДС, ХозяйственнаяОперация, ПометкаУдаления");
		СтруктураКлючевыхРеквизитов.Вставить("Шапка", СтрокаРеквизитовОбъекта);
		// ТЧ
		СтрокаРеквизитовОбъекта = ("Количество, Номенклатура, Характеристика, Цена, Сумма, СуммаНДС, СтавкаНДС");
		СтруктураКлючевыхРеквизитов.Вставить("Товары", СтрокаРеквизитовОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

// Получает таблицу соотвествий параметров для типов метаданных их пользовательским представлениям.
//
// Параметры:
//  ТаблицаСоответствия - таблица - соответствие параметров для типов метаданных их пользовательским представлениям
//  содержит следующие колонки: ТипИсточника, Параметр, Представление.
//
Процедура ПолучитьТаблицуСоответствияПараметровПользовательскимПредставлениям(ТаблицаСоответствия) Экспорт
	
	Макет                   = Обработки.ЭлектронныеДокументы.ПолучитьМакет("ПользовательскоеПредставлениеОбязательныхПолей");
	ОбластьДокументов       = Макет.ПолучитьОбласть("ОбязательныеПоля");
	ОбластьДокументовВысота = ОбластьДокументов.ВысотаТаблицы;

	Для НСтр = 1 По ОбластьДокументовВысота Цикл
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.ТипИсточника  = Тип(СокрЛП(ОбластьДокументов.Область(НСтр, 1).Текст));
		НоваяСтрока.Параметр      = СокрЛП(ОбластьДокументов.Область(НСтр, 2).Текст);
		НоваяСтрока.Представление = СокрЛП(ОбластьДокументов.Область(НСтр, 3).Текст);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск и создание документов

// Сохраняет данные из электронного документа в объект ИБ.
//
// Параметры:
//  СтрокаДляЗагрузки - строка параметров для загрузки,
//  ДеревоРазбора     - ДеревоЗначений, структура параметров документа ИБ.
//  СсылкаНаВладельца - Ссылка на объект ИБ, владельца электронного документа.
//
// Возвращаемое значение:
//  НайденныйОбъект - ссылка объекта.
//
Функция СохранитьДанныеОбъектаВБД(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина) Экспорт
	
	НайденныйОбъект = Неопределено;
	Если СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист Тогда
		НайденныйОбъект = НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		НайденныйОбъект = НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		НайденныйОбъект = НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату Тогда
		НайденныйОбъект = НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец Тогда
		ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		Иначе
			НайденныйОбъект = НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца, Записывать);
		КонецЕсли;
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.СчетФактура Тогда
		НайденныйОбъект = НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров Тогда
		НайденныйОбъект = НайтиСоглашениеОбИспользованииЭД(СтрокаДляЗагрузки, ДеревоРазбора);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара Тогда
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара Тогда
		НайденныйОбъект = НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.АктВыполненныхРабот
		ИЛИ СтрокаДляЗагрузки.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
		Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
			НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		Иначе
			НайденныйОбъект = НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
		КонецЕсли;
	ИначеЕсли СтрокаДляЗагрузки.ВидЭд = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		НайденныйОбъект = НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца);
	КонецЕсли;
	
	Возврат НайденныйОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание элементов справочников

// Находит ссылку на объект ИБ по типу, ИД и дополнительным реквизитам
// 
// Параметры: 
// ТипОбъекта - Строка, идентификатор типа объекта, который необходимо найти,
// ИДОбъекта - Строка, идентификатор объекта заданного типа,
// ДополнительныеРеквизиты - Структура, набор дополнительных полей объекта для поиска.
//
Функция НайтиСсылкуНаОбъект(ТипОбъекта, ИдОбъекта, ДополнительныеРеквизиты = Неопределено, ИДЭД = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Неопределено;

	Если ТипОбъекта = "Валюты" ИЛИ ТипОбъекта = "ЕдиницыИзмерения" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ИдОбъекта);   
	ИначеЕсли ТипОбъекта = "Банки" Тогда
		Результат = НайтиСсылкуНаОбъектПоРеквизиту("КлассификаторБанковРФ", "Код", ИдОбъекта);   
	ИначеЕсли (ТипОбъекта = "Контрагенты" ИЛИ ТипОбъекта = "Организации") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		ИНН = "";
		КПП = "";
		Если ДополнительныеРеквизиты.Свойство("ИНН") Тогда 
			ИНН = ДополнительныеРеквизиты.ИНН;
		КонецЕсли;
		Если ДополнительныеРеквизиты.Свойство("КПП") Тогда 
			КПП = ДополнительныеРеквизиты.КПП;
		КонецЕсли;
		Если ЗначениеЗаполнено(ИНН+КПП) Тогда // по ИНН+КПП
			Результат = СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП); 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Наименование", ПараметрПоиска) Тогда // по Наименованию
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Наименование", ПараметрПоиска); 
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "НоменклатураПоставщиков" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		Владелец = "";
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска) Тогда // по Идентификатору
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Идентификатор", ПараметрПоиска);
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "Номенклатура" И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска = "";
		Если ДополнительныеРеквизиты.Свойство("Идентификатор", ПараметрПоиска) Тогда // по Идентификатору
			Результат = НайтиСсылкуНаНоменклатуруПоИдентификаторуНоменклатурыПоставщика(ПараметрПоиска);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("НоменклатураПоставщика", ПараметрПоиска) Тогда // по НоменклатуреПоставщика
			Результат = НайтиСсылкуНаНоменклатуруПоНоменклатуреПоставщика(ПараметрПоиска);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Результат) И ДополнительныеРеквизиты.Свойство("Артикул", ПараметрПоиска) Тогда // по Коду номенклатуры своей компании
			Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "Код", ПараметрПоиска);
		КонецЕсли;
	ИначеЕсли (ТипОбъекта = "БанковскиеСчетаОрганизаций" ИЛИ ТипОбъекта = "БанковскиеСчетаКонтрагентов") И ЗначениеЗаполнено(ДополнительныеРеквизиты) Тогда
		ПараметрПоиска 	= "";
		Владелец 		= "";
		Если ДополнительныеРеквизиты.Свойство("НомерСчета", ПараметрПоиска) Тогда // по Номеру счета
			Если ДополнительныеРеквизиты.Свойство("Владелец", Владелец) И ТипЗнч(Владелец) <> Тип("Строка") Тогда
				Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "НомерСчета", ПараметрПоиска, Владелец);
			Иначе
				Результат = НайтиСсылкуНаОбъектПоРеквизиту(ТипОбъекта, "НомерСчета", ПараметрПоиска); 
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "ВидыКонтактнойИнформации" Тогда
		Если ИдОбъекта = "ФаксКонтрагента" Тогда
			Результат = Неопределено;
		Иначе
			Результат = Справочники[ТипОбъекта][ИдОбъекта];
		КонецЕсли;
	ИначеЕсли ТипОбъекта = "СтраныМира" Тогда	
		Результат =  "--";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит ссылку на справочник по переданному реквизиту.
//
// Параметры:
// ИмяСправочника - Строка, имя справочника, объект которого надо найти,
// ИмяРеквизита - Строка, имя реквизита, по которому будет проведен поиск,
// ЗначРеквизита - произвольное значение, значение реквизита, по которому будет проведен поиск, 
// Владелец - Ссылка на владельца для поиска в иерархическом справочнике.
//
Функция НайтиСсылкуНаОбъектПоРеквизиту(ИмяСправочника, ИмяРеквизита, ЗначРеквизита, Владелец = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	ОбъектМетаданных = Метаданные.Справочники[ИмяСправочника];
	Если НЕ ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.СтандартныеРеквизиты, ИмяРеквизита) // нестандартный реквизит
		И НЕ ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита)<> Неопределено Тогда // другой реквизит
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИскСправочник.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+ИмяСправочника+" КАК ИскСправочник
	|ГДЕ
	|	ИскСправочник."+ИмяРеквизита+" = &ЗначРеквизита";
	
	Если ЗначениеЗаполнено(Владелец) Тогда
		Запрос.Текст = Запрос.Текст + " И ИскСправочник.Владелец = &Владелец";
		Запрос.УстановитьПараметр("Владелец", 	Владелец);
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗначРеквизита", ЗначРеквизита);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Находит элемент справочника по реквизитам ИНН и КПП
// Если элемент не найден возвращаем Неопределено
// Параметры:
//  ТипОбъекта - Строка, имя справочника в метаданных;
//  ИНН - строка;
//  КПП - строка;
//  Организация - Организация, ссылка на элемент справочника организации
//
// Возвращаемое значение:
//  Результат - ссылка на справочник или неопределено
//
Функция СсылкаНаОбъектПоИННКПП(ТипОбъекта, ИНН, КПП, Организация = Неопределено) Экспорт
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник."+ТипОбъекта+" КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН И
	|	Контрагенты.КПП = &КПП";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет реквизиты объекта данными из струкутры реквизитов.
//
// Параметры:
//  СтруктураРеквизитов - струтура - перечень значений реквизитов
//
// Возвращаемое значение:
//  Контрагент.Ссылка - ссылка на справочник контрагентов
//
Функция ЗаполнитьРеквизитыКонтрагента(СтруктураРеквизитов) Экспорт
	
	Результат = Неопределено;
	Партнер   = Неопределено;
	
	Если ЗначениеЗаполнено(СтруктураРеквизитов.Контрагент) Тогда
		Контрагент = СтруктураРеквизитов.Контрагент.ПолучитьОбъект();
	Иначе
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	КонецЕсли;
	
	Контрагент.Наименование = СтруктураРеквизитов.Наименование;
	ИНН_КПП        = СтруктураРеквизитов.ИНН_КПП;
	Контрагент.ИНН = Сред(ИНН_КПП, 1, Найти(ИНН_КПП, "/") - 1);
	Контрагент.КПП = Сред(ИНН_КПП, Найти(ИНН_КПП, "/") + 1);

	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		// Заполним реквизиты партнера
		
		Если Контрагент.ЭтоНовый() Тогда
			Партнер = Справочники.Партнеры.СоздатьЭлемент();
			СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
			Партнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
			Контрагент.Партнер = СсылкаНовогоПартнера;
		Иначе
			Партнер = Контрагент.Партнер.ПолучитьОбъект();
		КонецЕсли;
		
		Партнер.Наименование = Контрагент.Наименование;
		Партнер.ИНН          = Контрагент.ИНН;
		Партнер.КПП          = Контрагент.КПП;
		
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		Контрагент.Записать();
		Если Партнер <> Неопределено Тогда
			Партнер.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		Результат = Контрагент.Ссылка;
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Загрузка реквизитов контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру реквизитов товара 
//
// Параметры:
// РеквизитыНоменклатуры - Структура, содержащая параметры поиска 
//
// Возвращаемое значение:
// Структура, содержащая ссылки на номенклатуру, характеристику, упаковку
//
Процедура ПолучитьРеквизитыТовара (РеквизитыНоменклатуры, СтруктураВозврата, ИД = Неопределено) Экспорт
	
	ПараметрПоиска = "";
	НоменклатураПоставщика = Неопределено;
	Если РеквизитыНоменклатуры.Свойство("НоменклатураПоставщика",НоменклатураПоставщика)Тогда
		СтруктураВозврата.Номенклатура = НоменклатураПоставщика.Номенклатура;
		СтруктураВозврата.Характеристика = НоменклатураПоставщика.Характеристика;
		СтруктураВозврата.Упаковка = НоменклатураПоставщика.Упаковка;
	КонецЕсли;
		
КонецПроцедуры

// Возвращает ИД контрагента.
//
// Параметры
//  Контрагент – ссылка на контрагента (Организация или Контрагент)
// 	ВидКонтрагента - строка, определяющая вид контрагента
//
// Возвращаемое значение:
//  строка со значением ИдКонтрагента
//
Функция ПолучитьИДКонтрагента(Контрагент, ВидКонтрагента)	Экспорт
	
	ИдКонтрагента = "";
	Если ВРег(ВидКонтрагента) = ВРег("Организация") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	ИначеЕсли ВРег(ВидКонтрагента) = ВРег("Контрагент") Тогда
		ИдКонтрагента = Контрагент.ИНН+"_"+Контрагент.КПП;
	КонецЕсли;
	Возврат ИдКонтрагента;
	
КонецФункции

// Создает объект в ИБ по дереву параметров.
//
// Параметры:
// СтрокаОбъекта - Структура параметров записываемого объекта,
// ДеревоРазбора - ДеревоЗначений, результат разбора электронного документа.
//
Функция СоздатьОбъектВБД(СтрокаОбъекта, ДеревоРазбора) Экспорт
	
	НовЭл = Неопределено;
	Если СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.НоменклатураПоставщиков" Тогда
		НовЭл = СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора);
	ИначеЕсли СтрокаОбъекта.ОписаниеТипа = "СправочникСсылка.БанковскиеСчетаКонтрагентов" Тогда
		НовЭл = СоздатьРасчетныйСчет(СтрокаОбъекта,"БанковскийСчетКонтрагента", ДеревоРазбора);
	КонецЕсли;
	
	Возврат НовЭл;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение таблиц соответствий элементов справочников

// Создает таблицу порядка создания типов при загрузке электронного документа.
//
Функция ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	
	Таблица.Колонки.Добавить("ТипОбъекта");
	Таблица.Колонки.Добавить("Порядок");
	// БанковскиеСчетаКонтрагентов
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "БанковскиеСчетаКонтрагентов";
	НовСтрока.Порядок 		= 1;
	// Номенклатура поставщиков
	НовСтрока = Таблица.Добавить();
	НовСтрока.ТипОбъекта 	= "НоменклатураПоставщиков";
	НовСтрока.Порядок 		= 2;
	
	Возврат Таблица;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Настройка обмена

// Получает текст запроса по настройкам обмена.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстНастроекОбменаПоСоглашению() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ_Соглашения.Организация КАК Организация,
	|	ТЧ_Соглашения.Контрагент КАК Контрагент,
	|	ТЧ_Соглашения.Ссылка.Партнер КАК Партнер,
	|	ТЧ_Соглашения.ВидЭД,
	|	ТЧ_Соглашения.НаправлениеЭД,
	|	ТЧ_Соглашения.ИспользоватьЭЦП КАК Подписывать,
	|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
	|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ТЧ_Соглашения.Ссылка КАК Основание,
	|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ТЧ_Соглашения.ВерсияРегламентаЭДО
	|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Ссылка,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ВидЭД,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьЭЦП,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
	|		&НаправлениеЭД КАК НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация КАК Организация,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
	|		NULL КАК ВерсияРегламентаЭДО
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	|	ГДЕ
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка = &СоглашениеЭД
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	|		И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|		И НЕ СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ПометкаУдаления
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
	|		&НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД,
	|		NULL
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|	ГДЕ
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка = &СоглашениеЭД
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|		И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|				ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашениеЧерезОЭДО.Ссылка,
	|		&ВидЭД,
	|		ИСТИНА,
	|		NULL,
	|		&НаправлениеЭД,
	|		СоглашениеЧерезОЭДО.Организация,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.Участник,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор,
	|		СоглашениеЧерезОЭДО.ИдентификаторОрганизации,
	|		СоглашениеЧерезОЭДО.СпособОбменаЭД,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.ВерсияРегламентаЭДО
	|	ИЗ
	|		РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
	|			ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
	|	ГДЕ
	|		СоглашениеЧерезОЭДО.Ссылка = &СоглашениеЭД
	|		И НЕ СоглашениеЧерезОЭДО.ПометкаУдаления
	|		И СоглашениеЧерезОЭДО.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И УчастникиОбменовЭДЧерезОператоровЭДО.Участник = &Контрагент
	|		И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|		И СоглашениеЧерезОЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)) КАК ТЧ_Соглашения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникСертификатов.Ссылка КАК Ссылка,
	|	СправочникСертификатов.ВидДокумента КАК ВидДокумента,
	|	СправочникСертификатов.Ссылка.Организация КАК Организация,
	|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату,
	|	СправочникСертификатов.Ссылка.ПарольПользователя
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СправочникСертификатов
	|ГДЕ
	|	НЕ СправочникСертификатов.Ссылка.ПометкаУдаления
	|	И НЕ СправочникСертификатов.Ссылка.Отозван
	|	И СправочникСертификатов.ИспользоватьДляПодписи
	|	И СправочникСертификатов.ВидДокумента = &ВидЭД
	|	И (СправочникСертификатов.Ссылка.Пользователь = &Пользователь
	|			ИЛИ СправочникСертификатов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ_Соглашения.Организация,
	|	ВТ_ТЧ_Соглашения.Контрагент,
	|	ВТ_ТЧ_Соглашения.Партнер,
	|	ВТ_ТЧ_Соглашения.ВидЭД,
	|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
	|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
	|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
	|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
	|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
	|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
	|	ВЫБОР
	|		КОГДА &НаправлениеЭД <> ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
	|	ВТ_Сертификаты.ПарольПользователя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
	|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
	|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО
	|ИЗ
	|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|			И (ВТ_Сертификаты.Организация = ВТ_ТЧ_Соглашения.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Сертификат.Отпечаток КАК Отпечаток,
	|	СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Ссылка КАК Соглашение
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыНеобходимыхПодписей КАК СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Ссылка = &СоглашениеЭД";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Получает текст запроса по настройкам обмена с приоритетами.
//
// Возвращаемое значение:
//  ТекстЗапроса - текст запроса.
//
Функция ПолучитьТекстЗапросаНастроекОбменаСПриоритетами() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ_Соглашения.Организация КАК Организация,
	|	ТЧ_Соглашения.Контрагент КАК Контрагент,
	|	ТЧ_Соглашения.Ссылка.Партнер КАК Партнер,
	|	ТЧ_Соглашения.ВидЭД,
	|	ТЧ_Соглашения.НаправлениеЭД,
	|	ТЧ_Соглашения.ИспользоватьЭЦП КАК Подписывать,
	|	ТЧ_Соглашения.Ссылка.СертификатКонтрагентаДляШифрования КАК СертификатКонтрагентаДляШифрования,
	|	ТЧ_Соглашения.Ссылка.СертификатОрганизацииДляРасшифровки КАК СертификатОрганизацииДляРасшифровки,
	|	ТЧ_Соглашения.Ссылка.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ТЧ_Соглашения.Ссылка.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ТЧ_Соглашения.Ссылка КАК Основание,
	|	ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ТЧ_Соглашения.ВерсияРегламентаЭДО КАК ВерсияРегламентаЭДО,
	|	ТЧ_Соглашения.Приоритет
	|ПОМЕСТИТЬ ВТ_ТЧ_Соглашения
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка КАК Ссылка,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент КАК ВидЭД,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ИспользоватьЭЦП КАК ИспользоватьЭЦП,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.ОжидатьКвитанциюОДоставке КАК ОжидатьКвитанциюОДоставке,
	|		&НаправлениеЭД КАК НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация КАК Организация,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент КАК Контрагент,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СпособОбменаЭД КАК СпособОбменаЭД,
	|		NULL КАК ВерсияРегламентаЭДО,
	|		0 КАК Приоритет
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ВходящиеДокументы КАК СоглашенияОбИспользованииЭДВходящиеДокументы
	|	ГДЕ
	|		НЕ СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.ПометкаУдаления
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|		И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И ВЫБОР
	|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|					ТОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	|							И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|				КОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Организация = &Организация
	|						И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|						И СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = &ВидЭД
	|					ТОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.Формировать
	|				КОГДА СоглашенияОбИспользованииЭДВходящиеДокументы.ВходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
	|						И &Партнер <> НЕОПРЕДЕЛЕНО
	|						И СоглашенияОбИспользованииЭДВходящиеДокументы.Ссылка.Партнер = &Партнер
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		И &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ИспользоватьЭЦП,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.ОжидатьКвитанциюОДоставке,
	|		&НаправлениеЭД,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ИдентификаторКонтрагента,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ИдентификаторОрганизации,
	|		СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД,
	|		NULL,
	|		0
	|	ИЗ
	|		Справочник.СоглашенияОбИспользованииЭД.ИсходящиеДокументы КАК СоглашенияОбИспользованииЭДИсходящиеДокументы
	|	ГДЕ
	|		НЕ СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.ПометкаУдаления
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СпособОбменаЭД <> ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)
	|		И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И ВЫБОР
	|				КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|						И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|							И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Контрагент = &Контрагент
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = &ВидЭД
	|					ТОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.Формировать
	|				КОГДА СоглашенияОбИспользованииЭДИсходящиеДокументы.ИсходящийДокумент = ЗНАЧЕНИЕ(Перечисление.ВидыЭД.ПрайсЛист)
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Организация = &Организация
	|						И &Партнер <> НЕОПРЕДЕЛЕНО
	|						И СоглашенияОбИспользованииЭДИсходящиеДокументы.Ссылка.Партнер = &Партнер
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		И (&НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|				ИЛИ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СоглашениеЧерезОЭДО.Ссылка,
	|		&ВидЭД,
	|		ИСТИНА,
	|		NULL,
	|		&НаправлениеЭД,
	|		СоглашениеЧерезОЭДО.Организация,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.Участник,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.Идентификатор,
	|		СоглашениеЧерезОЭДО.ИдентификаторОрганизации,
	|		СоглашениеЧерезОЭДО.СпособОбменаЭД,
	|		УчастникиОбменовЭДЧерезОператоровЭДО.ВерсияРегламентаЭДО,
	|		1
	|	ИЗ
	|		РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеЧерезОЭДО
	|			ПО УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = СоглашениеЧерезОЭДО.Ссылка
	|	ГДЕ
	|		НЕ СоглашениеЧерезОЭДО.ПометкаУдаления
	|		И СоглашениеЧерезОЭДО.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)
	|		И НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|		И СоглашениеЧерезОЭДО.Организация = &Организация
	|		И УчастникиОбменовЭДЧерезОператоровЭДО.Участник = &Контрагент
	|		И УчастникиОбменовЭДЧерезОператоровЭДО.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыУчастниковОбменаЭД.Присоединен)
	|		И СоглашениеЧерезОЭДО.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезОператораЭДОТакском)) КАК ТЧ_Соглашения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СправочникСертификатов.Ссылка КАК Ссылка,
	|	СправочникСертификатов.ВидДокумента КАК ВидДокумента,
	|	СправочникСертификатов.Ссылка.Организация КАК Организация,
	|	СправочникСертификатов.Ссылка.ЗапомнитьПарольКСертификату,
	|	СправочникСертификатов.Ссылка.ПарольПользователя
	|ПОМЕСТИТЬ ВТ_Сертификаты
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СправочникСертификатов
	|ГДЕ
	|	НЕ СправочникСертификатов.Ссылка.ПометкаУдаления
	|	И (СправочникСертификатов.Ссылка.Организация = &Организация
	|			ИЛИ ВЫБОР
	|				КОГДА &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|					ТОГДА СправочникСертификатов.Ссылка.Организация = &Контрагент
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|	И НЕ СправочникСертификатов.Ссылка.Отозван
	|	И ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ СправочникСертификатов.ВидДокумента = &ВидЭД
	|		КОНЕЦ
	|	И СправочникСертификатов.ИспользоватьДляПодписи
	|	И (СправочникСертификатов.Ссылка.Пользователь = &Пользователь
	|			ИЛИ СправочникСертификатов.Ссылка.Пользователь = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяССылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТЧ_Соглашения.Приоритет КАК Приоритет,
	|	ВТ_ТЧ_Соглашения.Организация,
	|	ВТ_ТЧ_Соглашения.Контрагент,
	|	ВТ_ТЧ_Соглашения.Партнер,
	|	ВТ_ТЧ_Соглашения.ВидЭД,
	|	ВТ_ТЧ_Соглашения.НаправлениеЭД,
	|	ВТ_ТЧ_Соглашения.Подписывать КАК Подписывать,
	|	ВТ_ТЧ_Соглашения.СертификатКонтрагентаДляШифрования,
	|	ВТ_ТЧ_Соглашения.СертификатОрганизацииДляРасшифровки,
	|	ВТ_ТЧ_Соглашения.РесурсВходящихДокументов КАК РесурсВходящихДокументов,
	|	ВТ_ТЧ_Соглашения.РесурсИсходящихДокументов КАК РесурсИсходящихДокументов,
	|	ВТ_ТЧ_Соглашения.ИдентификаторКонтрагента КАК ИдентификаторКонтрагента,
	|	ВТ_ТЧ_Соглашения.ИдентификаторОрганизации КАК ИдентификаторОрганизации,
	|	ВТ_ТЧ_Соглашения.Основание КАК СоглашениеЭД,
	|	ВТ_ТЧ_Соглашения.СпособОбменаЭД КАК СпособОбменаЭД,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодписи,
	|	ВЫБОР
	|		КОГДА ВТ_Сертификаты.Ссылка ЕСТЬ NULL 
	|				ИЛИ ВТ_Сертификаты.Организация <> &Организация
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_Сертификаты.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииДляПодтверждения,
	|	ВЫБОР
	|		КОГДА НЕ &НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Интеркампани)
	|				ИЛИ ВТ_СертификатыОрганизацииПолучателя.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.СертификатыЭЦП.ПустаяСсылка)
	|		ИНАЧЕ ВТ_СертификатыОрганизацииПолучателя.Ссылка
	|	КОНЕЦ КАК СертификатОрганизацииПолучателяДляПодписи,
	|	ЕСТЬNULL(ВТ_Сертификаты.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификату,
	|	ВТ_Сертификаты.ПарольПользователя,
	|	ЕСТЬNULL(ВТ_СертификатыОрганизацииПолучателя.ЗапомнитьПарольКСертификату, ЛОЖЬ) КАК ЗапомнитьПарольКСертификатуОргПолуч,
	|	ВТ_СертификатыОрганизацииПолучателя.ПарольПользователя КАК ПарольПользователяОргПолуч,
	|	ВТ_ТЧ_Соглашения.ВерсияРегламентаЭДО
	|ИЗ
	|	ВТ_ТЧ_Соглашения КАК ВТ_ТЧ_Соглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_Сертификаты
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_Сертификаты.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Организация = ВТ_Сертификаты.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Сертификаты КАК ВТ_СертификатыОрганизацииПолучателя
	|		ПО ВТ_ТЧ_Соглашения.ВидЭД = ВТ_СертификатыОрганизацииПолучателя.ВидДокумента
	|			И ВТ_ТЧ_Соглашения.Контрагент = ВТ_СертификатыОрганизацииПолучателя.Организация
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидЭД = НЕОПРЕДЕЛЕНО
	|					И &НаправлениеЭД = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ_ТЧ_Соглашения.НаправлениеЭД = &НаправлениеЭД
	|					И ВТ_ТЧ_Соглашения.ВидЭД = &ВидЭД
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Ссылка КАК Соглашение,
	|	СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Сертификат.Отпечаток КАК Отпечаток
	|ИЗ
	|	Справочник.СоглашенияОбИспользованииЭД.СертификатыНеобходимыхПодписей КАК СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей
	|ГДЕ
	|	СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Ссылка.СпособОбменаЭД = ЗНАЧЕНИЕ(Перечисление.СпособыОбменаЭД.ЧерезВебРесурсБанка)
	|	И НЕ СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Ссылка.ПометкаУдаления
	|	И СоглашенияОбИспользованииЭДСертификатыНеобходимыхПодписей.Ссылка.СтатусСоглашения = ЗНАЧЕНИЕ(Перечисление.СтатусыСоглашенийЭД.Действует)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Получение данных для формирования электронных документов

// Заполняет таблицу реквизитов контрагента для приглашения к обмену.
//
// Параметры:
//  ТаблицаРеквизитов - таблица значений с полями: Участник, Наименование, ИНН, КПП, АдресЭП, ВнешнийКод,
//  НаименованиеДляСообщенияПользователю.
//    Наименование - передается Оператору ЭДО,
//    НаименованиеДляСообщенияПользователю - выводится в сообщении пользователю ИБ.
//  МассивКонтрагентов - массив ссылок на участников-контрагентов.
//
Процедура ЗаполнитьРеквизитыКонтрагентовДляПриглашенияКОбмену(ТаблицаРеквизитов, МассивКонтрагентов, СоглашениеЭД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Ссылка КАК Участник,
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	"""" КАК ВнешнийКод,
	|	УчастникиОбменовЭДЧерезОператоровЭДО.АдресЭП КАК АдресЭП,
	|	Контрагенты.Наименование КАК НаименованиеДляСообщенияПользователю
	|ИЗ
	|	РегистрСведений.УчастникиОбменовЭДЧерезОператоровЭДО КАК УчастникиОбменовЭДЧерезОператоровЭДО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО УчастникиОбменовЭДЧерезОператоровЭДО.Участник = Контрагенты.Ссылка
	|ГДЕ
	|	УчастникиОбменовЭДЧерезОператоровЭДО.Участник В(&СписокУчастников)
	|	И УчастникиОбменовЭДЧерезОператоровЭДО.СоглашениеОбИспользованииЭД = &СоглашениеЭД";
	Запрос.УстановитьПараметр("СписокУчастников", МассивКонтрагентов);
	Запрос.УстановитьПараметр("СоглашениеЭД", СоглашениеЭД);
	
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	ТаблицаРеквизитов = ТЗ.Скопировать();
	
КонецПроцедуры

// Получает данные о физическом (юридическом) лице по ссылке.
//
// Параметры:
//  ЮрФизЛицо - Ссылка на элемент справочника, по которому надо получить данные.
//
Функция ПолучитьДанныеЮрФизЛица(ЮрФизЛицо) Экспорт
	
	Возврат ФормированиеПечатныхФорм.СведенияОЮрФизЛице(ЮрФизЛицо, ТекущаяДата());
	
КонецФункции

// Получает данные свидетельства о регистрации ИП по ссылке.
//
// Параметры:
//  ИП - Ссылка на элемент справочника, по которому нужно получить данные.
//
Процедура ДанныеСвидетельстваОРегистрацииИП(ИП, Сведения) Экспорт
	
	РеквизитыСвидетельства = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИП, "СвидетельствоДатаВыдачи, СвидетельствоСерияНомер");
	Сведения = "Свидетельство " 
		+ РеквизитыСвидетельства.СвидетельствоСерияНомер 
		+ " от " 
		+ Формат(РеквизитыСвидетельства.СвидетельствоДатаВыдачи,"ДФ=dd.MM.yyyy");
	
КонецПроцедуры

// Получает контактную информацию организации по ссылке
//
// Параметры:
//  Организация - ссылка на элемент справочника Организации, по которой нужно получить данные.
//
Функция ПолучитьКонтактнуюИнформацию(Организация) Экспорт
	
	//В запросе реквизит Представление присваивается полю Значение, т.к в схеме XDTO поле Значение обязательно к заполнению,
	//а для адреса электронной почты реквизит Значение пустой
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОрганизацииКонтактнаяИнформация.Вид,
	|	ОрганизацииКонтактнаяИнформация.Представление КАК Значение,			
	|	ОрганизацииКонтактнаяИнформация.ЗначенияПолей КАК Комментарий
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Ссылка
	|	И (ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|			ИЛИ ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФаксОрганизации))";
	Запрос.УстановитьПараметр("Ссылка", Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает адрес электронной почты контрагента.
//
// Параметры:
//  Контрагент - справочник - ссылка на элемент справочника контрагенты,
//                            адрес которого надо получить.
//
// Возвращаемое значение:
//  АдресЭП - адрес электронной почтц.
//
Функция АдресЭлектроннойПочтыКонтрагента(Контрагент) Экспорт
	
	АдресЭП = "";
	
	Возврат АдресЭП;
	
КонецФункции

// Получает печатный номер документа.
//
// Параметры:
//  СсылкаНаОбъект - документссылка - ссылка на документ информационной базы.
//
// Возвращаемое значение:
//  НомерОбъекта - номер документа.
//
Функция ПолучитьПечатныйНомерДокумента(Ссылка) Экспорт
	
	Возврат ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Ссылка.Номер);
	
КонецФункции

// Получает банковские счета.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - ссылка на организацию.
//  Банк - СправочникСсылка - ссылка на элемент справочника с банками
//
// Возвращаемое значение:
//  Таблица - таблица значений с перечнем банковских счетов.
//
Функция ПолучитьБанковскиеСчета(Организация, Банк = Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Владелец = &Владелец
	|	//ОтборПоБанку И БанковскиеСчетаОрганизаций.Банк = &Банк";
	
	Если ЗначениеЗаполнено(Банк) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОтборПоБанку", "");
		Запрос.УстановитьПараметр("Банк", Банк);
	КонецЕсли;

	Запрос.УстановитьПараметр("Владелец", Организация);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Получает банковские реквизиты.
//
// Параметры:
//  МассивСчетов - массив - список банковских счетов.
//
// Возвращаемое значение:
//  Таблица - перечень банковских реквизитов.
//
Функция ПолучитьБанковскиеРеквизиты(МассивСчетов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.НомерСчета КАК РасчетныйСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.КоррСчет
	|	КОНЕЦ КАК КорреспондентскийСчет,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Код
	|	КОНЕЦ КАК БИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанка
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанка
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.Банк.Наименование
	|	КОНЕЦ КАК Банк,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК БанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.БИКБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.Код
	|	КОНЕЦ КАК БанкДляРасчетовБИК,
	|	ВЫБОР
	|		КОГДА БанковскиеСчетаОрганизаций.РучноеИзменениеРеквизитовБанкаДляРасчетов
	|			ТОГДА БанковскиеСчетаОрганизаций.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ БанковскиеСчетаОрганизаций.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК БанкДляРасчетовКоррСчет
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|ГДЕ
	|	БанковскиеСчетаОрганизаций.Ссылка В(&МассивСчетов)";
	Запрос.УстановитьПараметр("МассивСчетов", МассивСчетов);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Задает имя файла "по умолчанию", с которым будет предложено пользователю сохранить
// ЭД при выгрузке по сценарию "Однократной сделки".
//
// Параметры:
//  ВладелецЭД - ссылка на документ ИБ, на основании которого формируется и выгружается ЭД,
//  НаименованиеФайла - Строка - имя файла.
//
Процедура ЗадатьИмяСохраняемогоФайлаПриБыстромОбмене(ВладелецЭД, НаименованиеФайла) Экспорт
	
КонецПроцедуры

// Получает реквизиты элемнта справочника "Организации", для выгрузки в xml-файл.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - элемент справочника организации;
//  СтруктураВозврата - струтура - перечень параметров организации.
//
Процедура ПолучитьРеквизитыОрганизацииДляВыгрузкиВФайл(Организация, СтруктураВозврата) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтруктураВозврата, ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Организация, "Наименование, ИНН, КПП, ЮрФизЛицо"));
	СтруктураВозврата.НаименованиеПолное = СтруктураВозврата.Наименование;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Подготавливает данные для электронного документа типа СчетФактураВыданный.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы, по которому необходимо создать электронный документ;
//  СтруктураЭД - структура - структура данных для формирования электронного документа;
//  СтруктураПараметров - структура - параметры заполнения электронного документа.
//
Функция ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	РеквизитыСчетаФактуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект, 
		"ДокументОснование, СчетФактураОснование, Исправление, Номер, Дата, ТипСчетаФактуры");
		
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(РеквизитыСчетаФактуры.ДокументОснование);
	МетаданныеДокументаОснования = РеквизитыСчетаФактуры.ДокументОснование.Метаданные();
	ПараметрыПечати = Новый Структура("ПечатьВВалюте", Ложь);
	
	СтруктураДанных = Документы[МетаданныеДокументаОснования.Имя].ПолучитьДанныеДляПечатнойФормыСчетФактура(
		ПараметрыПечати, 
		МассивОбъектов);
	
	Если РеквизитыСчетаФактуры.Исправление Тогда
		РеквизитыСчетаФактурыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыСчетаФактуры.СчетФактураОснование, 
			"Номер, Дата");
		Номер = РеквизитыСчетаФактурыОснования.Номер;
		Дата  = РеквизитыСчетаФактурыОснования.Дата;
	Иначе
		Номер = РеквизитыСчетаФактуры.Номер;
		Дата  = РеквизитыСчетаФактуры.Дата;
	КонецЕсли;

	ДанныеШапки = СтруктураДанных.РезультатПоШапке.Выбрать();
	ДанныеШапки.НайтиСледующий(Новый Структура("Ссылка, Номер", РеквизитыСчетаФактуры.ДокументОснование, Номер, Дата));
	
	ВыборкаПоДокументам = СтруктураДанных.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаПоДокументам.НайтиСледующий(Новый Структура("Ссылка", РеквизитыСчетаФактуры.ДокументОснование));
	
	СтрокаТовары = ВыборкаПоДокументам.Выбрать();
	
	Постановление1137 = (ДанныеШапки.Дата < Константы.ДатаНачалаПримененияПостановления1137.Получить());
	
	Если ЭтоКорректировочныйДокумент(СсылкаНаОбъект) Тогда
		
		СтруктураПараметров.НомерКоррСчФ                 = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеШапки.Номер, Ложь, Ложь);
		СтруктураПараметров.ДатаКоррСчФ                  = ДанныеШапки.Дата;
		СтруктураПараметров.НомерСчФ                     = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ДанныеШапки.НомерСчетаФактуры, Ложь, Ложь);
		СтруктураПараметров.ДатаСчФ                      = ДанныеШапки.ДатаСчетаФактуры;
		СтруктураПараметров.НомерИсправленияКоррСчФ      = ДанныеШапки.НомерИсправления;
		СтруктураПараметров.ДатаИсправленияКоррСчФ       = ДанныеШапки.ДатаИсправления;
		СтруктураПараметров.НомерИсправленияИсходногоСчФ = ДанныеШапки.НомерИсправленияСчетаФактуры;
		СтруктураПараметров.ДатаИсправленияИсходногоСчФ  = ДанныеШапки.ДатаИсправленияСчетаФактуры;
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		НомерСтроки = 1;
		Пока СтрокаТовары.Следующий() Цикл
			
			СуммаСНДС     = Окр(СтрокаТовары.СуммаСНДС, 2);
			СуммаНДС      = Окр(СтрокаТовары.СуммаНДС, 2);
			СуммаБезНДС   = Окр(СтрокаТовары.СуммаБезНДС, 2);
			
			СуммаСНДСДо   = Окр(СтрокаТовары.СуммаСНДСДо, 2);
			СуммаНДСДо    = Окр(СтрокаТовары.СуммаНДСДо, 2);
			СуммаБезНДСДо = Окр(СтрокаТовары.СуммаБезНДСДо, 2);
			
			НовСтрока = СтруктураПараметров.ТаблицаТоваров.Добавить();
			НовСтрока.НомерСтроки  = НомерСтроки;
			НовСтрока.НаименованиеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.НоменклатураНаименование,
				СтрокаТовары.ХарактеристикаНаименование
				) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
				
			НовСтрока.ЕдиницаИзмеренияКодДо = СтрокаТовары.ЕдиницаИзмеренияКод;
			НовСтрока.ЕдиницаИзмеренияКод   = СтрокаТовары.ЕдиницаИзмеренияКод;
			НовСтрока.КоличествоДо          = СтрокаТовары.КоличествоДо;
			НовСтрока.Количество            = СтрокаТовары.Количество;
			НовСтрока.ЦенаДо                = Окр(СтрокаТовары.ЦенаДо, 2);
			НовСтрока.Цена                  = Окр(СтрокаТовары.Цена, 2);
			НовСтрока.СуммаБезНДСДо         = СуммаБезНДСДо;
			НовСтрока.СуммаБезНДС           = СуммаБезНДС;
			Если СуммаБезНДСДо > СуммаБезНДС Тогда
				НовСтрока.СуммаБезНДСУменьшение = СуммаБезНДСДо - СуммаБезНДС;
			Иначе
				НовСтрока.СуммаБезНДСУвеличение = СуммаБезНДС - СуммаБезНДСДо;
			КонецЕсли;
			НовСтрока.АкцизаДо              = "без акциза";
			НовСтрока.Акциза                = "без акциза";
			НовСтрока.СтавкаНДСДо           = ПредставлениеСтавкиНДС(СтрокаТовары.СтавкаНДС);
			НовСтрока.СтавкаНДСТипДо        = ТипСтавкиНДС(СтрокаТовары.СтавкаНДС);
			НовСтрока.СтавкаНДС             = ПредставлениеСтавкиНДС(СтрокаТовары.СтавкаНДС);
			НовСтрока.СтавкаНДСТип          = ТипСтавкиНДС(СтрокаТовары.СтавкаНДС);
			НовСтрока.СуммаНДСДо            = СуммаНДСДо;
			НовСтрока.СуммаНДС              = СуммаНДС;
			Если СуммаНДСДо > СуммаНДС Тогда
				НовСтрока.СуммаНДСУменьшение = СуммаНДСДо - СуммаНДС;
			Иначе 
				НовСтрока.СуммаНДСУвеличение = СуммаНДС - СуммаНДСДо;
			КонецЕсли;
			НовСтрока.СуммаДо               = СтрокаТовары.СуммаСНДСДо;
			НовСтрока.Сумма                 = СтрокаТовары.СуммаСНДС;
			Если НовСтрока.СуммаДо > НовСтрока.Сумма Тогда
				НовСтрока.СуммаУменьшение = (НовСтрока.СуммаДо - НовСтрока.Сумма);
			ИначеЕсли НовСтрока.СуммаДо < НовСтрока.Сумма Тогда
				НовСтрока.СуммаУвеличение = (НовСтрока.Сумма - НовСтрока.СуммаДо);
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		СтруктураПараметров.СуммаБезНДСВсегоУвеличение = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаБезНДСУвеличение");
		СтруктураПараметров.СуммаСНДСВсегоУвеличение   = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаУвеличение");
		СтруктураПараметров.СуммаНДСУвеличение         = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДСУвеличение");
		
		СтруктураПараметров.СуммаБезНДСВсегоУменьшение = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаБезНДСУменьшение");
		СтруктураПараметров.СуммаСНДСВсегоУменьшение   = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаУменьшение");
		СтруктураПараметров.СуммаНДСУменьшение         = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДСУменьшение");
		
	Иначе
		
		СтруктураПараметров.НомерСчФ                      = ДанныеШапки.Номер;
		СтруктураПараметров.ДатаСчФ                       = ДанныеШапки.Дата;
		СтруктураПараметров.НомерИсправленияИсходногоСчФ  = ДанныеШапки.НомерИсправления;
		СтруктураПараметров.ДатаИсправленияИсходногоСчФ   = ДанныеШапки.ДатаИсправления;
		
		// Заполним данные грузоотправителя, грузополучателя.
		Если НЕ ДанныеШапки.ТолькоУслуги 
		 И НЕ (Постановление1137 И ДанныеШапки.Свойство("СчетФактураНаАванс")) Тогда
			
			ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, 
				ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузоотправитель),
				ДанныеШапки,
				"Организация");
			ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Грузополучатель, 
				ПолучитьДанныеЮрФизЛица(ДанныеШапки.Грузополучатель),
				ДанныеШапки,
				"Контрагент"
			);
			
		КонецЕсли;
		
		// Заполним платежные документы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.НомерПлатежноРасчетногоДокумента КАК НомерПРД,
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.ДатаПлатежноРасчетногоДокумента КАК ДатаПРД
		|ИЗ
		|	Документ.СчетФактураВыданный.ПлатежноРасчетныеДокументы КАК СчетФактураВыданныйПлатежноРасчетныеДокументы
		|ГДЕ
		|	СчетФактураВыданныйПлатежноРасчетныеДокументы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
		СтруктураПараметров.ПлатежныеДокументы = Запрос.Выполнить().Выгрузить();
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		НомерСтроки = 1;
		
		Пока СтрокаТовары.Следующий() Цикл
			
			Если ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.ОтчетКомиссионера")
				 ИЛИ ТипЗнч(ДанныеШапки.Ссылка) = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
				Если СтрокаТовары.Покупатель <> ДанныеШапки.Покупатель
					 ИЛИ (ДанныеШапки.Покупатель <> Неопределено 
						  И НачалоДня(СтрокаТовары.Дата) <> НачалоДня(ДанныеШапки.Дата) 
						  И СтрокаТовары.Дата <> '00010101') Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			СуммаСНДС   = Окр(СтрокаТовары.СуммаСНДС, 2);
			СуммаНДС    = Окр(СтрокаТовары.СуммаНДС, 2);
			СуммаБезНДС = Окр(СтрокаТовары.СуммаБезНДС, 2);
			
			НовСтрока = СтруктураПараметров.ТаблицаТоваров.Добавить();
			НовСтрока.НомерСтроки               = НомерСтроки;
			НовСтрока.НаименованиеНоменклатуры  = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				СтрокаТовары.НоменклатураНаименование,
				СтрокаТовары.ХарактеристикаНаименование
				) + ?(СтрокаТовары.ЭтоВозвратнаяТара, НСтр("ru=' (возвратная тара)'"), "");
			
			НовСтрока.ЕдиницаИзмеренияКод       = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.ЕдиницаИзмерения,"Код");
			НовСтрока.Количество                = СтрокаТовары.Количество;
			НовСтрока.Цена                      = Окр(СтрокаТовары.Цена, 2);
			НовСтрока.СуммаБезНДС               = СуммаБезНДС;
			НовСтрока.Акциза                    = "без акциза";
			НовСтрока.СтавкаНДС                 = ПредставлениеСтавкиНДС(СтрокаТовары.СтавкаНДС);
			НовСтрока.СтавкаНДСТип              = ТипСтавкиНДС(СтрокаТовары.СтавкаНДС);
			НовСтрока.СуммаНДС                  = СуммаНДС;
			НовСтрока.Сумма                     = СуммаСНДС;
			НовСтрока.НомерТаможеннойДекларации = ?(ЗначениеЗаполнено(СтрокаТовары.НомерГТД), СокрЛП(Строка(СтрокаТовары.НомерГТД)), "");
			Если ЗначениеЗаполнено(СтрокаТовары.СтранаПроисхождения) Тогда
				НовСтрока.КодСтраныПроисхождения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.СтранаПроисхождения,"Код");
			КонецЕсли;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
		СтруктураПараметров.СуммаБезНДСВсего = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаБезНДС");
		СтруктураПараметров.СуммаСНДСВсего   = СтруктураПараметров.ТаблицаТоваров.Итог("Сумма");
		СтруктураПараметров.СуммаНДСВсего    = СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДС");
		СтруктураПараметров.ТолькоУслуги     = ДанныеШапки.ТолькоУслуги;
		
	КонецЕсли;
	
	СтруктураПараметров.КодВалюты = Константы.ВалютаРегламентированногоУчета.Получить().Код;
	
	СведенияОПоставщике = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ДанныеШапки.Контрагент);
	
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Организация, 
		СведенияОПоставщике, 
		ДанныеШапки, 
		"Организация");
		
	ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Контрагент, 
		СведенияОПокупателе,
		ДанныеШапки,
		"Контрагент");
	
	ЗаполнитьДокументыОснования(СтруктураПараметров, СсылкаНаОбъект);
	
	Если РеквизитыСчетаФактуры.ТипСчетаФактуры = Перечисления.ТипыВыданныхСчетовФактур.ВыставляемыйКомиссионеру Тогда
		// Получателем данного счета-фактуры является комиссионер. Поместим данные о получателе в доп. данные.
		ИнформацияПоКомиссионеру = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Контрагент);
		СтруктураДопДанных = Новый Структура();
		СтруктураДопДанных.Вставить("КомиссионерНаименование", ИнформацияПоКомиссионеру.ПолноеНаименование);
		СтруктураДопДанных.Вставить("КомиссионерИНН",          ИнформацияПоКомиссионеру.ИНН);
		СтруктураДопДанных.Вставить("КомиссионерКПП",          ИнформацияПоКомиссионеру.КПП);
		ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, "Шапка", Истина);
	КонецЕсли;
	
	// Заполним сведения о подписанте
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(
			СтруктураЭД.Организация, 
			СтруктураЭД.ДатаДокументаОтправителя);
			
		ФИО = СтруктураОтветственных.Руководитель;
		СтруктураПараметров.Подписант.Должность = СтруктураОтветственных.РуководительДолжность;
	КонецЕсли;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО);
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
	Возврат Истина;
	
КонецФункции

// Подготавливает данные для электронного документа типа Торг12 титул продавца.
//
// Параметры:
//  СсылкаНаОбъект - документСсылка - ссылка на объект информационной базы,
//  по которому необходимо создать электронный документ.
//  СтруктураЭД - структура - структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ДанныеПодготовлены = Ложь;
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	ПараметрыПечати = Новый Структура("ВыводитьУслуги", Истина);
	ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыТОРГ12(ПараметрыПечати, МассивОбъектов);
	ВыборкаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаТоваров.Сбросить();
	
	НайденСледующий = ВыборкаТоваров.НайтиСледующий(СтруктураПоиска);
	
	Если НайденСледующий Тогда
		
		СтруктураПараметров.НомерТоварнойНакладной = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыШапки.Номер, Ложь, Истина);
		СтруктураПараметров.ДатаТоварнойНакладной  = РеквизитыШапки.Дата;
		
		ЗаполнитьРеквизитыУчастниковОбмена(РеквизитыШапки, СтруктураПараметров, СтруктураЭД.ВидЭД);
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		СтрокаТовары = ВыборкаТоваров.Выбрать();
		НомерСтроки = 1;
		Пока СтрокаТовары.Следующий() Цикл
			ДобавитьСтрокуТаблицуДанных(СтруктураПараметров, СтрокаТовары, СтруктураЭД.ВидЭД, НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ИтоговыеСуммы = СтруктураИтоговыеСуммы(СтруктураПараметров.ТаблицаТоваров, СтруктураЭД.ВидЭД);
		ЗаполнитьРеквизитыПодвала(РеквизитыШапки, ИтоговыеСуммы, СтруктураПараметров);
		
		ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
		ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
		
		Если ЭтоФизЛицо Тогда
			ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
			ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
		Иначе
			ФИО = РеквизитыШапки.Руководитель;
			СтруктураПараметров.Подписант.Должность = РеквизитыШапки.ДолжностьРуководителя;
		КонецЕсли;
		ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО);
		
		СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
		СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
			ЗаполнитьДокументыОснования(СтруктураПараметров, СсылкаНаОбъект);
		КонецЕсли;
		
		ДанныеПодготовлены = (СтруктураПараметров.ТаблицаТоваров.Количество() > 0);
		
	Иначе
		ШаблонТекста = НСтр("ru = 'Документ %1 не содержит данных для формирования ЭД.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, РеквизитыШапки.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, РеквизитыШапки.Ссылка);
	КонецЕсли;
	
	Возврат ДанныеПодготовлены;
	
КонецФункции

// Подготавливает данные для электронного документа типа Торг12 титул покупателя.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(
			СтруктураЭД.Организация, 
			СтруктураЭД.ДатаДокументаОтправителя);
			
		ФИО = СтруктураОтветственных.Руководитель;
		СтруктураПараметров.Подписант.Должность = СтруктураОтветственных.РуководительДолжность;
	КонецЕсли;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО);
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		СтруктураПараметров.ДатаПолученияГруза = ТекущаяДатаСеанса();
		СтруктураПриемщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаОбъект.ВладелецФайла, "Принял, ПринялДолжность");
		ЗаполнитьФИОиДолжность(СтруктураПараметров.ГрузПолучил, СтруктураПриемщика.Принял, СтруктураПриемщика.ПринялДолжность);
	КонецЕсли;
	
	ДанныеПодготовлены = ЗначениеЗаполнено(СтруктураПараметров.Подписант.ИНН);
	
	Возврат ДанныеПодготовлены;
	
КонецФункции

// Подготавливает данные титула исполнителя для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ДанныеПодготовлены = Ложь;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		ДанныеДляПечати = Документы["АктВыполненныхРабот"].ПолучитьДанныеДляПечати(МассивОбъектов);
	Иначе
		ПараметрыПечати = Новый Структура;
		ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыАктОбОказанииУслуг(ПараметрыПечати, МассивОбъектов);
	КонецЕсли;
	
	ВыборкаПоДокументам = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаПоДокументам.Сбросить();
	
	Если ВыборкаПоДокументам.НайтиСледующий(СтруктураПоиска) Тогда
		
		ЕстьНДС = РеквизитыШапки.УчитыватьНДС;
		
		СтруктураПараметров.НомерАкта = РеквизитыШапки.Номер;
		СтруктураПараметров.ДатаАкта  = РеквизитыШапки.Дата;
		
		ЗаполнитьРеквизитыУчастниковОбмена(РеквизитыШапки, СтруктураПараметров, СтруктураЭД.ВидЭД);
		
		// Выводим строки таблицы Услуги
		ВыборкаПоУслугам = ВыборкаПоДокументам.Выбрать();
		НомерСтроки = 1;
		Пока ВыборкаПоУслугам.Следующий() Цикл
			ДобавитьСтрокуТаблицуДанных(СтруктураПараметров, ВыборкаПоУслугам, СтруктураЭД.ВидЭД, НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		// Заполняем таблицу описаний услуг, вкладывая туда таблицу с услугами.
		НоваяСтрока = СтруктураПараметров.ТаблицаОписанийУслуг.Добавить();
		НоваяСтрока.НачалоРабот      = РеквизитыШапки.Дата;
		НоваяСтрока.КонецРабот       = РеквизитыШапки.Дата;
		НоваяСтрока.СуммаБезНДСИтого = СтруктураПараметров.ТаблицаУслуг.Итог("СуммаБезНДС");
		НоваяСтрока.СуммаНДСИтого    = СтруктураПараметров.ТаблицаУслуг.Итог("СуммаНДС");
		НоваяСтрока.СуммаИтого       = СтруктураПараметров.ТаблицаУслуг.Итог("Сумма");
		НоваяСтрока.Услуги           = СтруктураПараметров.ТаблицаУслуг;

		СтруктураПараметров.СведенияПоВыполнениюУслуг.ДатаИсполнения = РеквизитыШапки.Дата;
		
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(
			СтруктураЭД.Организация, 
			СтруктураЭД.ДатаДокументаОтправителя);
			
		ЗаполнитьФИОиДолжность(СтруктураПараметров.СведенияПоВыполнениюУслуг.ПодписьИсполнителя,
			СтруктураОтветственных.Руководитель, 
			СтруктураОтветственных.РуководительДолжность);
		
		ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
		ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
		
		Если ЭтоФизЛицо Тогда
			ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
			ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
		Иначе
			ФИО = СтруктураОтветственных.Руководитель;
			СтруктураПараметров.Подписант.Должность = СтруктураОтветственных.РуководительДолжность;
		КонецЕсли;
		ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО);
		СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
		СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
		
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			СтруктураПараметров.ВидОперации = Перечисления.ВидыОперацийЭД.Исправление;
			ЗаполнитьДокументыОснования(СтруктураПараметров, СсылкаНаОбъект);
		КонецЕсли;
		
		ДанныеПодготовлены = (СтруктураПараметров.ТаблицаУслуг.Количество() > 0);
		
	Иначе
		ШаблонТекста = НСтр("ru = 'Документ %1 не содержит данных для формирования ЭД.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, РеквизитыШапки.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, РеквизитыШапки.Ссылка);
		
	КонецЕсли;
	
	Возврат ДанныеПодготовлены;
	
КонецФункции

// Подготавливает данные титула заказчика для электронного документа типа Акт выполненных работ
// формата 5.01.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ДанныеПодготовлены = Ложь;
	
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(
			СтруктураЭД.Организация, 
			СтруктураЭД.ДатаДокументаОтправителя);
			
		ФИО = СтруктураОтветственных.Руководитель;
		СтруктураПараметров.Подписант.Должность = СтруктураОтветственных.РуководительДолжность;
	КонецЕсли;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО);
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	СтруктураПараметров.ДатаЗаказа = ТекущаяДатаСеанса();
	
	ДанныеПодготовлены = ЗначениеЗаполнено(СтруктураПараметров.Подписант.ИНН);
	
	Возврат ДанныеПодготовлены;
	
КонецФункции

// Подготавливает данные для электронного документа типа Накладная.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК УпаковкаКод,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Упаковка.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.ЗаказКлиента.Номер КАК НомерПоДаннымПоставщика,
	|	Товары.ЗаказКлиента.Дата КАК ДатаПоДаннымПоставщика,
	|	Товары.ЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	Товары.ЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
	|	Товары.СуммаСНДС,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Валюта,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.ЦенаВключаетНДС,
	|	РеализацияТоваровУслуг.АдресДоставки,
	|	РеализацияТоваровУслуг.НалогообложениеНДС,
	|	РеализацияТоваровУслуг.ЗаказКлиента,
	|	РеализацияТоваровУслуг.ЗаказКлиента.Номер КАК НомерПоДаннымПоставщика,
	|	РеализацияТоваровУслуг.ЗаказКлиента.Дата КАК ДатаПоДаннымПоставщика,
	|	РеализацияТоваровУслуг.ЗаказКлиента.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
	|	РеализацияТоваровУслуг.ЗаказКлиента.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
	|	РеализацияТоваровУслуг.Грузоотправитель,
	|	РеализацияТоваровУслуг.Грузополучатель,
	|	РеализацияТоваровУслуг.БанковскийСчетГрузоотправителя,
	|	РеализацияТоваровУслуг.БанковскийСчетГрузополучателя,
	|	РеализацияТоваровУслуг.БанковскийСчетОрганизации,
	|	РеализацияТоваровУслуг.БанковскийСчетКонтрагента
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Ссылка";
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = Результат[0].Выгрузить();
	РеквизитыШапки = Результат[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 	  	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	 	СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 		  	СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  	СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  	ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  	СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  	СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  	РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			  	РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 			  	РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("СуммаНДС", 		  	ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			  	СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  	СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("АдресДоставки",	  	РеквизитыШапки.АдресДоставки);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Строка(РеквизитыШапки.НалогообложениеНДС));
	Если ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель) Тогда
		СтруктураПараметров.Вставить("Грузоотправитель", РеквизитыШапки.Грузоотправитель);
		СтруктураПараметров.Вставить("ТипГрузоотправителя", "Контрагент");
	Иначе	
		СтруктураПараметров.Вставить("Грузоотправитель", СтруктураЭД.Организация);
		СтруктураПараметров.Вставить("ТипГрузоотправителя", "Организация");
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель) Тогда
		СтруктураПараметров.Вставить("Грузополучатель", РеквизитыШапки.Грузополучатель);
	Иначе
		СтруктураПараметров.Вставить("Грузополучатель",	СтруктураЭД.Контрагент);
	КонецЕсли;	
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",					РеквизитыШапки.ЦенаВключаетНДС);
	// данные по расч.счетам
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетКонтрагента) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетКонтрагента);
		СтруктураПараметров.Вставить("РасчетныйСчетКонтрагента", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетОрганизации) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетОрганизации);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузоотправителя", БанковскийСчет);
	КонецЕсли;
 	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетГрузополучателя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузополучателя", БанковскийСчет);
	КонецЕсли;

	// заполнение спец.реквизитов для связки заказ-поступление
	Если ЗначениеЗаполнено(РеквизитыШапки.ЗаказКлиента) Тогда
		ДокОснование = РеквизитыШапки.ЗаказКлиента;
		СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", РеквизитыШапки.НомерПоДаннымПоставщика);
		СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 	РеквизитыШапки.ДатаПоДаннымПоставщика);
		Если ЗначениеЗаполнено(РеквизитыШапки.НомерПоДаннымКлиента) 
			И ЗначениеЗаполнено(РеквизитыШапки.ДатаПоДаннымКлиента) Тогда 
			СтруктураПараметров.Вставить("НомерПоДаннымКлиента", 	РеквизитыШапки.НомерПоДаннымКлиента);
			СтруктураПараметров.Вставить("ДатаПоДаннымКлиента", 	РеквизитыШапки.ДатаПоДаннымКлиента);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа Счет.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	ВидДокумента = "";
	РезультатЗапроса = Неопределено;
	Если ЗначениеЗаполнено(СсылкаНаОбъект.ДокументОснование) Тогда
		Если ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование")) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			ВидДокумента = "ЗаказКлиента";
		ИначеЕсли ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование")) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			ВидДокумента = "РеализацияТоваровУслуг";
		ИначеЕсли ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование")) = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
			ВидДокумента = "АктВыполненныхРабот";
		ИначеЕсли ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование")) = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
			ВидДокумента = "ОтчетКомиссионера";
		ИначеЕсли ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование")) = Тип("ДокументСсылка.ОтчетКомиссионераОСписании") Тогда
			ВидДокумента = "ОтчетКомиссионераОСписании";
		ИначеЕсли ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование")) = Тип("ДокументСсылка.ОтчетКомитенту") Тогда
			ВидДокумента = "ОтчетКомитенту";
		ИначеЕсли ТипЗнч(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ДокументОснование")) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
			ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента";
		КонецЕсли;
	КонецЕсли;
	
	ЧастичнаяОплата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект,"ЧастичнаяОплата");
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ОтветственныеЛицаСервер.СформироватьВременнуюТаблицуОтветственныхЛицДокументов(СсылкаНаОбъект, МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ТекстЗапроса = "";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		
		Запрос.УстановитьПараметр("ДокОснование", СсылкаНаОбъект.ДокументОснование);
		Если ВидДокумента = "РеализацияТоваровУслуг" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
			|	КОНЕЦ КАК УпаковкаКод,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
			|	КОНЕЦ КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ Товары.Упаковка.Коэффициент
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.РеализацияТоваровУслуг.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли  ВидДокумента = "АктВыполненныхРабот"  Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
			|	Товары.Количество КАК Количество,
			|	1 КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	НЕОПРЕДЕЛЕНО КАК Упаковка
			|ИЗ
			|	Документ.АктВыполненныхРабот.Услуги КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование";
			
		ИначеЕсли ВидДокумента = "ЗаказКлиента" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
			|	КОНЕЦ КАК УпаковкаКод,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
			|	КОНЕЦ КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ Товары.Упаковка.Коэффициент
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
			|	Товары.Содержание КАК Содержание,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ЗаказКлиента.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомиссионера" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
			|	КОНЕЦ КАК УпаковкаКод,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
			|	КОНЕЦ КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ Товары.Упаковка.Коэффициент
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионера.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
 	 	ИначеЕсли ВидДокумента = "ОтчетКомиссионераОСписании" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
			|	КОНЕЦ КАК УпаковкаКод,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
			|	КОНЕЦ КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ Товары.Упаковка.Коэффициент
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ОтчетКомиссионераОСписании.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ОтчетКомитенту" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
			|	КОНЕЦ КАК УпаковкаКод,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
			|	КОНЕЦ КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ Товары.Упаковка.Коэффициент
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ОтчетКомитенту.Товары КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		ИначеЕсли ВидДокумента = "ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
			|	%1 КАК Артикул,
			|	Товары.Номенклатура.Наименование КАК Наименование,
			|	Товары.Номенклатура,
			|	Товары.Характеристика,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
			|	Товары.КоличествоУпаковок КАК Количество,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
			|	КОНЕЦ КАК УпаковкаКод,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
			|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
			|	КОНЕЦ КАК УпаковкаНаименование,
			|	ВЫБОР
			|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|			ТОГДА 1
			|		ИНАЧЕ Товары.Упаковка.Коэффициент
			|	КОНЕЦ КАК Коэффициент,
			|	Товары.Сумма,
			|	Товары.СтавкаНДС,
			|	Товары.СуммаНДС,
			|	Товары.СуммаСНДС,
			|	Товары.Цена,
			|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
			|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
			|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
			|	Товары.Упаковка
			|ИЗ
			|	Документ.ЗаявкаНаВозвратТоваровОтКлиента.ВозвращаемыеТовары	КАК Товары
			|ГДЕ
			|	Товары.Ссылка = &ДокОснование;";
			
		КонецЕсли;
		
		ИмяДопКолонки = ИмяДополнительнойКолонки();
		ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
		
	КонецЕсли;   
	
	ТекстЗапроса = ТекстЗапроса 
		+ "ВЫБРАТЬ
		  |	МАКСИМУМ(СчетЭтапыГрафикаОплаты.ДатаПлатежа) КАК ДатаПлатежа
		  |ИЗ
		  |	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК СчетЭтапыГрафикаОплаты
		  |ГДЕ
		  |	СчетЭтапыГрафикаОплаты.Ссылка = &Ссылка
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	ЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
		  |	ЭтапыГрафикаОплаты.ПроцентПлатежа,
		  |	ЭтапыГрафикаОплаты.СуммаПлатежа
		  |ИЗ
		  |	Документ.СчетНаОплатуКлиенту.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
		  |ГДЕ
		  |	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
		  |
		  |УПОРЯДОЧИТЬ ПО
		  |	ДатаПлатежа
		  |;
		  |
		  |////////////////////////////////////////////////////////////////////////////////
		  |ВЫБРАТЬ
		  |	СчетНаОплатуКлиенту.Валюта,
		  |	СчетНаОплатуКлиенту.Дата,
		  |	СчетНаОплатуКлиенту.СуммаДокумента,
		  |	СчетНаОплатуКлиенту.ДокументОснование.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
		  |	СчетНаОплатуКлиенту.ДокументОснование.НалогообложениеНДС КАК НалогообложениеНДС,
		  |	СчетНаОплатуКлиенту.БанковскийСчет.НомерСчета КАК НомерСчета,
		  |	ВЫБОР
		  |		КОГДА СчетНаОплатуКлиенту.БанковскийСчет.РучноеИзменениеРеквизитовБанка
		  |			ТОГДА СчетНаОплатуКлиенту.БанковскийСчет.НаименованиеБанка
		  |		ИНАЧЕ СчетНаОплатуКлиенту.БанковскийСчет.Банк.Наименование
		  |	КОНЕЦ КАК Банк,
		  |	ВЫБОР
		  |		КОГДА СчетНаОплатуКлиенту.БанковскийСчет.РучноеИзменениеРеквизитовБанка
		  |			ТОГДА СчетНаОплатуКлиенту.БанковскийСчет.БИКБанка
		  |		ИНАЧЕ СчетНаОплатуКлиенту.БанковскийСчет.Банк.Код
		  |	КОНЕЦ КАК БИК,
		  |	ВЫБОР
		  |		КОГДА СчетНаОплатуКлиенту.БанковскийСчет.РучноеИзменениеРеквизитовБанка
		  |			ТОГДА СчетНаОплатуКлиенту.БанковскийСчет.КоррСчетБанка
		  |		ИНАЧЕ СчетНаОплатуКлиенту.БанковскийСчет.Банк.КоррСчет
		  |	КОНЕЦ КАК КоррСчет,
		  |	СчетНаОплатуКлиенту.БанковскийСчет.БанкДляРасчетов КАК БанкДляРасчетов,
		  |	СчетНаОплатуКлиенту.НазначениеПлатежа,
		  |	СчетНаОплатуКлиенту.ЧастичнаяОплата,
		  |	ТаблицаОтветственныеЛица.РуководительНаименование КАК Руководитель,
		  |	ТаблицаОтветственныеЛица.ГлавныйБухгалтерНаименование КАК Бухгалтер,
		  |	СчетНаОплатуКлиенту.ДокументОснование.НомерПоДаннымКлиента КАК НомерПоДаннымКлиента,
		  |	СчетНаОплатуКлиенту.ДокументОснование.ДатаПоДаннымКлиента КАК ДатаПоДаннымКлиента,
		  |	ПРЕДСТАВЛЕНИЕ(СчетНаОплатуКлиенту.ДокументОснование) КАК ДокументОснование,
		  |	СчетНаОплатуКлиенту.СуммаДокумента / СчетНаОплатуКлиенту.ДокументОснование.СуммаДокумента КАК ПроцентОплаты
		  |ИЗ
		  |	Документ.СчетНаОплатуКлиенту КАК СчетНаОплатуКлиенту
		  |		ЛЕВОЕ СОЕДИНЕНИЕ 
		  |			ТаблицаОтветственныеЛица КАК ТаблицаОтветственныеЛица
		  |		ПО 
		  |			СчетНаОплатуКлиенту.Ссылка = ТаблицаОтветственныеЛица.Ссылка
		  |
		  |ГДЕ
		  |	СчетНаОплатуКлиенту.Ссылка = &Ссылка";
		
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	КолЭлем = РезультатЗапроса.Количество();
	ТаблицаТоваров = Новый ТаблицаЗначений();
	Если КолЭлем = 4 Тогда
		ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	КонецЕсли;
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	ТаблицаЭтаповГрафикаОплаты = РезультатЗапроса[КолЭлем-2].Выгрузить();
	РеквизитыШапки= РезультатЗапроса[КолЭлем-1].Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 				"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 				ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты",	ТаблицаЭтаповГрафикаОплаты); 
	СтруктураПараметров.Вставить("Организация", 				СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 					СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 							СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 			ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 						СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 						СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 						РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 						РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 						РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 			РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("ВидЭД", 						СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 				СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("НалогообложениеНДС",			Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("НазначениеПлатежа",			РеквизитыШапки.НазначениеПлатежа);
	СтруктураПараметров.Вставить("НазначениеПлатежа",			РеквизитыШапки.НазначениеПлатежа);
	СтруктураПараметров.Вставить("Руководитель",				РеквизитыШапки.Руководитель);
    СтруктураПараметров.Вставить("Бухгалтер",					РеквизитыШапки.Бухгалтер);
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента",		РеквизитыШапки.НомерПоДаннымКлиента);
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента",			РеквизитыШапки.ДатаПоДаннымКлиента);
	СтруктураПараметров.Вставить("ДокументОснование",			РеквизитыШапки.ДокументОснование);
	СтруктураПараметров.Вставить("ЧастичнаяОплата",				РеквизитыШапки.ЧастичнаяОплата);
	Если ТаблицаТоваров.Количество()>0 Тогда
		СтруктураПараметров.Вставить("СуммаНДС", 				ОКР(ТаблицаТоваров.Итог("СуммаНДС")*РеквизитыШапки.ПроцентОплаты,2));
	Иначе	
		СтруктураПараметров.Вставить("СуммаНДС", 0);
	КонецЕсли;
	
	Если РеквизитыШапки.ЧастичнаяОплата Тогда
		ИтоговаяСтрока = НСтр("ru='Всего на сумму %СуммаПрописью%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаПрописью%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	Иначе
		ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТОваров.Количество());
		ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	КонецЕсли;
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	Если РезультатЗапроса <> Неопределено Тогда
		СтруктураПараметров.Вставить("СрокПлатежа", РезультатЗапроса[1].Выгрузить()[0].ДатаПлатежа);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерСчета) Тогда
		РасчетныйСчет = Новый Структура();
		РасчетныйСчет.Вставить("НомерСчета", РеквизитыШапки.НомерСчета);
		РасчетныйСчет.Вставить("Банк",       РеквизитыШапки.Банк);
		РасчетныйСчет.Вставить("КоррСчет",   РеквизитыШапки.КоррСчет);
		РасчетныйСчет.Вставить("БИК",        РеквизитыШапки.БИК);
		СтруктураПараметров.Вставить("РасчетныйСчет", РасчетныйСчет);
	Иначе
		СтруктураПараметров.Вставить("РасчетныйСчет", Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанкДляРасчетов) Тогда
		РеквизитыБанкаКорреспондента = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(РеквизитыШапки.БанкДляРасчетов, "Наименование, КоррСчет, Код");
		БанкКорреспондент = Новый Структура();
		БанкКорреспондент.Вставить("Банк",     РеквизитыБанкаКорреспондента.Наименование);
		БанкКорреспондент.Вставить("КоррСчет", РеквизитыБанкаКорреспондента.КоррСчет);
		БанкКорреспондент.Вставить("БИК",      РеквизитыБанкаКорреспондента.Код);
		СтруктураПараметров.Вставить("БанкКорреспондент", БанкКорреспондент);
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, РасчетныйСчет");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ЗаказТоваров.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК Ид,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК УпаковкаКод,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Упаковка.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.СуммаСНДС,
	|	Товары.СуммаРучнойСкидки КАК СуммаСкидки,
	|	Товары.ПроцентРучнойСкидки КАК ПроцентСкидки,
	|	Товары.Цена,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказПоставщику.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщику.Дата,
	|	ЗаказПоставщику.Валюта,
	|	ЗаказПоставщику.СуммаДокумента,
	|	ЗаказПоставщику.ЦенаВключаетНДС,
	|	ЗаказПоставщику.ДополнительнаяИнформация,
	|	ЗаказПоставщику.Номер,
	|	ЗаказПоставщику.НомерПоДаннымПоставщика,
	|	ЗаказПоставщику.ДатаПоДаннымПоставщика,
	|	ЗаказПоставщику.АдресДоставки
	|ИЗ
	|	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	|ГДЕ
	|	ЗаказПоставщику.Ссылка = &Ссылка";
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров             = МассивРезультатовЗапроса[0].Выгрузить();
	ТаблицаЭтаповГрафикаОплаты = МассивРезультатовЗапроса[1].Выгрузить();
	РеквизитыШапки             = МассивРезультатовЗапроса[2].Выбрать();
	РеквизитыШапки.Следующий();
	 
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 			СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 			"4.02");
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", РеквизитыШапки.НомерПоДаннымПоставщика);
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 	РеквизитыШапки.ДатаПоДаннымПоставщика);
	СтруктураПараметров.Вставить("ТаблицаТоваров", 			ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты",ТаблицаЭтаповГрафикаОплаты);
	СтруктураПараметров.Вставить("Организация", 			СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 				СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 						СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 		ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 					СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 					СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 					РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 					РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 					РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 	  	РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 				ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 					СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 			СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Роль",					"Покупатель");
	СтруктураПараметров.Вставить("Комментарий",				РеквизитыШапки.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("НомерПоДаннымКлиента",	РеквизитыШапки.Номер);
	СтруктураПараметров.Вставить("ДатаПоДаннымКлиента",	  	РеквизитыШапки.Дата);
	СтруктураПараметров.Вставить("АдресДоставки",			РеквизитыШапки.АдресДоставки);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерПоДаннымПоставщика) Тогда
		СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", РеквизитыШапки.НомерПоДаннымПоставщика);
		СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 	РеквизитыШапки.ДатаПоДаннымПоставщика);
	КонецЕсли;
	
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	СуммаПрописью  = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "ИД, Наименование, БазоваяЕдиницаКод");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ОтветНаЗаказ.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК УпаковкаКод,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Упаковка.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Сумма,
	|	Товары.СтавкаНДС,
	|	Товары.СуммаНДС,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.СуммаСНДС,
	|	Товары.ПроцентРучнойСкидки + Товары.ПроцентАвтоматическойСкидки КАК ПроцентСкидки,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И НЕ Товары.Отменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыГрафикаОплаты.ВариантОплаты КАК ВидОплаты,
	|	ЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплаты
	|ГДЕ
	|	ЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|	И ЭтапыГрафикаОплаты.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияКлиенту)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыГрафикаОплаты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиента.Валюта,
	|	ЗаказКлиента.Дата,
	|	ЗаказКлиента.Номер,
	|	ЗаказКлиента.СуммаДокумента,
	|	ЗаказКлиента.ЦенаВключаетНДС,
	|	ЗаказКлиента.НомерПоДаннымКлиента,
	|	ЗаказКлиента.ДатаПоДаннымКлиента,
	|	ЗаказКлиента.БанковскийСчет,
	|	ЗаказКлиента.ДополнительнаяИнформация,
	|	ЗаказКлиента.АдресДоставки
	|ИЗ
	|	Документ.ЗаказКлиента КАК ЗаказКлиента
	|ГДЕ
	|	ЗаказКлиента.Ссылка = &Ссылка";
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
    Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = МассивРезультатовЗапроса[0].Выгрузить();
	ТаблицаЭтаповГрафикаОплаты= МассивРезультатовЗапроса[1].Выгрузить();
	РеквизитыШапки= МассивРезультатовЗапроса[2].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 				"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 				ТаблицаТоваров);
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты",	ТаблицаЭтаповГрафикаОплаты);
	СтруктураПараметров.Вставить("Роль", 						"Продавец");
	СтруктураПараметров.Вставить("Организация", 				СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 					СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 							СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 			ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 						СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 						СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 						РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 						РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 						РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 			РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 					ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 						СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 				СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Комментарий", 				РеквизитыШапки.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("НомерПоДаннымПоставщика",	    РеквизитыШапки.Номер);
	СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 		РеквизитыШапки.Дата);
	СтруктураПараметров.Вставить("АдресДоставки",		 		РеквизитыШапки.АдресДоставки);
	
	Если ЗначениеЗаполнено(РеквизитыШапки.НомерПоДаннымКлиента) Тогда
		СтруктураПараметров.Вставить("НомерПоДаннымКлиента", РеквизитыШапки.НомерПоДаннымКлиента);
		СтруктураПараметров.Вставить("ДатаПоДаннымКлиента", РеквизитыШапки.ДатаПоДаннымКлиента);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчет) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчет);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
		
	ИтоговаяСтрока = НСтр("ru='Всего наименований %Количество%, на сумму %Сумма%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Количество%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%Сумма%",      ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, БазоваяЕдиницаКод");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа КаталогТоваров.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// ТоварыКаталога - Массив, список товаров для заполнения каталога.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект, ТоварыКаталога, СтруктураЭД) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТоварыКаталога.Номенклатура,
	|	ТоварыКаталога.Характеристика
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&ТоварыКаталога КАК ТоварыКаталога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	1 Как Коэффициент,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка
	|ИЗ
	|	Товары КАК Товары";
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ТоварыКаталога", ТоварыКаталога);
	ТаблицаТоваров = Запрос.Выполнить().Выгрузить();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 			СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 	ТекущаяДата());
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, ДатаФормирования, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Заполняет адрес хранилища с таблицей значений - каталога товаров
//
// Параметры:
//  АдресВоВременномХранилище - адрес хранения католога товаров;
//  ИдентификаторФормы - уникальный  идентификатор формы, вызвавшей функцию.
//
Процедура ПоместитьКаталогТоваровВоВременноеХранилище(АдресВоВременномХранилище, ИдентификаторФормы) Экспорт
	
	АдресВоВременномХранилище = Неопределено;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ПрайсЛист.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД) Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Товары.Номенклатура.Наименование КАК Наименование,
	|	Товары.Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК УпаковкаКод,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Упаковка.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.Цена,
	|	Товары.СуммаРучнойСкидки + Товары.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Номер,
	|	КоммерческоеПредложениеКлиенту.Дата,
	|	КоммерческоеПредложениеКлиенту.Валюта
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.Ссылка = &Ссылка";
	
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ?(ЗначениеЗаполнено(ИмяДопКолонки),"Товары.Номенклатура."+ИмяДопКолонки,""""""));
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 		СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 		"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 		ТаблицаТоваров);
	СтруктураПараметров.Вставить("Валюта", 				РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Организация", 		СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Ид", 					СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 	ТекущаяДата());
	СтруктураПараметров.Вставить("Дата", 				СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("ВидЭД", 				СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 		СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("Описание", 			"Цены по комм.предложению №"+РеквизитыШапки.Номер+" от "+РеквизитыШапки.Дата);
	СтруктураПараметров.Вставить("Курс", 				РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Ид, Валюта, ДатаФормирования, Дата, ВидЭД,
		|НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа АктВыполненияРабот.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|	%1 КАК Артикул,
	|	Услуги.Номенклатура.Наименование КАК Наименование,
	|	Услуги.Номенклатура,
	|	Услуги.Характеристика,
	|	Услуги.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	1 КАК Коэффициент,
	|	Услуги.Номенклатура.ЕдиницаИзмерения.Код КАК УпаковкаКод,
	|	Услуги.Номенклатура.ЕдиницаИзмерения.Наименование КАК УпаковкаНаименование,
	|	Услуги.Количество КАК Количество,
	|	Услуги.Сумма,
	|	Услуги.СтавкаНДС,
	|	Услуги.СуммаНДС,
	|	Услуги.СуммаСНДС,
	|	Услуги.Цена,
	|	Услуги.СуммаРучнойСкидки + Услуги.СуммаАвтоматическойСкидки КАК СуммаСкидки,
	|	Услуги.Содержание,
	|	Услуги.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Услуги.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Услуги.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	НЕОПРЕДЕЛЕНО КАК Упаковка
	|ИЗ
	|	Документ.АктВыполненныхРабот.Услуги КАК Услуги
	|ГДЕ
	|	Услуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктВыполненныхРабот.Валюта,
	|	АктВыполненныхРабот.Дата,
	|	АктВыполненныхРабот.СуммаДокумента,
	|	АктВыполненныхРабот.ЦенаВключаетНДС,
	|	АктВыполненныхРабот.НалогообложениеНДС,
	|	АктВыполненныхРабот.ЗаказКлиента,
	|	АктВыполненныхРабот.ДополнительнаяИнформация,
	|	АктВыполненныхРабот.ДополнительнаяИнформацияШапки,
	|	АктВыполненныхРабот.БанковскийСчетКонтрагента,
	|	АктВыполненныхРабот.БанковскийСчетОрганизации
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка = &Ссылка";
	ИмяДопКолонки = ИмяДополнительнойКолонки();
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																		ТекстЗапроса, 
																		?(ЗначениеЗаполнено(ИмяДопКолонки),"Услуги.Номенклатура."+ИмяДопКолонки,"""""")
																		);
	Запрос.Текст = ТекстЗапроса;

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Результат = Запрос.ВыполнитьПакет();
	ТаблицаТоваров = Результат[0].Выгрузить();
	РеквизитыШапки = Результат[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 					СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 					"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 					ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 					СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 						СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 								СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования", 				ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 							СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 							СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 							РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 							РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 							РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",				 	РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 						ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 							СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 					СтруктураЭД.НаправлениеЭД);
	Структурапараметров.Вставить("НалогообложениеНДС",				Строка(РеквизитыШапки.НалогообложениеНДС));
	Структурапараметров.Вставить("ДополнительнаяИнформация",		Строка(РеквизитыШапки.ДополнительнаяИнформация));
	Структурапараметров.Вставить("ДополнительнаяИнформацияШапки",	Строка(РеквизитыШапки.ДополнительнаяИнформацияШапки));
	Структурапараметров.Вставить("ДополнительнаяИнформацияШапки",	Строка(РеквизитыШапки.ДополнительнаяИнформацияШапки));
	// данные по расч.счетам
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетКонтрагента) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетКонтрагента);
		СтруктураПараметров.Вставить("РасчетныйСчетКонтрагента", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетОрганизации) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетОрганизации);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
	ИтоговаяСтрока = НСтр("ru = 'Всего выполнено работ (оказано услуг) %КоличествоНаименований%, на сумму %СуммаДокумента%'");
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%КоличествоНаименований%", ТаблицаТоваров.Количество());
	ИтоговаяСтрока = СтрЗаменить(ИтоговаяСтрока, "%СуммаДокумента%", ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
    СтруктураПараметров.Вставить("ИтогиПрописью", ИтоговаяСтрока + Символы.ПС + РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта));
	
	// заполнение спец.реквизитов для связки заказ-поступление
	Если ЗначениеЗаполнено(РеквизитыШапки.ЗаказКлиента) Тогда
		ДокОснование = РеквизитыШапки.ЗаказКлиента;
		СтруктураПараметров.Вставить("НомерПоДаннымПоставщика", ДокОснование.Номер);
		СтруктураПараметров.Вставить("ДатаПоДаннымПоставщика", 	ДокОснование.Дата);
		Если ЗначениеЗаполнено(ДокОснование.НомерПоДаннымКлиента) 
			И ЗначениеЗаполнено(ДокОснование.ДатаПоДаннымКлиента) Тогда 
			СтруктураПараметров.Вставить("НомерПоДаннымКлиента", 	ДокОснование.НомерПоДаннымКлиента);
			СтруктураПараметров.Вставить("ДатаПоДаннымКлиента", 	ДокОснование.ДатаПоДаннымКлиента);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование, Номенклатура, БазоваяЕдиницаКод, УпаковкаКод");
	
	Возврат СтруктураПараметров;
	
КонецФункции 

// Подготавливает данные для электронного документа типа ОтчетКомитенту.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомитенту.Дата,
	|	ОтчетКомитенту.Валюта,
	|	ОтчетКомитенту.СуммаДокумента,
	|	ОтчетКомитенту.ЦенаВключаетНДС,
	|	ОтчетКомитенту.СуммаВознаграждения,
	|	ОтчетКомитенту.НалогообложениеНДС,
	|	ОтчетКомитенту.НачалоПериода,
	|	ОтчетКомитенту.КонецПериода,
	|	ОтчетКомитенту.ФормаОплаты,
	|	ОтчетКомитенту.СпособРасчетаВознаграждения,
	|	ОтчетКомитенту.ПроцентВознаграждения,
	|	ОтчетКомитенту.ДатаПлатежа,
	|	ОтчетКомитенту.СтавкаНДСВознаграждения,
	|	ОтчетКомитенту.СуммаНДСВознаграждения
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика                                КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор                  КАК ИД,
	|	Товары.НоменклатураПоставщика.Артикул                        КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование                   КАК Наименование,
	|	Товары.НоменклатураПоставщика                                КАК Номенклатура,
	|	Товары.Характеристика                                        КАК Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код                     КАК БазоваяЕдиницаКод,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование            КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное      КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.КоличествоУпаковок                                    КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ                                                        КАК УпаковкаКод,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ                                                        КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Упаковка.Коэффициент
	|	КОНЕЦ                                                        КАК Коэффициент,
	|	Товары.Сумма                                                 КАК Сумма,
	|	Товары.СтавкаНДС                                             КАК СтавкаНДС,
	|	Товары.СуммаНДС                                              КАК СуммаНДС,
	|	Товары.СуммаПродажи                                          КАК СуммаПродажи,
	|	Товары.СуммаВознаграждения                                   КАК СуммаВознаграждения,
	|	Товары.СуммаСНДС                                             КАК СуммаСНДС,
	|	Товары.Упаковка                                              КАК Упаковка,
	|	Товары.ДатаСчетаФактуры                                      КАК ДатаПродажи,
	|	Товары.Покупатель                                            КАК Контрагент
	|ИЗ
	|	Документ.ОтчетКомитенту.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ДатаПлатежа КАК ДатаПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ОтчетКомитентуЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ОтчетКомитенту.ЭтапыГрафикаОплаты КАК ОтчетКомитентуЭтапыГрафикаОплаты
	|ГДЕ
	|	ОтчетКомитентуЭтапыГрафикаОплаты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитенту.Услуга.Код                                      КАК ИД,
	|	ОтчетКомитенту.Услуга.Артикул                                  КАК Артикул,
	|	ОтчетКомитенту.Услуга.Наименование                             КАК Наименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения                         КАК БазоваяЕдиница,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Код                     КАК БазоваяЕдиницаКод,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.Наименование            КАК БазоваяЕдиницаНаименование,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.НаименованиеПолное      КАК БазоваяЕдиницаНаименованиеПолное,
	|	ОтчетКомитенту.Услуга.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитенту
	|ГДЕ
	|	ОтчетКомитенту.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	РеквизитыШапки = РезультатЗапроса[0].Выбрать();
	РеквизитыШапки.Следующий();
	
	ВыборкаПоТоварам = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаПоТоварам.Следующий() Цикл
		
		НоваяСтрока = СтруктураПараметров.ТаблицаТоваров.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоТоварам);
		
		// Заполним сведения, необходимые для выставления счета-фактуры комитентом
		СтруктураДополнительныхДанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
			СтруктураПараметров.ДополнительныеРеквизитыДляТаблицыТоваров);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ВыборкаПоТоварам.ДатаПродажи);
		СтруктураДополнительныхДанных.Вставить("ДатаПродажи", МассивЗначений);
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(ПолучитьСтавкуНДСЧислом(ВыборкаПоТоварам.СтавкаНДС));
		СтруктураДополнительныхДанных.Вставить("СтавкаНДС", МассивЗначений);
		
		СведенияОПокупателе = ПолучитьДанныеЮрФизЛица(ВыборкаПоТоварам.Контрагент);
		
		Если ЗначениеЗаполнено(СведенияОПокупателе.ПолноеНаименование)
			 И ЗначениеЗаполнено(СведенияОПокупателе.ИНН)
			 И ЗначениеЗаполнено(СведенияОПокупателе.КПП) Тогда
			 
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СведенияОПокупателе.ПолноеНаименование);
			СтруктураДополнительныхДанных.Вставить("ПокупательНаименование", МассивЗначений);
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СведенияОПокупателе.ИНН);
			СтруктураДополнительныхДанных.Вставить("ПокупательИНН", МассивЗначений);
			
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СведенияОПокупателе.КПП);
			СтруктураДополнительныхДанных.Вставить("ПокупательКПП", МассивЗначений);
			
			
			// Заполним адреса: юридический и фактический
			ТекстОшибки = "";
			ЮрАдресУчастника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьАдресСтруктурой(ВыборкаПоТоварам, 
				"Контрагент", 
				"Юр", 
				ТекстОшибки);
				
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ЮрАдресУчастника.АдресРФ Тогда
					ЗаполнитьАдресВСпискеТиповАдресов(СтруктураДополнительныхДанных.ПокупательЮрАдрес, ЮрАдресУчастника, "Структурированный");
				КонецЕсли;
			КонецЕсли;
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СтруктураДополнительныхДанных.ПокупательЮрАдрес);
			СтруктураДополнительныхДанных.Вставить("ПокупательЮрАдрес", МассивЗначений);
			
			ТекстОшибки = "";
			ФактАдресУчастника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьАдресСтруктурой(ВыборкаПоТоварам, 
				"Контрагент", 
				"Факт", 
				ТекстОшибки);
				
			Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
				Если ЮрАдресУчастника.АдресРФ Тогда 
					ЗаполнитьАдресВСпискеТиповАдресов(СтруктураДополнительныхДанных.ПокупательФактАдрес, ФактАдресУчастника, "Структурированный");
				КонецЕсли;
			КонецЕсли;
			МассивЗначений = Новый Массив;
			МассивЗначений.Добавить(СтруктураДополнительныхДанных.ПокупательФактАдрес);
			СтруктураДополнительныхДанных.Вставить("ПокупательФактАдрес", МассивЗначений);
			
			НоваяСтрока.ДополнительныеРеквизиты = СтруктураДополнительныхДанных;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ТаблицаЭтаповГрафикаОплаты", РезультатЗапроса[2].Выгрузить());
	
	Услуга = РезультатЗапроса[3].Выбрать();
	Если Услуга.Следующий() Тогда
		СтруктураПараметров.Вставить("Услуга",Услуга);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Исполнитель", 				СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 				"4.02");
	СтруктураПараметров.Вставить("Организация", 				СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 					СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 							СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",			ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 						СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 						СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 						РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 						РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 						РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ЦенаВключаетНДС", 			РеквизитыШапки.ЦенаВключаетНДС);
	СтруктураПараметров.Вставить("СуммаНДС", 					СтруктураПараметров.ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 						СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 				СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("СуммаВознаграждения", 		РеквизитыШапки.СуммаВознаграждения);
	СтруктураПараметров.Вставить("НалогообложениеНДС",			Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("НачалоПериода",				РеквизитыШапки.НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",				РеквизитыШапки.КонецПериода);
	СтруктураПараметров.Вставить("ФормаОплаты",					Строка(РеквизитыШапки.ФормаОплаты));
	СтруктураПараметров.Вставить("СпособРасчета",				Строка(РеквизитыШапки.СпособРасчетаВознаграждения));
	СтруктураПараметров.Вставить("Процент",						РеквизитыШапки.ПроцентВознаграждения);
	СтруктураПараметров.Вставить("ДатаОплаты",					РеквизитыШапки.ДатаПлатежа);
	
	СтруктураПараметров.Вставить("СтавкаНДСВознаграждения",		РеквизитыШапки.СтавкаНДСВознаграждения);
	СтруктураПараметров.Вставить("СуммаНДСВознаграждения",		РеквизитыШапки.СуммаНДСВознаграждения);
 	
	Если РеквизитыШапки.СуммаДокумента < 0 Тогда
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего возвращено наименований '");
	Иначе
		ТекстИтоговаяСтрока = Нстр("ru = 'Всего продано наименований '");
	КонецЕсли;
	
	ИтоговаяСтрока = ТекстИтоговаяСтрока
		+ СтруктураПараметров.ТаблицаТоваров.Количество()
		+ Нстр("ru = ', на сумму '")
		+ ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
	
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
		
	Если РеквизитыШапки.СуммаВознаграждения <> 0 Тогда
		СуммаВознаграждения = "Сумма комиссионного вознаграждения составила "
			+ ?(РеквизитыШапки.СуммаВознаграждения < 0, "минус ", "")
			+ РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаВознаграждения, РеквизитыШапки.Валюта);
	КонецЕсли;

	ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью + Символы.ПС + СуммаВознаграждения;
	
	СтруктураПараметров.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа ОтчетКомитентуОСписании.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(СсылкаНаОбъект, СтруктураЭД)	Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	Товары.НоменклатураПоставщика.Идентификатор КАК Ид,
	|	Товары.НоменклатураПоставщика.Артикул КАК Артикул,
	|	Товары.НоменклатураПоставщика.Наименование КАК Наименование,
	|	Товары.НоменклатураПоставщика КАК Номенклатура,
	|	Товары.Характеристика,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	Товары.КоличествоУпаковок КАК Количество,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Код
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Код
	|	КОНЕЦ КАК УпаковкаКод,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА Товары.Номенклатура.ЕдиницаИзмерения.Наименование
	|		ИНАЧЕ Товары.Упаковка.ЕдиницаИзмерения.Наименование
	|	КОНЕЦ КАК УпаковкаНаименование,
	|	ВЫБОР
	|		КОГДА Товары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ Товары.Упаковка.Коэффициент
	|	КОНЕЦ КАК Коэффициент,
	|	Товары.СуммаСНДС,
	|	Товары.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	Товары.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	Товары.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	Товары.Упаковка
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомитентуОСписании.Валюта,
	|	ОтчетКомитентуОСписании.Дата,
	|	ОтчетКомитентуОСписании.СуммаДокумента
	|ИЗ
	|	Документ.ОтчетКомитентуОСписании КАК ОтчетКомитентуОСписании
	|ГДЕ
	|	ОтчетКомитентуОСписании.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 	  СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  "4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	  ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	  СтруктураЭД.Организация);
	СтруктураПараметров.Вставить("Контрагент", 		  СтруктураЭД.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			  РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма",			  РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("ВидЭД", 			  СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  СтруктураЭД.НаправлениеЭД);
	ИтоговаяСтрока = НСтр("ru = 'Всего списано наименований '")
		+ ТаблицаТоваров.Количество()
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, НСтр("ru = ', на сумму '"), "")
		+ ?(РеквизитыШапки.СуммаДокумента <> 0, ФормированиеПечатныхФорм.ФорматСумм(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта), "");
	СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(РеквизитыШапки.СуммаДокумента, РеквизитыШапки.Валюта);
    ИтоговаяСтрока = ИтоговаяСтрока + Символы.ПС + СуммаПрописью;
	СтруктураПараметров.Вставить("ИтоговаяСтрока", ИтоговаяСтрока);
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "Ид, Наименование");
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ПередачаТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Упаковка,
	|	ВложенныйЗапрос.Ид КАК Ид
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Код
	|			ИНАЧЕ ТаблицаТовары.Упаковка.ЕдиницаИзмерения.Код
	|		КОНЕЦ КАК УпаковкаКод,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	|			ИНАЧЕ ТаблицаТовары.Упаковка.ЕдиницаИзмерения.Наименование
	|		КОНЕЦ КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ ТаблицаТовары.Упаковка.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ТаблицаТовары.Цена КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ТаблицаТовары.Упаковка КАК Упаковка,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие),
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|	И ДанныеДокумента.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	ОбработатьТаблицуТоваров(ТаблицаТоваров);

	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 	  	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	 	РеквизитыШапки.Организация);
	СтруктураПараметров.Вставить("Контрагент",			РеквизитыШапки.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  	СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  	ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  	СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  	СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  	РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			  	РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 			  	РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("СуммаНДС", 		  	ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			  	СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  	СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("АдресДоставки",	  	РеквизитыШапки.АдресДоставки);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("Грузоотправитель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  РеквизитыШапки.Грузоотправитель, СтруктураЭД.Организация));
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Контрагент");
	СтруктураПараметров.Вставить("Грузополучатель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  РеквизитыШапки.Грузополучатель, СтруктураЭД.Контрагент));
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",					РеквизитыШапки.ЦенаВключаетНДС);
 	// данные по расч.счетам
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетКонтрагента) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетКонтрагента);
		СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетОрганизации) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетОрганизации);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузоотправителя", БанковскийСчет);
	КонецЕсли;
 	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетГрузополучателя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузополучателя", БанковскийСчет);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, БазоваяЕдиницаКод, УпаковкаКод");
	                                                      
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа ВозвратТоваровМеждуОрганизациями.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(СсылкаНаОбъект, СтруктураЭД)Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка,
	|	ВложенныйЗапрос.Номенклатура,
	|	ВложенныйЗапрос.Характеристика,
	|	ВложенныйЗапрос.УпаковкаКод,
	|	ВложенныйЗапрос.УпаковкаНаименование,
	|	ВложенныйЗапрос.Коэффициент,
	|	ВложенныйЗапрос.СтавкаНДС,
	|	ВложенныйЗапрос.Цена,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.КоличествоМест,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.СуммаНДС,
	|	ВложенныйЗапрос.НомерСтроки,
	|	ВложенныйЗапрос.Артикул,
	|	ВложенныйЗапрос.СуммаСНДС,
	|	ВложенныйЗапрос.Номенклатура.Наименование КАК Наименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКод,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.Наименование КАК БазоваяЕдиницаНаименование,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.НаименованиеПолное КАК БазоваяЕдиницаНаименованиеПолное,
	|	ВложенныйЗапрос.Номенклатура.ЕдиницаИзмерения.МеждународноеСокращение КАК БазоваяЕдиницаМеждународноеСокращение,
	|	ВложенныйЗапрос.Ид КАК Ид,
	|	ВложенныйЗапрос.Упаковка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаТовары.Ссылка КАК Ссылка,
	|		ТаблицаТовары.Номенклатура КАК Номенклатура,
	|		ТаблицаТовары.Характеристика КАК Характеристика,
	|		ТаблицаТовары.СтавкаНДС КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Код
	|			ИНАЧЕ ТаблицаТовары.Упаковка.ЕдиницаИзмерения.Код
	|		КОНЕЦ КАК УпаковкаКод,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА ТаблицаТовары.Номенклатура.ЕдиницаИзмерения.Наименование
	|			ИНАЧЕ ТаблицаТовары.Упаковка.ЕдиницаИзмерения.Наименование
	|		КОНЕЦ КАК УпаковкаНаименование,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|				ТОГДА 1
	|			ИНАЧЕ ТаблицаТовары.Упаковка.Коэффициент
	|		КОНЕЦ КАК Коэффициент,
	|		ВЫБОР
	|			КОГДА ТаблицаТовары.КоличествоУпаковок = 0
	|				ТОГДА ТаблицаТовары.Цена
	|			ИНАЧЕ ТаблицаТовары.Сумма / ТаблицаТовары.КоличествоУпаковок
	|		КОНЕЦ КАК Цена,
	|		ТаблицаТовары.КоличествоУпаковок КАК Количество,
	|		ТаблицаТовары.КоличествоУпаковок КАК КоличествоМест,
	|		ТаблицаТовары.Сумма КАК Сумма,
	|		ТаблицаТовары.СуммаНДС КАК СуммаНДС,
	|		ТаблицаТовары.НомерСтроки КАК НомерСтроки,
	|		ТаблицаТовары.Номенклатура.Артикул КАК Артикул,
	|		ТаблицаТовары.СуммаСНДС КАК СуммаСНДС,
	|		ВЫРАЗИТЬ("""" КАК СТРОКА(110)) КАК Ид,
	|		ТаблицаТовары.Упаковка КАК Упаковка
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями.Товары КАК ТаблицаТовары
	|	ГДЕ
	|		ТаблицаТовары.Ссылка = &Ссылка
	|		И ТаблицаТовары.Ссылка.Проведен) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	ДанныеДокумента.Номер КАК Номер,
	|	ДанныеДокумента.Дата КАК Дата,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие) КАК Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель КАК Контрагент,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	ДанныеДокумента.БанковскийСчетОрганизации КАК БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя КАК БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя КАК БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя КАК БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки КАК АдресДоставки,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПередачаНаКомиссию,
	|	ДанныеДокумента.СуммаДокумента КАК СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.НомерВходящегоДокумента,
	|	ДанныеДокумента.ДатаВходящегоДокумента,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Контрагент,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.ОрганизацияПолучатель
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетОрганизацииПолучателя,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.ОрганизацияПолучатель <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.Партнер,
	|	ДанныеДокумента.Контрагент,
	|	ДанныеДокумента.Организация,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Контрагент
	|		ИНАЧЕ ДанныеДокумента.Грузополучатель
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ДанныеДокумента.Организация
	|		ИНАЧЕ ДанныеДокумента.Грузоотправитель
	|	КОНЕЦ,
	|	ДанныеДокумента.БанковскийСчетОрганизации,
	|	ДанныеДокумента.БанковскийСчетКонтрагента,
	|	ДанныеДокумента.БанковскийСчетГрузоотправителя,
	|	ДанныеДокумента.БанковскийСчетГрузополучателя,
	|	ДанныеДокумента.АдресДоставки,
	|	ДанныеДокумента.Валюта,
	|	ДанныеДокумента.ЦенаВключаетНДС,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ДанныеДокумента.СуммаДокумента,
	|	ДанныеДокумента.НалогообложениеНДС
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|	И ДанныеДокумента.Проведен
	|	И ДанныеДокумента.РасчетыЧерезОтдельногоКонтрагента
	|	И ДанныеДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаТоваров = РезультатЗапроса[0].Выгрузить();
	РеквизитыШапки = РезультатЗапроса[1].Выбрать();
	РеквизитыШапки.Следующий();
	
	ОбработатьТаблицуТоваров(ТаблицаТоваров);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Исполнитель", 	  	СтруктураЭД.Отправитель);
	СтруктураПараметров.Вставить("ВерсияСхемы", 	  	"4.02");
	СтруктураПараметров.Вставить("ТаблицаТоваров", 	 	ТаблицаТоваров);
	СтруктураПараметров.Вставить("Организация", 	 	РеквизитыШапки.Организация);
	СтруктураПараметров.Вставить("Контрагент",			РеквизитыШапки.Контрагент);
	СтруктураПараметров.Вставить("Ид", 				  	СтруктураЭД.НомерЭД);
	СтруктураПараметров.Вставить("ДатаФормирования",  	ТекущаяДата());
	СтруктураПараметров.Вставить("Номер", 			  	СтруктураЭД.НомерДокументаОтправителя);
	СтруктураПараметров.Вставить("Дата", 			  	СтруктураЭД.ДатаДокументаОтправителя);
	СтруктураПараметров.Вставить("Валюта", 			  	РеквизитыШапки.Валюта);
	СтруктураПараметров.Вставить("Курс", 			  	РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыШапки.Валюта, РеквизитыШапки.Дата).Курс);
	СтруктураПараметров.Вставить("Сумма", 			  	РеквизитыШапки.СуммаДокумента);
	СтруктураПараметров.Вставить("СуммаНДС", 		  	ТаблицаТоваров.Итог("СуммаНДС"));
	СтруктураПараметров.Вставить("ВидЭД", 			  	СтруктураЭД.ВидЭД);
	СтруктураПараметров.Вставить("НаправлениеЭД", 	  	СтруктураЭД.НаправлениеЭД);
	СтруктураПараметров.Вставить("АдресДоставки",	  	РеквизитыШапки.АдресДоставки);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	Строка(РеквизитыШапки.НалогообложениеНДС));
	СтруктураПараметров.Вставить("Грузоотправитель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузоотправитель), 
														  РеквизитыШапки.Грузоотправитель, СтруктураЭД.Организация));
	СтруктураПараметров.Вставить("ТипГрузоотправителя", "Контрагент");
	СтруктураПараметров.Вставить("Грузополучатель", 	?(ЗначениеЗаполнено(РеквизитыШапки.Грузополучатель),
														  РеквизитыШапки.Грузополучатель, 
														  СтруктураЭД.Контрагент)
														  );
	СтруктураПараметров.Вставить("ЦенаВключаетНДС",					РеквизитыШапки.ЦенаВключаетНДС);
 	// данные по расч.счетам
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетКонтрагента) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетКонтрагента);
		СтруктураПараметров.Вставить("БанковскийСчетОрганизацииПолучателя", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетОрганизации) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетОрганизации);
		СтруктураПараметров.Вставить("РасчетныйСчетОрганизации", БанковскийСчет);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаОрганизаций", РеквизитыШапки.БанковскийСчетГрузоотправителя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузоотправителя", БанковскийСчет);
	КонецЕсли;
 	Если ЗначениеЗаполнено(РеквизитыШапки.БанковскийСчетГрузоотправителя) Тогда
		БанковскийСчет = РеквизитыБанковскогоСчета("БанковскиеСчетаКонтрагентов", РеквизитыШапки.БанковскийСчетГрузополучателя);
		СтруктураПараметров.Вставить("РасчетныйСчетГрузополучателя", БанковскийСчет);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ОбязательныеПоля", "Организация, Контрагент, Ид, ДатаФормирования,
		|Номер, Дата, ВидЭД, НаправлениеЭД, ТаблицаТоваров");
	СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений",
		"Ид, Наименование, БазоваяЕдиницаКод, УпаковкаКод");                                               
		
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа Платежное поручение.
//
// Параметры: 
// СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
// СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоПлатежномуПоручению(СсылкаНаОбъект, СтруктураЭД) Экспорт
	
	СтруктураПараметров = Новый Структура;
	
	
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Подготавливает данные для электронного документа типа СогласованноеИзменениеСтоимостиОтправитель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Процедура ПодготовитьДанныеПоКорректировочномуДокументу(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(СсылкаНаОбъект);
	
	ПараметрыПечати = Новый Структура("ВыводитьУслуги", Истина);
	ДанныеДляПечати = Документы[СсылкаНаОбъект.Метаданные().Имя].ПолучитьДанныеДляПечатнойФормыСоглашениеОбИзмененииСтоимости(ПараметрыПечати, МассивОбъектов);
	
	ВыборкаТоваров = ДанныеДляПечати.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	РеквизитыШапки = ДанныеДляПечати.РезультатПоШапке.Выбрать();
	РеквизитыШапки.Следующий();
	
	СтруктураПоиска = Новый Структура("Ссылка", РеквизитыШапки.Ссылка);
	ВыборкаТоваров.Сбросить();
	
	Если ВыборкаТоваров.НайтиСледующий(СтруктураПоиска) Тогда
		
		СтруктураПараметров.НомерТоварнойНакладной = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыШапки.Номер, Ложь, Истина);
		СтруктураПараметров.ДатаТоварнойНакладной  = РеквизитыШапки.Дата;
		
		ЗаполнитьРеквизитыУчастниковОбмена(РеквизитыШапки, СтруктураПараметров, СтруктураЭД.ВидЭД);
		
		СтрокаТовары = ВыборкаТоваров.Выбрать();
		НомерСтроки = 1;
		Пока СтрокаТовары.Следующий() Цикл
			ДобавитьСтрокуТаблицуДанных(СтруктураПараметров, СтрокаТовары, СтруктураЭД.ВидЭД, НомерСтроки);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		ИтоговыеСуммы = СтруктураИтоговыеСуммы(СтруктураПараметров.ТаблицаТоваров, СтруктураЭД.ВидЭД);
		ЗаполнитьРеквизитыПодвала(РеквизитыШапки, ИтоговыеСуммы, СтруктураПараметров);
		
		ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
		ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
		
		Если ЭтоФизЛицо Тогда
			ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
			ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
		Иначе
			ФИО = РеквизитыШапки.Руководитель;
			СтруктураПараметров.Подписант.Должность = РеквизитыШапки.ДолжностьРуководителя;
		КонецЕсли;
		ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО);
		
		СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
		СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
		
		ЗаполнитьДокументыОснования(СтруктураПараметров, СсылкаНаОбъект);
	Иначе
		ШаблонТекста = НСтр("ru = 'Документ %1 не содержит данных для формирования ЭД.'");
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, РеквизитыШапки.Ссылка);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, РеквизитыШапки.Ссылка);
		СтруктураПараметров = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Подготавливает данные для электронного документа типа СогласованноеИзменениеСтоимостиПолучатель.
//
// Параметры:
//  СсылкаНаОбъект - ДокументСсылка, ссылка на объект информационной базы, по которому необходимо создать электронный документ.
//  СтруктураЭД - Структура, структура данных для формирования электронного документа.
//
Функция ПодготовитьДанныеПоКорректировочномуДокументуПолучатель(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	ЭтоФизЛицо = ЭтоФизЛицо(СтруктураЭД.Организация);
	ДанныеЮрФизЛица = ПолучитьДанныеЮрФизЛица(СтруктураЭД.Организация);
	
	Если ЭтоФизЛицо Тогда
		ФИО = ДанныеЮрФизЛица.ПолноеНаименование;
		ДанныеСвидетельстваОРегистрацииИП(СтруктураЭД.Организация, СтруктураПараметров.Подписант.СвидетельствоОРегистрацииИП);
	Иначе
		СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(
			СтруктураЭД.Организация, 
			СтруктураЭД.ДатаДокументаОтправителя);
			
		ФИО = СтруктураОтветственных.Руководитель;
		СтруктураПараметров.Подписант.Должность = СтруктураОтветственных.РуководительДолжность;
	КонецЕсли;
	ЗаполнитьФИОиДолжность(СтруктураПараметров.Подписант, ФИО);
	
	СтруктураПараметров.Подписант.ЭтоФизЛицо = ЭтоФизЛицо;
	СтруктураПараметров.Подписант.ИНН = ДанныеЮрФизЛица.ИНН;
	
	ДанныеПодготовлены = ЗначениеЗаполнено(СтруктураПараметров.Подписант.ИНН);
	
	Возврат ДанныеПодготовлены;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Просмотр электронных документов

// Необходимо заполнить соответствие ставок и сумм НДС
//
Процедура ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС) Экспорт
	
	 СоответствиеСтавокНДС = ФормированиеПечатныхФорм.ПолучитьСоответствиеСтавокНДС();
	
КонецПроцедуры // ПолучитьСоответствиеСтавокНДС()

// Возвращает сумму прописью.
//
// Параметры:
//  СуммаЧислом - Число, преобразуемая сумма.
//  КодВалюты - Число, код используемой валюты.
//
Функция СуммаПрописью(СуммаЧислом, КодВалюты) Экспорт
	
	Если ЗначениеЗаполнено(КодВалюты) Тогда 
		Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
		СтрокаСумма = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаЧислом, Валюта);
	Иначе
		СтрокаСумма = Новый Структура("ПараметрыПрописиНаРусском", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	КонецЕсли;
	Возврат СтрокаСумма;
	
КонецФункции

// Возвращает текстовое описание организации.
//
// Параметры:
//  СведенияОКонтрагенте - Структура, сведения об организации, по которой надо составить описание.
//  Список - Строка, список запрашиваемых параметров организации.
//  СПрефиксом - Булево, признак вывода префикса параметра организации.
//
Функция ОписаниеОрганизации(СведенияОКонтрагенте, Список = "", СПрефиксом = Истина) Экспорт
	
	Возврат ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОКонтрагенте, Список, СПрефиксом);
	
КонецФункции

// Возвращает текстовое представление суммы.
//
// Параметры:
//  СуммаКПрописи - Число, сумма, по которой надо получить представление.
//  КодВалюты - Число, код используемой валюты.
//  ЧН - Строка, параметр нулевого значения числа.
//  ЧРГ - Строка, разделитель групп целой части числа.
//
Функция ФорматСумм(СуммаКПрописи, КодВалюты = Неопределено, ЧН = "", ЧРГ = "") Экспорт
	
	Валюта = НайтиСсылкуНаОбъект("Валюты",КодВалюты);
 	Возврат ФормированиеПечатныхФорм.ФорматСумм(СуммаКПрописи, Валюта,  ЧН, ЧРГ);
	
КонецФункции

// Формирует текст НДС по ставке для печатной формы счета и заказа
//
// Параметры:
//  СтавкаНДС       - ПеречислениеСсылка.СтавкиНДС - ставка НДС, для которой необходимо сформировать текст
//  ЦенаВключаетНДС - Булево - Признак включения НДС в цену
//
// Возвращаемое значение:
//  Строка
//
Функция ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС) Экспорт
	
	Возврат ФормированиеПечатныхФорм.ТекстНДСПоСтавке(СтавкаНДС, ЦенаВключаетНДС);
	
КонецФункции // ТекстНДСПоСтавке()

// Возвращает числовое значение ставки НДС по значению перечисления
//
// Параметры:
//  СтавкаНДС - ПеречислениеСсылка.СтавкиНДС - значение перечисления СтавкиНДС
//
// Возвращаемое значение:
//  Число - Значение ставки НДС числом
//
Функция ПолучитьСтавкуНДСЧислом(Знач СтавкаНДС) Экспорт
	
	Результат = Неопределено;
	
	Если СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС Тогда
		Результат = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтавкуНДСЧислом()

Функция ЗначениеПеречисленияСтавкаНДС(СтавкаЧислом) Экспорт
	
	ЗначениеНДС = Неопределено;
	
	Если ТипЗнч(СтавкаЧислом) = Тип("Строка") Тогда
		ПредставлениеСтавкиНДС = СтавкаЧислом;
	ИначеЕсли ТипЗнч(СтавкаЧислом) = Тип("Число") Тогда 
		ПредставлениеСтавкиНДС = Строка(СтавкаЧислом);
	Иначе // неправильный тип
		ПредставлениеСтавкиНДС = Неопределено;
	КонецЕсли;
	
	Если ПредставлениеСтавкиНДС = Неопределено ИЛИ ПредставлениеСтавкиНДС = "без НДС" Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.БезНДС;
		
	// # - разделитель представлений ставок.
	ИначеЕсли Найти("0#0%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС0;
		
	ИначеЕсли Найти("10#0.1#0,1#0.10#0,10#10%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10;
		
	ИначеЕсли Найти("18#0.18#0,18#0.18#0,18#18%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18;
		
	ИначеЕсли Найти("10/110#10% / 110%#10%/110%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС10_110;
		
	ИначеЕсли Найти("18/118#18% / 118%#18%/118%", ПредставлениеСтавкиНДС) > 0 Тогда
		ЗначениеНДС = Перечисления.СтавкиНДС.НДС18_118;
		
	КонецЕсли;
	
	Возврат ЗначениеНДС;
	
КонецФункции

// Возвращает ответственного за электронный документооборот по данному соглашению
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты, ссылка на контрагента, по которому надо получить ответственного.
//  Соглашение - СправочникСсылка.СоглашениеОбИспользованииЭД, ссылка на соглашение, по которому надо найти ответственного.
//
Функция ПолучитьОтветственногоПоЭД(Контрагент, Соглашение) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтветственныйПоЭД = Справочники.Пользователи.ПустаяСсылка();
	Если ЗначениеЗаполнено(Контрагент.Партнер) Тогда
		Если Контрагент.Партнер.Метаданные().Реквизиты.Найти("ОсновнойМенеджер")<> Неопределено 
			И ЗначениеЗаполнено(Контрагент.Партнер.ОсновнойМенеджер) Тогда 
			ОтветственныйПоЭД = Контрагент.Партнер.ОсновнойМенеджер;
		КонецЕсли;
	КонецЕсли;
	Возврат ОтветственныйПоЭД;
	
КонецФункции

// Возвращает признак физ. лица.
//
// Параметры:
//  ДанныеКонтрагента - ссылка на элемент справочника.
//
Функция ЭтоФизЛицо(ДанныеКонтрагента) Экспорт
	
	Если ДанныеКонтрагента.Метаданные().Реквизиты.Найти("ЮрФизЛицо") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЮрФизЛицо = ДанныеКонтрагента.ЮрФизЛицо;
	
	Если ТипЗнч(ЮрФизЛицо) <> Тип("ПеречислениеСсылка.ЮрФизЛицо") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	ЭтоФизЛицо = Ложь;
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо 
		ИЛИ ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель Тогда
		ЭтоФизЛицо = Истина;
	КонецЕсли;
	Возврат ЭтоФизЛицо;
	
КонецФункции

// Формирует текст НДС по этапу оплаты
//
// Параметры:
//  СоответствиеСтавокНДС - Соответствие - соответствие, полученное с помощью функции ПолучитьСоответствиеСтавокНДС()
//  ПроцентПлатежа       - Число - Процент платежа по этапу
//
// Возвращаемое значение:
//  ТекстНДС - Строка - описание ставки НДС
//
Функция СформироватьТекстНДСЭтапаОплаты(СоответствиеСтавокНДС, ПроцентПлатежа) Экспорт
	
	ТекстНДС = "";
	
	Если СоответствиеСтавокНДС.Количество() > 0 Тогда
		Для Каждого ТекСтавкаНДС Из СоответствиеСтавокНДС Цикл
			Если ТекСтавкаНДС.Значение <> 0 Тогда
				ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), НСтр("ru='НДС(%СтавкаНДС%) %СуммаНДС%'"), НСтр("ru=', НДС(%СтавкаНДС%) %СуммаНДС%'"));
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СтавкаНДС%", ТекСтавкаНДС.Ключ);
				ТекстНДС = СтрЗаменить(ТекстНДС, "%СуммаНДС%",  Формат(ТекСтавкаНДС.Значение / 100 * ПроцентПлатежа, "ЧЦ=15; ЧДЦ=2"));
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНДС) Тогда
		ТекстНДС = НСтр("ru='В т.ч. '") + ТекстНДС;
	Иначе
		ТекстНДС = НСтр("ru='Без налога (НДС)'");
	КонецЕсли;
	
	Возврат ТекстНДС;
	
КонецФункции // СформироватьТекстНДСЭтапаОплаты()

// Функция возвращает, нужно ли вы водить данные о скидках в печатную форму документа
//
Функция НужноВыводитьСкидки(Знач Товары, ИспользоватьСкидки) Экспорт
	
	Если ИспользоватьСкидки Тогда
		Если ТипЗнч(Товары) = Тип("ТаблицаЗначений") Или ТипЗнч(Товары) = Тип("Массив") Тогда
			Для Каждого СтрокаТоваров Из Товары Цикл
				Если ЗначениеЗаполнено(СтрокаТоваров.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Товары) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
			Пока Товары.Следующий() Цикл
				Если ЗначениеЗаполнено(Товары.СуммаСкидки) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НужноВыводитьСкидки()

// Получает имя дополнительной колонки.
//
// Возвращаемое значение:
//  ИмяКолонки - строка колонки.
//
Функция ИмяДополнительнойКолонки() Экспорт
	
	Возврат ФормированиеПечатныхФорм.ИмяДополнительнойКолонки();
	
КонецФункции // ИмяДополнительнойКолонки()

////////////////////////////////////////////////////////////////////////////////
// Переопределение поведения электронных документов

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Утвержден".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусУтвержден(ЭлектронныйДокумент) Экспорт
	
	Попытка
		ФайлОбъект = ЭлектронныйДокумент.ПолучитьОбъект();
		ФайлОбъект.Изменил = ПараметрыСеанса.ТекущийПользователь;
		ФайлОбъект.Записать();
	Исключение
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'утверждение ЭД'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
КонецПроцедуры

// Выполняет дополнительную обработку электронного документа, которому назначили статус "Подписан".
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Процедура НазначенСтатусПодписан(ЭлектронныйДокумент) Экспорт
	
	
КонецПроцедуры

// Проверяет, готовность документов ИБ для формирования ЭД, и удаляет из массива неготовые документы
//
// Параметры
//  ДокументыМассив - Массив   - ссылки на документы, которые должны быть проверены перед формированием ЭД.
//
Процедура ПроверитьГотовностьИсточников(ДокументыМассив, ФормаИсточник = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(ДокументыМассив, Тип("СтрокаГруппировкиДинамическогоСписка"));
	
	// Удалим из массива документы, которые не могут быть выставлены в электронном виде.
	ДокументыКорректировкиРеализацияУслугПрочихАктивов = Новый Массив();
	Для каждого Документ из ДокументыМассив Цикл
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
			ДокументаОснования = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Документ, "ДокументОснование");
			Если ТипЗнч(ДокументаОснования) = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов") Тогда
				ДокументыКорректировкиРеализацияУслугПрочихАктивов.Добавить(Документ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументыКорректировкиРеализацияУслугПрочихАктивов.Количество() > 0 Тогда
		УдалитьДокументыНеподходящиеДляФормированияЭД(
			ДокументыМассив,
			ДокументыКорректировкиРеализацияУслугПрочихАктивов,
			НСтр("ru = 'Документ %1 введен на основании документа ""Реализация услуг и прочих активов"". Электронный документ не сформирован.'"));
	КонецЕсли;
	
	// Перед формированием ЭД документы ИБ должны быть проведены
	ДокументыПодлежащиеПроведению = Новый Массив;
	Для каждого Элемент Из ДокументыМассив Цикл
		МетаданныеДокумента = Элемент.Метаданные();
		Если ОбщегоНазначения.ЭтоДокумент(МетаданныеДокумента)
			 И МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			ДокументыПодлежащиеПроведению.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыПодлежащиеПроведению.Количество() = 0 Тогда
		// Проверку выполнять не требуется
		Возврат;
	КонецЕсли;
	
	МассивНепроведенныхДокументов = ОбщегоНазначения.ПроверитьПроведенностьДокументов(ДокументыПодлежащиеПроведению);
	КоличествоНепроведенныхДокументов = МассивНепроведенныхДокументов.Количество();
	
	Если КоличествоНепроведенныхДокументов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КоличествоНепроведенныхДокументов = 1 Тогда
		Текст = НСтр("ru = 'Для того чтобы сформировать электронную версию документа, его необходимо предварительно провести.'");
	Иначе
		Текст = НСтр("ru = 'Для того чтобы сформировать электронные версии документов, их необходимо предварительно провести.'");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	
	УдалитьДокументыНеподходящиеДляФормированияЭД(
		ДокументыМассив,
		МассивНепроведенныхДокументов,
		НСтр("ru = 'Документ %1 не проведен.'"));
	
КонецПроцедуры

// Проверяет все ли необходимые подписи установлены перед отправкой контрагенту.
// 
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//  ФлагПодписанПолностью - булево - признак полностью подписанного документа.
//
Процедура ЭлектронныйДокументПолностьюПодписан(ЭлектронныйДокумент, ФлагПодписанПолностью) Экспорт
	
	
КонецПроцедуры

// Проверяет выполняются ли необходимые автоматические условия для утверждения документа.
//
// Параметры:
//  ЭлектронныйДокумент - ссылка на присоединенный файл.
//
Функция ЭлектронныйДокументГотовКУтверждению(ЭлектронныйДокумент) Экспорт
	
	Возврат Истина;
КонецФункции

// Процедура удаляет из исходного массива документы неподходящие для формирования ЭД
//
// Параметры
//  МассивДокументов - массив документов для формирования ЭД
//  МассивДокументовДляУдаления - массив документов неподходящих для формирования ЭД
//  ШаблонСообщения - шаблон сообщения
//
Процедура УдалитьДокументыНеподходящиеДляФормированияЭД(МассивДокументов, МассивДокументовДляУдаления, ШаблонСообщения)
	
	Для Каждого Документ Из МассивДокументовДляУдаления Цикл
		Найденный = МассивДокументов.Найти(Документ);
		Если Найденный <> Неопределено Тогда
			МассивДокументов.Удалить(Найденный);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Строка(Документ)), 
				Документ);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с элементами форм

// Изменяет поведение элементов формы
//
// Параметры
//  <Форма>  - <Управляемая или обычная форма> - форма для изменения
//  <СтруктураПараметров>  - <Структура> - параметры процедуры
//
Процедура ИзменитьСвойстваЭлементовФормы(Форма, СтруктураПараметров) Экспорт
	
	Если ТипЗнч(Форма) = Тип("УправляемаяФорма") Тогда // только для управляемой формы
		Если СтруктураПараметров.Свойство("ВидОперации")
			И СтруктураПараметров.Свойство("ЗначениеПараметра") Тогда
			Если ВРег(СтруктураПараметров.ВидОперации) = ВРег("УстановкаГиперссылки")
				И СтруктураПараметров.Свойство("ТекстСостоянияЭД") Тогда
				// Определим элемент формы.
				НайденныйЭлементФормы = Неопределено;
				Если НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
					НайденныйЭлементФормы = Форма.Элементы.СостояниеЭД;
				КонецЕсли;
				// Зададим особые условия.
				Если Найти(СтруктураПараметров.ТекстСостоянияЭД, "Не сформирован") > 0 Тогда
					СтруктураПараметров.ЗначениеПараметра = Ложь;
				КонецЕсли;
				// Заполним свойство найденного элемента.
				Если НЕ НайденныйЭлементФормы = Неопределено
					И НайденныйЭлементФормы.Вид = ВидПоляФормы.ПолеНадписи Тогда
					НайденныйЭлементФормы.Гиперссылка = СтруктураПараметров.ЗначениеПараметра;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЕстьПравоЧтенияЭД() Тогда
			Если НЕ Форма.Элементы.Найти("ГруппаСостояниеЭД") = Неопределено Тогда
				Форма.Элементы.ГруппаСостояниеЭД.Видимость = Ложь;
			ИначеЕсли НЕ Форма.Элементы.Найти("СостояниеЭД") = Неопределено Тогда
				Форма.Элементы.СостояниеЭД.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с извещениями

// Только для внутренного использования.
Функция ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров) Экспорт
	
	Возврат Ложь; // если не заполняем специфичными даными, то вернуть надо Ложь
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с временными каталогами и файлами

// При необходимости, в функции можно определить каталог для временных файлов,
// отличный от устанавливаемого по умолчанию в библиотеке ЭД.
//
// Парамтеры:
//  ТекущийКаталог - путь к каталогу временных файлов.
//
Процедура ТекущийКаталогВременныхФайлов(ТекущийКаталог) Экспорт
	
	ТекущийКаталог = КаталогВременныхФайлов();
	
КонецПроцедуры

// Получает имя временного файла.
//
// Параметры:
//  ИмяВременногоФайла - Строка - имя временного файла;
//  Расширение - Строка - расширение для временного файла.
//
Процедура ТекущееИмяВременногоФайла(ИмяВременногоФайла, Расширение = "") Экспорт
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа со счет-фактурами

// В процедуре выполняется заполнение реквизитов (дата выставления, признак выставления,
// дата получения, признак получения) документов счета-фактуры, по ключевым событиям,
// описанным в приказе от 25 апреля 2011 г. N 50н.: получение ПДО, ПДП, ИП, ПДОИП.
//
// Параметры:
//  ВладелецЭД - документ-ссылка, ссылка на документ ИБ счет-фактура выданный/полученный.
//  ЭД - справочник-ссылка, ссылка на элемент справочника ЭДПрисоединенныеФайлы.
//
Процедура ЗаполнитьРеквизитыЭСФ(ВладелецЭД, ЭД) Экспорт
	
	ЭСФ = Неопределено;
	ИмяРеквизита = "";
	
	Если ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ Тогда
		
		// Датой выставления покупателю счета-фактуры в электронном виде по телекоммуникационным
		// каналам связи считается дата поступления файла счета-фактуры Оператору ЭДО от продавца, 
		// указанная в подтверждении (ПДПЭСФ) этого Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ДатаВыставления = ЭД.ДатаДокументаОтправителя;
		ИмяРеквизита = "ДатыВыставления";
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ Тогда
		
		// Датой получения покупателем счета-фактуры в электронном виде по телекоммуникационным 
		// каналам связи считается дата направления покупателю Оператором ЭДО файла счета-фактуры продавца, 
		// указанная в подтверждении (ПДОЭСФ) Оператора ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ДатаПолучения = ЭД.ДатаДокументаОтправителя;
		ИмяРеквизита = "ДатыПолучения";
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается выставленным, если продавцу поступило 
		// соответствующее подтверждение (ПДПЭСФ) Оператора ЭДО, при наличии у продавца извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и полученного через Оператора ЭДО.
		// ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ВыставленВЭлектронномВиде = Истина;
		ИмяРеквизита = "ВыставленВЭлектронномВиде";
		
	ИначеЕсли ЭД.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ Тогда
		
		// Счет-фактура в электронном виде считается полученным покупателем, если ему поступило 
		// соответствующее подтверждение (ПДОЭСФ) Оператора ЭДО, при наличии извещения покупателя 
		// о получении счета-фактуры (ИПЭСФ), подписанного ЭЦП покупателя и подтвержденного (ПДОИПЭСФ)
		// Оператором ЭДО.  ПРИКАЗ от 25 апреля 2011 г. N 50н
		
		ЭСФ = ВладелецЭД.ПолучитьОбъект();
		ЭСФ.ПолученВЭлектронномВиде = Истина;
		ИмяРеквизита = "ПолученВЭлектронномВиде";
		
	КонецЕсли;
	
	Если ЭСФ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РежимЗаписи = ?(ЭСФ.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		ЭСФ.Записать(РежимЗаписи);
	Исключение
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'При установке реквизита %1 возникла ошибка. Описание ошибки: ""%1""'"), 
			ИмяРеквизита,
			ЭСФ.Ссылка,
			ИнформацияОбОшибке().Описание);
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Ошибка установки реквизитов счета-фактуры при получении служебного ЭД от оператора'"),
			УровеньЖурналаРегистрации.Ошибка,
			ЭСФ.Метаданные(),
			ЭСФ.Ссылка,
			ТекстОшибки);
	КонецПопытки;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с правами

// Проверяет наличие прав обрабатывать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОбработкиЭД() Экспорт
	
	Возврат (Пользователи.ЭтоПолноправныйПользователь() ИЛИ Пользователи.РолиДоступны("ВыполнениеОбменаЭД"));
	
КонецФункции

// Проверяет наличие прав читать электронный документы.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоЧтенияЭД() Экспорт
	
	Возврат (Пользователи.ЭтоПолноправныйПользователь() ИЛИ Пользователи.РолиДоступны("ВыполнениеОбменаЭД, ЧтениеЭД"));
	
КонецФункции

// Проверяет наличие прав на открытие журнала регистрации.
//
// Возвращаемое значение:
//  Булево - истина или ложь, в зависимости от установленных прав.
//
Функция ЕстьПравоОткрытияЖурналаРегистрации() Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь()
	
КонецФункции

Функция ЕстьПравоНастройкиПараметровЭД() Экспорт
	
	Возврат (Пользователи.РолиДоступны("ПолныеПрава") ИЛИ Пользователи.РолиДоступны("НастройкаПараметровЭД"));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции

// Разбирает из переданной строки фамилию, имя и отчество.
//
// Параметры
//  ПолноеНаименование - строка с наименованием;
//  Фамилия - строка с фамилией;
//  Имя - строка с именем;
//  Отчество - строка с отчеством.
//
Процедура РазобратьНаименованиеФизЛица(ПолноеНаименование, Фамилия = " ", Имя = " ", Отчество = " ") Экспорт
	
КонецПроцедуры

// Функция формирует прокси по настройкам прокси (передаваемому параметру)
//
// Параметры:
//  НастройкаПроксиСервера - Соответствие:
//  ИспользоватьПрокси - использовать ли прокси-сервер
//  НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//  ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//  Сервер       - адрес прокси-сервера
//  Порт         - порт прокси-сервера
//  Пользователь - имя пользователя для авторизации на прокси-сервере
//  Пароль       - пароль пользователя
//
Функция ПолучитьНастройкиПроксиСервера(НастройкаПроксиСервера) Экспорт
	
	НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.ПолучитьНастройкиПроксиНаСервере1СПредприятие();
	
	Если НастройкаПроксиСервера = Неопределено Тогда
		
		НастройкаПроксиСервера = Новый Соответствие();
		НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", Истина);
		НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", Истина);
		НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
		НастройкаПроксиСервера.Вставить("Сервер", "");
		НастройкаПроксиСервера.Вставить("Порт", "");
		НастройкаПроксиСервера.Вставить("Пользователь", "");
		НастройкаПроксиСервера.Вставить("Пароль", "");
		
	КонецЕсли;

	
КонецФункции

// Выполняется проверка возможности корректного чтения Пакета ЭД.
// Необходимость данной проверки возникает при работе с данными внешней информационной базы (через com-соединение).
//
// Параметры:
//  ПакетЭД - ДокументСсылка.ПакетЭД - исследуемый пакет электронных документов.
//  ЧтениеПакетаВозможно - булево/неопределено - Ложь - чтение пакета не будет выполняться, во всех остальных случаях,
//    (включая пустое значение) пакет будет прочитан.
//
Процедура ОпределитьВозможностьЧтенияДвоичныхДанныхПакетаЭД(ПакетЭД, ЧтениеПакетаВозможно) Экспорт
	
	
	
КонецПроцедуры

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
// Если не задан альтернативный алгоритм получения значений реквизитов (процедура пуста), то используется функция БСП:
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ИменаРеквизитов).
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИменаРеквизитов - Строка или Структура - если Строка, то имена реквизитов, 
//               перечисленные через запятую, в формате требований к свойствам структуры.
//               Например, "Код, Наименование, Родитель".
//               Если Структура, то в качестве ключа передается псевдоним поля для
//               возвращаемой структуры с результатом, а в качестве значения (опционально) 
//               - фактическое имя поля в таблице. 
//               Если значение не определено, то имя поля берется из ключа.
//  СтруктураДанных - содержит список свойств, как список имен в строке
//                 ИменаРеквизитов, со значениям реквизитов, прочитанных
//                 из информационной базы.
// 
Процедура ПолучитьСтруктуруЗначенийРеквизитов(Ссылка, ИменаРеквизитов, СтруктураДанных) Экспорт
	
	
	
КонецПроцедуры

// Переопреледеляет выводимое сообщение об ошибке
// КодОшибки - строка
// ТекстОшибки - строка
Процедура ИзменитьСообщениеОбОшибке(КодОшибки, ТекстОшибки) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКИИ

///////////////////////////////////////////////////////////////////////////////
// Формирование документов ИБ на основании электронных документов

Процедура ЗаполнитьСтрокуТЧ(ТЗ, ДанныеЗаполнения, ДеревоРазбора)
	
	НовСтрока = ТЗ.Добавить();
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		ИмяРеквизитаВБД = ТекСтрока.Реквизит;
		
		Если ИмяРеквизитаВБД = "Описание" Тогда
			ИмяРеквизитаВБД = "Содержание";
		КонецЕсли;
		
		Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
		НовСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначениеРеквизитаДерева(СтрокаДерева, ИмяРеквизита, ВключатьПодчиненные = Ложь, ДеревоРазбора = Неопределено)
	
	Результат = Неопределено;
	
	Если СтрокаДерева.Строки.Количество()>0 Тогда 
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит", ВключатьПодчиненные);
	Иначе // передали строку с реквизитом
		НайденнаяСтрока = СтрокаДерева;
	КонецЕсли;
	Если НайденнаяСтрока <> Неопределено Тогда
		Результат = НайденнаяСтрока.ЗначениеРеквизита;
		//
		Если ИмяРеквизита = "СтавкаНДС" Тогда
			Результат = НайтиПеречисление("НДС", Результат);
		ИначеЕсли ИмяРеквизита = "ВариантОплаты" Тогда
			Если Результат=Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения
			ИначеЕсли Результат=Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления 
			ИначеЕсли Результат=Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки Тогда
				Результат = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления
			ИначеЕсли Результат=Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки
			ИначеЕсли Результат=Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения
			ИначеЕсли Результат=Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления Тогда
				Результат = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки
			КонецЕсли
		Иначе
			// если реквизит ссылочного типа (передали реквизит ДеревоРазбора), тогда нашли всего лишь индекс строки
			Если ЗначениеЗаполнено(ДеревоРазбора) Тогда 
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(Результат, "ИндексСтроки", Истина);
				Если НайденнаяСтрока <> Неопределено Тогда
					Результат = НайденнаяСтрока.СсылкаНаОбъект;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НомерПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("ДатаПоДаннымПоставщика");
	ТЗ.Колонки.Добавить("НомерПоДаннымКлиента");
	ТЗ.Колонки.Добавить("ДатаПоДаннымКлиента");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// реквизиты для связки "заказ - поступление"
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымКлиента", 		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымКлиента",  		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымКлиента"));
	ДанныеЗаполненияШапки.Вставить("НомерПоДаннымПоставщика", 	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерПоДаннымПоставщика"));
	ДанныеЗаполненияШапки.Вставить("ДатаПоДаннымПоставщика",  	ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаПоДаннымПоставщика"));
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	// а также НомерСтрокиДокументаПоставщика
	НомерСтрокиДокумента = 0;
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки

	Для Каждого ТекСтрока Из ТЗ Цикл 
		ТекСтрока.КоличествоУпаковок =ТекСтрока.Количество;
		// заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = ТекСтрока.Упаковка.Коэффициент;
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
		
		ТекСтрока.СуммаСНДС = ТекСтрока.Сумма;
		
		НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
		ТекСтрока.НомерСтрокиДокументаПоставщика = НомерСтрокиДокумента;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеЗаполненияШапки = Новый Структура;
	ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	НомерСчетаФактуры = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры");
	Если ЗначениеЗаполнено(НомерСчетаФактуры) Тогда
		ДанныеЗаполненияШапки.Вставить("Корректировочный", истина);
		НомерИсправления = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления");
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", НомерИсправления);
		ДатаИсправления = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправления");
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ДатаИсправления);
		Если ЗначениеЗаполнено(НомерИсправления) 
			 И ЗначениеЗаполнено(ДатаИсправления) Тогда
			ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		КонецЕсли;
		ДанныеЗаполненияШапки.Вставить("НомерИсходногоДокумента", НомерСчетаФактуры);
		ДанныеЗаполненияШапки.Вставить("ДатаИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("НомерИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправленияСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправленияИсходногоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаИсправленияСчетаФактуры"));
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ДатаПолучения", ТекущаяДатаСеанса());
	
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления")) Тогда
		ДанныеЗаполненияШапки.Вставить("Исправление", Истина);
		ДанныеЗаполненияШапки.Вставить("НомерИсправления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерИсправления"));
		ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки,  "ДатаИсправления"));
	КонецЕсли;
	
	ВалКод = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВалКод");
	Валюта = НайтиСсылкуНаОбъект("Валюты", ВалКод);
	ДанныеЗаполненияШапки.Вставить("Валюта", Валюта);
	
	// Получим данные по комиссионеру
	КомиссионерНаименование = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КомиссионерНаименование");
	Если ЗначениеЗаполнено(КомиссионерНаименование) Тогда
		// Cчет-фактура выставлена комитентом
		
		// Организацию определим по реквизитам комиссионера
		ДанныеЗаполненияШапки.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", 
			ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КомиссионерИНН"),
			ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "КомиссионерКПП")));
		
		ДанныеЗаполненияШапки.Вставить("Покупатель", СсылкаНаОбъектПоИННКПП("Контрагенты", 
			ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПокупательИНН"), 
			ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПокупательКПП")));
			
		ДанныеЗаполненияШапки.Вставить("ТипСчетаФактуры", Перечисления.ТипыПолученныхСчетовФактур.ВыставленныйКомитентом);
		
	Иначе
		// Cчет-фактура на поступление
		ДанныеЗаполненияШапки.Вставить("Организация", СсылкаНаОбъектПоИННКПП("Организации", 
			ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПокупательИНН"), 
			ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПокупательКПП")));
		
		ДанныеЗаполненияШапки.Вставить("ТипСчетаФактуры", Перечисления.ТипыПолученныхСчетовФактур.НаПоступление);
		
	КонецЕсли;
	
	// Данные по контрагенту
	ДанныеЗаполненияШапки.Вставить("Контрагент", СсылкаНаОбъектПоИННКПП("Контрагенты", 
		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПродавецИНН"), 
		ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ПродавецКПП")));
		
	Если ЗначениеЗаполнено(ДанныеЗаполненияШапки.Контрагент) Тогда
		ДанныеЗаполненияШапки.Вставить("Партнер", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполненияШапки.Контрагент, "Партнер"));
	КонецЕсли;
	
	// Получим документы-основания
	СтрокаДокументыОснования = СтрокаДляЗагрузки.Строки.Найти("ДокументыОснования");
	Если СтрокаДокументыОснования <> Неопределено Тогда
		МассивДокументовОснований = Новый Массив;
		Для Каждого Строка Из СтрокаДокументыОснования.Строки Цикл
			Если ЗначениеЗаполнено(Строка.СсылкаНаОбъект) Тогда
				МассивДокументовОснований.Добавить(Строка.СсылкаНаОбъект);
			КонецЕсли;
		КонецЦикла;
		ДанныеЗаполненияШапки.Вставить("ДокументыОснования", МассивДокументовОснований);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("ПолученВЭлектронномВиде", Истина);
	
	Возврат ДанныеЗаполненияШапки;
	
КонецФункции

Функция ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ПоступлениеУслугПрочихАктивов.ПустаяСсылка().Расходы.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("НоменклатураПоставщика");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполненияШапки.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда // примитивный тип
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
				КонецЕсли;
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
	Если ЗначениеЗаполнено(ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры")) Тогда // указана счет-фактура
		ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерСчетаФактуры"));
		ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаСчетаФактуры"));
	Иначе
		ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
		ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	КонецЕсли;
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика,
	// а также НомерСтрокиДокументаПоставщика
	НомерСтрокиДокумента = 0;
	
	Для Каждого ТекСтрока Из ТЗ Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Содержание) Тогда
			ТекСтрока.Содержание = ТекСтрока.НоменклатураПоставщика;
		КонецЕсли;
		ТекСтрока.СуммаСНДС = ТекСтрока.Сумма;
	КонецЦикла;

	ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Расходы", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ЧастичнаяОплата = истина;
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе
			ЧастичнаяОплата = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения
		
	СтрокаСрокПлатежа = СтрокаДляЗагрузки.Строки.Найти("ДатаОкончанияДействияСчета", "Реквизит");
	ДанныеЗаполненияШапки.Вставить("СрокПлатежа", СтрокаСрокПлатежа.ЗначениеРеквизита);
	
	СтрокаСуммаДокумента = СтрокаДляЗагрузки.Строки.Найти("СуммаИтог", 		"Реквизит");
	СтрокаСуммаНДС 		 = СтрокаДляЗагрузки.Строки.Найти("СуммаНалогаИтог","Реквизит");
	
	Если ЧастичнаяОплата Тогда
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита + СтрокаСуммаНДС.ЗначениеРеквизита);
	Иначе
		ДанныеЗаполненияШапки.Вставить("СуммаДокумента", СтрокаСуммаДокумента.ЗначениеРеквизита);
	КонецЕсли;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "НомерДокументаОснования"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ДатаДокументаОснования"));
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		Иначе // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	// спец.значения 
	
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПоставщика.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПоставщика.Упаковка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказКлиента.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказКлиента.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
    КонецЦикла;
		
		
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ЗаказПоставщику.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ЗаказПоставщику.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();
	ТЗ.Колонки.Добавить("СуммаСкидки");
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	//Переносим значения из колонки СуммаСкидки в СуммаРучнойСкидки, т.к. название реквизита табличной части документа
	//не совпадает с названием реквизита СтрокиДляЗагрузки
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("СуммаСкидки"),"СуммаРучнойСкидки");
	// заполним Характеристики и Упаковки по соответствию из НоменклатурыПоставщика
	Для Каждого ТекСтрока Из ТЗ Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Характеристика) Тогда
				ТекСтрока.Характеристика = ТекСтрока.НоменклатураПоставщика.Характеристика;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика.Упаковка) Тогда
				ТекСтрока.Упаковка = ТекСтрока.НоменклатураПоставщика.Упаковка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 			   ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары",			   ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;
	
КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионера.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	ТЗЭтапыГрафикаОплаты = Документы.ОтчетКомиссионера.ПустаяСсылка().ЭтапыГрафикаОплаты.ВыгрузитьКолонки();  	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			
			НоваяСтрока = ТЗ.Добавить();
			Для Каждого ТекСтрока Из СтрокаРеквизита.Строки Цикл
				
				ИмяРеквизитаВБД = ТекСтрока.Реквизит;
				
				Если ИмяРеквизитаВБД = "ДополнительныеРеквизиты" Тогда
					
					СтруктураДополнительныхРеквизитов = ТекСтрока.ЗначениеРеквизита;
					Если СтруктураДополнительныхРеквизитов.Свойство("ДатаПродажи") Тогда
						НоваяСтрока["ДатаСчетаФактурыКомиссионера"] = СтруктураДополнительныхРеквизитов.ДатаПродажи[0];
					КонецЕсли;
					
					// Заполним информацию о покупателе
					ДанныеПокупателя = Новый Структура("НаименованиеПолное, ИНН, КПП, ЮрАдрес, ФактАдрес");
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательНаименование") Тогда
						ДанныеПокупателя.НаименованиеПолное = СтруктураДополнительныхРеквизитов.ПокупательНаименование[0];
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательИНН") Тогда
						ДанныеПокупателя.ИНН = СтруктураДополнительныхРеквизитов.ПокупательИНН[0];
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательКПП") Тогда
						ДанныеПокупателя.КПП = СтруктураДополнительныхРеквизитов.ПокупательКПП[0];
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательЮрАдрес") Тогда
						ДанныеПокупателя.ЮрАдрес = СтруктураДополнительныхРеквизитов.ПокупательЮрАдрес[0];
					КонецЕсли;
					
					Если СтруктураДополнительныхРеквизитов.Свойство("ПокупательФактАдрес") Тогда
						ДанныеПокупателя.ФактАдрес = СтруктураДополнительныхРеквизитов.ПокупательФактАдрес[0];
					КонецЕсли;
					
					// Попробуем найти среди существующих
					Покупатель = СсылкаНаОбъектПоИННКПП("Контрагенты", ДанныеПокупателя.ИНН, ДанныеПокупателя.КПП);
					
					Если НЕ ЗначениеЗаполнено(Покупатель) Тогда
						Покупатель = СоздатьКонтрагентаВБД(ДанныеПокупателя)
					КонецЕсли;
					
					НоваяСтрока.Покупатель = Покупатель;
					
				КонецЕсли;
				
				Если ТЗ.Колонки.Найти(ИмяРеквизитаВБД) <> Неопределено Тогда
					НайденноеЗначение = ПолучитьЗначениеРеквизитаДерева(ТекСтрока, ТекСтрока.Реквизит, Истина, ДеревоРазбора);
					НоваяСтрока[ИмяРеквизитаВБД] = НайденноеЗначение;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли СтрокаРеквизита.Реквизит = "ЭтапыГрафикаОплаты" Тогда	
			ЗаполнитьСтрокуТЧ(ТЗЭтапыГрафикаОплаты, СтрокаРеквизита.Строки, ДеревоРазбора);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = ТекСтрока.Упаковка.Коэффициент;
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
		
		ТекущийПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(ТекСтрока.СтавкаНДС);
		ТекСтрока.СуммаПродажиНДС = Окр(ТекСтрока.СуммаПродажи * ТекущийПроцентНДС / (1 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЦикла;
	
	Если ТЗ.Итог("СуммаПродажиНДС")>0 Тогда
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
	Иначе
		ДанныеЗаполненияШапки.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	КонецЕсли;
	
	ТЗ.ЗагрузитьКолонку(ТЗ.ВыгрузитьКолонку("Сумма"), "СуммаСНДС");
	ТЗ.Колонки.Удалить("Сумма");
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	ДанныеДляОбъекта.Вставить("ЭтапыГрафикаОплаты",ТЗЭтапыГрафикаОплаты); 
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура;
	ДанныеЗаполненияШапки = Новый Структура;
	ТЗ = Документы.ОтчетКомиссионераОСписании.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
   	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		Если СтрокаРеквизита.Строки.Количество()=0 Тогда // примитивный тип
			Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Если ЗначениеЗаполнено(Реквизит) Тогда
				ДанныеЗаполненияШапки.Вставить(СтрокаРеквизита.Реквизит, Реквизит);
			КонецЕсли;
		ИначеЕсли СтрокаРеквизита.Реквизит = "СтрокаТЧ" Тогда // добавим строку ТЧ
			ЗаполнитьСтрокуТЧ(ТЗ, СтрокаРеквизита.Строки, ДеревоРазбора); 
		КонецЕсли;
	КонецЦикла;
	
	ДанныеЗаполненияШапки.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполненияШапки.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	НомерСтрокиДокумента = 0;
	Для Каждого ТекСтрока Из ТЗ Цикл 
		// заполним Количество с учетом единиц измерения
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
				ТекКоэффициент = ТекСтрока.Упаковка.Коэффициент;
			Иначе
				ТекКоэффициент = 1;
			КонецЕсли;
			ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок*ТекКоэффициент;
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);
	ДанныеДляОбъекта.Вставить("Товары", ТЗ);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция ПодготовитьСтруктуруДляКорректировкиПоступения(СтрокаДляЗагрузки, ДеревоРазбора)
	
	ДанныеДляОбъекта = Новый Структура();
	ДанныеЗаполнения = Новый Структура();
	Товары = Документы.КорректировкаПоступления.ПустаяСсылка().Товары.ВыгрузитьКолонки();
	
	Для Каждого СтрокаРеквизита Из СтрокаДляЗагрузки.Строки Цикл
		
		Если СтрокаРеквизита.Реквизит = "СписокОписаний" Тогда
			СтрокаРеквизитаОписанийРабот = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
			Для Каждого СтрокаРеквизитаОписания Из СтрокаРеквизитаОписанийРабот.Строки Цикл
				Если СтрокаРеквизитаОписания.Строки.Количество() = 0 Тогда
					Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизитаОписания, СтрокаРеквизитаОписания.Реквизит, Истина, ДеревоРазбора);
					Если ЗначениеЗаполнено(Реквизит) Тогда
						ДанныеЗаполнения.Вставить(СтрокаРеквизитаОписания.Реквизит, Реквизит);
					КонецЕсли;
				Иначе
					ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизитаОписания.Строки, ДеревоРазбора);
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			Если СтрокаРеквизита.Строки.Количество() = 0 Тогда
				Реквизит = ПолучитьЗначениеРеквизитаДерева(СтрокаРеквизита, СтрокаРеквизита.Реквизит, Истина, ДеревоРазбора);
				Если ЗначениеЗаполнено(Реквизит) Тогда
					Если СтрокаРеквизита.Реквизит = "Основание" Тогда
						ИмяРеквизита = "ДокументОснование";
					Иначе
						ИмяРеквизита = СтрокаРеквизита.Реквизит;
					КонецЕсли;
					ДанныеЗаполнения.Вставить(ИмяРеквизита, Реквизит);
				КонецЕсли;
				
			Иначе // добавим строку ТЧ
				ЗаполнитьСтрокуТЧ(Товары, СтрокаРеквизита.Строки, ДеревоРазбора); 
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗаполнения.Вставить("НомерВходящегоДокумента",ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Номер"));
	ДанныеЗаполнения.Вставить("ДатаВходящегоДокумента", ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "Дата"));
	
	// Дополним ДанныеЗаполнения реквизитами основания
	ДокументОснование = Неопределено;
	Если ДанныеЗаполнения.Свойство("ДокументОснование") И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование) Тогда
		
		ДокументОснование = ДанныеЗаполнения.ДокументОснование; 
		
		ТекстЗапроса = "";
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда 
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Склад				 КАК Склад,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.Сделка				 КАК Сделка,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	ДанныеДокумента.ПоступлениеПоЗаказам КАК ПоступлениеПоЗаказам
			|ИЗ
			|	Документ.ПоступлениеТоваровУслуг КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов") Тогда 
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ДанныеДокумента.Ссылка				 КАК ДокументОснование,
			|	ДанныеДокумента.Партнер				 КАК Партнер,
			|	ДанныеДокумента.Контрагент			 КАК Контрагент,
			|	ДанныеДокумента.Соглашение			 КАК Соглашение,
			|	ДанныеДокумента.Организация			 КАК Организация,
			|	ДанныеДокумента.Договор				 КАК Договор,
			|	ДанныеДокумента.Валюта				 КАК Валюта,
			|	ДанныеДокумента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ДанныеДокумента.НалогообложениеНДС	 КАК НалогообложениеНДС,
			|	ДанныеДокумента.Подразделение		 КАК Подразделение,
			|	ДанныеДокумента.ЦенаВключаетНДС		 КАК ЦенаВключаетНДС,
			|	Ложь								 КАК ПоступлениеПоЗаказам
			|
			|ИЗ
			|	Документ.ПоступлениеУслугПрочихАктивов КАК ДанныеДокумента
			|ГДЕ
			|	ДанныеДокумента.Ссылка = &ДокументОснование";
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				ДанныеЗаполнения.Вставить(Колонка.Имя);
			КонецЦикла;
			
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если Товары.Итог("СуммаНДС") > 0 Тогда
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС);
			ДанныеЗаполнения.Вставить("ЦенаВключаетНДС",    Истина);
		Иначе	
			ДанныеЗаполнения.Вставить("НалогообложениеНДС", Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
			ДанныеЗаполнения.Вставить("ЦенаВключаетНДС",    Ложь);
		Конецесли;
		
	КонецЕсли;
	
	// Вид операции ЭД определяет хоз. операцию документа
	ВидОперацииЭД = ПолучитьЗначениеРеквизитаДерева(СтрокаДляЗагрузки, "ВидОперации", Истина, ДеревоРазбора);
	Если ВидОперацииЭД = Перечисления.ВидыОперацийЭД.Исправление Тогда
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ИсправлениеОшибок);
	Иначе
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КорректировкаПоСогласованиюСторон);
	КонецЕсли;
	
	ЭтоКорректировкаПоступленияУслуг = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов"));
	Для Каждого ТекСтрока Из Товары Цикл 
		ТекСтрока.КоличествоУпаковок = ТекСтрока.Количество;
		// Заполним Количество с учетом единиц измерения
		Если ЗначениеЗаполнено(ТекСтрока.Упаковка) Тогда
			ТекКоэффициент = ТекСтрока.Упаковка.Коэффициент;
		Иначе
			ТекКоэффициент = 1;
		КонецЕсли;
		ТекСтрока.Количество = ТекСтрока.КоличествоУпаковок * ТекКоэффициент;
		
		Если ЭтоКорректировкаПоступленияУслуг Тогда
			ТекСтрока.Содержание = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекСтрока.НоменклатураПоставщика, "Наименование");
			ТекСтрока.НоменклатураПоставщика = Неопределено;
		КонецЕсли;
		
		ТекСтрока.СуммаСНДС = ТекСтрока.Сумма + ?(ДанныеЗаполнения.ЦенаВключаетНДС, 0, ТекСтрока.СуммаНДС);
		
	КонецЦикла;
	
	ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполнения);
	ДанныеДляОбъекта.Вставить("Товары", Товары);
	
	Возврат ДанныеДляОбъекта;

КонецФункции

Функция НайтиСоздатьПоступлениеТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено, Записывать = Истина)
	
	Перем ВозвращаемоеЗначение;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияТоваровУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	РеквизитыИБКонтрагента = Новый Структура;
	
	// попробуем найти заказ поставщику
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	ДокументОбъект.ЗаказПоставщику = НайденныйДок;
	
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		ДокументОбъект.ПоступлениеПоЗаказам = Истина;
	КонецЕсли;

	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	Если ЗначениеЗаполнено(ДокументОбъект.НомерСчетаФактуры) И ЗначениеЗаполнено(ДокументОбъект.ДатаСчетаФактуры) Тогда
		ДокументОбъект.ПредъявленСчетФактура = Истина;
	Иначе
		ДокументОбъект.ПредъявленСчетФактура = Ложь;
	КонецЕсли;
	
	ЕстьЗаказВТЧ = Ложь;
	Для Каждого Строка Из ДанныеДляЗагрузки.Товары Цикл
		РеквизитыИБ = Новый Структура;
		Если ЗначениеЗаполнено(Строка.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", Строка.НомерПоДаннымКлиента);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.ДатаПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Дата", Строка.ДатаПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество() > 0 ИЛИ РеквизитыИБКонтрагента.Количество() > 0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			Строка.ЗаказПоставщику = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДокументОбъект.Контрагент, РеквизитыИБ);
			ЕстьЗаказВТЧ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Отказ = Ложь;
	
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(ДокументОбъект.Товары, Отказ);
	
	Если ЕстьЗаказВТЧ Тогда
		ДанныеДляЗагрузки.Товары.Свернуть("ЗаказПоставщику");
		Если ДанныеДляЗагрузки.Товары.Количество()>1 Тогда
			ДокументОбъект.ПоступлениеПоЗаказам=Истина;
			ДанныеПривязки = ПолучитьДанныеПривязкиСтрокЗаказов(ДокументОбъект.Товары.Выгрузить(,"Номенклатура, Количество, ЗаказПоставщику"));
			индекс = 0;
			Для Каждого Строка ИЗ ДанныеПривязки Цикл
				ДокСтрокаТовары = документОбъект.Товары.Получить(Индекс);
				ЗаполнитьЗначенияСвойств(ДокСтрокаТовары, Строка);
				Если НЕ ЗначениеЗаполнено(ДокСтрокаТовары.КодСтроки) ИЛИ ДокСтрокаТовары.КодСтроки = 0 Тогда
					ДокСтрокаТовары.ЗаказПоставщику = Документы.ЗаказПоставщику.ПустаяСсылка();
				КонецЕсли;
				Индекс = индекс + 1;
			КонецЦикла
		ИначеЕсли ДанныеДляЗагрузки.Товары.Количество()=1 Тогда
			ДокументОбъект.ЗаказПоставщику = ДанныеДляЗагрузки.Товары[0].ЗаказПоставщику;
		КонецЕсли
	КонецЕсли;
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	Если ДокументОбъект.Товары.Итог("СуммаНДС") = 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		ДокументОбъект.ЦенаВключаетНДС = Ложь;
	Иначе
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		ДокументОбъект.ЦенаВключаетНДС = Истина;
	КонецЕсли;
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		Если Записывать Тогда
			ДокументОбъект.Записать(РежимЗаписи);
			ВозвращаемоеЗначение = ДокументОбъект.Ссылка;
		Иначе
			ВозвращаемоеЗначение = ДокументОбъект;
		КонецЕсли;
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

Функция НайтиСоздатьСчетФактуру(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляСчетаФактуры(СтрокаДляЗагрузки, ДеревоРазбора);
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
		
	Иначе
		УстановитьПривилегированныйРежим(истина);
		ДокументОбъект = Документы.СчетФактураПолученный.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеДляЗагрузки);
		ЗаполнитьЗначенияСвойств(ДокументОбъект, ДанныеДляЗагрузки);
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.ДополнительныеСвойства.Вставить("ЕстьСоглашение", Истина);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеДляЗагрузки);
	
	// Заполним ТЧ ДокументыОснования
	Если ДанныеДляЗагрузки.Свойство("ДокументыОснования") Тогда
		ДокументОбъект.ДокументыОснования.Очистить();
		Для Каждого ДокументОснование Из ДанныеДляЗагрузки.ДокументыОснования Цикл
			НоваяСтрока = ДокументОбъект.ДокументыОснования.Добавить();
			НоваяСтрока.ДокументОснование = ДокументОснование;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;

КонецФункции

Функция НайтиСоздатьПоступлениеУслуг(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляПоступленияУслуг(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ПоступлениеУслугПрочихАктивов.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	// попробуем найти заказ поставщику
	НайденныйДок = Неопределено;
	Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
		РеквизитыИБКонтрагента = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
			РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
		КонецЕсли;
		РеквизитыИБ = Новый Структура;
		Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
			РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
		КонецЕсли;
		Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
			НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
		КонецЕсли;
	КонецЕсли;
	Если Значениезаполнено(НайденныйДок) ТОгда
		ДокументОбъект.ЗаказПоставщику = НайденныйДок;
	КонецЕсли;

	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	Если ЗначениеЗаполнено(ДокументОбъект.НомерСчетаФактуры) И ЗначениеЗаполнено(ДокументОбъект.ДатаСчетаФактуры) Тогда
		ДокументОбъект.ПредъявленСчетФактура = Истина;
	Иначе
		ДокументОбъект.ПредъявленСчетФактура = Ложь;
	КонецЕсли;
	
	ДокументОбъект.Расходы.Загрузить(ДанныеДляЗагрузки.Расходы);
	
	Если ДокументОбъект.Расходы.Итог("СуммаНДС") > 0 Тогда
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		ДокументОбъект.ЦенаВключаетНДС = Истина;
	Иначе	
		ДокументОбъект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
		ДокументОбъект.ЦенаВключаетНДС = Ложь;
	Конецесли;
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Расходы, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьЗаявкуНаРасходованиеДенежныхСредств(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаявкиНаРасходование(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
	Иначе  // создаем новый
		ДокументОбъект = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
			
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.Свойство("СрокПлатежа") Тогда 
		ДокументОбъект.ЖелательнаяДатаПлатежа = ДанныеЗаполнения.СрокПлатежа;
	КонецЕсли;
	
	Если ДанныеЗаполнения.Свойство("НомерДокументаОснования") 
	   И ДанныеЗаполнения.Свойство("ДатаДокументаОснования") 
	   И ЗначениеЗаполнено(ДанныеЗаполнения.НомерДокументаОснования)
	   И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаДокументаОснования) Тогда
	   	РеквизитыИБ = Новый Структура;
		РеквизитыИБ.Вставить("Номер", 	ДанныеЗаполнения.НомерДокументаОснования);
        РеквизитыИБ.Вставить("Дата", 	ДанныеЗаполнения.ДатаДокументаОснования);
		НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ);
		Если ЗначениеЗаполнено(НайденныйДок) Тогда
			ДокументОбъект.ДокументОснование = НайденныйДок;
		КонецЕсли;	
	КонецЕсли;   
	 	
	ДокументОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.НеСогласована;
	
	// табл.часть расшифровка
	НовСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
	НовСтрока.ВалютаВзаиморасчетов 	= ДокументОбъект.Валюта;
	НовСтрока.Сумма 				= ДокументОбъект.СуммаДокумента;
	НовСтрока.СуммаВзаиморасчетов 	= ДокументОбъект.СуммаДокумента;
    Если ДанныеЗаполнения.Свойство("Партнер") Тогда
		НовСтрока.Партнер = ДанныеЗаполнения.Партнер;
	КонецЕсли;
	Если ЗначениеЗаполнено(НайденныйДок) Тогда
		НовСтрока.Заказ = НайденныйДок;
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьРегистрацияЦен(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляРегистрацииЦен(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.РегистрацияЦенНоменклатурыПоставщика.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		НомерВПределахДня = Документы.РегистрацияЦенНоменклатурыПоставщика.РассчитатьНомерВПределахДня(ТекущаяДата(),ДокументОбъект.Ссылка);
		ДокументОбъект.Дата = Документы.РегистрацияЦенНоменклатурыПоставщика.РассчитатьДатуДокумента(ТекущаяДата(),НомерВПределахДня);
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьЗаказКлиента(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";   
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаКлиента(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
			
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымКлиента", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымКлиента", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
				РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ЗаказТовара, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		Если ДанныеЗаполнения.Свойство("ДополнительнаяИнформация") Тогда
			ДанныеЗаполнения.Вставить("ДопИнф", ДанныеЗаполнения.ДополнительнаяИнформация);
			ДанныеЗаполнения.Удалить("ДополнительнаяИнформация");
		КонецЕсли;
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("ДопИнф") Тогда
			ДокументОбъект.ДополнительнаяИнформация = ДанныеЗаполнения.ДопИнф;
		КонецЕсли;
		ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
		
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда
		Для Каждого Строка из ДокументОбъект.Товары Цикл
			Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
		КонецЦикла	
	КонецЕсли;	
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоПродажи(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ДанныеДляЗагрузки.Шапка.СуммаИтог;
	
	Если ЗначениеЗаполнено(ДанныеДляЗагрузки.Шапка.СуммаНалогаИтог) Тогда
		ДокументОбъект.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	Иначе	
		ДокументОбъект.НалогообложениеНДС=Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС
	КонецЕсли;	
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьЗаказПоставщику(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляЗаказаПоставщику(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе // попробуем найти по РеквизитыИБ и РеквизитыИБКонтрагента
		НайденныйДок = Неопределено;
		Если ДанныеЗаполнения.Свойство("Контрагент") Тогда
			РеквизитыИБКонтрагента = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("НомерПоДаннымПоставщика", ДанныеЗаполнения.НомерПоДаннымПоставщика);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымПоставщика") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымПоставщика) Тогда
				РеквизитыИБКонтрагента.Вставить("ДатаПоДаннымПоставщика", ДанныеЗаполнения.ДатаПоДаннымПоставщика);
			КонецЕсли;
			РеквизитыИБ = Новый Структура;
			Если ДанныеЗаполнения.Свойство("НомерПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.НомерПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Номер", ДанныеЗаполнения.НомерПоДаннымКлиента);
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПоДаннымКлиента") И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаПоДаннымКлиента) Тогда
				РеквизитыИБ.Вставить("Дата", ДанныеЗаполнения.ДатаПоДаннымКлиента);
			КонецЕсли;
			Если РеквизитыИБ.Количество()>0 ИЛИ РеквизитыИБКонтрагента.Количество()>0 Тогда // есть еще реквизиты поиска, кроме Контрагента
				НайденныйДок = НайтиДокумент(Перечисления.ВидыЭД.ОтветНаЗаказ, ДанныеЗаполнения.Контрагент, РеквизитыИБ, РеквизитыИБКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(НайденныйДок) Тогда // нашли документ, вернем ссылку, чтоб просто привязать ЭД
			ДокументОбъект = НайденныйДок.ПолучитьОбъект();
			Возврат ДокументОбъект.Ссылка;
		КонецЕсли;
		ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.НеСогласован;
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Если ДокументОбъект.ЦенаВключаетНДС Тогда
		Для Каждого Строка из ДокументОбъект.Товары Цикл
			Строка.Сумма = Строка.Сумма + Строка.СуммаНДС;
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	// склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионера(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионера.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Для Каждого Строка ИЗ ДокументОбъект.Товары Цикл
		Строка.Сумма = Строка.СуммаСНДС - Строка.СуммаНДС;
	КонецЦикла;	
	
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(ДанныеДляЗагрузки.ЭтапыГрафикаОплаты);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьОтчетКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляОтчетаКомиссионераОСписании(СтрокаДляЗагрузки, ДеревоРазбора);
	
	Если ДанныеДляЗагрузки.Свойство("Шапка") Тогда 
		ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	КонецЕсли; 
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
        КонецЕсли;
	Иначе  // создаем новый
		ДокументОбъект = Документы.ОтчетКомиссионераОСписании.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина; 
	
	// вручную переопределим, если требуется
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
		
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
		
	// сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

Функция НайтиСоздатьКорректировкуПоступления(СтрокаДляЗагрузки, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Текст = "";
	ДанныеДляЗагрузки = ПодготовитьСтруктуруДляКорректировкиПоступения(СтрокаДляЗагрузки, ДеревоРазбора);
	ДанныеЗаполнения = ДанныеДляЗагрузки.Шапка;
	
	РежимЗаписи = РежимЗаписиДокумента.Запись;
	Если ЗначениеЗаполнено(СсылкаНаВладельца) Тогда // получены изменения по существующему документу
		ДокументОбъект = СсылкаНаВладельца.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда 
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
			Текст = НСтр("ru = 'Операция возможна только для непроведенных документов!'");
		КонецЕсли;
	Иначе // создаем новый
		ДокументОбъект = Документы.КорректировкаПоступления.СоздатьДокумент();
		ДокументОбъект.Заполнить(ДанныеЗаполнения);
		ДокументОбъект.Дата = ТекущаяДата();
		ДокументОбъект.УстановитьНовыйНомер();
	КонецЕсли;
	ДокументОбъект.ОбменДанными.Загрузка = Истина;
	
	ДокументОбъект.Товары.Загрузить(ДанныеДляЗагрузки.Товары);
	
	Отказ = Ложь;
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(ДокументОбъект.Товары, Отказ);
	
	ПерезаполнениеЗначенийРеквизитовШапки(ДокументОбъект, ДанныеЗаполнения);
	
	// Склады в ТЧ
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоЗакупки(ДокументОбъект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(ДокументОбъект.Склад, СкладГруппа, ДокументОбъект.Товары, Истина);
	
	// Заполним расхождения
	Если ЗначениеЗаполнено(ДокументОбъект.ДокументОснование) Тогда
		Документы.КорректировкаПоступления.ЗаполнитьРасхождения(ДокументОбъект);
	КонецЕсли;
	
	// Сумма документа
	ДокументОбъект.СуммаДокумента = ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(ДокументОбъект.Товары, ДокументОбъект.ЦенаВключаетНДС);
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписи);
	Исключение
		Сообщить(Текст);
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Заполнение документа на основе ЭД. %1'"), Текст);
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка, ДокументОбъект.Метаданные(), СсылкаНаВладельца, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// Формирование данных для электронных документов

// Заполняет соответствующий тип адреса переданными данными.
// Параметры:
//  СписокТиповАдресов - СписокЗначений - Представление элемента - описание типа (Структурированный,
//    Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
//    элемента списка брать данные при заполнении ЭД.
//  АдресУчастника - Структура - содержит данные адреса участника обмена. Имена полей структуры должны совпадать с
//    именами полей структуры выбранного типа адреса:
//    Структурированный - "Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";
//    Произвольный/Иностранный - "КодСтраны, АдресСтрокой" (вынесены в разные элементы списка для того,
//      чтобы правильно заполнить ЭД).
//  ТипАдреса - Строка - один из 3-х вариантов: Структурированный, Произвольный, Иностранный.
//
Процедура ЗаполнитьАдресВСпискеТиповАдресов(СписокТиповАдресов, АдресУчастника, ТипАдреса = "Структурированный")
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	СписокТиповАдресов.ЗаполнитьПометки(Ложь);
	ВыбранныйТипАдреса = Неопределено;
	Для Каждого Элемент Из СписокТиповАдресов Цикл
		Если Элемент.Представление = ТипАдреса Тогда
			ВыбранныйТипАдреса = Элемент;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыбранныйТипАдреса <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ВыбранныйТипАдреса.Значение, АдресУчастника);
		ВыбранныйТипАдреса.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьФИОиДолжность(СтруктураПриемник, ИсточникДанных, Должность = Неопределено)
	
	Фамилия = ""; Имя = ""; Отчество = "";
	ЭлектронныеДокументы.ФамилияИнициалыФизЛица(ИсточникДанных, Фамилия, Имя, Отчество);
	СтруктураПриемник.Вставить("Фамилия", Фамилия);
	СтруктураПриемник.Вставить("Имя", Имя);
	СтруктураПриемник.Вставить("Отчество", Отчество);
	Если Должность <> Неопределено Тогда
		СтруктураПриемник.Вставить("Должность", Должность);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияУчастникаОбмена(СтруктураУчастника, СведенияОбУчастнике, ДанныеПечати, ВидКонтрагента, ВидАдреса = "Юр", ТекстОшибки = "")
	
	СтруктураУчастника.Вставить("КодОКПО", СведенияОбУчастнике.КодПоОКПО);
	СтруктураУчастника.Вставить("НаименованиеОрганизации", СведенияОбУчастнике.ПолноеНаименование);
	СтруктураУчастника.Вставить("ИНН", СведенияОбУчастнике.ИНН);
	СтруктураУчастника.Вставить("КПП", СведенияОбУчастнике.КПП);
	СтруктураУчастника.Вставить("КодОКОПФ");
	СтруктураУчастника.Вставить("ЭтоФизЛицо", СведенияОбУчастнике.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицо);
	Если СведенияОбУчастнике.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЗаполнитьФИОиДолжность(СтруктураУчастника, СведенияОбУчастнике.ПолноеНаименование);
	КонецЕсли;
	
	// Типы адресов представлены списком значений, в котором Представление элемента - описание типа (Структурированный,
	// Произвольный, Иностранный), значение элемента - структура описывающая поля адреса, пометка - указывает, из какого
	// элемента списка брать данные при заполнении ЭД.
	АдресУчастника = ЭлектронныеДокументыСлужебныйВызовСервера.ПолучитьАдресСтруктурой(ДанныеПечати, ВидКонтрагента, ВидАдреса, ТекстОшибки);
	Если ЗначениеЗаполнено(АдресУчастника) И НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ЗаполнитьАдресВСпискеТиповАдресов(СтруктураУчастника.Адрес, АдресУчастника, "Структурированный");
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДанныеПечати.Ссылка);
	КонецЕсли;
	
	СтруктураУчастника.Вставить("Телефон", СведенияОбУчастнике.Телефоны);
	СтруктураУчастника.Вставить("Факс");
	
	НомерСчета = "";
	Если СведенияОбУчастнике.Свойство("НомерСчета", НомерСчета) И ЗначениеЗаполнено(НомерСчета) Тогда
		Банк = "";
		БИК = "";
		КоррСчет = "";
		СтруктураУчастника.БанковскийСчет.НомерСчета = НомерСчета;
		Если СведенияОбУчастнике.Свойство("Банк", Банк) И ЗначениеЗаполнено(Банк) Тогда
			СтруктураУчастника.БанковскийСчет.НаимБанк = Строка(Банк);
		КонецЕсли;
		Если СведенияОбУчастнике.Свойство("БИК", БИК) И ЗначениеЗаполнено(БИК) Тогда
			СтруктураУчастника.БанковскийСчет.БИК = БИК;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыУчастниковОбмена(ДанныеПечати, СтруктураПараметров, ВидЭД)
	
	// Заполним общие реквизиты шапки
	СведенияОПоставщике       = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Организация);
	СведенияОПокупателе       = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Контрагент);
	ТекстОшибки = "";
	
	Если ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Исполнитель, СведенияОПоставщике, ДанныеПечати,
			"Организация", "Юр", ТекстОшибки);
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Заказчик, СведенияОПокупателе, ДанныеПечати,
			"Контрагент", "Юр", ТекстОшибки);
			
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
			 ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Поставщик, СведенияОПоставщике, ДанныеПечати,
			"Организация", "Юр", ТекстОшибки);
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Плательщик, СведенияОПокупателе, ДанныеПечати,
			"Контрагент", "Юр", ТекстОшибки);
		
		СведенияОГрузополучателе  = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Грузополучатель);
		СведенияОГрузоотправителе = ПолучитьДанныеЮрФизЛица(ДанныеПечати.Грузоотправитель);
			
		Если ДанныеПечати.Организация <> ДанныеПечати.Грузоотправитель Тогда
			ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель,
				СведенияОГрузоотправителе, ДанныеПечати, "Грузоотправитель", "Факт", ТекстОшибки);
			СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение = ДанныеПечати.Подразделение;
		КонецЕсли;
			
		ЗаполнитьСведенияУчастникаОбмена(СтруктураПараметров.Грузополучатель, СведенияОГрузополучателе,
			ДанныеПечати, "Грузополучатель", "Факт", ТекстОшибки);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПодвала(ДанныеПечати, ИтоговыеСуммы, СтруктураПараметров)
	
	ЕдиницаИзмеренияВеса           = Константы.ЕдиницаИзмеренияВеса.Получить();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗаполнитьФИОиДолжность(СтруктураПараметров.СведенияПоОтпускуГруза.Бухгалтер, ДанныеПечати.ГлавныйБухгалтер); // главный бухгалтер
	
	// Отпуск товара разрешил
	ЗаполнитьФИОиДолжность(СтруктураПараметров.СведенияПоОтпускуГруза.ОтпускРазрешил, ДанныеПечати.Руководитель,
		ДанныеПечати.ДолжностьРуководителя);
	
	ЗаполнитьФИОиДолжность(СтруктураПараметров.СведенияПоОтпускуГруза.ОтпускПроизвел, ДанныеПечати.Кладовщик,
		ДанныеПечати.ДолжностьКладовщика);
	
	СтруктураПараметров.СведенияПоОтпускуГруза.Вставить("ОтпущеноНаСумму", ИтоговыеСуммы.Сумма);
	Если ЗначениеЗаполнено(ВалютаРегламентированногоУчета) И ИтоговыеСуммы.Сумма <> 0 Тогда
		СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(ИтоговыеСуммы.Сумма, ВалютаРегламентированногоУчета);
		СтруктураПараметров.СведенияПоОтпускуГруза.Вставить("ОтпущеноНаСуммуПрописью", СуммаПрописью);
	КонецЕсли;
	СтруктураПараметров.СведенияПоОтпускуГруза.Вставить("ДатаОтпуска", ДанныеПечати.Дата);
	
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("КоличествоПорядковыхНомеровЗаписей",
		ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей);
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью",
		ЧислоПрописью(ИтоговыеСуммы.КоличествоПорядковыхНомеровЗаписей, ,",,,,,,,,0"));
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("ВсегоМест", ИтоговыеСуммы.КоличествоМест);
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("МассаГрузаНетто", ИтоговыеСуммы.МассаНетто);
	
	Если ИтоговыеСуммы.КоличествоМест > 0 Тогда
		СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("ВсегоМестПрописью",
			ЧислоПрописью(ИтоговыеСуммы.КоличествоМест, ,",,,,,,,,0"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВеса) И ИтоговыеСуммы.МассаБрутто > 0 Тогда
		МассаГрузаПрописью = ЧислоПрописью(ИтоговыеСуммы.МассаБрутто, ,",,,,,,,,0")+ " " + СокрЛП(ЕдиницаИзмеренияВеса) + ".";
		СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("МассаГрузаБруттоПрописью", МассаГрузаПрописью);
	КонецЕсли;
	
	СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной.Вставить("МассаГрузаБрутто", ИтоговыеСуммы.МассаБрутто);
	
	ЗаполнитьЗначенияСвойств(СтруктураПараметров.ВсегоПоНакладной, ИтоговыеСуммы);
	
КонецПроцедуры

// Процедура добавляет новую строку в таблицу данных структуры параметров
//
Процедура ДобавитьСтрокуТаблицуДанных(СтруктураПараметров, СтрокаТовары, ВидЭД, НомерСтроки)
	
	Если ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
		 ИЛИ ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		ТаблицаДанных    = СтруктураПараметров.ТаблицаТоваров;
		ИмяТаблицыДанных = "Товары";
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.АктИсполнитель Тогда
		ТаблицаДанных    = СтруктураПараметров.ТаблицаУслуг;
		ИмяТаблицыДанных = "Услуги";
	Иначе
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаДанных.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовары);
	
	НоваяСтрока.НомерСтроки = НомерСтроки;
	
	Если ИмяТаблицыДанных = "Товары" Тогда
		
		ПоляЗаполнения = Новый Структура();
		ПоляЗаполнения.Вставить("Номенклатура",               "Номенклатура");
		ПоляЗаполнения.Вставить("НоменклатураНаименование",   "НоменклатураНаименование");
		ПоляЗаполнения.Вставить("Характеристика",             "Характеристика");
		ПоляЗаполнения.Вставить("ХарактеристикаНаименование", "ХарактеристикаНаименование");
		ПоляЗаполнения.Вставить("Упаковка",                   "Упаковка");
		ПоляЗаполнения.Вставить("УпаковкаНаименование",       "УпаковкаНаименование");
		
		ЕстьХарактеристика = ЗначениеЗаполнено(СтрокаТовары[ПоляЗаполнения.Характеристика]);
		ЕстьУпаковка       = ЗначениеЗаполнено(СтрокаТовары[ПоляЗаполнения.Упаковка]);
		
		// Заполним МассаНетто - обязательное поле в ТОРГ12
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.МассаНетто) Тогда
			Если ЗначениеЗаполнено(СтрокаТовары.Количество) Тогда
				НоваяСтрока.МассаНетто = СтрокаТовары.Количество;
			ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.КоличествоМест) Тогда
				НоваяСтрока.МассаНетто = СтрокаТовары.КоличествоМест;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Цена  = Окр(СтрокаТовары.Цена, 2);
		НоваяСтрока.Сумма = СтрокаТовары.СуммаСНДС;
		
		Если ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
			
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.МассаНеттоДоКорректировки) Тогда
				Если ЗначениеЗаполнено(СтрокаТовары.КоличествоДоКорректировки) Тогда
					НоваяСтрока.МассаНеттоДоКорректировки = СтрокаТовары.КоличествоДоКорректировки;
				ИначеЕсли ЗначениеЗаполнено(СтрокаТовары.КоличествоМестДоКорректировки) Тогда
					НоваяСтрока.МассаНеттоДоКорректировки = СтрокаТовары.КоличествоМестДоКорректировки;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока.ЦенаДоКорректировки  = Окр(СтрокаТовары.Цена, 2);
			НоваяСтрока.СуммаДоКорректировки = СтрокаТовары.СуммаСНДСДоКорректировки;
			
		КонецЕсли;
		
		НоваяСтрока.БазоваяЕдиницаКод = СтрокаТовары.ЕдиницаИзмеренияКод;
		НоваяСтрока.КодТовара         = СтрокаТовары.НоменклатураКод;
		
		// Сформируем наименование
		Если ЕстьХарактеристика ИЛИ ЕстьУпаковка Тогда
			НоваяСтрока.НаименованиеНоменклатуры = СтрокаТовары[ПоляЗаполнения.НоменклатураНаименование] + " ("
				+ ?(ЕстьХарактеристика, СтрокаТовары[ПоляЗаполнения.ХарактеристикаНаименование], "")
				+ ?(ЕстьУпаковка И ЕстьХарактеристика, ", ", "")
				+ ?(ЕстьУпаковка, СтрокаТовары[ПоляЗаполнения.УпаковкаНаименование], "") + ")";
		Иначе
			НоваяСтрока.НаименованиеНоменклатуры = СтрокаТовары[ПоляЗаполнения.НоменклатураНаименование];
		КонецЕсли;
		
	Иначе
		
		ПоляЗаполнения = Новый Структура();
		ПоляЗаполнения.Вставить("Номенклатура",               "Номенклатура");
		ПоляЗаполнения.Вставить("НоменклатураНаименование",   "УслугаНаименованиеПолное");
		ПоляЗаполнения.Вставить("Характеристика",             "Характеристика");
		ПоляЗаполнения.Вставить("ХарактеристикаНаименование", "ХарактеристикаНаименованиеПолное");
		
		ЕстьХарактеристика = ЗначениеЗаполнено(СтрокаТовары[ПоляЗаполнения.Характеристика]);
		ЕстьУпаковка       = Ложь;
		
		// Сформируем наименование
		НоваяСтрока.Описание = СтрокаТовары[ПоляЗаполнения.НоменклатураНаименование]
			+ ?(ЕстьХарактеристика, " (" + СтрокаТовары[ПоляЗаполнения.ХарактеристикаНаименование] + ")", "");
		
		ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовары.Ссылка, "ЦенаВключаетНДС");
		
		НоваяСтрока.СуммаБезНДС = СтрокаТовары.Сумма - ?(ЦенаВключаетНДС И СтрокаТовары.СуммаНДС > 0, СтрокаТовары.СуммаНДС, 0);
		НоваяСтрока.Сумма       = НоваяСтрока.СуммаБезНДС + СтрокаТовары.СуммаНДС;
		
		Если ЦенаВключаетНДС Тогда
			НоваяСтрока.Цена = ?(СтрокаТовары.Количество = 0, 
				0, 
				Окр(НоваяСтрока.СуммаБезНДС / НоваяСтрока.Количество, 2));
		КонецЕсли;
		
	КонецЕсли; 
	
	// Cформируем структуру доп. данных
	СтруктураДопДанных = Новый Структура();
	ИДТовара         = СтрокаТовары[ПоляЗаполнения.Номенклатура].УникальныйИдентификатор();
	ИДХарактеристики = ?(ЕстьХарактеристика, СтрокаТовары[ПоляЗаполнения.Характеристика].УникальныйИдентификатор(), "");
	ИДУпаковки       = ?(ЕстьУпаковка, СтрокаТовары[ПоляЗаполнения.Упаковка].УникальныйИдентификатор(),"");
	
	СтруктураДопДанных.Вставить("ИД", Строка(ИДТовара) + "#" + Строка(ИДХарактеристики) + "#" + Строка(ИДУпаковки));
	
	Если ЕстьУпаковка Тогда
		СтруктураДопДанных.Вставить("УпаковкаНаименование", СтрокаТовары[ПоляЗаполнения.УпаковкаНаименование]);
		СтруктураДопДанных.Вставить("УпаковкаКод",          СтрокаТовары[ПоляЗаполнения.Упаковка].ЕдиницаИзмерения.Код);
	КонецЕсли;
	
	// Из-за особенностей в схеме ФНС некоторые ставки НДС необходимо передавать в доп. параметрах.
	Если ТаблицаДанных.Колонки.Найти("СтавкаНДС") <> Неопределено Тогда
		// В ТОРГ12 не предусмотрена передача 
		// - "дробных" ставок НДС
		// - ставки "Без НДС"
		
		СоответствиеСтавокНДС = Новый Соответствие;
		СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС18_118, Перечисления.СтавкиНДС.НДС18);
		СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.НДС10_110, Перечисления.СтавкиНДС.НДС10);
		СоответствиеСтавокНДС.Вставить(Перечисления.СтавкиНДС.БезНДС,    Перечисления.СтавкиНДС.ПустаяСсылка());
		
		Если СоответствиеСтавокНДС[НоваяСтрока.СтавкаНДС] <> Неопределено Тогда
			// Савку НДС передадим в структуре доп. параметров
			СтруктураДопДанных.Вставить("СтавкаНДС", НоваяСтрока.СтавкаНДС);
			// В схему передадим соответствующую ставку НДС "числом"
			НоваяСтрока.СтавкаНДС = СоответствиеСтавокНДС[НоваяСтрока.СтавкаНДС];
			
		КонецЕсли;
		
	Иначе
		// В Акте не предусмотрена передача ставки НДС
		СтруктураДопДанных.Вставить("СтавкаНДС", СтрокаТовары.СтавкаНДС);
	КонецЕсли;
	
	Если ИмяТаблицыДанных = "Услуги" Тогда
		// Для Акта таблица услуг "вкладывается" в строку таблицы описания услуг, 
		// поэтому номер строки для доп. данных определим как составной
		НомерСтрокиДопДанных = "1." + НомерСтроки;
	Иначе
		НомерСтрокиДопДанных = НомерСтроки;
	КонецЕсли;
	
	ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных(СтруктураПараметров, СтруктураДопДанных, ИмяТаблицыДанных, Истина, НомерСтрокиДопДанных);
	
КонецПроцедуры

Функция СтруктураИтоговыеСуммы(ТаблицаТоваров, ВидЭД)
	
	Структура = Новый Структура;
	
	Структура.Вставить("КоличествоМест", ТаблицаТоваров.Итог("КоличествоМест"));
	Структура.Вставить("МассаБрутто",    ТаблицаТоваров.Итог("МассаБрутто"));
	Структура.Вставить("МассаНетто",     ТаблицаТоваров.Итог("МассаНетто"));
	Структура.Вставить("СуммаБезНДС",    ТаблицаТоваров.Итог("СуммаБезНДС"));
	Структура.Вставить("СуммаНДС",       ТаблицаТоваров.Итог("СуммаНДС"));
	Структура.Вставить("Сумма",          ТаблицаТоваров.Итог("СуммаБезНДС") + ТаблицаТоваров.Итог("СуммаНДС"));
	Структура.Вставить("КоличествоПорядковыхНомеровЗаписей", ТаблицаТоваров.Количество());
	
	Если ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель Тогда
		Структура.Вставить("МассаНеттоДоКорректировки",  ТаблицаТоваров.Итог("МассаНеттоДоКорректировки"));
		Структура.Вставить("СуммаБезНДСДоКорректировки", ТаблицаТоваров.Итог("СуммаБезНДСДоКорректировки"));
		Структура.Вставить("СуммаНДСДоКорректировки",    ТаблицаТоваров.Итог("СуммаНДСДоКорректировки"));
		Структура.Вставить("СуммаДоКорректировки",       ТаблицаТоваров.Итог("СуммаБезНДСДоКорректировки") + ТаблицаТоваров.Итог("СуммаНДСДоКорректировки"));
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

Процедура ОбработатьТаблицуТоваров(ТаблицаТоваров)
	
	Для Каждого Строка из ТаблицаТоваров Цикл
		ИДТовара = Строка.Номенклатура.УникальныйИдентификатор();
		Если ТипЗнч(Строка.Характеристика)=Тип("Строка") Тогда
			СсылкаНаХарактеристику = Строка.ХарактеристикаСсылка;
		Иначе
			СсылкаНаХарактеристику = Строка.Характеристика;
		КонецЕсли;
		ИДХарактеристики = ?(ЗначениеЗаполнено(СсылкаНаХарактеристику),СсылкаНаХарактеристику.УникальныйИдентификатор(),"");
		Если ТипЗнч(Строка.Упаковка) = Тип("Строка") Тогда
			СсылкаНаУпаковку = Строка.УпаковкаСсылка;
		Иначе
			СсылкаНаУпаковку = Строка.Упаковка;
		КонецЕсли;
		ИДУпаковки = ?(ЗначениеЗаполнено(СсылкаНаУпаковку),СсылкаНаУпаковку.УникальныйИдентификатор(),"");
		Строка.ИД = Строка(ИДТовара)+"#"+Строка(ИДХарактеристики)+"#"+Строка(ИДУпаковки);
		Строка.Наименование = Строка.Наименование  //номенклатура
		+ ?(ЗначениеЗаполнено(Строка.Характеристика),"  (","") //Открывающаяся скобка
		+ ?(ЗначениеЗаполнено(Строка.Характеристика),Строка.Характеристика,"") //характеристика
		+ ?(ЗначениеЗаполнено(Строка.Характеристика),")",""); //Закрывающаяся скобка 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДокументыОснования(СтруктураПараметров, СсылкаНаОбъект)
	
	ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "ДокументОснование");
	Если ЗначениеЗаполнено(ДокументОснование) Тогда
		МассивДокументовОснований = Новый Массив;
		МассивДокументовОснований.Добавить(ДокументОснование);
		СтруктураПараметров.ДокументыОснования = МассивДокументовОснований;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////"
// Сопоставление номенклатуры

//Возвращает структуру для открытия формы сопоставления номенклатуры
//
// Параметры:
// СсылкаНаЭД - СправочникСсылка.ЭДПрисоединенныеФайлы
//
// Возвращаемое значение:
// Структура, содержащая ИмяФормы и ПараметрыОткрытияФормы
//
Функция ПолучитьПараметрыФормыСопоставленияНоменклатуры(СсылкаНаЭД) Экспорт
	
	Результат = Неопределено;
	
	Если (СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий 
			И (СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиОтправитель))
		ИЛИ (СсылкаНаЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			И (СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
				ИЛИ СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СоглашениеОбИзмененииСтоимостиПолучатель)) Тогда
		
		АдресТоваровВХранилище = ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(СсылкаНаЭД.ВладелецФайла.Товары);
		Если НЕ ЗначениеЗаполнено(АдресТоваровВХранилище) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПараметрыОткрытияФормы = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
		
		Результат = Новый Структура;
		Результат.Вставить("ИмяФормы", "ОбщаяФорма.ЗаполнениеНоменклатурыПоНоменклатуреПоставщика");
		Результат.Вставить("ПараметрыОткрытияФормы", ПараметрыОткрытияФормы);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры и функции

// Функция находит документ ИБ по параметрам
//
// Параметры:
// ВидЭД - Перечисления.ВидыЭД - Вид электронного документа, по которому ищется документ ИБ,
// Контрагент - Ссылка на контрагента,
// РеквизитыИБ - структура параметров информационной базы,
// РеквизитыИБКонтрагента - структура параметров контрагента в информационной базе.
//
Функция НайтиДокумент(ВидЭД, Контрагент, РеквизитыИБ = Неопределено, РеквизитыИБКонтрагента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныйДок = Неопределено;
	Если ВидЭД = Перечисления.ВидыЭД.ЗаказТовара Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказКлиента КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0 Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе	
    				Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;	
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидЭД = Перечисления.ВидыЭД.ОтветНаЗаказ Тогда
		Запрос = Новый Запрос;	
		ОсновнойТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ДокументПоиска.Ссылка КАК Ссылка
		               |ИЗ
		               |	Документ.ЗаказПоставщику КАК ДокументПоиска
		               |ГДЕ
		               |	ДокументПоиска.Контрагент = &Контрагент";
		// будем искать по нашим реквизитам
		Если РеквизитыИБ <> Неопределено И РеквизитыИБ.Количество()>0  Тогда
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБ Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НайденныйДок) И РеквизитыИБКонтрагента <> Неопределено 
			И РеквизитыИБКонтрагента.Количество()>0 Тогда // не нашли по нашим реквизитам, искать будем по данным контрагента
			Запрос.Текст = ОсновнойТекстЗапроса;
			Запрос.УстановитьПараметр("Контрагент", Контрагент);
			Для Каждого ТекЭл Из РеквизитыИБКонтрагента Цикл
				Если Найти(ВРег(ТекЭл.Ключ), ВРег("Дата"))>0 Тогда
					Запрос.Текст = Запрос.Текст+" И КОНЕЦПЕРИОДА(ДокументПоиска."+ТекЭл.Ключ+", ГОД) =  КОНЕЦПЕРИОДА(&"+ТекЭл.Ключ+", ГОД)";
				Иначе
					Запрос.Текст = Запрос.Текст+" И ДокументПоиска."+ТекЭл.Ключ+" = &"+ТекЭл.Ключ;
				КонецЕсли;
				Запрос.УстановитьПараметр(ТекЭл.Ключ, ТекЭл.Значение);
			КонецЦикла;				   
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				НайденныйДок = Выборка.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НайденныйДок;
	
КонецФункции

Функция СоздатьПерезаполнитьНоменклатуруПоставщика(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(СтрокаОбъекта.СсылкаНаОбъект) Тогда
		НовЭл = СтрокаОбъекта.СсылкаНаОбъект.ПолучитьОбъект();
		СсылкаНаОбъектНоменклатура = СтрокаОбъекта.СсылкаНаОбъект.Номенклатура;
	Иначе
		НовЭл = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
		СсылкаНаОбъектНоменклатура = Неопределено;
	КонецЕсли;
	//
	ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаОбъекта, НовЭл);
	// если нет ссылки на номенклатуру, то будем создавать ее
	Если НЕ ЗначениеЗаполнено(СсылкаНаОбъектНоменклатура) Тогда 
		НайденнаяСтрока = СтрокаОбъекта.Строки.Найти("Номенклатура", "Реквизит", Истина);
		Если НайденнаяСтрока <> Неопределено Тогда
			Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // Найдена ссылка
				СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
			Иначе // будем искать по индексу
				ИндексИскомойСтроки = НайденнаяСтрока.ЗначениеРеквизита;	
				НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
				Если НайденнаяСтрока <> Неопределено Тогда
					Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
						СсылкаНаОбъектНоменклатура = НайденнаяСтрока.СсылкаНаОбъект;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		НовЭл.Номенклатура = СсылкаНаОбъектНоменклатура;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НовЭл.Код) Тогда
		НовЭл.УстановитьНовыйКод();
	КонецЕсли;
	//
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создание элемента справочника %1.'"), "Номенклатура поставщиков"); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаНоменклатуруПоИдентификаторуНоменклатурыПоставщика(Идентификатор)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СпрНоменклатура.Номенклатура КАК Ссылка
	               |ИЗ
	               |	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	               |ГДЕ
	               |	СпрНоменклатура.Идентификатор = &Идентификатор";
	
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создает контрагента в ИБ по структуре параметров.
//
// Параметры:
//  ПараметрыКонтрагента - Структура параметров нового контрагента,
//  НовыйКонтрагент - Ссылка, ссылка на элемент справочника Контрагенты.
//
Функция СоздатьКонтрагентаВБД(ДанныеКонтрагента)
	
	Если НЕ ЗначениеЗаполнено(ДанныеКонтрагента.ИНН) 
		 ИЛИ НЕ ЗначениеЗаполнено(ДанныеКонтрагента.КПП) Тогда
		Возврат Неопределено; 
	КонецЕсли;
	
	НовыйПартнер        = Неопределено;
	СсылкаНаКонтрагента = Неопределено;
	
	Если СтрДлина(ДанныеКонтрагента.ИНН) = 10 Тогда
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ЮрЛицо);
	Иначе
		ДанныеКонтрагента.Вставить("ЮрФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	ДанныеКонтрагента.Вставить("Наименование", ДанныеКонтрагента.НаименованиеПолное);
	
	НовыйКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйКонтрагент, ДанныеКонтрагента);
	
	ДобавитьАдресКонтрагентаПартнера(НовыйКонтрагент, 
		Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,
		ДанныеКонтрагента.ЮрАдрес);
		
	ДобавитьАдресКонтрагентаПартнера(НовыйКонтрагент, 
		Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента, 
		ДанныеКонтрагента.ФактАдрес);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйПартнер, ДанныеКонтрагента);
		
		НовыйПартнер.ПрочиеОтношения = Истина;
		
		ДобавитьАдресКонтрагентаПартнера(НовыйПартнер, 
			Справочники.ВидыКонтактнойИнформации.АдресПартнера,
			ДанныеКонтрагента.ФактАдрес);
			
		СсылкаНовогоПартнера = Справочники.Партнеры.ПолучитьСсылку();
		НовыйПартнер.УстановитьСсылкуНового(СсылкаНовогоПартнера);
		
		НовыйКонтрагент.Партнер = СсылкаНовогоПартнера;
		
	Иначе
		НовыйКонтрагент.Партнер = Справочники.Партнеры.НеизвестныйПартнер;
	КонецЕсли;
	
	Попытка
		НачатьТранзакцию();
		НовыйКонтрагент.Записать();
		Если НовыйПартнер <> Неопределено Тогда
			НовыйПартнер.Записать();
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		СсылкаНаКонтрагента = НовыйКонтрагент.Ссылка;
	Исключение
		ОтменитьТранзакцию();
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) + НСтр("ru = ' (подробности см. в Журнале регистрации).'");
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Создание нового контрагента'"), ТекстОшибки, ТекстСообщения);
	КонецПопытки;
	
	Возврат СсылкаНаКонтрагента; 
	
КонецФункции

Процедура ДобавитьАдресКонтрагентаПартнера(Объект, ВидАдреса, СтруктураАдресаФНС)
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес;
	НоваяСтрока.Вид = ВидАдреса;
	
	// Сформируем адрес в виде списка значений
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("Индекс",           СтруктураАдресаФНС.Индекс);
	СтруктураАдреса.Вставить("КодРегиона",       СтруктураАдресаФНС.КодРегион);
	СтруктураАдреса.Вставить("Регион",           НазваниеРегиона(СтруктураАдресаФНС.КодРегион));
	СтруктураАдреса.Вставить("Район",            СтруктураАдресаФНС.Район);
	СтруктураАдреса.Вставить("Город",            СтруктураАдресаФНС.Город);
	СтруктураАдреса.Вставить("НаселенныйПункт",  СтруктураАдресаФНС.НаселПункт);
	СтруктураАдреса.Вставить("Дом",              СтруктураАдресаФНС.Дом);
	СтруктураАдреса.Вставить("Корпус",           СтруктураАдресаФНС.Корпус);
	СтруктураАдреса.Вставить("Квартира",         СтруктураАдресаФНС.Кварт);
	СтруктураАдреса.Вставить("Страна",           "РОССИЯ"); 
	СтруктураАдреса.Вставить("КодСтраны",        "643");
	СтруктураАдреса.Вставить("ТипДома",          "дом");
	СтруктураАдреса.Вставить("ТипКорпуса",       "корпус");
	СтруктураАдреса.Вставить("ТипКвартиры",      "кв.");
	УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдреса, НоваяСтрока.Представление);
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураАдреса);
	
	ЗначенияПолей = Новый СписокЗначений();
	Для каждого Элемент Из СтруктураАдреса Цикл
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			ЗначенияПолей.Добавить(Элемент.Значение, Элемент.Ключ);
		КонецЕсли;
	КонецЦикла;
	НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСписокПолейВСтроку(ЗначенияПолей);
	
КонецПроцедуры

Функция НайтиПеречисление(Наименование, ПредставлениеПеречисления) Экспорт
	
	НайденноеЗначение = Неопределено;
	Если Наименование = "НДС" Тогда
		ИмяПеречисления = "СтавкиНДС";
		Если НЕ ТипЗнч(ПредставлениеПеречисления)=Тип("ПеречислениеСсылка.СтавкиНДС") Тогда // определяем по числу
			Возврат ПолучитьСтавкуНДСПеречислением(ПредставлениеПеречисления);
		КонецЕсли;
	ИначеЕсли Наименование = "ТипНоменклатуры" Тогда
		ИмяПеречисления = "ТипыНоменклатуры";
	ИначеЕсли Наименование = "ТипыНалогообложенияНДС" Тогда
		ИмяПеречисления = "ТипыНалогообложенияНДС";	
	ИначеЕсли Наименование = "СпособыРасчетаКомиссионногоВознаграждения" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
	ИначеЕсли Наименование = "ВариантыОплатыКлиентом" Тогда
		ИмяПеречисления = "ВариантыОплатыКлиентом";	
	ИначеЕсли Наименование = "ВариантыОплатыПоставщику" Тогда
		ИмяПеречисления = "ВариантыОплатыПоставщику";			
	ИначеЕсли Наименование = "ФормыОплаты" Тогда
		ИмяПеречисления = "ФормыОплаты";	
	ИначеЕсли Наименование = "СпособРасчета" Тогда
		ИмяПеречисления = "СпособыРасчетаКомиссионногоВознаграждения";	
		Если ПредставлениеПеречисления = "От суммы" Тогда
			ПредставлениеПеречисления = "Процент от суммы продажи";
		ИначеЕсли ПредставлениеПеречисления = "От разницы" Тогда
			ПредставлениеПеречисления = "Процент от разности суммы продажи и суммы комитента";
		КонецЕсли;	
	Иначе
		Возврат НайденноеЗначение;
	КонецЕсли;
	
	Для Каждого ЭлПеречисления Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Если Врег(ЭлПеречисления.Синоним) = Врег(ПредставлениеПеречисления) тогда
			НайденноеЗначение = Перечисления[ИмяПеречисления][ЭлПеречисления.Имя];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденноеЗначение;
	
КонецФункции

Функция НайтиСсылкуНаНоменклатуруПоНоменклатуреПоставщика(НоменклатураПоставщика)
	
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрНоменклатура.Номенклатура Как Ссылка
	|ИЗ
	|	Справочник.НоменклатураПоставщиков КАК СпрНоменклатура
	|ГДЕ
	|	СпрНоменклатура.Ссылка = &НоменклатураПоставщика";
	
	Запрос.УстановитьПараметр("НоменклатураПоставщика", НоменклатураПоставщика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыБанковскогоСчета(ИмяСправочника, СсылкаНаБанковскийСчет)
	
	БанковскийСчет = Новый Структура;
	ЗапросРасчСчет = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
					|	БанковскиеСчета.НомерСчета,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.НаименованиеБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Наименование
					|	КОНЕЦ КАК НаименованиеБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.БИКБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.Код
					|	КОНЕЦ КАК БИКБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанка
					|			ТОГДА БанковскиеСчета.КоррСчетБанка
					|		ИНАЧЕ БанковскиеСчета.Банк.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанка,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.НаименованиеБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Наименование
					|	КОНЕЦ КАК НаименованиеБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.БИКБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.Код
					|	КОНЕЦ КАК БИКБанкаДляРасчетов,
					|	ВЫБОР
					|		КОГДА БанковскиеСчета.РучноеИзменениеРеквизитовБанкаДляРасчетов
					|			ТОГДА БанковскиеСчета.КоррСчетБанкаДляРасчетов
					|		ИНАЧЕ БанковскиеСчета.БанкДляРасчетов.КоррСчет
					|	КОНЕЦ КАК КоррСчетБанкаДляРасчетов
					|ИЗ
					|	Справочник."+ИмяСправочника+" КАК БанковскиеСчета
					|ГДЕ
					|	БанковскиеСчета.Ссылка = &Ссылка";
					ЗапросРасчСчет.Текст = ТекстЗапроса;
	ЗапросРасчСчет.УстановитьПараметр("Ссылка", СсылкаНаБанковскийСчет);
	Выборка = ЗапросРасчСчет.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		БанковскийСчет.Вставить("НомерСчета", Выборка.НомерСчета);
		Банк = Новый Структура;
		Банк.Вставить("Наименование", Выборка.НаименованиеБанка);
		Банк.Вставить("Код", Выборка.БИКБанка);
		Банк.Вставить("КоррСчет", Выборка.КоррСчетБанка);
		БанковскийСчет.Вставить("Банк", Банк);
		БанкДляРасчетов = Неопределено; // заполнение анализируется в модуле формирования
		Если ЗначениеЗаполнено(Выборка.БИКБанкаДляРасчетов) Тогда // используется банк для расчетов
			БанкДляРасчетов = Новый Структура;
			БанкДляРасчетов.Вставить("Наименование", Выборка.НаименованиеБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("Код", Выборка.БИКБанкаДляРасчетов);
			БанкДляРасчетов.Вставить("КоррСчет", Выборка.КоррСчетБанкаДляРасчетов);
		КонецЕсли;
		БанковскийСчет.Вставить("БанкДляРасчетов", БанкДляРасчетов);
	КонецЕсли;
	Возврат БанковскийСчет;
	
КонецФункции

Функция ПредставлениеСтавкиНДС(Ставка)
	
	ПредставлениеСтавки = Строка(Ставка);
	
	Если Ставка = Перечисления.СтавкиНДС.БезНДС Тогда
		ПредставлениеСтавки = СтрЗаменить(ПредставлениеСтавки, "Б", "б");
	Иначе
		ПредставлениеСтавки = СтрЗаменить(ПредставлениеСтавки, "%", "");
		ПредставлениеСтавки = СтрЗаменить(ПредставлениеСтавки, " ", "");
	КонецЕсли;
	
	Возврат ПредставлениеСтавки;
	
КонецФункции

Функция ТипСтавкиНДС(Ставка)
	Возврат "процент";
КонецФункции

Функция ПолучитьДанныеПривязкиСтрокЗаказов(Товары)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЗаказы.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ТаблицаЗаказы.Номенклатура КАК Номенклатура,
	|	ТаблицаЗаказы.Характеристика КАК Характеристика,
	|	ТаблицаЗаказы.КодСтроки КАК КодСтроки,
	|	ТаблицаЗаказы.Склад КАК Склад,
	|	ТаблицаЗаказы.КОформлению КАК КОформлениюОстаток
	|ПОМЕСТИТЬ ЗаказыПоставщикам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаказыОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|		ЗаказыОстатки.Номенклатура КАК Номенклатура,
	|		ЗаказыОстатки.Характеристика КАК Характеристика,
	|		ЗаказыОстатки.КодСтроки КАК КодСтроки,
	|		ЗаказыОстатки.Склад КАК Склад,
	|		ЗаказыОстатки.КОформлениюОстаток КАК КОформлению
	|	ИЗ
	|		РегистрНакопления.ЗаказыПоставщикам.Остатки(
	|				,
	|				(Номенклатура, ЗаказПоставщику) В
	|					(ВЫБРАТЬ
	|						Товары.Номенклатура КАК Номенклатура,
	|						Товары.ЗаказПоставщику КАК ЗаказПоставщику
	|					ИЗ
	|						Товары КАК Товары)) КАК ЗаказыОстатки
	|	ГДЕ
	|		ЗаказыОстатки.КОформлениюОстаток > 0) КАК ТаблицаЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.ЗаказПоставщику,
	|	ЗаказыПоставщикам.КодСтроки,
	|	ЗаказыПоставщикам.Склад,
	|	ЗаказыПоставщикам.Характеристика
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|		ПО Товары.Номенклатура = ЗаказыПоставщикам.Номенклатура
	|			И Товары.ЗаказПоставщику = ЗаказыПоставщикам.ЗаказПоставщику
	|			И Товары.Количество <= ЗаказыПоставщикам.КОформлениюОстаток";
	Запрос.УстановитьПараметр("Товары", Товары);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции	
  
Функция НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки)
	
	СсылкаНаОбъект = Неопределено;
	
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ИндексИскомойСтроки, "ИндексСтроки", Истина); // строка с объектом
	КонецЕсли;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект) Тогда // есть ссылка на объект БД
			СсылкаНаОбъект = НайденнаяСтрока.СсылкаНаОбъект;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция СоздатьРасчетныйСчет(СтрокаОбъекта, ВидРС, ДеревоРазбора, СсылкаНаВладельца = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаОбъект = Неопределено;
	НайденнаяСтрока = СтрокаОбъекта;
	
	Если ВидРС = "БанковскийСчетКонтрагента" Тогда
		НовЭл = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		Если (НЕ ДеревоРазбора.Строки.Найти("Контрагенты")=Неопределено) 
		   И ДеревоРазбора.Строки.Найти("Контрагенты").Строки.Количество()>0 Тогда
			СсылкаНаВладельца = ДеревоРазбора.Строки.Найти("Контрагенты").Строки[0].СсылкаНаОбъект;
		КонецЕсли;	
	ИначеЕсли ВидРС = "БанковскийСчетОрганизации" Тогда
		НовЭл = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
		НовЭл.ВариантВыводаМесяца = Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	НовЭл.НомерСчета 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "НомерСчета");
		
	НовЭл.ВалютаДенежныхСредств = ДенежныеСредстваСервер.ПолучитьВалютуПоНомеруСчета(НовЭл.НомерСчета);
	//
	ИндексИскомойСтроки = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Банк");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.Банк 			= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	ИндексИскомойСтроки 	= ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "БанкКорреспондент");
	Если ЗначениеЗаполнено(ИндексИскомойСтроки) Тогда
		НовЭл.БанкДляРасчетов 	= НайтиОбъектВДереве(ДеревоРазбора, ИндексИскомойСтроки);
	КонецЕсли;
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаВладельца) Тогда
		СсылкаНаВладельца = ПолучитьЗначениеРеквизитаДерева(НайденнаяСтрока, "Владелец");	
	КонецЕсли;
	НовЭл.Владелец 		= СсылкаНаВладельца;
	НовЭл.Наименование 	= Прав(СокрЛП(НовЭл.НомерСчета), 4)+" в "+НовЭл.Банк.Наименование; // наименование расч.счета
	НовЭл.ОбменДанными.Загрузка = Истина;
	Попытка
		НовЭл.Записать();
	Исключение
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создание элемента справочника %1.'"), ВидРС); 
		ЗаписьЖурналаРегистрации(Текст, УровеньЖурналаРегистрации.Ошибка,,,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		ВызватьИсключение;
	КонецПопытки;
	
	СсылкаНаОбъект = НовЭл.Ссылка;
	НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект; // запишем в дерево
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСоглашениеОбИспользованииЭД(СтрокаОбъекта, ДеревоРазбора)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	СоглашениеОбИспользованииЭД.Ссылка
	                      |ИЗ
	                      |	Справочник.СоглашенияОбИспользованииЭД КАК СоглашениеОбИспользованииЭД
	                      |ГДЕ
	                      |	СоглашениеОбИспользованииЭД.Контрагент = &Контрагент
	                      |	И СоглашениеОбИспользованииЭД.Партнер = &Партнер");
						  
	Запрос.УстановитьПараметр("Контрагент",	ЭлектронныеДокументыВнутренний.ПолучитьРеквизитШапкиЭД(СтрокаОбъекта, "Контрагент", ДеревоРазбора));					  
	Запрос.УстановитьПараметр("Партнер",	ЭлектронныеДокументыВнутренний.ПолучитьРеквизитШапкиЭД(СтрокаОбъекта, "Партнер", ДеревоРазбора));
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Справочники.СоглашенияОбИспользованииЭД.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат.Выгрузить()[0].Ссылка;
		
КонецФункции

Функция ПолучитьСтавкуНДСПеречислением(СтавкаНДС, ОбратнаяСтавка = Ложь)
	
	Если ТипЗнч(СтавкаНДС) = Тип("Строка") Тогда
		СтавкаНДСЧисло = Число(СтавкаНДС);
	ИначеЕсли ТипЗнч(СтавкаНДС) = Тип("Число") Тогда 
		СтавкаНДСЧисло = СтавкаНДС;
	Иначе // неправильный тип
		СтавкаНДСЧисло = Неопределено;
	КонецЕсли;
	
	Если СтавкаНДСЧисло = Неопределено Тогда
		СтНДС = Перечисления.СтавкиНДС.БезНДС;
	ИначеЕсли СтавкаНДСЧисло = 0 Тогда
		СтНДС = Перечисления.СтавкиНДС.НДС0;
	ИначеЕсли СтавкаНДСЧисло = 0.1 Тогда
		Если ОбратнаяСтавка Тогда
			СтНДС = Перечисления.СтавкиНДС.НДС10_110;
		Иначе
			СтНДС = Перечисления.СтавкиНДС.НДС10;
		КонецЕсли;
	ИначеЕсли СтавкаНДСЧисло = 0.18 Тогда
		Если ОбратнаяСтавка Тогда
			СтНДС = Перечисления.СтавкиНДС.НДС18_118;
		Иначе
			СтНДС = Перечисления.СтавкиНДС.НДС18;
		КонецЕсли;
	КонецЕсли;
	Возврат СтНДС;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение объектов

// Перезаполняет реквизиты шапки объекта.
//
// Параметры:
//  ТекущийОбъект    - Объект ИБ, реквизиты шапки которого необходимо заполнить,
//  ДанныеЗаполнения - Структура значений, которые необходимо подставить в объект ИБ.
//
Процедура ПерезаполнениеЗначенийРеквизитовШапки(ТекущийОбъект, ДанныеЗаполнения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Строка Из ДанныеЗаполнения Цикл
		
		Если ЗначениеЗаполнено(Строка.Ключ) И ТекущийОбъект.Метаданные().Реквизиты.Найти(Строка.Ключ) <> Неопределено Тогда
			Если ТекущийОбъект[Строка.Ключ] <> Строка.Значение Тогда
				ТекущийОбъект[Строка.Ключ] = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет реквизиты объекта по соответствию наименований
//
// Параметры:
//  СтрокаМассива - СтрокаДереваЗначений, набор параметров, по которому будет происходить заполнение
//  ОбъектМетаданных - Объект ИБ, реквизиты которого необходимо заполнить.
//
Процедура ЗаполнитьРеквизитыОбъектаПоСоответствиюИмен(СтрокаМассива, ОбъектМетаданных)
		
	Для Каждого ТекСтрока Из СтрокаМассива.Строки Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗначениеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(ОбъектМетаданных.Метаданные().СтандартныеРеквизиты, ТекСтрока.Реквизит) Тогда
			ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
		ИначеЕсли ОбъектМетаданных.Метаданные().Реквизиты.Найти(ТекСтрока.Реквизит) <> Неопределено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.СсылкаНаОбъект) Тогда
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.СсылкаНаОбъект;
			Иначе
				ОбъектМетаданных[ТекСтрока.Реквизит] = ТекСтрока.ЗначениеРеквизита;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
