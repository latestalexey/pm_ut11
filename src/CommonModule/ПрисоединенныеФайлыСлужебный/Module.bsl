////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными

// Для служебного использования.
Процедура ПриОтправкеФайла(ЭлементДанных,
                           ОтправкаЭлемента,
                           Знач СозданиеНачальногоОбраза = Ложь,
                           Получатель = Неопределено) Экспорт
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли ЭтоЭлементПрисоединенныеФайлы(ЭлементДанных) Тогда
		
		Если СозданиеНачальногоОбраза Тогда
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				Если Получатель <> Неопределено
					И Получатель.ДополнительныеСвойства.Свойство("РазмещатьФайлыВНачальномОбразе") Тогда
					
					// Помещаем данные файла из тома на диске в служебный реквизит справочника
					ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
					
				Иначе
					
					// Копируем файл из тома на диске в каталог создания начального образа
					ИмяКаталогаФайлов = ХранилищеОбщихНастроек.Загрузить("ОбменФайлами", "ВременныйКаталог");
					
					ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ЭлементДанных.Том) + ЭлементДанных.ПутьКФайлу;
					УникальныйИдентификатор = ЭлементДанных.Ссылка.УникальныйИдентификатор();
					
					НовыйПутьФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
							ИмяКаталогаФайлов,
							Строка(УникальныйИдентификатор) + "CatalogRef_" + ЭлементДанных.Метаданные().Имя
					);
					
					ФайловыеФункцииСлужебный.СкопироватьФайлПриСозданииНачальногоОбраза(ПолныйПуть, НовыйПутьФайла);
					
				КонецЕсли;
				
			Иначе
				
				// Если файл хранится в ИБ, то при создании начального образа
				// он будет выгружен в составе регистра сведений ПрисоединенныеФайлы.
				
			КонецЕсли;
			
		Иначе
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				// Помещаем данные файла из тома на диске в служебный реквизит справочника
				ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
				
			Иначе // Перечисления.ТипыХраненияФайлов.ВИнформационнойБаза
				
				Попытка
					// Помещаем данные файла из информационной базы в служебный реквизит справочника
					АдресВоВременномХранилище = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭлементДанных.Ссылка).СсылкаНаДвоичныеДанныеФайла;
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВоВременномХранилище), Новый СжатиеДанных(9));
				Исключение
					// Возможно, файл не был найден. Отправку данных не прерываем.
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Файлы.Не удалось отправить файл при обмене данными'"),
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) );
					
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
				КонецПопытки;
				
				ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
				ЭлементДанных.ПутьКФайлу = "";
				ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ПрисоединенныеФайлы")
		И Не СозданиеНачальногоОбраза Тогда
		
		// Выгрузку регистра выполняем только при создании начального образа
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

// Для служебного использования.
Процедура ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли ЭтоЭлементПрисоединенныеФайлы(ЭлементДанных) Тогда
		
		Если ПолучениеФайлаЗапрещено(ЭлементДанных) Тогда
			
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			Возврат;
		КонецЕсли;
		
		// Для существующих файлов, размещенных в томах, выполняем их удаление из томов,
		// т.к. при получении нового файла он будет заново размещен в томе или информационной базе.
		Если НЕ ЭлементДанных.ЭтоНовый() Тогда
			
			ВерсияФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных.Ссылка, "ТипХраненияФайла, Том, ПутьКФайлу");
			
			Если ВерсияФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				ПрежнийПутьНаТоме = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияФайла.Том) + ВерсияФайла.ПутьКФайлу;
				
				ФайловыеФункцииСлужебный.УдалитьФайлыНаСервере(ПрежнийПутьНаТоме);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ФайловыеФункцииСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			// По обмену пришел элемент с хранением в базе - но в базе приемнике принято хранить в томах.
			// Из служебного реквизита файл размещаем на томе и меняем ТипХраненияФайла на ВТомахНаДиске.
			
			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			
			// Добавление в один из томов (где есть свободное место).
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ЭлементДанных.ФайлХранилище.Получить(),
				ПутьКФайлуНаТоме,
				СсылкаНаТом,
				ЭлементДанных.ДатаМодификацииУниверсальная,
				"",
				ЭлементДанных.Наименование,
				ЭлементДанных.Расширение,
				ЭлементДанных.Размер,
				ЭлементДанных.Зашифрован);
			
			ЭлементДанных.ПутьКФайлу = ПутьКФайлуНаТоме;
			ЭлементДанных.Том        = СсылкаНаТом;
			ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
			
			ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
			
		Иначе
			
			ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
			
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ЭлементДанных.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанные);
			КонецЕсли;
			
			ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
			ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ЭлементДанных.ПутьКФайлу = "";
			ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые в модуле СтандартныеПодсистемыПереопределяемый

// Размещает файлы из сформированного образа.
Процедура ДобавитьФайлыВТомаПриРазмещении(Знач СоответствиеПутейФайлов,
                                          Знач ТипХраненияФайлов,
                                          Знач Файлы) Экспорт
	
	Для Каждого ЭлементСоответствия Из СоответствиеПутейФайлов Цикл
		
		Позиция = Найти(ЭлементСоответствия.Ключ, "CatalogRef");
		
		Если Позиция = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПолныйПутьФайлаНаДиске = СоответствиеПутейФайлов.Получить(ЭлементСоответствия.Ключ);
		
		Если ПолныйПутьФайлаНаДиске = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификатор = Новый УникальныйИдентификатор(Лев(ЭлементСоответствия.Ключ, Позиция - 1));
		
		ИмяСправочника = Прав(ЭлементСоответствия.Ключ, СтрДлина(ЭлементСоответствия.Ключ) - Позиция -10);
		Ссылка = Справочники[ИмяСправочника].ПолучитьСсылку(УникальныйИдентификатор);
		
		Если Ссылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Ссылка.ПолучитьОбъект();
		
		Если Объект.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Продолжить;
		КонецЕсли;
		
		Если Файлы.Найти(ТипЗнч(Объект)) = Неопределено Тогда
			Файлы.Добавить(ТипЗнч(Объект));
		КонецЕсли;
		
		// Размещение файлов в базе-приемнике внутри базы, независимо от хранения в базе-источнике.
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Объект.ПутьКФайлу = "";
			Объект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаНаДиске);
			
			ОбновитьДвоичныеДанныеФайлаНаСервере(Объект, ПоместитьВоВременноеХранилище(ДвоичныеДанные));
			
		Иначе // Размещение файлов в базе-приемнике внутри тома, независимо от хранения в базе-источнике.
			
			ФайлИсх = Новый Файл(ПолныйПутьФайлаНаДиске);
			РазмерФайла = ФайлИсх.Размер();
			
			ВремяИзмененияУниверсальное = Объект.ДатаМодификацииУниверсальная;
			ИмяБезРасширения = Объект.Наименование;
			Расширение = Объект.Расширение;
			Зашифрован = Объект.Зашифрован;
			
			ПолныйПутьНовый = ФайлИсх.Путь + ИмяБезРасширения + "." + Объект.Расширение;
			ПереместитьФайл(ПолныйПутьФайлаНаДиске, ПолныйПутьНовый);
			
			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			
			// Добавление файла в один из томов (где есть свободное место).
			
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ПолныйПутьНовый,
				ПутьКФайлуНаТоме,
				СсылкаНаТом,
				ВремяИзмененияУниверсальное,
				"",
				ИмяБезРасширения,
				Расширение,
				РазмерФайла,
				Зашифрован);
			
			Объект.ПутьКФайлу = ПутьКФайлуНаТоме;
			Объект.Том = СсылкаНаТом.Ссылка;
			
		КонецЕсли;
		
		Объект.Записать();
		
		Если НЕ ПустаяСтрока(ПолныйПутьНовый) Тогда
			УдалитьФайлы(ПолныйПутьНовый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет регистрацию в плане обмена при обмене файлами.
//
// Параметры:
//  ПланОбменаСсылка - Ссылка на план обмена.
//  ТипыФайлов       - Массив Типов справочников с присоединенными файлами.
//
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка, ТипыФайлов) Экспорт
	
	Для Каждого Тип Из ТипыФайлов Цикл
		ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.НайтиПоТипу(Тип));
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что переданный элемент данных - это объект присоединенного файла.
Функция ЭтоЭлементПрисоединенныеФайлы(ЭлементДанных) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаданныеЭлемента = ЭлементДанных.Метаданные();
	
	Возврат ОбщегоНазначения.ЭтоСправочник(МетаданныеЭлемента)
	      И ВРег(Прав(МетаданныеЭлемента.Имя, СтрДлина("ПрисоединенныеФайлы"))) = ВРег("ПрисоединенныеФайлы");
	
КонецФункции

// Возвращает свойства присоединенного файла: двоичные данные и подпись.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//  АдресПодписи       - Строка - адрес подписи во временном хранилище.
//
// Возвращаемое значение:
//  Структура со свойствами:
//    ДвоичныеДанные        - ДвоичныеДанные присоединенного файла.
//    ДвоичныеДанныеПодписи - ДвоичныеДанные подписи.
//
Функция ПолучитьДвоичныеДанныеФайлаИПодписи(Знач ПрисоединенныйФайл, Знач АдресПодписи) Экспорт
	
	Свойства = Новый Структура;
	
	Свойства.Вставить("ДвоичныеДанные", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(
		ПрисоединенныйФайл));
	
	Свойства.Вставить("ДвоичныеДанныеПодписи", ПолучитьИзВременногоХранилища(АдресПодписи));
	
	Возврат Свойства;
	
КонецФункции

// Заполняет текст запроса для получения присоединенных файлов у которых не извлечен текст.
//  Текст запроса формируется по всем справочникам присоединенных файлов. В качестве параметра
// может прийти другой запрос, с которым следует сделать объединение.
//
// Параметры:
//  ТекстЗапроса - Строка (возвращаемое значение), варианты передаваемых значений:
//                   Пустая строка   - будет возвращен требуемый текст запроса.
//                   Непустая строка - будет возвращен требуемый текст запроса, добавленный
//                                     к переданному тексту посредством "ОБЪЕДИНИТЬ ВСЕ".
// 
//  ПолучитьВсеФайлы - Булево - начальное значение Ложь. Позволяет отключить выборку присоединенных
//                              файлов по частям, если передать Истина.
//
Процедура ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса = "", ПолучитьВсеФайлы = Ложь) Экспорт
	
	ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	КоличествоТипов = ТипыВладельцев.Количество();
	Если КоличествоТипов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоФайловВВыборке = Цел(100 / ТипыВладельцев.Количество());
	ЧислоФайловВВыборке = ?(ЧислоФайловВВыборке < 10, 10, ЧислоФайловВВыборке);
	
	Для Каждого Тип Из ТипыВладельцев Цикл
		
		Если НЕ ПустаяСтрока(ТекстЗапроса) Тогда
			ТекстЗапроса = ТекстЗапроса +
			"
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|";
		КонецЕсли;
	
		ИмяСправочникаПрисоединенныхФайлов = Метаданные.НайтиПоТипу(Тип).Имя + "ПрисоединенныеФайлы";
		
		ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляФайловСНеизвлеченнымТекстом(
			ИмяСправочникаПрисоединенныхФайлов,
			ЧислоФайловВВыборке,
			ПолучитьВсеФайлы);
			
	КонецЦикла;
	
	// ЭлектронныеДокументы
	ТекстЗапроса = ТекстЗапроса +
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";

	ИмяСправочникаПрисоединенныхФайлов = "ЭДПрисоединенныеФайлы";
	ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляФайловСНеизвлеченнымТекстом(
		ИмяСправочникаПрисоединенныхФайлов,
		ЧислоФайловВВыборке);
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

// Возвращает количество версий с неизвлеченным текстом.
Функция ПолучитьКоличествоВерсийСНеизвлеченнымТекстом() Экспорт
	
	КоличествоФайлов = 0;
	
	ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	
	Для Каждого Тип Из ТипыВладельцев Цикл
		ИмяСправочникаПрисоединенныхФайлов = Метаданные.НайтиПоТипу(Тип).Имя + "ПрисоединенныеФайлы";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляЧислаФайловСНеизвлеченнымТекстом(ИмяСправочникаПрисоединенныхФайлов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоФайлов = КоличествоФайлов + Выборка.КоличествоФайлов;
		КонецЕсли
	КонецЦикла;
	
	Возврат КоличествоФайлов;
	
КонецФункции

// Возвращает путь к файлу на диске. Если файл хранится в информационной базе,
// предварительно сохраняет его.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
// Возвращаемое значение:
//  Строка - полный путь к файлу на диске.
//
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(Знач ПрисоединенныйФайл) Экспорт
	
	ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(ПрисоединенныйФайл.Расширение);
	
	Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ХранимыйФайл
		|ИЗ
		|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДвоичныеДанные = Выборка.ХранимыйФайл.Получить();
			ДвоичныеДанные.Записать(ИмяФайлаСПутем);
		Иначе
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение);
		КонецЕсли;
	Иначе
		Если НЕ ПрисоединенныйФайл.Том.Пустая() Тогда
			ИмяФайлаСПутем = ФайловыеФункцииСлужебный.ПолныйПутьТома(ПрисоединенныйФайл.Том) + ПрисоединенныйФайл.ПутьКФайлу;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
	
КонецФункции

// Записывает присоединенный файл.
// 
// Параметры:
//  ФайлОбъект   - Объект присоединенного файла.
// 
Процедура ЗаписатьИзвлеченныйТекст(ФайлОбъект) Экспорт
	
	Попытка
		ФайлОбъект.Записать();
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет параметр КоличествоФайловВТомах.
Процедура ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	
	Для Каждого Тип Из ТипыВладельцев Цикл
		
		ИмяСправочникаПрисоединенныхФайлов = Метаданные.НайтиПоТипу(Тип).Имя + "ПрисоединенныеФайлы";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаДляФайловВТомах(ИмяСправочникаПрисоединенныхФайлов);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			КоличествоФайловВТомах = КоличествоФайловВТомах + Выборка.КоличествоФайлов;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
// Определяет есть ли хранимые файлы у внешнего объекта.
// 
// Параметры:
//  ВнешнийОбъект     - Ссылка на внешний объект.
//  ЕстьХранимыеФайлы - Булево (возвращаемое значение), варианты значений параметра:
//                        Истина - возврат,
//                        Ложь   - устанавливает Истина, если объект имеет хранимые файлы.
//
Процедура ОпределитьНаличиеХранимыхФайлов(Знач ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	Если ЕстьХранимыеФайлы = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВнешнийОбъект)) <> Неопределено Тогда
		ЕстьХранимыеФайлы = ОбъектИмеетФайлы(ВнешнийОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет массив ХранимыеФайлы данными хранимых файлов объекта ВнешнийОбъект.
Процедура ПолучитьХранимыеФайлы(Знач ВнешнийОбъект, Знач ХранимыеФайлы) Экспорт
	
	ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВнешнийОбъект)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	МассивФайлов = ПолучитьВсеПодчиненныеФайлы(ВнешнийОбъект);
	Для Каждого Файл Из МассивФайлов Цикл
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", Файл.ДатаМодификацииУниверсальная);
		ДанныеФайла.Вставить("Размер",                       Файл.Размер);
		ДанныеФайла.Вставить("Наименование",                 Файл.Наименование);
		ДанныеФайла.Вставить("Расширение",                   Файл.Расширение);
		
		ДанныеФайла.Вставить("ДвоичныеДанныеФайла",          ПрисоединенныеФайлы.ПолучитьДанныеФайла(
			Файл, Неопределено).СсылкаНаДвоичныеДанныеФайла);
		
		ДанныеФайла.Вставить("Текст",                        Файл.ТекстХранилище.Получить());
		
		ХранимыеФайлы.Добавить(ДанныеФайла);
	КонецЦикла;
		
КонецПроцедуры

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.2.11";
	Обработчик.Процедура = "ПрисоединенныеФайлыСлужебный.ОчиститьНекорректныеЗаписиРегистраСведенийНаличиеПрисоединенныхФайлов";
	Обработчик.Опциональный = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Обновляет свойства файла при окончании редактирования.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//  ИнформацияОФайле   - Структура со свойствами:
//                       <обязательные>
//                         АдресФайлаВоВременномХранилище - Строка - адрес новых двоичных данных файла.
//                         АдресВременногоХранилищаТекста - Строка - адрес новых двоичных данных текста,
//                                                          извлеченного из файла.
//                       <необязательные>
//                         ДатаМодификацииУниверсальная   - Дата - дата последнего изменения файла, если
//                                                          свойство не указано или не заполнено, тогда будет
//                                                          установлена текущая дата сеанса.
//                         Расширение                     - Строка - новое расширение файла.
//
Процедура ПоместитьФайлВХранилищеИОсвободить(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	ИнформацияОФайле.Вставить("Редактирует", Справочники.Пользователи.ПустаяСсылка());
	
	ПрисоединенныеФайлы.ОбновитьПрисоединенныйФайл(ПрисоединенныйФайл, ИнформацияОФайле)
	
КонецПроцедуры

// Отменяет редактирование файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла, который требуется освободить.
//
Процедура ОсвободитьФайл(Знач ПрисоединенныйФайл) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	Если НЕ ФайлОбъект.Редактирует.Пустая() Тогда
		ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
		ФайлОбъект.Записать();
	Конецесли;
	
КонецПроцедуры

// Отмечает файл, как редактируемый.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла, который требуется отметить.
//
Процедура ЗанятьФайлДляРедактированияСервер(Знач ПрисоединенныйФайл) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	ФайлОбъект.Редактирует = Пользователи.ТекущийПользователь();
	ФайлОбъект.Записать();
	
КонецПроцедуры

// Помещает зашифрованные данные файла в хранилище и устанавливает файлу признак Зашифрован.
//
// Параметры:
//  ПрисоединенныйФайл  - Ссылка на присоединенный файл.
//  ЗашифрованныеДанные - Структура со свойством:
//                          АдресВременногоХранилища - Строка - адрес зашифрованных двоичных данных.
//  МассивОтпечатков    - Массив Структур отпечатков по сертификатам.
// 
Процедура Зашифровать(Знач ПрисоединенныйФайл, Знач ЗашифрованныеДанные, Знач МассивОтпечатков) Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.Заблокировать();
	Иначе
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	Для Каждого ОтпечатокСтруктура Из МассивОтпечатков Цикл
		НоваяСтрока = ПрисоединенныйФайлОбъект.СертификатыШифрования.Добавить();
		НоваяСтрока.Отпечаток = ОтпечатокСтруктура.Отпечаток;
		НоваяСтрока.Представление = ОтпечатокСтруктура.Представление;
		НоваяСтрока.Сертификат = Новый ХранилищеЗначения(ОтпечатокСтруктура.Сертификат);
	КонецЦикла;
	
	РеквизитыЗначения = Новый Структура;
	РеквизитыЗначения.Вставить("Зашифрован", Истина);
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(""));
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайлОбъект, ЗашифрованныеДанные.АдресВременногоХранилища, РеквизитыЗначения);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект.Записать();
		ПрисоединенныйФайлОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Помещает расшифрованные данные файла в хранилище и снимает файлу признак Зашифрован.
// 
// Параметры:
//  ПрисоединенныйФайл  - Ссылка на присоединенный файл.
//  ЗашифрованныеДанные - Структура со свойством:
//                          АдресВременногоХранилища - Строка - адрес расшифрованных двоичных данных.
//
Процедура Расшифровать(Знач ПрисоединенныйФайл, Знач РасшифрованныеДанные) Экспорт
	
	Перем Отказ;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ПрисоединенныйФайлОбъект.Заблокировать();
	Иначе
		ПрисоединенныйФайлОбъект = ПрисоединенныйФайл;
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект.СертификатыШифрования.Очистить();
	
	РеквизитыЗначения = Новый Структура;
	РеквизитыЗначения.Вставить("Зашифрован", Ложь);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(РасшифрованныеДанные.АдресВременногоХранилища);
	СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИзвлеченныйТекст = "";
	
	Если ЭтоАдресВременногоХранилища(РасшифрованныеДанные.АдресВременногоХранилищаТекста) Тогда
		ИзвлеченныйТекст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(РасшифрованныеДанные.АдресВременногоХранилищаТекста);
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
	ИначеЕсли НЕ ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
		// Тексты извлекаются сразу, а не в фоновом задании.
		СтатусИзвлеченияТекста = ИзвлечьТекст(ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
	КонецЕсли;
	
	ПрисоединенныйФайлОбъект.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
	
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(ИзвлеченныйТекст, Новый СжатиеДанных(9)));
	
	ОбновитьДвоичныеДанныеФайлаНаСервере(ПрисоединенныйФайлОбъект, ДвоичныеДанные, РеквизитыЗначения);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ПрисоединенныйФайлОбъект.Записать();
		ПрисоединенныйФайлОбъект.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Заменяет двоичные данные файла в ИБ на данные во временном хранилище.
Процедура ОбновитьДвоичныеДанныеФайлаНаСервере(Знач ПрисоединенныйФайл,
                                               Знач АдресФайлаВоВременномХранилищеДвоичныеДанные,
                                               Знач РеквизитыЗначения = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлСсылка = ПрисоединенныйФайл;
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
		ФайлСсылка = ФайлОбъект.Ссылка;
	КонецЕсли;
	
	Если ТипЗнч(АдресФайлаВоВременномХранилищеДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
		ДвоичныеДанные = АдресФайлаВоВременномХранилищеДвоичныеДанные;
	Иначе
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилищеДвоичныеДанные);
	КонецЕсли;
	
	ФайлОбъект.Изменил = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(РеквизитыЗначения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ФайлОбъект, РеквизитыЗначения);
	КонецЕсли;
	
	ТранзакцияАктивна = Ложь;
	
	Попытка
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			ТранзакцияАктивна = Истина;
			МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ПрисоединенныйФайл = ФайлСсылка;
			МенеджерЗаписи.Прочитать();
			МенеджерЗаписи.ПрисоединенныйФайл = ФайлСсылка;
			МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
			МенеджерЗаписи.Записать();
		Иначе
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			
			Попытка
				ФайлНаДиске = Новый Файл(ПолныйПуть);
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПуть);
				
				ФайловыеФункцииСлужебный.ДобавитьНаДиск(
					ДвоичныеДанные,
					ФайлОбъект.ПутьКФайлу,
					ФайлОбъект.Том,
					ФайлОбъект.ДатаМодификацииУниверсальная,
					"",
					ФайлОбъект.Наименование,
					ФайлОбъект.Расширение,
					ДвоичныеДанные.Размер(),
					ФайлОбъект.Зашифрован);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Запись файла на диск'"),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники[ФайлСсылка.Метаданные().Имя],
					ФайлСсылка,
					ТекстОшибкиПриСохраненииФайлаВТоме(
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ФайлСсылка));
				
				ВызватьИсключение ТекстОшибкиПриСохраненииФайлаВТоме(КраткоеПредставлениеОшибки(ИнформацияОбОшибке), ФайлСсылка);
			КонецПопытки;
			
		КонецЕсли;
		
		ФайлОбъект.Размер = ДвоичныеДанные.Размер();
		
		ФайлОбъект.Записать();
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПрисоединенныйФайл)) Тогда
			ФайлОбъект.Разблокировать();
		КонецЕсли;
		
		Если ТранзакцияАктивна Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
	Исключение
		Если ТранзакцияАктивна Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Обновление данных присоединенного файла в хранилище файлов'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Записывает двоичные данные файла в информационную базу.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//  ДвоичныеДанные     - ДвоичныеДанные, которые требуется записать.
//
Процедура ЗаписатьФайлВИнформационнуюБазу(Знач ПрисоединенныйФайл, Знач ДвоичныеДанные) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПрисоединенныйФайл = ПрисоединенныйФайл;
	МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Определяет, что к объекту присоединен по крайней мере один файл.
Функция ОбъектИмеетФайлы(Знач ВладелецФайла, Знач ФайлИсключение = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяСправочника = ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	Если ФайлИсключение <> Неопределено Тогда
		ТекстЗапроса =  ТекстЗапроса +
		"
		|	И ПрисоединенныеФайлы.Ссылка <> &Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("ВладелецФайла", ВладелецФайла);
	
	Если ФайлИсключение <> Неопределено Тогда
		Запрос.Параметры.Вставить("Ссылка", ФайлИсключение);
	КонецЕсли;
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает массив присоединенных файлов для указанного владельца.
//
// Параметры:
//  ВладелецФайла - Ссылка на владельца присоединенных файлов.
//
// Возвращаемое значение:
//  Массив ссылок на присоединенные файлы.
//
Функция ПолучитьВсеПодчиненныеФайлы(Знач ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла";
	
	ИмяСправочника = ВладелецФайла.Метаданные().Имя + "ПрисоединенныеФайлы";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Обработчик подписки на событие "Перед удалением" присоединенного файла.
Процедура ПередУдалениемПрисоединенногоФайлаСервер(Знач Ссылка,
                                                   Знач ВладелецФайла,
                                                   Знач Том,
                                                   Знач ТипХраненияФайла,
                                                   Знач ПутьКФайлу) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбъектИмеетФайлы(ВладелецФайла, Ссылка) Тогда
		МенеджерЗаписи = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.ЕстьФайлы = Ложь;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(Том) + ПутьКФайлу;
			Попытка
				Файл = Новый Файл(ПолныйПуть);
				Файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайлы(ПолныйПуть);
				ПутьСПодкаталогом = Файл.Путь;
				МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
				Если МассивФайловВКаталоге.Количество() = 0 Тогда
					УдалитьФайлы(ПутьСПодкаталогом);
				КонецЕсли;
			Исключение
				// Если файл не удален - ошибки не было.
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки "при записи" присоединенного файла
//
Процедура ПриЗаписиПрисоединенногоФайлаСервер(ВладелецФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьИзменилась = Ложь;
	
	МенеджерЗаписи = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ ЗначениеЗаполнено(МенеджерЗаписи.ОбъектСФайлами) Тогда
		МенеджерЗаписи.ОбъектСФайлами = ВладелецФайла;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если НЕ МенеджерЗаписи.ЕстьФайлы Тогда
		МенеджерЗаписи.ЕстьФайлы = Истина;
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(МенеджерЗаписи.ИдентификаторОбъекта) Тогда
		МенеджерЗаписи.ИдентификаторОбъекта = ПолучитьОчереднойИдентификаторОбъекта();
		ЗаписьИзменилась = Истина;
	КонецЕсли;
	
	Если ЗаписьИзменилась Тогда
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Создает у Получателя копии всех присоединенных файлов Источника.
// Источник и Получатель должны быть объектами одного типа.
//
// Параметры:
//  Источник   - Ссылка - объект, имеющий присоединенные файлы для копирования.
//  Получатель - Ссылка - объект, к которому копируются присоединенные файлы.
//
Процедура СкопироватьПрисоединенныеФайлы(Знач Источник, Знач Получатель) Экспорт
	
	КопируемыеФайлы = ПолучитьВсеПодчиненныеФайлы(Источник.Ссылка);
	Для Каждого КопируемыйФайл Из КопируемыеФайлы Цикл
		Если КопируемыйФайл.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(КопируемыйФайл);
		КопияФайла = КопируемыйФайл.Скопировать();
		КопияФайлаСсылка = МенеджерОбъекта.ПолучитьСсылку();
		КопияФайла.УстановитьСсылкуНового(КопияФайлаСсылка);
		КопияФайла.ВладелецФайла = Получатель.Ссылка;
		КопияФайла.Редактирует = Справочники.Пользователи.ПустаяСсылка();
		
		КопияФайла.ТекстХранилище = Новый ХранилищеЗначения(КопируемыйФайл.ТекстХранилище.Получить());
		КопияФайла.ФайлХранилище = Новый ХранилищеЗначения(КопируемыйФайл.ФайлХранилище.Получить());
		
		КопияФайла.ЭлектронныеЦифровыеПодписи.Очистить();
		Для Каждого КопируемаяСтрокаТаблицы Из КопируемыйФайл.ЭлектронныеЦифровыеПодписи Цикл
			КопияСтрокиТаблицы = КопияФайла.ЭлектронныеЦифровыеПодписи.Добавить();
			ЗаполнитьЗначенияСвойств(КопияСтрокиТаблицы, КопируемаяСтрокаТаблицы);
			КопияСтрокиТаблицы.Подпись = КопируемаяСтрокаТаблицы.Подпись;
			КопияСтрокиТаблицы.Сертификат = КопируемаяСтрокаТаблицы.Сертификат;
		КонецЦикла;
		
		КопияФайла.СертификатыШифрования.Очистить();
		Для Каждого КопируемаяСтрокаТаблицы Из КопируемыйФайл.СертификатыШифрования Цикл
			КопияСтрокиТаблицы = КопияФайла.СертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(КопияСтрокиТаблицы, КопируемаяСтрокаТаблицы);
			КопияСтрокиТаблицы.Сертификат = КопируемаяСтрокаТаблицы.Сертификат;
		КонецЦикла;
		
		ДвоичныеДанные = ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(КопируемыйФайл);
		КопияФайла.ТипХраненияФайла = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
		Если ФайловыеФункцииСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ЗаписатьФайлВИнформационнуюБазу(КопияФайлаСсылка, ДвоичныеДанные);
		Иначе
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ДвоичныеДанные,
				КопияФайла.ПутьКФайлу,
				КопияФайла.Том,
				КопияФайла.ДатаМодификацииУниверсальная,
				"",
				КопияФайла.Наименование,
				КопияФайла.Расширение,
				КопияФайла.Размер);
		КонецЕсли;
		КопияФайла.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Извлекает текст из двоичных данных, возвращает статус извлечения.
Функция ИзвлечьТекст(Знач ДвоичныеДанные, Знач Расширение, ИзвлеченныйТекст) Экспорт
	
	Если ФайловыеФункцииСлужебный.ЭтоПлатформаWindows()
	   И ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
		ДвоичныеДанные.Записать(ИмяВременногоФайла);
		
		Отказ = Ложь;
		ИзвлеченныйТекст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(ИмяВременногоФайла, , Отказ);
		
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Извлечение текста'"),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Отказ Тогда
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
		Иначе
			Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		КонецЕсли;
	Иначе
		ИзвлеченныйТекст = "";
		Возврат Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
КонецФункции

// Очищает записи, содержащие символ с кодом 0 в реквизите ИдентификаторОбъекта.
Процедура ОчиститьНекорректныеЗаписиРегистраСведенийНаличиеПрисоединенныхФайлов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НаличиеПрисоединенныхФайлов.ОбъектСФайлами
	|ИЗ
	|	РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
	|ГДЕ
	|	НаличиеПрисоединенныхФайлов.ИдентификаторОбъекта = &ИдентификаторОбъекта";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИдентификаторОбъекта", Символ(0));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.НаличиеПрисоединенныхФайлов.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.ОбъектСФайлами.Установить(Выборка.ОбъектСФайлами);
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Функция ПолучениеФайлаЗапрещено(ЭлементДанных)
	
	Возврат ЭлементДанных.ЭтоНовый()
	   И НЕ ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
	          ЭлементДанных.Расширение, Ложь);
	
КонецФункции

Процедура ПоместитьФайлВРеквизитСправочника(ЭлементДанных)
	
	Попытка
		// Помещаем данные файла из тома на диске в служебный реквизит справочника
		ЭлементДанных.ФайлХранилище = ФайловыеФункцииСлужебный.ПоместитьДвоичныеДанныеВХранилище(ЭлементДанных.Том, ЭлементДанных.ПутьКФайлу, ЭлементДанных.Ссылка.УникальныйИдентификатор());
	Исключение
		// Возможно, файл не был найден. Отправку данных не прерываем.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Не удалось отправить файл при обмене данными'"),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) );
		
		ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	КонецПопытки;
	
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
КонецПроцедуры

// Возвращает новый идентификатор объекта.
//  Для получения нового идентификатора выбирает последний идентификатор объекта
// из регистра НаличиеПрисоединенныхФайлов увеличивает его значение
// на одну единицу и возвращает полученный результат.
//
// Возвращаемое значение:
//  Строка (10) - новый идентификатор объекта.
//
Функция ПолучитьОчереднойИдентификаторОбъекта()
	
	// Вычисление нового идентификатора объекта.
	Результат = "0000000000"; // По длине ресурса ИдентификаторОбъекта.
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НаличиеПрисоединенныхФайлов.ИдентификаторОбъекта КАК ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдентификаторОбъекта УБЫВ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Идентификатор = Выборка.ИдентификаторОбъекта;
		
		Если ПустаяСтрока(Идентификатор) Тогда
			Возврат Результат;
		КонецЕсли;
		
		// Правила вычисления, как в обычном сложении: при 
		// заполнении текущего разряда следующий разряд увеличивается
		// на единицу, при этом, в текущем разряде значение становится
		// равным нулю. Значениями разрядов выступают символы
		// [0..9] и [a..z]. Таким образом один разряд может содержать
		// 36 значений.
		
		Позиция = 10; // 9- индекс 10-го символа
		Пока Позиция > 0 Цикл
			
			Символ = Сред(Идентификатор, Позиция, 1);
			
			Если Символ = "z" Тогда
				Идентификатор = Лев(Идентификатор, Позиция-1) + "0" + Прав(Идентификатор, 10 - Позиция);
				Позиция = Позиция - 1;
				Продолжить;
				
			ИначеЕсли Символ = "9" Тогда
				НовыйСимвол = "a";
			Иначе
				НовыйСимвол = Символ(КодСимвола(Символ)+1);
			КонецЕсли;
			
			Идентификатор = Лев(Идентификатор, Позиция-1) + НовыйСимвол + Прав(Идентификатор, 10 - Позиция);
			Прервать;
		КонецЦикла;
		
		Результат = Идентификатор;
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаДляФайловСНеизвлеченнымТекстом(Знач ИмяСправочника, Знач ЧислоФайловВВыборке, Знач ПолучитьВсеФайлы = Ложь)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ПрисоединенныеФайлы.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
	|	ПрисоединенныеФайлы.ТипХраненияФайла КАК ТипХраненияФайла,
	|	ПрисоединенныеФайлы.Расширение КАК Расширение,
	|	ПрисоединенныеФайлы.Наименование КАК Наименование
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	(ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
	|			ИЛИ ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
	|	И НЕ ПрисоединенныеФайлы.Зашифрован";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 1", ?(
		ПолучитьВсеФайлы,
		"",
		"ПЕРВЫЕ " + Формат(ЧислоФайловВВыборке, "ЧГ=; ЧН=")) );
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляФайловВТомах(Знач ИмяСправочника)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ПрисоединенныеФайлы.Ссылка), 0) КАК КоличествоФайлов
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	ПрисоединенныеФайлы.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДляЧислаФайловСНеизвлеченнымТекстом(Знач ИмяСправочника)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(ПрисоединенныеФайлы.Ссылка), 0) КАК КоличествоФайлов
	|ИЗ
	|	&ИмяСправочника КАК ПрисоединенныеФайлы
	|ГДЕ
	|	(ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
	|			ИЛИ ПрисоединенныеФайлы.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
	|	И НЕ ПрисоединенныеФайлы.Зашифрован";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", "Справочник." + ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриСохраненииФайлаВТоме(Знач СообщениеОбОшибке, Знач Файл)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ошибка, при сохранении файла в томе:
		           |""%1"".
		           |
		           |Ссылка на файл: ""%2"".'"),
		СообщениеОбОшибке,
		ПолучитьНавигационнуюСсылку(Файл) );
	
КонецФункции

