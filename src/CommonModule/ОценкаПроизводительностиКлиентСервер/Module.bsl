////////////////////////////////////////////////////////////////////////////////
//  Методы, позволяющие начать и закончить замер времени выполнения ключевой операции
//  Также методы подключения внешней компоненты
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Активизирует замер времени выполнения ключевой операции.
//
// Параметры:
//  КлючеваяОперация - СправочникСсылка.КлючевыеОперации - ключевая операция. 
//  При вызове с сервера аргумент игнорируется.
//
// Возвращаемое значение:
//  Дата - время начала замера.
//
Функция НачатьЗамерВремени(КлючеваяОперация = Неопределено) Экспорт
	
	ВремяНачала = 0;
	Если ОценкаПроизводительностиПовтИсп.ВыполнятьЗамерыПроизводительности() Тогда
		ВремяНачала = ЗначениеТаймера();
		#Если Клиент Тогда
			Если КлючеваяОперация = Неопределено Тогда
				ВызватьИсключение НСтр("ru = 'Не указана ключевая операция.'");
			КонецЕсли;
			Если ОценкаПроизводительностиЗамерВремени = Неопределено Тогда
			    ОценкаПроизводительностиЗамерВремени = Новый Структура;				
				ОценкаПроизводительностиЗамерВремени.Вставить("Замеры", Новый Соответствие);
				
				ТекущийПериодЗаписи = ОценкаПроизводительностиВызовСервераПолныеПрава.ПериодЗаписи();
				ОценкаПроизводительностиЗамерВремени.Вставить("ПериодЗаписи", ТекущийПериодЗаписи);
				
				ПодключитьОбработчикОжидания("ЗаписатьРезультатыАвто", ТекущийПериодЗаписи, Истина);
			КонецЕсли;
			Замеры = ОценкаПроизводительностиЗамерВремени["Замеры"]; 
			
			БуферКлючевойОперации = Замеры.Получить(КлючеваяОперация);
			Если БуферКлючевойОперации = Неопределено Тогда
				БуферКлючевойОперации = Новый Соответствие;
				Замеры.Вставить(КлючеваяОперация, БуферКлючевойОперации);
			КонецЕсли;
			
			НачатыйЗамер = БуферКлючевойОперации.Получить(ВремяНачала);
			Если НачатыйЗамер = Неопределено Тогда
				БуферКлючевойОперации.Вставить(ВремяНачала, Новый Соответствие);	
			КонецЕсли;
			
			ПодключитьОбработчикОжидания("ЗакончитьЗамерВремениАвто", 0.1, Истина);
		#КонецЕсли
	КонецЕсли;

	Возврат ВремяНачала;
	
КонецФункции

// Процедура завершает замер времени на сервере и записывает результат на сервере
// Параметры:
//  КлючеваяОперацияСсылка - СправочникСсылка.КлючевыеОперации
//  ВремяНачала - Дата
Процедура ЗакончитьЗамерВремени(КлючеваяОперацияСсылка, ВремяНачала) Экспорт					  	
	ВремяОкончания = ЗначениеТаймера();		
    ВремяВыполнения = (ВремяОкончания - ВремяНачала);
	ОценкаПроизводительностиВызовСервераПолныеПрава.ЗафиксироватьДлительностьКлючевойОперации(КлючеваяОперацияСсылка, 
		ВремяВыполнения, ВремяНачала); 
КонецПроцедуры

// Функция вызывается при старте замера времени и его завершении.
// ТекущаяДата вместо ТекущаяДатаСеанса используется осмысленно.
// Но нужно помнить, что если время начала замера получено на клиенте, 
// то и время конца замера нужно вычислять на клиенте. Для сервера то же самое.
//
// Возвращаемое значение:
//  Дата - время начала замера.
Функция ЗначениеТаймера() Экспорт
	#Если Сервер Тогда
		Возврат ТекущаяДатаСеанса();		
	#Иначе
		Возврат ТекущаяДата();
	#КонецЕсли	
КонецФункции

// Ключ параметра регламентного задания, соответствующий локальному каталогу экспорта
Функция ЛокальныйКаталогЭкспортаКлючЗадания() Экспорт
	Возврат "ЛокальныйКаталогЭкспорта";		
КонецФункции

// Ключ параметра регламентного задания, соответствующий ftp каталогу экспорта
Функция FTPКаталогЭкспортаКлючЗадания() Экспорт
	Возврат "FTPКаталогЭкспорта";		
КонецФункции


#Если Сервер Тогда
// Процедура записывает данные в журнал регистрации
//
// Параметры:
//  ИмяСобытия - Строка
//  Уровень - УровеньЖурналаРегистрации
//  ТекстСообщения - Строка
//
Процедура ЗаписатьВЖурналРегистрации(ИмяСобытия, Уровень, ТекстСообщения) Экспорт
	
	ЗаписьЖурналаРегистрации(ИмяСобытия,
		Уровень,
		,
		"Оценка производительности",
		ТекстСообщения);
	
КонецПроцедуры
#КонецЕсли

// Получает имя дополнительного свойства не проверять приоритеты при записи ключевой операции
//
// Возвращаемое значение:
//  Строка - имя дополнительного свойства
//
Функция НеПроверятьПриоритет() Экспорт
	Возврат "НеПровеятьПриоритет";	
КонецФункции



