////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменССайтом.ОбновитьПараметрыСеанса();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПриЧтенииСозданииНаСервере(ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ИспользоватьРегламентныеЗадания Тогда
		Задание = ТекущийОбъект.ПолучитьРегламентноеЗадание();
		Если Задание = НеОпределено Тогда
			Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание("ОбменССайтом");
			Задание.Использование = Истина;
			Задание.Ключ = Строка(Новый УникальныйИдентификатор);
			Задание.Наименование = ТекущийОбъект.Наименование;
			ТекущийОбъект.ИдентификаторРегламентногоЗадания = Задание.УникальныйИдентификатор;
		КонецЕсли;
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(ТекущийОбъект.Код);
		Задание.Параметры = ПараметрыЗадания;
		Задание.Расписание = РасписаниеРегламентногоЗадания;
		Задание.Записать();
	Иначе
		ТекущийОбъект.УдалитьРегламентноеЗадание();
		ТекущийОбъект.ИдентификаторРегламентногоЗадания = НеОпределено;
	КонецЕсли;
	
	// Таблица каталогов
	
	ТаблицаКаталоговТЗ = РеквизитФормыВЗначение("ТаблицаКаталогов");
	
	ТаблицаКаталоговТЗ.Колонки.Добавить("ХранилищеНастроекКомпоновки", Новый ОписаниеТипов("ХранилищеЗначения"));
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталоговТЗ Цикл
		
		Если НЕ ЭтоАдресВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НастройкиКомпоновки = ПолучитьИзВременногоХранилища(СтрокаТаблицыКаталогов.АдресНастроекКомпоновки);
		
		СтрокаТаблицыКаталогов.ХранилищеНастроекКомпоновки = Новый ХранилищеЗначения(НастройкиКомпоновки);
		
	КонецЦикла;
	
	ТаблицаКаталоговТЗ.Колонки.Удалить("АдресНастроекКомпоновки");
	
	ТекущийОбъект.СохраненнаяТаблицаКаталогов = Новый ХранилищеЗначения(ТаблицаКаталоговТЗ);
	
	Если ТекущийОбъект.ВыгружатьТолькоИзменения Тогда
		
		ТекущийОбъект.ВыполнятьПолнуюВыгрузкуПринудительно = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ОбменТоварами И ТаблицаКаталогов.Количество() = 0 Тогда
		
		Отказ = Истина;
		Сообщение = НСтр("ru = 'Таблица каталогов не заполнена!'");
		Поле = "ТаблицаКаталогов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, Объект.Ссылка, Поле);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Если УзелОбменаЭтаИБ Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Узел соответствует этой информационной базе и не может использоваться в обмене с сайтом. Используйте другой узел обмена или создайте новый.'"));
			
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьВидимостьСтраницТипаОбмена();
	
	УстановитьВидимостьСтраницФормы();
	
	УстановитьДоступностьПолейОбменЗаказами();
	
	ИнициализироватьПереключатели();
	
	УстановитьДоступностьРасписанияОбмена();
	
	УстановитьНадписьРасписанияОбмена();
	
	УстановитьДоступностьПроводитьДокументыОперативно();
	
	УстановитьТипЗначенийСпискаГруппТаблицыКаталогов();
	
	УстановитьПараметрыТаблицыКаталогов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КлассифицироватьПоВидамНоменклатурыПриИзменении(Элемент)
	
	УстановитьПараметрыТаблицыКаталогов();
	
	ИзменитьТипЗначенийСпискаГруппТаблицыКаталогов();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	ПриИзмененииИспользоватьРегламентныеЗадания()
КонецПроцедуры

&НаКлиенте
Процедура ОбменТоварамиПриИзменении(Элемент)
	ПриИзмененииОбменТоварами()
КонецПроцедуры

&НаКлиенте
Процедура ОбменЗаказамиПриИзменении(Элемент)
	ПриИзмененииОбменЗаказами()
КонецПроцедуры

&НаКлиенте
Процедура ПереключательНазначениеОбменаПриИзменении(Элемент)
	ПриИзмененииПереключательНазначениеОбмена()
КонецПроцедуры

&НаКлиенте
Процедура ПереключательВыгрузкаИзмененийПриИзменении(Элемент)
	ПриИзмененииПереключательВыгрузкаИзменений()
КонецПроцедуры

&НаКлиенте
Процедура ПроводитьДокументыПриИзменении(Элемент)
	ПриИзмененииПроводитьДокументы();
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.КаталогВыгрузки;
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение(ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Предупреждение(НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог обмена'");
	Диалог.Каталог   = Объект.КаталогВыгрузки;
	
	Если Диалог.Выбрать() Тогда
		
		Объект.КаталогВыгрузки = Диалог.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект.ФайлЗагрузки;
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение("explorer.exe /select, " + ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(Элемент.ТекстРедактирования, Объект.Комментарий, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Предупреждение(НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.Заголовок = НСтр("ru = 'Выберите xml-файл с заказами'");
	Диалог.ПолноеИмяФайла = Объект.ФайлЗагрузки;
	Диалог.Фильтр = НСтр("ru = 'Документ XML'") + " (*.xml)|*.xml";
	
	Если Диалог.Выбрать() Тогда
		
		Объект.ФайлЗагрузки = Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ "СоответствиеСтатусовЗаказов"

&НаКлиенте
Процедура СоответствиеСтатусовЗаказовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = "";
	Если НЕ ПроверитьДублированиеСтатусов(ИмяКолонки) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Такой статус уже указан в другой строке таблицы!'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"Объект.СоответствиеСтатусовЗаказов", Объект.СоответствиеСтатусовЗаказов.Индекс(Элементы.СоответствиеСтатусовЗаказов.ТекущиеДанные) + 1, ИмяКолонки));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ "ТаблицаКаталогов"

&НаКлиенте
Процедура ТаблицаКаталоговГруппыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Группы = Элементы.ТаблицаКаталогов.ТекущиеДанные.Группы;
	
	Если Группы.Количество() = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(Группы[0].Значение) Тогда
			
			Группы.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКаталоговПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Отказ = НЕ ИдентификаторУникален();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКаталоговПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыбранныеГруппыСерверБезКонтекста(Элемент.ТекущиеДанные.Группы, НадписьВсеГруппы);
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.ИдентификаторКаталога) Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Элемент.ТекущиеДанные.Каталог) Тогда
		
		Элемент.ТекущиеДанные.Каталог = НСтр("ru = 'Каталог товаров'") + " " + ВРег(СокрЛП(Лев(Элемент.ТекущиеДанные.ИдентификаторКаталога, 8)));
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКаталоговПослеУдаления(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКаталоговПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияТаблицаКаталогов(Элемент, Копирование);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаПроверитьСоединение(Команда)
	
	Если Модифицированность Тогда
		
		Ответ = Вопрос(
			НСтр("ru = 'Настройка обмена изменена и не записана. Записать?'"),
			РежимДиалогаВопрос.ДаНет);
		
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если НЕ Записать() Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат = ПолучитьРезультатТестовогоПодключенияКСайтуСервер(Объект.Ссылка);
	
	Предупреждение(Результат);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатТестовогоПодключенияКСайтуСервер(УзелОбмена)

	Возврат ОбменССайтом.ПолучитьРезультатТестовогоПодключенияКСайту(УзелОбмена);

КонецФункции

&НаКлиенте
Процедура НастроитьРасписаниеОбмена(Команда)
	ВыполнитьНастройкуРасписанияОбмена();
	УстановитьНадписьРасписанияОбмена();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтбор(Команда)
	
	Если Элементы.ТаблицаКаталогов.ТекущиеДанные = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьОтборКаталога(Элементы.ТаблицаКаталогов.ТекущиеДанные.АдресНастроекКомпоновки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаКлиенте
Процедура ПриИзмененииОбменЗаказами()
	УстановитьВидимостьСтраницФормы();
	УстановитьДоступностьПолейОбменЗаказами()
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОбменТоварами()
	УстановитьВидимостьСтраницФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПереключательНазначениеОбмена()
	Объект.ВыгружатьНаСайт = ПереключательНазначениеОбмена = 0;
	УстановитьВидимостьСтраницТипаОбмена();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПереключательВыгрузкаИзменений()
	Объект.ВыгружатьТолькоИзменения = ПереключательВыгрузкаИзменений = 1;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПроводитьДокументы()
	УстановитьДоступностьПроводитьДокументыОперативно();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииИспользоватьРегламентныеЗадания()
	
	УстановитьДоступностьРасписанияОбмена();
	
	Если Объект.ИспользоватьРегламентныеЗадания Тогда
		ВыполнитьНастройкуРасписанияОбмена();
		УстановитьНадписьРасписанияОбмена();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриНачалеРедактированияТаблицаКаталогов(Элемент, Копирование)
	
	Если Копирование Тогда
		
		Элемент.ТекущиеДанные.ИдентификаторКаталога = "";
		
	КонецЕсли;
	
	Если (Элемент.ТекущиеДанные.Группы.Количество() = 1
		И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Группы[0].Значение))
		ИЛИ Элемент.ТекущиеДанные.Группы.Количество() = 0 Тогда
			
		НовыйСписокГрупп = Новый СписокЗначений;
		
		Если Объект.КлассифицироватьПоВидамНоменклатуры Тогда 
			ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры");
		Иначе
			ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		КонецЕсли;
		
		НовыйСписокГрупп.ТипЗначения = ТипЗначений;
		НовыйСписокГрупп.Добавить(НеОпределено, НадписьВсеГруппы);
		Элемент.ТекущиеДанные.Группы = НовыйСписокГрупп;
			
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Функция ПроверитьДублированиеСтатусов(ИмяКолонки)
	
	СтатусЗаказаНаСайте = Элементы.СоответствиеСтатусовЗаказов.ТекущиеДанные.СтатусЗаказаНаСайте;
	СтатусЗаказаКлиента = Элементы.СоответствиеСтатусовЗаказов.ТекущиеДанные.СтатусЗаказаКлиента;
	
	Если НЕ ПустаяСтрока(СтатусЗаказаНаСайте) Тогда
		Найдено = Объект.СоответствиеСтатусовЗаказов.НайтиСтроки(Новый Структура("СтатусЗаказаНаСайте", СтатусЗаказаНаСайте));
		Если Найдено.Количество() > 1 Тогда
			ИмяКолонки = "СтатусЗаказаНаСайте";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатусЗаказаКлиента) Тогда
		Найдено = Объект.СоответствиеСтатусовЗаказов.НайтиСтроки(Новый Структура("СтатусЗаказаКлиента", СтатусЗаказаКлиента));
		Если Найдено.Количество() > 1 Тогда
			ИмяКолонки = "СтатусЗаказаКлиента";
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьПолейОбменЗаказами()
	Элементы.ФайлЗагрузки.Доступность = Объект.ОбменЗаказами;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТипЗначенийСпискаГруппТаблицыКаталогов()
	
	Если Объект.КлассифицироватьПоВидамНоменклатуры Тогда 
		
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры");
		
	Иначе
		
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
		
		СтрокаТаблицыКаталогов.Группы.ТипЗначения = ТипЗначений;
		СтрокаТаблицыКаталогов.Группы.Очистить();
		СтрокаТаблицыКаталогов.Группы.Добавить(НеОпределено, НадписьВсеГруппы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницТипаОбмена()
	
	ВыгружатьНаСайт = Объект.ВыгружатьНаСайт;
	
	Если ВыгружатьНаСайт Тогда
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаНаСайт;
	Иначе
		Элементы.СтраницыТипОбмена.ТекущаяСтраница = Элементы.СтраницаВыгрузкаВКаталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализироватьПереключатели()
	
	Если НЕ Объект.ВыгружатьНаСайт Тогда
		ПереключательНазначениеОбмена = 1
	КонецЕсли;
	
	Если Объект.ВыгружатьТолькоИзменения Тогда
		ПереключательВыгрузкаИзменений = 1
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницФормы()
	Элементы.СтраницаВыгрузкаТоваров.Видимость = Объект.ОбменТоварами;
	Элементы.СтраницаОбменЗаказами.Видимость = Объект.ОбменЗаказами;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПроводитьДокументыОперативно()
	Элементы.ПроводитьДокументыОперативно.Доступность = Объект.ПроводитьДокументы;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		ТекстЗаголовка = НСтр("ru='Настроить расписание обмена'");
	Иначе
		ТекстЗаголовка = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Элементы.НастроитьРасписаниеОбмена.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРасписанияОбмена()
	Элементы.НастроитьРасписаниеОбмена.Доступность = Объект.ИспользоватьРегламентныеЗадания;
КонецПроцедуры	

&НаКлиенте
Процедура ВыполнитьНастройкуРасписанияОбмена()
	
	Если РасписаниеРегламентногоЗадания = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
		
	Если Диалог.ОткрытьМодально() Тогда
		РасписаниеРегламентногоЗадания = Диалог.Расписание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтборКаталога(АдресНастроекКомпоновки)
	
	НастройкаКомпоновки = НеОпределено;
	
	Если ЭтоАдресВременногоХранилища(АдресНастроекКомпоновки) Тогда
		
		НастройкаКомпоновки = ПолучитьИзВременногоХранилища(АдресНастроекКомпоновки);
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("НастройкаКомпоновки", НастройкаКомпоновки);
	
	НастройкаКомпоновки = 
		ОткрытьФормуМодально(
			"ПланОбмена.ОбменУправлениеТорговлейСайт.Форма.ФормаНастройкиОтбора",
			ПараметрыФормы);
		
	Если НастройкаКомпоновки = НеОпределено Тогда
			
		Возврат;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(НастройкаКомпоновки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуКаталоговСервер()
	
	НадписьВсеГруппы = "(" + НСтр("ru = 'Все'") + ")";
	
	СохраненнаяТаблицаКаталогов = РеквизитФормыВЗначение("Объект").СохраненнаяТаблицаКаталогов.Получить();
	
	Если НЕ ТипЗнч(СохраненнаяТаблицаКаталогов) = Тип("ТаблицаЗначений") Тогда
		
		СоздатьКаталогПоУмолчаниюСервер();
		
	Иначе
	
		Для Каждого СтрокаСохраненнойТаблицыКаталогов Из СохраненнаяТаблицаКаталогов Цикл
			
			НоваяСтрока = ТаблицаКаталогов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСохраненнойТаблицыКаталогов);
			
			ХранилищеНастроекКомпоновки = СтрокаСохраненнойТаблицыКаталогов.ХранилищеНастроекКомпоновки.Получить();
			
			НоваяСтрока.АдресНастроекКомпоновки = ПоместитьВоВременноеХранилище(ХранилищеНастроекКомпоновки, УникальныйИдентификатор);
			
		КонецЦикла;
		
		Если ТаблицаКаталогов.Количество() = 0 Тогда
			
			СоздатьКаталогПоУмолчаниюСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКаталогПоУмолчаниюСервер()

	НоваяСтрока = ТаблицаКаталогов.Добавить();
	НоваяСтрока.Каталог = НСтр("ru = 'Основной каталог товаров'");
	НоваяСтрока.Группы.Добавить(НеОпределено, НадписьВсеГруппы);
	НоваяСтрока.ИдентификаторКаталога = Строка(Новый УникальныйИдентификатор);
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ОбработатьВыбранныеГруппыСерверБезКонтекста(СписокГрупп, НадписьВсеГруппы)
	
	ГруппыВыбраны = Ложь;
	
	// Удалить не группы номенклатуры
	
	МассивУдалить = Новый Массив;
	
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		ТекГруппа = ЭлементСЗ.Значение;
		
		Если (НЕ ЗначениеЗаполнено(ТекГруппа))
			ИЛИ 
			(ТипЗнч(ТекГруппа) = Тип("СправочникСсылка.Номенклатура")
			И НЕ ТекГруппа.ЭтоГруппа) Тогда
			
			МассивУдалить.Добавить(ЭлементСЗ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ЭлементМУ Из МассивУдалить Цикл
		
		СписокГрупп.Удалить(ЭлементМУ);
		
	КонецЦикла;
	
	// Удалить дубли и подчиненные элементы
	
	МассивУдалить = Новый Массив;
	
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		Если НЕ МассивУдалить.Найти(ЭлементСЗ) = НеОпределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекГруппа = ЭлементСЗ.Значение;
		
		Для Каждого ЭлементСЗВлож Из СписокГрупп Цикл

			Если НЕ МассивУдалить.Найти(ЭлементСЗВлож) = НеОпределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			Если НЕ ЭлементСЗВлож = ЭлементСЗ
				И ЭлементСЗВлож.Значение = ТекГруппа Тогда
				
				МассивУдалить.Добавить(ЭлементСЗВлож);
				
			Иначе
			
				Если ЭлементСЗВлож.Значение.ПринадлежитЭлементу(ТекГруппа) Тогда
				
					МассивУдалить.Добавить(ЭлементСЗВлож);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ЭлементМУ Из МассивУдалить Цикл
		
		СписокГрупп.Удалить(ЭлементМУ);
		
	КонецЦикла;
	
	Для Каждого ЭлементСЗ Из СписокГрупп Цикл
		
		Если ЗначениеЗаполнено(ЭлементСЗ.Значение) Тогда
			
			ГруппыВыбраны = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ГруппыВыбраны Тогда
		
		СписокГрупп.Очистить();
		
		СписокГрупп.Добавить(НеОпределено, НадписьВсеГруппы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УзелОбменаЯвляетсяЭтойИБСервер()
	ЭтотУзел = ПланыОбмена.ОбменУправлениеТорговлейСайт.ЭтотУзел();
	Возврат Объект.Ссылка = ЭтотУзел;
КонецФункции

&НаКлиенте
Функция ИдентификаторУникален()
	
	ИдентификаторКаталога = Элементы.ТаблицаКаталогов.ТекущиеДанные.ИдентификаторКаталога;
	Найдено = ТаблицаКаталогов.НайтиСтроки(Новый Структура("ИдентификаторКаталога", ИдентификаторКаталога));
	ИдентификаторыУникальны = Найдено.Количество() = 1;
	
	Если НЕ ИдентификаторыУникальны Тогда
		
		ОчиститьСообщения();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Идентификатор каталога должен быть уникальным!'"),
			Объект.Ссылка,
			ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
				"ТаблицаКаталогов", ТаблицаКаталогов.Индекс(Элементы.ТаблицаКаталогов.ТекущиеДанные) + 1, "ИдентификаторКаталога"));

	КонецЕсли;
	
	Возврат ИдентификаторыУникальны;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыТаблицыКаталогов()
	
	Если Объект.КлассифицироватьПоВидамНоменклатуры Тогда
		
		ЗаголовокТаблицы = НСтр("ru = 'Таблица каталогов (соответствие видов номенклатуры каталогам на сайте)'");
		ЗаголовокКолонки = НСтр("ru = 'Виды номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		
	Иначе
		
		ЗаголовокТаблицы = НСтр("ru = 'Таблица каталогов (соответствие групп номенклатуры каталогам на сайте)'");
		ЗаголовокКолонки = НСтр("ru = 'Группы номенклатуры'");
		ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		
	КонецЕсли;
	
	Элементы.ГруппаТаблицаКаталогов.Заголовок = ЗаголовокТаблицы;
	Элементы.ТаблицаКаталоговГруппы.Заголовок = ЗаголовокКолонки;
	Элементы.ТаблицаКаталоговГруппы.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТипЗначенийСпискаГруппТаблицыКаталогов()
	
	Если Объект.КлассифицироватьПоВидамНоменклатуры Тогда 
		
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры");
		
	Иначе
		
		ТипЗначений = Новый ОписаниеТипов("СправочникСсылка.Номенклатура");
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыКаталогов Из ТаблицаКаталогов Цикл
		
		СтрокаТаблицыКаталогов.Группы.ТипЗначения = ТипЗначений;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект)
	
	Задание = ТекущийОбъект.ПолучитьРегламентноеЗадание();
	
	Если НЕ Задание = НеОпределено Тогда
		РасписаниеРегламентногоЗадания = Задание.Расписание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере(ТекущийОбъект = НеОпределено)
	
	Если НЕ ТекущийОбъект = НеОпределено Тогда
		
		УстановитьРасписаниеРегламентногоЗаданияПриЧтенииНаСервере(ТекущийОбъект);
		
		Возврат;
	
	КонецЕсли;
	
	УзелОбменаЭтаИБ = УзелОбменаЯвляетсяЭтойИБСервер();
	
	Если УзелОбменаЭтаИБ Тогда
		
		Возврат;
		
	КонецЕсли;

	ЗаполнитьТаблицуКаталоговСервер();
	
	ИспользоватьЗаказыКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");

КонецПроцедуры