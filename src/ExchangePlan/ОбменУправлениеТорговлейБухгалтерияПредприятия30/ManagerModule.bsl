#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции БСП

// Определяет несколько вариантов настройки расписания выполнения обмена данными;
// Рекомендуется указывать не более 3 вариантов;
// Эти варианты должны быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  ВариантыНастройки - СписокЗначений - список расписаний обмена данными
//
Функция ВариантыНастройкиРасписания() Экспорт
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	// Расписание №1
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	
	Расписание1 = Новый РасписаниеРегламентногоЗадания;
	Расписание1.ДниНедели                = ДниНедели;
	Расписание1.ПериодПовтораВТечениеДня = 900; // 15 минут
	Расписание1.ПериодПовтораДней        = 1; // каждый день
	Расписание1.Месяцы                   = Месяцы;
	
	// Расписание №2
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание2 = Новый РасписаниеРегламентногоЗадания;
	Расписание2.ВремяНачала              = Дата('00010101080000');
	Расписание2.ВремяКонца               = Дата('00010101200000');
	Расписание2.ПериодПовтораВТечениеДня = 3600; // каждый час
	Расписание2.ПериодПовтораДней        = 1; // каждый день
	Расписание2.ДниНедели                = ДниНедели;
	Расписание2.Месяцы                   = Месяцы;
	
	// Расписание №3
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	
	Расписание3 = Новый РасписаниеРегламентногоЗадания;
	Расписание3.ДниНедели         = ДниНедели;
	Расписание3.ВремяНачала       = Дата('00010101020000');
	Расписание3.ПериодПовтораДней = 1; // каждый день
	Расписание3.Месяцы            = Месяцы;
	
	// возвращаемое значение функции
	ВариантыНастройки = Новый СписокЗначений;
	
	ВариантыНастройки.Добавить(Расписание1, "Один раз в 15 минут, кроме субботы и воскресенья");
	ВариантыНастройки.Добавить(Расписание2, "Каждый час с 8:00 до 20:00, ежедневно");
	ВариантыНастройки.Добавить(Расписание3, "Каждую ночь в 2:00, кроме субботы и воскресенья");
	
	Возврат ВариантыНастройки;
	
КонецФункции

// Определяет версию платформы базы-приемника для создания СОМ-подключения;
// Возможные варианты возвращаемого значения: "V81"; "V82"
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 3 - версия платформы базы-приемника (V81; V82)
//
Функция ВерсияПлатформыИнформационнойБазы() Экспорт
	
	Возврат "V82";
	
КонецФункции

Функция ПрефиксНастройкиОбменаДанными() Экспорт
	
	Возврат "А";
	
КонецФункции

// Возвращает имя файла настроек по умолчанию;
// В этот файл будут выгружены настройки обмена для приемника;
// Это значение должно быть одинаковым в плане обмена источника и приемника.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Строка, 255 - имя файла по умолчанию для выгрузки настроек обмена данными
//
Функция ИмяФайлаНастроекДляПриемника() Экспорт
	
	Возврат "Настройки обмена для БП";
	
КонецФункции

// Возвращает структуру отборов на узле плана обмена с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена
// 
Функция НастройкаОтборовНаУзле() Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",              НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",           Ложь);
	СтруктураНастроек.Вставить("ВыгружатьЦеныНоменклатуры",                 Ложь);
	СтруктураНастроек.Вставить("ПравилаСозданияДоговоровКонтрагентов",      "ПоПартнерам");
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",             Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура("Организация", Новый Массив);
	СтруктураНастроек.Вставить("Организации", СтруктураТабличнойЧастиОрганизации);
	
	СтруктураТабличнойЧастиВидыЦенНоменклатуры = Новый Структура("ВидЦенНоменклатуры", Новый Массив);
	СтруктураНастроек.Вставить("ВидыЦенНоменклатуры", СтруктураТабличнойЧастиВидыЦенНоменклатуры);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла;
// Структура настроек повторяет состав реквизитов шапки плана обмена;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена
// 
Функция ЗначенияПоУмолчаниюНаУзле() Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("РазрешитьПроведениеДокументовПриЗагрузке",  Ложь);
	СтруктураНастроек.Вставить("ПодразделениеПоУмолчанию",                  Справочники.СтруктураПредприятия.ПустаяСсылка());
	СтруктураНастроек.Вставить("ОбобщенныйСклад",                           Справочники.Склады.ПустаяСсылка());
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для пользователя;
// Прикладной разработчик на основе установленных отборов на узле должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена,
//                                       полученная при помощи функции НастройкаОтборовНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле) Экспорт
	
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		ТекстОписания = "Документы выгружаются начиная с " 
			+ Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДФ=dd.MM.yyyy");
	Иначе
		ТекстОписания = "Документы выгружаются за весь период";
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + ";";
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + "Отбор по организациям: " + ПредставлениеКоллекции + ";";
		
	КонецЕсли;
	
	Если НастройкаОтборовНаУзле.ВыгружатьЦеныНоменклатуры Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.ВидыЦенНоменклатуры.ВидЦенНоменклатуры;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + "Отбор по видам цен номенклатуры: " + ПредставлениеКоллекции;
		
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + "Цены номенклатуры не выгружаются";
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + ";";
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для пользователя;
// Прикладной разработчик на основе установленных значений по умолчанию на узле должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзле().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	ТекстОписания = "Подразделение по умолчанию: ";
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.ПодразделениеПоУмолчанию) Тогда
		ТекстОписания = ТекстОписания + Строка(ЗначенияПоУмолчаниюНаУзле.ПодразделениеПоУмолчанию);
	Иначе
		ТекстОписания = ТекстОписания + "не указано";
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + ";";
	
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.ОбобщенныйСклад) Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + "Склад по умолчанию: ";
		ТекстОписания = ТекстОписания + Строка(ЗначенияПоУмолчаниюНаУзле.ОбобщенныйСклад) + ";";
	КонецЕсли;
	
	Если ЗначенияПоУмолчаниюНаУзле.РазрешитьПроведениеДокументовПриЗагрузке Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + "Для новых документов, загружаемых в эту базу, проведение разрешено";
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + "Для новых документов, загружаемых в эту базу, проведение разрешено";
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + ";";
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает представление команды создания нового обмена данными.
//
// Возвращаемое значение:
//  Строка, Неогранич - представление команды, выводимое в пользовательском интерфейсе.
//
// Например:
//	Возврат НСтр("ru = 'Создать обмен в распределенной информационной базе'");
//
Функция ЗаголовокКомандыДляСозданияНовогоОбменаДанными() Экспорт
	
	Возврат "Создать обмен с конфигурацией ""Бухгалтерия предприятия, ред. 3.0""";
	
КонецФункции

// Определяет, будет ли использоваться помощник для создания новых узлов плана обмена.
//
// Возвращаемое значение:
//  Булево - признак использования помощника.
//
Функция ИспользоватьПомощникСозданияОбменаДанными() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает пользовательскую форму для создания начального образа базы.
// Эта форма будет открыта после завершения настройки обмена с помощью помощника.
// Для планов обмена не РИБ функция возвращает пустую строку
//
// Возвращаемое значение:
//  Строка, Неогранич - имя формы
//
// Например:
//	Возврат "ПланОбмена._ДемоРаспределеннаяИнформационнаяБаза.Форма.ФормаСозданияНачальногоОбраза";
//
Функция ИмяФормыСозданияНачальногоОбраза() Экспорт
	
	Возврат "";
	
КонецФункции

// Возвращает массив используемых транспортов сообщений для этого плана обмена
//
// 1. Например, если план обмена поддерживает только два транспорта сообщений FILE и FTP,
// то тело функции следует определить следующим образом:
//
//	Результат = Новый Массив;
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
//	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
//	Возврат Результат;
//
// 2. Например, если план обмена поддерживает все транспорты сообщений, определенных в конфигурации,
// то тело функции следует определить следующим образом:
//
//	Возврат ОбменДаннымиСервер.ВсеТранспортыСообщенийОбменаКонфигурации();
//
// Возвращаемое значение:
//  Массив - массив содержит значения перечисления ВидыТранспортаСообщенийОбмена
//
Функция ИспользуемыеТранспортыСообщенийОбмена() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	Результат.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	Возврат Результат;
	
КонецФункции

 //Возвращает возможность использование данного плана обмена в модели сервсиа
 //
Функция ПланОбменаИспользуетсяВМоделиСервиса() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчета() Экспорт
	Возврат "";
КонецФункции

Функция ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента() Экспорт
	Возврат "";	
КонецФункции	

Процедура ОбработчикПроверкиПараметровУчета(Отказ, Получатель, Сообщение) Экспорт
	
КонецПроцедуры

Функция ОбщиеДанныеУзлов() Экспорт
	
	Возврат "ДатаНачалаВыгрузкиДокументов, Организации, РежимВыгрузкиПриНеобходимости";
	
КонецФункции

// Функция возвращает имя обработки выгрузки данных
//
Функция ИмяОбработкиВыгрузки() Экспорт
	
	Возврат "ОбменУправлениеТорговлейБухгалтерияПредприятия30Выгрузка";
	
КонецФункции // ИмяОбработкиВыгрузки()

// Функция возвращает имя обработки загрузки данных
//
Функция ИмяОбработкиЗагрузки() Экспорт
	
	Возврат "ОбменУправлениеТорговлейБухгалтерияПредприятия30Загрузка";
	
КонецФункции // ИмяОбработкиЗагрузки()

// Возвращает краткую информацию по обмену, выводимую при настройке синхронизации данных.
//
Функция КраткаяИнформацияПоОбмену() Экспорт
	
	ПоясняющийТекст = НСтр("ru = 'Позволяет синхронизировать данные между конфигурацией Управление торговлей ред. 11 и Бухгалтерия Предприятия ред. 3. 
	|В синхронизации участвуют следующие типы данных: справочники (например, Организации), документы (например, 
	|Реализация товаров), регистры сведений (например, Курсы валют), план видов характеристик Дополнительные реквизиты и сведения, а так же константы.
	|
	|Синхронизация является двухсторонней и позволяет иметь актуальные данные в каждой из информационных баз.'");

	Возврат ПоясняющийТекст;
	
КонецФункции

// Возвращаемое значение: Строка - Ссылка на подробную информацию по настраиваемой синхронизации,
// в виде гиперссылки или полного пути к форме
Функция ПодробнаяИнформацияПоОбмену() Экспорт
	Возврат "ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30.Форма.ПодробнаяИнформация";
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функции для работы обмена через внешнее соединение

// Возвращает структуру отборов на узле плана обмена базы корреспондента с установленными значениями по умолчанию;
// Структура настроек повторяет состав реквизитов шапки и табличных частей плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры,
// а для табличных частей используются структуры,
// содержащие массивы значений полей табличных частей плана обмена.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура отборов на узле плана обмена базы корреспондента
// 
Функция НастройкаОтборовНаУзлеБазыКорреспондента() Экспорт
	
	СтруктураТабличнойЧастиОрганизации = Новый Структура;
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация",      Новый Массив);
	СтруктураТабличнойЧастиОрганизации.Вставить("Организация_Ключ", Новый Массив);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВыгружатьПартнеров",                Истина);
	СтруктураНастроек.Вставить("ДатаНачалаВыгрузкиДокументов",      НачалоГода(ТекущаяДата()));
	СтруктураНастроек.Вставить("ИспользоватьОтборПоОрганизациям",   Ложь);
	СтруктураНастроек.Вставить("РежимВыгрузкиПриНеобходимости",     Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	СтруктураНастроек.Вставить("Организации",                       СтруктураТабличнойЧастиОрганизации);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает структуру значений по умолчению для узла базы корреспондента;
// Структура настроек повторяет состав реквизитов шапки плана обмена базы корреспондента;
// Для реквизитов шапки используются аналогичные по ключу и значению элементы структуры.
// 
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтруктураНастроек - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента
//
Функция ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента() Экспорт
	
	СтруктураНастроек = Новый Структура;

	СтруктураНастроек.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров",       "");
	СтруктураНастроек.Вставить("НоменклатурнаяГруппаПоУмолчанию",                        "");
	СтруктураНастроек.Вставить("СтатьяПрочихДоходовРасходов_ОприходованиеТоваров_Ключ",  "");
	СтруктураНастроек.Вставить("НоменклатурнаяГруппаПоУмолчанию_Ключ",                   "");
	СтруктураНастроек.Вставить("РазрешитьПроведениеДокументовПриЗагрузке",               Ложь);
	
	Возврат СтруктураНастроек;
	
КонецФункции

// Возвращает строку описания ограничений миграции данных для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных отборов на узле базы корреспондента должен сформировать строку описания ограничений 
// удобную для восприятия пользователем.
// 
// Параметры:
//  НастройкаОтборовНаУзле - Структура - структура отборов на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции НастройкаОтборовНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания ограничений миграции данных для пользователя
//
Функция ОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзле) Экспорт
	
	Если ЗначениеЗаполнено(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов) Тогда
		ТекстОписания = "Документы выгружаются начиная с " 
			+ Формат(НастройкаОтборовНаУзле.ДатаНачалаВыгрузкиДокументов, "ДФ=dd.MM.yyyy");
	Иначе
		ТекстОписания = "Документы выгружаются за весь период";
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + ";";
	
	Если НастройкаОтборовНаУзле.ИспользоватьОтборПоОрганизациям Тогда
		
		КоллекцияЗначений = НастройкаОтборовНаУзле.Организации.Организация;
		ПредставлениеКоллекции = СокращенноеПредставлениеКоллекцииЗначений(КоллекцияЗначений);
		ТекстОписания = ТекстОписания + Символы.ПС + "Отбор по организациям: " + ПредставлениеКоллекции + ";";
		
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + Символы.ПС + "Выгружать для каждого контрагента отдельного партнера: " 
		+ Формат(НастройкаОтборовНаУзле.ВыгружатьПартнеров, "БЛ=нет; БИ=да");
	
	ТекстОписания = ТекстОписания + ";";
	
	Возврат ТекстОписания;
	
КонецФункции

// Возвращает строку описания значений по умолчанию для базы корреспондента, которая отображается пользователю;
// Прикладной разработчик на основе установленных значений по умолчанию на узле базы корреспондента должен сформировать строку описания 
// удобную для восприятия пользователем.
// 
// Параметры:
//  ЗначенияПоУмолчаниюНаУзле - Структура - структура значений по умолчанию на узле плана обмена базы корреспондента,
//                                       полученная при помощи функции ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента().
// 
// Возвращаемое значение:
//  Строка, Неогранич. - строка описания для пользователя значений по умолчанию
//
Функция ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	ТекстОписания = "Номенклатурная группа по умолчанию для загружаемой номенклатуры: ";
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.НоменклатурнаяГруппаПоУмолчанию) Тогда
		ТекстОписания = ТекстОписания + Строка(ЗначенияПоУмолчаниюНаУзле.НоменклатурнаяГруппаПоУмолчанию);
	Иначе
		ТекстОписания = ТекстОписания + "не указана";
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + ";";
	
	ТекстОписания = ТекстОписания + Символы.ПС + "Статья прочих доходов и расходов при оприходовании товаров: ";
	Если ЗначениеЗаполнено(ЗначенияПоУмолчаниюНаУзле.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров) Тогда
		ТекстОписания = ТекстОписания + Строка(ЗначенияПоУмолчаниюНаУзле.СтатьяПрочихДоходовРасходов_ОприходованиеТоваров);
	Иначе
		ТекстОписания = ТекстОписания + "не указана";
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + ";";
	
	Если ЗначенияПоУмолчаниюНаУзле.РазрешитьПроведениеДокументовПриЗагрузке Тогда
		ТекстОписания = ТекстОписания + Символы.ПС + "Для новых документов, загружаемых в эту базу, проведение разрешено";
	Иначе
		ТекстОписания = ТекстОписания + Символы.ПС + "Для новых документов, загружаемых в эту базу, проведение разрешено";
	КонецЕсли;
	
	ТекстОписания = ТекстОписания + ";";
	
	Возврат ТекстОписания;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Инициализирует у всех узлов режим выгрузки при необходимости
//
Процедура ИнициализироватьРежимВыгрузкиПриНеобходимости() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БП.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК БП
	                      |ГДЕ
	                      |	БП.Ссылка <> &ЭтотУзел
	                      |	И ВЫБОР
	                      |			КОГДА БП.РежимВыгрузкиПриНеобходимости <> ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости)
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ ЛОЖЬ
	                      |		КОНЕЦ = ИСТИНА");
						  
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30.ЭтотУзел());	
	
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		УзелПланаОбменаОбъект = ВыборкаУзлов.Ссылка.ПолучитьОбъект();
		УзелПланаОбменаОбъект.РежимВыгрузкиПриНеобходимости = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
		УзелПланаОбменаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Инициализирует у всех узлов вариант выгрузки договоров контрагентов
//
Процедура ИнициализироватьВариантВыгрузкиДоговоров() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	БП.Ссылка
	                      |ИЗ
	                      |	ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК БП
	                      |ГДЕ
	                      |	БП.Ссылка <> &ЭтотУзел
	                      |	И ВЫБОР
	                      |			КОГДА БП.ПравилаСозданияДоговоровКонтрагентов = """"
	                      |				ТОГДА ИСТИНА
	                      |			ИНАЧЕ ЛОЖЬ
	                      |		КОНЕЦ = ИСТИНА");
						  
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30.ЭтотУзел());	
	
	ВыборкаУзлов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		УзелПланаОбменаОбъект = ВыборкаУзлов.Ссылка.ПолучитьОбъект();
		УзелПланаОбменаОбъект.ПравилаСозданияДоговоровКонтрагентов = "БезРазделения";
		УзелПланаОбменаОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Заменяет некорректные названия типов конфигурации-приемника на корректные в регистре сведений "СоответствияОбъектовИнформационныхБаз"
//
Процедура ВыполнитьКорректировкуРегистраСоответствия() Экспорт
	
	КорректируемыеТипы = Новый Соответствие;
	
	// исправление ошибки прошлой версии правил обмена БП-УТ
	КорректируемыеТипы.Вставить("Банковские счета", "СправочникСсылка.БанковскиеСчета");
	
	НаборЗаписейДляЗаписиИзменений = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Изменения.УзелИнформационнойБазы,
	|	Изменения.УникальныйИдентификаторИсточника,
	|	Изменения.УникальныйИдентификаторПриемника,
	|	Изменения.ТипПриемника,
	|	Изменения.ТипИсточника
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз.Изменения КАК Изменения
	|ГДЕ
	|	Изменения.УзелИнформационнойБазы В
	|			(ВЫБРАТЬ
	|				Обмен.Ссылка
	|			ИЗ
	|				ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК Обмен
	|			ГДЕ
	|				Обмен.Ссылка <> &ЭтотУзел)
	|	И Изменения.ТипПриемника В(&МассивЗаменяемыхТипов)");
	
	
	МассивТиповДляПоиска = Новый Массив;
	Для Каждого Элемент Из КорректируемыеТипы Цикл
		МассивТиповДляПоиска.Добавить(Элемент.Ключ);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30.ЭтотУзел());
	Запрос.УстановитьПараметр("МассивЗаменяемыхТипов", МассивТиповДляПоиска);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписейДляЗаписиИзменений.Отбор.УзелИнформационнойБазы.Установить(Выборка.УзелИнформационнойБазы);
		НаборЗаписейДляЗаписиИзменений.Отбор.УникальныйИдентификаторИсточника.Установить(Выборка.УникальныйИдентификаторИсточника);
		НаборЗаписейДляЗаписиИзменений.Отбор.УникальныйИдентификаторПриемника.Установить(Выборка.УникальныйИдентификаторПриемника);
		НаборЗаписейДляЗаписиИзменений.Отбор.ТипПриемника.Установить(Выборка.ТипПриемника);
		НаборЗаписейДляЗаписиИзменений.Отбор.ТипИсточника.Установить(Выборка.ТипИсточника);
		
		// удаляем некорректную запись
		ПланыОбмена.УдалитьРегистрациюИзменений(Выборка.УзелИнформационнойБазы, НаборЗаписейДляЗаписиИзменений);
		
		НаборЗаписейДляЗаписиИзменений.Отбор.ТипПриемника.Установить(КорректируемыеТипы.Получить(Выборка.ТипПриемника));
		
		// регистрируем скорректированную запись
		ПланыОбмена.ЗарегистрироватьИзменения(Выборка.УзелИнформационнойБазы, НаборЗаписейДляЗаписиИзменений);
	КонецЦикла;
	
	// корректируем непосредственно регистр
	НаборЗаписейДляПерезаписиРегистра = РегистрыСведений.СоответствияОбъектовИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейДляПерезаписиРегистра.ОбменДанными.Загрузка = Истина;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы,
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника,
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника,
	|	СоответствияОбъектовИнформационныхБаз.ТипПриемника,
	|	СоответствияОбъектовИнформационныхБаз.ТипИсточника,
	|	СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточникаСтрокой,
	|	СоответствияОбъектовИнформационныхБаз.ОбъектВыгруженПоСсылке
	|ИЗ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|ГДЕ
	|	СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы В
	|			(ВЫБРАТЬ
	|				Обмен.Ссылка
	|			ИЗ
	|				ПланОбмена.ОбменУправлениеТорговлейБухгалтерияПредприятия30 КАК Обмен
	|			ГДЕ
	|				Обмен.Ссылка <> &ЭтотУзел)
	|	И СоответствияОбъектовИнформационныхБаз.ТипПриемника В(&МассивЗаменяемыхТипов)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// получаем и записываем новый набор
		НаборЗаписейДляПерезаписиРегистра.Отбор.УзелИнформационнойБазы.Установить(Выборка.УзелИнформационнойБазы);
		НаборЗаписейДляПерезаписиРегистра.Отбор.УникальныйИдентификаторИсточника.Установить(Выборка.УникальныйИдентификаторИсточника);
		НаборЗаписейДляПерезаписиРегистра.Отбор.УникальныйИдентификаторПриемника.Установить(Выборка.УникальныйИдентификаторПриемника);
		НаборЗаписейДляПерезаписиРегистра.Отбор.ТипПриемника.Установить(Выборка.ТипПриемника);
		НаборЗаписейДляПерезаписиРегистра.Отбор.ТипИсточника.Установить(Выборка.ТипИсточника);
		
		НаборЗаписейДляПерезаписиРегистра.Прочитать();
		Для Каждого Запись Из НаборЗаписейДляПерезаписиРегистра Цикл
			Запись.ТипПриемника = КорректируемыеТипы.Получить(Выборка.ТипПриемника);
		КонецЦикла;
		НаборЗаписейДляПерезаписиРегистра.Отбор.ТипПриемника.Установить(КорректируемыеТипы.Получить(Выборка.ТипПриемника));
		НаборЗаписейДляПерезаписиРегистра.Записать();
		
		// очищаем старый набор
		НаборЗаписейДляПерезаписиРегистра.Отбор.ТипПриемника.Установить(Выборка.ТипПриемника);
		НаборЗаписейДляПерезаписиРегистра.Очистить();
		НаборЗаписейДляПерезаписиРегистра.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает сокращенное строковое представление коллекции значений
// 
// Параметры:
//  Коллекция 						- массив или список значений.
//  МаксимальноеКоличествоЭлементов - число, максимальное количество элементов включаемое в представление.
//
// Возвращаемое значение:
//  Строка.
//
Функция СокращенноеПредставлениеКоллекцииЗначений(Коллекция, МаксимальноеКоличествоЭлементов = 2)
	
	СтрокаПредставления = "";
	
	КоличествоЗначений			 = Коллекция.Количество();
	КоличествоВыводимыхЭлементов = Мин(КоличествоЗначений, МаксимальноеКоличествоЭлементов);
	
	Если КоличествоВыводимыхЭлементов = 0 Тогда
		
		Возврат "";
		
	Иначе
		
		Для НомерЗначения = 1 По КоличествоВыводимыхЭлементов Цикл
			
			СтрокаПредставления = СтрокаПредставления + Коллекция.Получить(НомерЗначения - 1) + ", ";	
			
		КонецЦикла;
		
		СтрокаПредставления = Лев(СтрокаПредставления, СтрДлина(СтрокаПредставления) - 2);
		Если КоличествоЗначений > КоличествоВыводимыхЭлементов Тогда
			СтрокаПредставления = СтрокаПредставления + ", ... ";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПредставления;
	
КонецФункции

#КонецЕсли