////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		ИнициализацияФормы();
	КонецЕсли;
	
//	ТекущийПользователь = Пользователи.ТекущийПользователь();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Заголовок=Объект.Наименование;	
	//ЭтаФорма.ЕстьКорректировочныйЗаказ.доступность = Ложь;
	//ЭтаФорма.Элементы.КорректировочныйЗаказ.Доступность = Ложь;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	

	// запись объекта бизнес-процесса
	ЗаписатьРеквизитыБизнесПроцесса(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	БизнесПроцессыИЗадачиКлиент.ФормаЗадачиОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнициализацияФормы();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить()
	БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура Выполнено(Команда)
	
	
	Если  НЕ ПроверкаСчетаВЗаказеПоставщика(объект.предмет) тогда	
		//Если  ЕстьКорректировочныйЗаказ  Тогда
		//	Если НЕ ПроверкаСчетаВЗаказеПоставщика(КорректировочныйЗаказ)  Тогда
		//		ЗаданиеВыполнено=Истина;
		//		БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтаФорма, Истина);
		//	КонецЕсли;
		//Иначе
			ЗаданиеВыполнено=Истина;
			БизнесПроцессыИЗадачиКлиент.ЗаписатьИЗакрытьВыполнить(ЭтаФорма, Истина);			
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&наСервере
Функция  ПроверкаСчетаВЗаказеПоставщика(ЗаказПоставщику)	Экспорт	
	Отказ = Ложь; 
	НомерСчета = "";
	ДатаСчета = '00010101';  	
	НомерСчета= ЗаказПоставщику.НомерПоДаннымПоставщика;
	ДатаСчета = ЗаказПоставщику.ДатаПоДаннымПоставщика;
	
	Если ЗаказПоставщику.Партнер <> Константы.АК_ДокторМебель.Получить() Тогда						
		ЗапросПрикрепленныеФайлы = Новый Запрос;
		ЗапросПрикрепленныеФайлы.Текст = " 
		|ВЫБРАТЬ
		|	ЗаказПоставщикуПрисоединенныеФайлы.Наименование
		|ИЗ
		|	Справочник.ЗаказПоставщикуПрисоединенныеФайлы КАК ЗаказПоставщикуПрисоединенныеФайлы
		|ГДЕ
		|	ЗаказПоставщикуПрисоединенныеФайлы.ВладелецФайла = &Ссылка
		|	И (ЗаказПоставщикуПрисоединенныеФайлы.Наименование ПОДОБНО &Счет1)";
		
		ЗапросПрикрепленныеФайлы.УстановитьПараметр("Ссылка",ЗаказПоставщику);
		ЗапросПрикрепленныеФайлы.УстановитьПараметр("Счет1","%[СсCc]ч[ёе]т%");		
		Результат = ЗапросПрикрепленныеФайлы.Выполнить().Выгрузить();			
		Если Результат.Количество()=0  Тогда
			Сообщить("ОШИБКА: Нет прикрепленных файлов!");
			Отказ=Истина;			
		КонецЕсли;		
	КонецЕсли;		
	
	Если СокрЛП(НомерСчета) = ""  ИЛИ  ДатаСчета = '00010101' Тогда
		Сообщить("ОШИБКА: Не заполнены номер или дата счета поставщика!");
		Отказ=Истина;
	КонецЕсли;	
	
	Возврат Отказ;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ИнициализацияФормы()
	
    НачальныйПризнакВыполнения = Объект.Выполнена;
	ПрочитатьРеквизитыБизнесПроцесса();	
	УстановитьСостояниеЭлементов();
	            
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Элементы.СрокИсполнения);
	БизнесПроцессыИЗадачиСервер.УстановитьФорматДаты(Элементы.Дата);
	
	БизнесПроцессыИЗадачиСервер.ФормаЗадачиПриСозданииНаСервере(ЭтаФорма, Объект, 
		Элементы.ГруппаСостояние, Элементы.ДатаИсполнения);
		
	Элементы.ОписаниеРезультата.ТолькоПросмотр = Объект.Выполнена;
	
	Если Объект.Выполнена Тогда
		Элементы.Выполнено.Доступность=Ложь;
		Элементы.ДатаИсполнения.Видимость=Истина;
		Элементы.ДатаИсполненияВремя.Видимость=Истина;
		
	Иначе
		Элементы.Выполнено.Доступность=Истина;
		Элементы.ДатаИсполнения.Видимость=Ложь;
		Элементы.ДатаИсполненияВремя.Видимость=Ложь;		
	КонецЕсли;
	
	
КонецПроцедуры	
 
&НаСервере
Процедура ПрочитатьРеквизитыБизнесПроцесса()
	
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	
	УстановитьПривилегированныйРежим(Истина);
	ВыполнениеЗакупкиОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
	ДатаОтгрузки	= ВыполнениеЗакупкиОбъект.ЗаказКлиента.ДатаОтгрузки;
	ЗаказКлиента	= ВыполнениеЗакупкиОбъект.ЗаказКлиента;
	Клиент			=  ВыполнениеЗакупкиОбъект.ЗаказКлиента.Партнер;
	Проект			=  ВыполнениеЗакупкиОбъект.ЗаказКлиента.Сделка;
	Поставщик		=  ВыполнениеЗакупкиОбъект.Поставщик;
	КорректировочныйЗаказ = ВыполнениеЗакупкиОбъект.КорректировочныйЗаказ;
	ЕстьКорректировочныйЗаказ = ВыполнениеЗакупкиОбъект.ЕстьКорректировочныйЗаказ;
	

	
КонецПроцедуры	     

&НаСервере
Процедура ЗаписатьРеквизитыБизнесПроцесса(ЗадачаОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	ВыполнениеЗакупкиОбъект = ЗадачаОбъект.БизнесПроцесс.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ВыполнениеЗакупкиОбъект.Ссылка);
   	Если ЗаданиеВыполнено Тогда
		ВыполнениеЗакупкиОбъект.СчетПолучен=Истина;
		ВыполнениеЗакупкиОбъект.ДатаПолученияСчета=ТекущаяДата();
	КонецЕсли;

	ВыполнениеЗакупкиОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСостояниеЭлементов()
	
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	БизнесПроцессы.акЗакупкаТовара.УстановитьСостояниеЭлементовФормыЗадачи(ЭтаФорма);
	
КонецПроцедуры

//&НаКлиенте
//Процедура ЕстьКорректировочныйЗаказПриИзменении(Элемент)
//	
//	Если ЭтаФорма.ЕстьКорректировочныйЗаказ = Истина Тогда
//		 ЭтаФорма.Элементы.КорректировочныйЗаказ.Доступность = Истина;
//	 Иначе 
//		ЭтаФорма.Элементы.КорректировочныйЗаказ.Доступность = Ложь;
//	КонецЕсли;
//	

//КонецПроцедуры
