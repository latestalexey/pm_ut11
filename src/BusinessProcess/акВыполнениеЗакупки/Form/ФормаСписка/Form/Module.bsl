////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	ПоАвтору = Пользователи.ТекущийПользователь();
	//Если ЗначениеЗаполнено(Параметры.Предмет) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Предмет", Параметры.Предмет, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	//КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", НачалоДня(ТекущаяДата()));
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности);
	
	УстановитьОтбор();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Актуальность       = Настройки.Получить("Актуальность");
	ДатаАктуальности   = Настройки.Получить("ДатаАктуальности");
	
	Если ЗначениеЗаполнено(ДатаАктуальности) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ДатаАктуальности", ДатаАктуальности);
	КонецЕсли;
	
	УстановитьОтборСписка(Настройки);	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборСрокВыполенияПриИзменении(Элемент)
	
	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполенияОчистка(Элемент, СтандартнаяОбработка)
	
	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСрокВыполенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДиалогамиКлиент.ПриВыбореАктуальности(ВыбранноеЗначение, Актуальность, ДатаАктуальности);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗавершенныеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОстановленныеПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОтвественныйПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ПоПоставщикуПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Остановить(Команда)
	
	БизнесПроцессыИЗадачиКлиент.Остановить(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	БизнесПроцессыИЗадачиКлиент.СделатьАктивным(Элементы.Список.ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Завершить(Команда)
	ЗавершитьБизнесПроцессКлиент(Элементы.Список.ВыделенныеСтроки);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьОтбор()
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ПоказыватьЗавершенные", ПоказыватьЗавершенные);	
	ПараметрыОтбора.Вставить("ПоказыватьОстановленные", ПоказыватьОстановленные);	
	ПараметрыОтбора.Вставить("ПоАвтору", ПоОтветственному);
	ПараметрыОтбора.Вставить("ПоПоставщику", ПоПоставщику);
	
	УстановитьОтборСписка(ПараметрыОтбора);	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборСписка(ПараметрыОтбора)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Завершен");
	Если НЕ ПараметрыОтбора["ПоказыватьЗавершенные"] Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор, "Завершен", Ложь);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Остановлен");
	Если НЕ ПараметрыОтбора["ПоказыватьОстановленные"] Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор, "Остановлен", Ложь);
	КонецЕсли;
	
	Если ПараметрыОтбора["ПоАвтору"].Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Автор");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор, "Автор", ПараметрыОтбора["ПоАвтору"]);
	КонецЕсли;
	
	Если ПараметрыОтбора["ПоПоставщику"].Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(Список.Отбор, "Поставщик");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор, "Поставщик", ПараметрыОтбора["ПоПоставщику"]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьБизнесПроцессКлиент(Знач ПараметрКоманды)
	ТекстВопроса = "";
	
	ЧислоЗадач = 0;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		Если ПараметрКоманды.Количество() = 0 Тогда
			Предупреждение(НСтр("ru= 'Не выбран ни один бизнес-процесс.'"));
			Возврат;
		КонецЕсли;	
		
		Если ПараметрКоманды.Количество() = 1 И ТипЗнч(ПараметрКоманды[0]) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Предупреждение(НСтр("ru= 'Не выбран ни один бизнес-процесс.'"));
			Возврат;
		КонецЕсли;	
		
		ЧислоЗадач = БизнесПроцессыИЗадачиВызовСервера.КоличествоНевыполненныхЗадачБизнесПроцессов(ПараметрКоманды);
		Если ПараметрКоманды.Количество() = 1 Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Бизнес-процесс ""%1"" и все его задачи (%2) будет завершены. Возобновление будет не возможно. Продолжить?'"), 
			Строка(ПараметрКоманды[0]), ЧислоЗадач);
		Иначе		
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Бизнес-процессы (%1) и их задачи (%2) будут сделаны завершены. Возобновление будет не возможно. Продолжить?'"), 
			ПараметрКоманды.Количество(), ЧислоЗадач);
		КонецЕсли;		
		
	Иначе
		
		Если ТипЗнч(ПараметрКоманды) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Предупреждение(НСтр("ru= 'Не выбран ни один бизнес-процесс.'"));
			Возврат;
		КонецЕсли;	
		
		ЧислоЗадач = БизнесПроцессыИЗадачиВызовСервера.КоличествоНевыполненныхЗадачБизнесПроцесса(ПараметрКоманды);
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Бизнес-процесс ""%1"" и все его задачи (%2) будет завершен.Возобновление будет не возможно. Продолжить?'"), 
		Строка(ПараметрКоманды), ЧислоЗадач);
		
	КонецЕсли;
	
	Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Завершение бизнес процесса бизнес-процесса'"));
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
			
			Если ПараметрКоманды.Количество() = 1 Тогда
				Состояние(НСтр("ru = 'Бизнес-процесс и его задачи завершается. Пожалуйста подождите...'"));
			Иначе	
				Состояние(НСтр("ru = 'Бизнес-процессы и их задачи завершаются. Пожалуйста подождите...'"));
			КонецЕсли;	
			
			ЗавершитьБизнесПроцессыСервер(ПараметрКоманды);
			
			Если ПараметрКоманды.Количество() = 1 Тогда
				Состояние(НСтр("ru = 'Бизнес-процесс и его задачи завершены.'"));
			Иначе	
				Состояние(НСтр("ru = 'Бизнес-процессы и их задачи завершены.'"));
			КонецЕсли;	
			
		Иначе	
			Состояние(НСтр("ru = 'Идет завершение бизнес-процесса. Пожалуйста подождите...'"));
			ЗавершитьБизнесПроцессСервер(ПараметрКоманды);
			Состояние(НСтр("ru = 'Бизнес-процесс и его задачи завершены'"));
		КонецЕсли;	
		
		Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
			
			Если ПараметрКоманды.Количество() <> 0 Тогда
				
				Для Каждого Параметр Из ПараметрКоманды Цикл
					
					Если ТипЗнч(Параметр) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
						ОповеститьОбИзменении(ТипЗнч(Параметр));
						Прервать;
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЕсли;
			
		Иначе
			ОповеститьОбИзменении(ПараметрКоманды);	
		КонецЕсли;	
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура	ЗавершитьБизнесПроцессыСервер(БизнесПроцессы)
	
	
	Для каждого БизнесПроцесс Из БизнесПроцессы Цикл
		
		Если ТипЗнч(БизнесПроцесс) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗавершитьБизнесПроцессСервер(БизнесПроцесс);
		
	КонецЦикла;
	
	
КонецПроцедуры			

&НаСервере
Процедура ЗавершитьБизнесПроцессСервер(БизнесПроцесс)
	
	Если ТипЗнч(БизнесПроцесс) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка 
		НачатьТранзакцию();
		
		Объект = БизнесПроцесс.ПолучитьОбъект();
		
		Если Объект.Завершен Тогда
			
			Если Объект.Завершен Тогда
				ВызватьИсключение НСтр("ru = 'Бизнес процесс уже завершен.'");
			КонецЕсли;
			
			Если Не Объект.Стартован Тогда
				ВызватьИсключение НСтр("ru = 'Невозможно завершить не стартовавшие бизнес-процессы.'");
			КонецЕсли;
			
		КонецЕсли;
		
		Объект.Заблокировать();
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК Задача
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс";
		Запрос.УстановитьПараметр("БизнесПроцесс", БизнесПроцесс);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выгрузить();
		
		ТекПозиция = 0;	
		Для каждого СтрокаЗапроса из Выборка Цикл
			ОбъектЗадача = СтрокаЗапроса.Задача.ПолучитьОбъект();
			ОбъектЗадача.Выполнена = Истина;
			ОбъектЗадача.Записать();
		КонецЦикла;	
		Объект.Завершен = Истина;
		Объект.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(БизнесПроцессыИЗадачиСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, 
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры




