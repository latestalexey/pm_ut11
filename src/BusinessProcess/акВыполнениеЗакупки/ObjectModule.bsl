#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса

Процедура ПередЗаписью(Отказ)
	
	// Даже в случае обмена данными делаем проверку на запись завершенного
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Автор <> Неопределено И Не Автор.Пустая() Тогда
		АвторСтрокой = Строка(Автор);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ПроверитьПраваНаИзменениеСостоянияБизнесПроцесса(ЭтотОбъект);
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Предмет") <> Предмет Тогда
		ИзменитьПредметЗадач();	
	КонецЕсли;
	
КонецПроцедуры	
	
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	//	ЗаказУтвержден = Ложь;
	//	Исполнитель = Справочники.Пользователи.ПустаяСсылка(); // Для возможности автоподбора в незаполненном поле Исполнитель.
	//	Проверяющий = Справочники.Пользователи.ПустаяСсылка(); // Для возможности автоподбора в незаполненном поле Исполнитель.
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаказКлиента=ДанныеЗаполнения.ЗаказКлиента;
		Поставщик=ДАнныеЗаполнения.Поставщик;
		Автор=ДанныеЗаполнения.Автор;
		Важность=ДанныеЗаполнения.Важность;		
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	МассивНепроверяемыхРеквизитов = Новый Массив();
	//Если Не НаПроверке Тогда
	//	МассивНепроверяемыхРеквизитов.Добавить("Проверяющий");
	//КонецЕсли;
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаказСоздан = Ложь;
	СчетПолучен = Ложь;
	ЗаказПодтвержден = Ложь;
	
	РезультатВыполнения = "";
	ДатаЗавершения = '00010101000000';
	Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута

Процедура ЗаказатьТоварПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)

	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);
		Задача.ДатаНачала = ТекущаяДата();
		Задача.Наименование = НаименованиеЗадачиДляЗаказатьТовар();
		Задача.СрокИсполнения = СрокИсполненияЗадачиДляЗаказатьТовар();
		Задача.Важность = Важность;
		Задача.Предмет = Документы.ЗаказПоставщику.ПустаяСсылка();
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаказатьТоварПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	РезультатВыполнения = РезультатВыполненияТочкиЗаказатьТовар(Задача) + РезультатВыполнения;
	Записать();

КонецПроцедуры

Процедура ПолучитьСчетПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);
		Задача.ДатаНачала = ТекущаяДата();
		Задача.Наименование = НаименованиеЗадачиДляПолучитьСчет();
		Задача.СрокИсполнения = СрокИсполненияЗадачиДляПолучитьСчет();
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПолучитьСчетПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	РезультатВыполнения = РезультатВыполненияТочкиПолучитьСчет(Задача) + РезультатВыполнения;
	Записать();

КонецПроцедуры

Процедура ПодтвердитьГотовностьПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);
		Задача.ДатаНачала = ТекущаяДата();
		Задача.Наименование = НаименованиеЗадачиДляПодтвердитьГотовность();
		Задача.СрокИсполнения = СрокИсполненияЗадачиДляПодтвердитьГотовность();
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
	КонецЦикла;

КонецПроцедуры

Процедура ПодтвердитьГотовностьПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Вставить содержимое обработчика.
	РезультатВыполнения = РезультатВыполненияТочкиПодтвердитьГотовность(Задача) + РезультатВыполнения;
	Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ	

Процедура ИзменитьПредметЗадач()

	//УстановитьПривилегированныйРежим(Истина);
	//НачатьТранзакцию();
	//Попытка
	//	Запрос = Новый Запрос(
	//		"ВЫБРАТЬ
	//		|	Задачи.Ссылка КАК Ссылка
	//		|ИЗ
	//		|	Задача.ЗадачаИсполнителя КАК Задачи
	//		|ГДЕ
	//		|	Задачи.БизнесПроцесс = &БизнесПроцесс");

	//	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	//	Результат = Запрос.Выполнить();
	//	
	//	Блокировка = Новый БлокировкаДанных;
	//	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
	//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	//		ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
	//	КонецЦикла;
	//	Блокировка.Заблокировать();
	//	
	//	ВыборкаДетальныеЗаписи.Сбросить();
	//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	//		ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	//		ЗадачаОбъект.Предмет = Предмет;
	//		// Не выполняем предварительную блокировку данных для редактирования, т.к.
	//		// это изменение имеет более высокий приоритет над открытыми формами задач.
	//		ЗадачаОбъект.Записать();
	//	КонецЦикла;
	//	ЗафиксироватьТранзакцию();
	//Исключение
	//	ОтменитьТранзакцию();
	//	ВызватьИсключение;
	//КонецПопытки;

КонецПроцедуры 


Функция НаименованиеЗадачиДляЗаказатьТовар()
	
	Возврат БизнесПроцессы.акВыполнениеЗакупки.ТочкиМаршрута.ЗаказатьТовар.НаименованиеЗадачи + ": Заказ клиента № " +Прав(ЗаказКлиента.Номер,6);	
	
КонецФункции

Функция СрокИсполненияЗадачиДляЗаказатьТовар()
	
	Возврат КонецДня(ТекущаяДата());	
	
КонецФункции

Функция НаименованиеЗадачиДляПолучитьСчет()
	
	Возврат БизнесПроцессы.акВыполнениеЗакупки.ТочкиМаршрута.ПолучитьСчет.НаименованиеЗадачи + ": Заказ поставщика № " +Прав(Предмет.Номер,6) + "/"+Прав(ЗаказКлиента.Номер,6);	
	
КонецФункции

Функция СрокИсполненияЗадачиДляПолучитьСчет()
	
	Возврат КонецДня(ТекущаяДата());	
	
КонецФункции

Функция НаименованиеЗадачиДляПодтвердитьГотовность()
	
	Возврат БизнесПроцессы.акВыполнениеЗакупки.ТочкиМаршрута.ПодтвердитьГотовность.НаименованиеЗадачи + ": Заказ поставщика № " +Прав(Предмет.Номер,6) + "/"+Прав(ЗаказКлиента.Номер,6);	
	
КонецФункции

Функция СрокИсполненияЗадачиДляПодтвердитьГотовность()
	
	Возврат КонецДня(ТекущаяДата());	
	
КонецФункции



Функция РезультатВыполненияТочкиЗаказатьТовар(Знач ЗадачаСсылка)
	
	СтрокаФормат =  НСтр("ru = '%1, %2 выполнил(а) задачу:
		           |%3
		           |'");
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, 
	              ЗадачаДанные.ДатаИсполнения,
	              ЗадачаДанные.Исполнитель,
	              Комментарий);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыполненияТочкиПолучитьСчет(Знач ЗадачаСсылка)
	
	СтрокаФормат =  НСтр("ru = '%1, %2 выполнил(а) задачу:
		           |%3
		           |'");
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, 
	              ЗадачаДанные.ДатаИсполнения,
	              ЗадачаДанные.Исполнитель,
	              Комментарий);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыполненияТочкиПодтвердитьГотовность(Знач ЗадачаСсылка)
	
	СтрокаФормат =  НСтр("ru = '%1, %2 выполнил(а) задачу:
		           |%3
		           |'");
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, 
	              ЗадачаДанные.ДатаИсполнения,
	              ЗадачаДанные.Исполнитель,
	              Комментарий);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение



////////////////////////////////////////////////////////////////////////////////
// Прочее	

#КонецЕсли




