#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

//Получает специализированную форму задачи
//
// Параметры
//  ЗадачаСсылка  - ЗадачаСсылка.ТиповаяПродажа - задача, для которой получается форма
//  ТочкаМаршрутаСсылка  - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута, для которой получается форма
//
// Возвращаемое значение:
//   УправляемаяФорма   - специализированная форма выполнения задачи
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт

	ИмяФормы = "БизнесПроцесс.акОбычнаяСделка.Форма.ФормаЗадачи";

	Возврат Новый Структура(
		"ПараметрыФормы, ИмяФормы", Новый Структура("Ключ", ЗадачаСсылка), ИмяФормы
	);

КонецФункции

//Получить описание задачи процесса
//
// Параметры
//  ТочкаМаршрутаБизнесПроцесса  - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута для которой 
//                                 возвращается описание
//
// Возвращаемое значение:
//   Строка   - описание для точки маршрута
//
Функция ОписаниеТочки(ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.акОбычнаяСделка.ТочкиМаршрута.СоставитьКоммерческоеПредложение Тогда
		Возврат НСтр("ru=' - подготовте комерческое предложение;'"
		);
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.акОбычнаяСделка.ТочкиМаршрута.ОтправитьПочту Тогда
		Возврат НСтр(
			"ru=' - отправте коммерческое предложение'"
		);
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.акОбычнаяСделка.ТочкиМаршрута.Позвонить Тогда
		Возврат НСтр(
			"ru=' - позвонить по коммерческому предложению'"
		);
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.акОбычнаяСделка.ТочкиМаршрута.СогласоватьКоммерческоеПредложение Тогда
		Возврат НСтр(
			"ru=' - согласуйте коммерческое предложение'"
		);
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.акОбычнаяСделка.ТочкиМаршрута.СформироватьЗаказ Тогда
		Возврат НСтр(
			"ru=' - сформируйте заказ'"
		);
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.акОбычнаяСделка.ТочкиМаршрута.ОтправитьЗаказПоПочте Тогда
		Возврат НСтр(
			"ru=' - Отправте заказ по почте'"
		);
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.акОбычнаяСделка.ТочкиМаршрута.ПозвонитьПослеЗаказа Тогда
		Возврат НСтр(
			"ru=' - Позвоните подтвертие заказ'"
		);
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.акОбычнаяСделка.ТочкиМаршрута.ОбеспечитьЗаказ Тогда
		Возврат НСтр(
			"ru=' - Обеспечте заказ'"
		);
		
	КонецЕсли;

КонецФункции

//Возвращает список этапов процесса при его плановом выполнении
Функция СписокЭтапов() Экспорт

	мЭтапы = Новый Массив;
	мЭтапы.Добавить(Справочники.СостоянияПроцессов.СоставитьКоммерческоеПредложение);
	мЭтапы.Добавить(Справочники.СостоянияПроцессов.ОтправитьПочту);
	мЭтапы.Добавить(Справочники.СостоянияПроцессов.Позвонить);
	мЭтапы.Добавить(Справочники.СостоянияПроцессов.СогласоватьКоммерческоеПредложение);
	мЭтапы.Добавить(Справочники.СостоянияПроцессов.СформироватьЗаказ);
	мЭтапы.Добавить(Справочники.СостоянияПроцессов.ОтправитьЗаказПоПочте);
	мЭтапы.Добавить(Справочники.СостоянияПроцессов.ПозвонитьПослеЗаказа);
	мЭтапы.Добавить(Справочники.СостоянияПроцессов.ОбеспечитьЗаказ);
                                
	Возврат мЭтапы;

КонецФункции

//Получить типовой срок исполнения задачи в днях
//
// Параметры
//  ТочкаМаршрутаБизнесПроцесса  - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута для которой 
//                                 возвращается типовой срок исполнения
//
// Возвращаемое значение:
//   Число   - типовой срок исполнения для точки маршрута
//
Функция СрокИсполнения(ТочкаМаршрутаБизнесПроцесса) Экспорт
	
	возврат 1;

КонецФункции

// Вызывается при выполнении задачи из формы списка.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача 
//   ТочкаМаршрутаСсылка – точка маршрута 
//
Процедура ОбработкаВыполненияПоУмолчанию(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса) Экспорт


КонецПроцедуры

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – перенаправляемая задача.
//   НоваяЗадачаСсылка  – ЗадачаСсылка.ЗадачаИсполнителя – задача для нового исполнителя.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, НоваяЗадачаСсылка) Экспорт
	
	БизнесПроцессОбъект = ЗадачаСсылка.БизнесПроцесс.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(БизнесПроцессОбъект.Ссылка);
	БизнесПроцессОбъект.РезультатВыполнения = РезультатВыполненияПриПеренаправлении(ЗадачаСсылка) + 
		БизнесПроцессОбъект.РезультатВыполнения;
	УстановитьПривилегированныйРежим(Истина);
	БизнесПроцессОбъект.Записать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция РезультатВыполненияПриПеренаправлении(Знач ЗадачаСсылка)
	
	СтрокаФормат = НСтр("ru = '%1, %2 перенаправил(а) задачу:
		|%3
		|'");
	
	Комментарий = СокрЛП(ЗадачаСсылка.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат,
	              ЗадачаСсылка.ДатаИсполнения,
	              ЗадачаСсылка.Исполнитель,
	              Комментарий);
	
	Возврат Результат;

КонецФункции

#КонецЕсли