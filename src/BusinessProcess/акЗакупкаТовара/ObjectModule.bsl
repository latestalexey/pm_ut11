#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ 

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий бизнес-процесса


Процедура ПередЗаписью(Отказ)
	
	// Даже в случае обмена данными делаем проверку на запись завершенного
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Автор <> Неопределено И Не Автор.Пустая() Тогда
		АвторСтрокой = Строка(Автор);
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ПроверитьПраваНаИзменениеСостоянияБизнесПроцесса(ЭтотОбъект);
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоНовый() И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Предмет") <> Предмет Тогда
		ИзменитьПредметЗадач();	
	КонецЕсли;
	
КонецПроцедуры	
	
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	Если ЭтоНовый() Тогда
		Автор = Пользователи.ТекущийПользователь();
		Важность = Перечисления.ВариантыВажностиЗадачи.Обычная;
		Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		ЗаказУтвержден = Ложь;
		Исполнитель = Справочники.Пользователи.ПустаяСсылка(); // Для возможности автоподбора в незаполненном поле Исполнитель.
		Проверяющий = Справочники.Пользователи.ПустаяСсылка(); // Для возможности автоподбора в незаполненном поле Исполнитель.
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") 
		И ДанныеЗаполнения <> Задачи.ЗадачаИсполнителя.ПустаяСсылка() Тогда
		
			Предмет = ДанныеЗаполнения;
			Проект  = ДанныеЗаполнения.Сделка
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);		
	КонецЕсли;	
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаказУтвержден = Ложь;
	РезультатВыполнения = "";
	ДатаЗавершения = '00010101000000';
	Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов карты маршрута

////////////////////////////////////////////////////////////////////////////////
// Проверка заполнения реквизитов в заказе клиента


Процедура ПроверитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	Если Предмет = Неопределено Или Предмет.Пустая() Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		мНаименование = "Проверить: Заказ клиента № " +Прав(Предмет.Номер,6);
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Автор.Наименование;
		Задача.ДатаНачала = ТекущаяДата();
		Задача.Наименование = мНаименование;
		Задача.СрокИсполнения = КонецДня(ТекущаяДата());
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	РезультатПроверки = РезультатВыполненияТочкиПроверить(Задача) + РезультатПроверки;
	Проверяющий=Задача.Исполнитель;
	Записать();	
	
КонецПроцедуры

Процедура ПринятПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ЗаказПроверен;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Исправление ошибок заполенения реквизитов в заказе клиента


Процедура ИсправитьПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для каждого Задача Из ФормируемыеЗадачи Цикл		
		мНаименование = "Исправить: Заказ клиента № " +Прав(Предмет.Номер,6);
		Задача.Автор = Проверяющий;
		Задача.АвторСтрокой = Строка(Проверяющий);
		Задача.ДатаНачала = ТекущаяДата();
		Задача.Наименование = мНаименование;
		Задача.СрокИсполнения = КонецДня(ТекущаяДата());
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		Задача.Исполнитель = Предмет.Менеджер;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсправитьПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	РезультатПроверки = РезультатВыполненияТочкиИсправить(Задача) + РезультатПроверки;
	Записать();		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Создание заказов на доставку и монтаж


Процедура БПДоставкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	ЕстьДоставка = АК_БизнесПроцессыСервер.ЕстьДоставка(Предмет);
	
	Если Не ЕстьДоставка тогда
		Возврат;
	КонецЕсли;
	
	НовыйБизнесПроцесс = БизнесПроцессы.акЗаказыНаДоставку.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Дата = ТекущаяДата();
	НовыйБизнесПроцесс.ЗаказКлиента = Предмет.Ссылка;
	НовыйБизнесПроцесс.Наименование = Строка(Предмет.Ссылка); 
	НовыйБизнесПроцесс.Автор = ПараметрыСеанса.ТекущийПользователь;
	НовыйБизнесПроцесс.Записать();
	НовыйБизнесПроцесс.Старт();

КонецПроцедуры

Процедура БПМонтажОбработка(ТочкаМаршрутаБизнесПроцесса)

	ЕстьДоставка = АК_БизнесПроцессыСервер.ЕстьМонтаж(Предмет);
	
	Если Не ЕстьДоставка тогда
		Возврат;
	КонецЕсли;
	
	НовыйБизнесПроцесс = БизнесПроцессы.акЗаказыНаМонтаж.СоздатьБизнесПроцесс();
	НовыйБизнесПроцесс.Дата = ТекущаяДата();
	НовыйБизнесПроцесс.ЗаказКлиента = Предмет.Ссылка;
	НовыйБизнесПроцесс.Наименование = Строка(Предмет.Ссылка); 
	НовыйБизнесПроцесс.Автор = ПараметрыСеанса.ТекущийПользователь;
	НовыйБизнесПроцесс.Записать();
	НовыйБизнесПроцесс.Старт();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Создание заказов поставщиками и работа с ними


Процедура ЗаказПоставщикуПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	 Запрос	=	Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	НоменклатураДополнительныеРеквизиты.Значение КАК поставщик
	                |ИЗ
	                |	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	                |ГДЕ
	                |	НоменклатураДополнительныеРеквизиты.Свойство = &Производитель
	                |	И НоменклатураДополнительныеРеквизиты.Ссылка В
	                |			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	                |				Товары.Номенклатура
	                |			ИЗ
	                |				Документ.ЗаказКлиента.Товары КАК Товары
	                |			ГДЕ
	                |				Товары.Ссылка = &Предмет
					|			И   Товары.Номенклатура.ВидНоменклатуры<>&ВидНоменклатуры)";
	Запрос.УстановитьПараметр("Производитель",ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.АК_Производитель);
	Запрос.УстановитьПараметр("Предмет",Предмет);
	Запрос.УстановитьПараметр("ВидНоменклатуры",Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга"));

	Поставщики=Запрос.Выполнить().Выгрузить();

	Если Поставщики.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Поставщики.Свернуть("Поставщик");
	
	Для каждого строка из Поставщики Цикл
		НовыйБП=БизнесПроцессы.акВыполнениеЗакупки.СоздатьБизнесПроцесс();
		ПараметрыБП=Новый Структура;
		ПараметрыБП.Вставить("ЗаказКлиента",Предмет);
		ПараметрыБП.Вставить("Автор",Проверяющий);
		ПараметрыБП.Вставить("Поставщик",Строка.Поставщик);
		ПараметрыБП.Вставить("Важность","");
		НовыйБП.Заполнить(ПараметрыБП);		
		НовыйБП.Дата=ТекущаяДата();
		НовыйБП.ДатаНачала=ТекущаяДата();
		НовыйБП.Записать();
		НовыйБП.Старт();
		ФормируемыеБизнесПроцессы.Добавить(НовыйБП);
	КонецЦикла
	                                                          
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Переводим заказ клиента в статус к отгрузке


Процедура УстановитьКОтгрузкеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		мНаименование = "Установить к отгрузке: Заказ клиента № " +Прав(Предмет.Номер,6);
		Задача.Автор = Автор;
		Задача.АвторСтрокой = Строка(Автор);
		Задача.ДатаНачала = ТекущаяДата();
		Задача.Наименование = мНаименование;
		Задача.СрокИсполнения = КонецДня(ТекущаяДата());
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
	КонецЦикла;

КонецПроцедуры


Процедура ЗаказНаДоставкуПриСозданииВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	Для каждого ТекСтр из ФормируемыеБизнесПроцессы цикл
		ТекСтр.ЗаказКлиента = ЗаказКлиента;	
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Сообщаем ответственным по доставке и монтажу о окончании БП по закупке


Процедура ИнформированиеДоставкеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
	
	Для каждого Задача Из ФормируемыеЗадачи Цикл
		
		Задача.Автор = Автор;
		Задача.ДатаНачала = ТекущаяДата();
		Задача.Наименование = "Заказы поставщикам по "+ ": Заказ клиента № " +Прав(Предмет.Номер,6);
		Задача.СрокИсполнения =  КонецДня(ТекущаяДата());
		Задача.Важность = Важность;
		Задача.Предмет = Предмет;
		
	КонецЦикла;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ	

Процедура ИзменитьПредметЗадач()

	УстановитьПривилегированныйРежим(Истина);
	НачатьТранзакцию();
	Попытка
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс");

		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Результат = Запрос.Выполнить();
		
		Блокировка = Новый БлокировкаДанных;
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЭлементБлокировки = Блокировка.Добавить("Задача.ЗадачаИсполнителя");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		Блокировка.Заблокировать();
		
		ВыборкаДетальныеЗаписи.Сбросить();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.Предмет = Предмет;
			// Не выполняем предварительную блокировку данных для редактирования, т.к.
			// это изменение имеет более высокий приоритет над открытыми формами задач.
			ЗадачаОбъект.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

Функция РезультатВыполненияТочкиПроверить(Знач ЗадачаСсылка)
	
	СтрокаФормат = ?(ЗаказПроверен,
	    НСтр("ru = '%1, %2 выполнил(а) задачу:
		           |%3
		           |'"),
		НСтр("ru = '%1, %2 вернул(а) задачу:
		           |%3
		           |'"));
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, 
	              ЗадачаДанные.ДатаИсполнения,
	              ЗадачаДанные.Исполнитель,
	              Комментарий);
	
	Возврат Результат;
	
КонецФункции

Функция РезультатВыполненияТочкиИсправить(Знач ЗадачаСсылка)
	
	СтрокаФормат =  НСтр("ru = '%1, %2 выполнил(а) задачу:
		           |%3
		           |'");
	ЗадачаДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"РезультатВыполнения,ДатаИсполнения,Исполнитель");
	Комментарий = СокрЛП(ЗадачаДанные.РезультатВыполнения);
	Комментарий = ?(ПустаяСтрока(Комментарий), "", Комментарий + Символы.ПС);
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаФормат, 
	              ЗадачаДанные.ДатаИсполнения,
	              ЗадачаДанные.Исполнитель,
	              Комментарий);
	
	Возврат Результат;
	
КонецФункции




#КонецЕсли




