////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НСтрока = НСтр("ru = 'Закрыть помощник?'");
	
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьЗависимостиВалюты();
	
	ОбновитьЗависимостиЕдиницыИзмерения();
	
	ОбновитьЗависимостиОрганизации();
	
	ОбновитьЗависимостиБезналичныеРасчеты();
	
	ОбновитьЗависимостиНаличныеРасчеты();
	
	ОбновитьЗависимостиПодразделения();
	
	ОбновитьЗависимостиСклады();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьСписокЭлементовПункта("Валюты");
	
	ОбновитьСписокЭлементовПункта("ЕдиницыИзмерения");
	
	ОбновитьСписокЭлементовПункта("Организации");
	
	ОбновитьСписокЭлементовПункта("БанковскиеСчета");
	
	ОбновитьСписокЭлементовПункта("Кассы");
	
	ОбновитьСписокЭлементовПункта("Склады");
	
	ОбновитьСписокЭлементовПункта("Подразделения");
	
	НаборКонстантОбъект = РеквизитФормыВЗначение("НаборКонстант");
	НаборКонстантОбъект.Прочитать();
	ЗначениеВРеквизитФормы(НаборКонстантОбъект, "НаборКонстант");
	
	ВосстановитьПараметрыУчета();
	
	УстановитьЗаголовокФормы(Заголовок, Элементы);
	
	УстановитьВидимостьКнопокКоманднойПанели(Элементы);
	
	Если НЕ ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
		Элементы.ВалютаУправленческогоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ВалютаУправленческогоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		Элементы.ВалютаРегламентированногоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ВалютаРегламентированногоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Справочник.Валюты.Форма.ПодборВалютИзКлассификатора" Тогда
		ПараметрыФормы = Новый Структура("Ключ", ВыбранноеЗначение);
		ОткрытьФормуМодально("Справочник.Валюты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВалютаУправленческогоУчетаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВалютаУправленческогоУчета) Тогда
		Элементы.ВалютаУправленческогоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ВалютаУправленческогоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	ВалютаУправленческогоУчетаПриИзмененииСервер();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРегламентированногоУчетаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВалютаРегламентированногоУчета) Тогда
		Элементы.ВалютаРегламентированногоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ВалютаРегламентированногоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	ВалютаРегламентированногоУчетаПриИзмененииСервер();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКалендарьПредприятияПриИзменении(Элемент)
	
	ОсновнойКалендарьПредприятияПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаказыКлиентовПриИзменении(Элемент)
	
	ИспользоватьЗаказыКлиентовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользованиеСоглашенийСКлиентамиПриИзменении(Элемент)
	
	ИспользованиеСоглашенийСКлиентамиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаказыПоставщикамПриИзменении(Элемент)
	
	ИспользоватьЗаказыПоставщикамПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_БанковскийСчетНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	УникальныйИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(ИмяЭлемента, "БанковскийСчет_", ""), "_", "-");
	
	ЗначениеЭлемента = СсылкаСправочникаПоИдентификатору("БанковскиеСчетаОрганизаций", УникальныйИдентификаторЭлемента);
	
	ПараметрыФормы = Новый Структура("Ключ", ЗначениеЭлемента);
	ОткрытьФормуМодально("Справочник.БанковскиеСчетаОрганизаций.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("БанковскиеСчета");
	
	ОбновитьЗависимостиБезналичныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ВалютаНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	УникальныйИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(ИмяЭлемента, "Валюта_", ""), "_", "-");
	
	ЗначениеЭлемента = СсылкаСправочникаПоИдентификатору("Валюты", УникальныйИдентификаторЭлемента);
	
	ПараметрыФормы = Новый Структура("Ключ", ЗначениеЭлемента);
	ОткрытьФормуМодально("Справочник.Валюты.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Валюты");
	
	ОбновитьЗависимостиВалюты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_КассаНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	УникальныйИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(ИмяЭлемента, "Касса_", ""), "_", "-");
	
	ЗначениеЭлемента = СсылкаСправочникаПоИдентификатору("Кассы", УникальныйИдентификаторЭлемента);
	
	ПараметрыФормы = Новый Структура("Ключ", ЗначениеЭлемента);
	ОткрытьФормуМодально("Справочник.Кассы.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Кассы");
	
	ОбновитьЗависимостиНаличныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ОрганизацияНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	УникальныйИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(ИмяЭлемента, "Организация_", ""), "_", "-");
	
	ЗначениеЭлемента = СсылкаСправочникаПоИдентификатору("Организации", УникальныйИдентификаторЭлемента);
	
	ПараметрыФормы = Новый Структура("Ключ", ЗначениеЭлемента);
	ОткрытьФормуМодально("Справочник.Организации.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПунктаОрганизацииСервер();
	
	ОбновитьЗависимостиОрганизации();
	ОбновитьЗависимостиБезналичныеРасчеты();
	ОбновитьЗависимостиНаличныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ПодразделениеНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	УникальныйИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(ИмяЭлемента, "Подразделение_", ""), "_", "-");
	
	ЗначениеЭлемента = СсылкаСправочникаПоИдентификатору("СтруктураПредприятия", УникальныйИдентификаторЭлемента);
	
	ПараметрыФормы = Новый Структура("Ключ", ЗначениеЭлемента);
	ОткрытьФормуМодально("Справочник.СтруктураПредприятия.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Подразделения");
	
	ОбновитьЗависимостиПодразделения();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_СкладНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	УникальныйИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(ИмяЭлемента, "Склад_", ""), "_", "-");
	
	ЗначениеЭлемента = СсылкаСправочникаПоИдентификатору("Склады", УникальныйИдентификаторЭлемента);
	
	ПараметрыФормы = Новый Структура("Ключ", ЗначениеЭлемента);
	ОткрытьФормуМодально("Справочник.Склады.Форма.ФормаЭлемента", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Склады");
	
	ОбновитьЗависимостиСклады();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ЕдиницаИзмеренияНажатие(Элемент)
	
	ИмяЭлемента = Элемент.Имя;
	УникальныйИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(ИмяЭлемента, "ЕдиницаИзмерения_", ""), "_", "-");
	
	ЗначениеЭлемента = СсылкаСправочникаПоИдентификатору("ЕдиницыИзмерения", УникальныйИдентификаторЭлемента);
	
	ПараметрыФормы = Новый Структура("Ключ", ЗначениеЭлемента);
	ОткрытьФормуМодально("Справочник.ЕдиницыИзмерения.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("ЕдиницыИзмерения");
	
	ОбновитьЗависимостиЕдиницыИзмерения();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДобавитьВалюту(Команда)
	
	ОткрытьФормуМодально("Справочник.Валюты.Форма.ПодборВалютИзКлассификатора",,ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Валюты");
	
	ОбновитьЗависимостиВалюты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКурсыВалют(Команда)
	
	ОткрытьФормуМодально("Обработка.ЗагрузкаКурсовВалют.Форма");
	
	ОбновитьСписокЭлементовПункта("Валюты");
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЕдиницуИзмерения(Команда)
	
	ОткрытьФормуМодально("Справочник.ЕдиницыИзмерения.Форма.КлассификаторЕдиницИзмерения", , ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("ЕдиницыИзмерения");
	
	ОбновитьЗависимостиЕдиницыИзмерения();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБанковскийСчет(Команда)
	
	ЗначенияЗаполнения = Новый Структура("ВалютаДенежныхСредств", ВалютаРегламентированногоУчета);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФормуМодально("Справочник.БанковскиеСчетаОрганизаций.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("БанковскиеСчета");
	
	ОбновитьЗависимостиБезналичныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКлассификаторБанков(Команда)
	
	ОткрытьФормуМодально("Справочник.КлассификаторБанковРФ.Форма.ЗагрузкаКлассификатора");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьКассу(Команда)
	
	ЗначенияЗаполнения = Новый Структура("ВалютаДенежныхСредств", ВалютаРегламентированногоУчета);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФормуМодально("Справочник.Кассы.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Кассы");
	
	ОбновитьЗависимостиНаличныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОрганизацию(Команда)
	
	ОткрытьФормуМодально("Справочник.Организации.ФормаОбъекта", , ЭтаФорма);
	
	ОбновитьСписокЭлементовПунктаОрганизацииСервер();
	
	ОбновитьЗависимостиОрганизации();
	ОбновитьЗависимостиБезналичныеРасчеты();
	ОбновитьЗависимостиНаличныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодразделение(Команда)
	
	ОткрытьФормуМодально("Справочник.СтруктураПредприятия.ФормаОбъекта", , ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Подразделения");
	
	ОбновитьЗависимостиПодразделения();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСклад(Команда)
	
	ОткрытьФормуМодально("Справочник.Склады.ФормаОбъекта", , ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Склады");
	
	ОбновитьЗависимостиСклады();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеБанковскиеСчета(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФормуМодально("Справочник.БанковскиеСчетаОрганизаций.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("БанковскиеСчета");
	
	ОбновитьЗависимостиБезналичныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеВалюты(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФормуМодально("Справочник.Валюты.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Валюты");
	
	ОбновитьЗависимостиВалюты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеКассы(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФормуМодально("Справочник.Кассы.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Кассы");
	
	ОбновитьЗависимостиНаличныеРасчеты();;
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеОрганизации(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФормуМодально("Справочник.Организации.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПунктаОрганизацииСервер();
	
	ОбновитьЗависимостиОрганизации();
	ОбновитьЗависимостиБезналичныеРасчеты();
	ОбновитьЗависимостиНаличныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеПодразделения(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФормуМодально("Справочник.СтруктураПредприятия.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Подразделения");
	
	ОбновитьЗависимостиПодразделения();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеСклады(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФормуМодально("Справочник.Склады.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Склады");
	
	ОбновитьЗависимостиСклады();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВсеЕдиницыИзмерения(Команда)
	
	ПараметрыОтбора = Новый Структура("ПометкаУдаления", Ложь);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	
	ОткрытьФормуМодально("Справочник.ЕдиницыИзмерения.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("ЕдиницыИзмерения");
	
	ОбновитьЗависимостиЕдиницыИзмерения();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ТекущаяСтраница = Элементы.СтраницыШагов.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаШаг3;
		
		ПриПереходеКСтранице3();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаШаг4;
		
		ПриПереходеКСтранице4();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг4 Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаШаг5;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг5 Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаФинал;
		ЗаполнитьИтоговуюИнформацию();
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Заголовок, Элементы);
	
	УстановитьВидимостьКнопокКоманднойПанели(Элементы);
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ТекущаяСтраница = Элементы.СтраницыШагов.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаШаг1;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг4 Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаШаг3;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг5 Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаШаг4;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаФинал Тогда
		Элементы.СтраницыШагов.ТекущаяСтраница = Элементы.СтраницаШаг5;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Заголовок, Элементы);
	
	УстановитьВидимостьКнопокКоманднойПанели(Элементы);
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьНастройку(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_УказатьСистемуНалогообложения(Команда)
	
	ИмяКоманды = Команда.Имя;
	УникальныйИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(ИмяКоманды, "УказатьСистемуНалогообложения_", ""), "_", "-");
	
	ЗначениеЭлемента = СсылкаСправочникаПоИдентификатору("Организации", УникальныйИдентификаторЭлемента);
	
	ЗначенияЗаполнения = Новый Структура("Организация", ЗначениеЭлемента);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФормуМодально("РегистрСведений.СистемыНалогообложенияОрганизаций.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Организации");
	
	ОбновитьЗависимостиОрганизации();
	ОбновитьЗависимостиБезналичныеРасчеты();
	ОбновитьЗависимостиНаличныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_УказатьМетодОценкиСтоимостиТоваров(Команда)
	
	ИмяКоманды = Команда.Имя;
	УникальныйИдентификаторЭлемента = СтрЗаменить(СтрЗаменить(ИмяКоманды, "УказатьМетодОценки_", ""), "_", "-");
	
	ЗначениеЭлемента = СсылкаСправочникаПоИдентификатору("Организации", УникальныйИдентификаторЭлемента);
	
	ЗначенияЗаполнения = Новый Структура("Организация", ЗначениеЭлемента);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФормуМодально("РегистрСведений.НастройкаМетодовОценкиСтоимостиТоваров.ФормаЗаписи", ПараметрыФормы, ЭтаФорма);
	
	ОбновитьСписокЭлементовПункта("Организации");
	
	ОбновитьЗависимостиОрганизации();
	ОбновитьЗависимостиБезналичныеРасчеты();
	ОбновитьЗависимостиНаличныеРасчеты();
	
	ОбновитьЗависимости();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере 
Процедура УстановитьЗначениеКонстантыПоИмени(ИмяКонстанты)
	
	Константы[ИмяКонстанты].Установить(НаборКонстант[ИмяКонстанты]);
	
	УстановитьЗначенияЗависимыхКонстант(ИмяКонстанты);
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьЗначенияЗависимыхКонстант(ИмяРодительскойКонстанты)
	
	Если ИмяРодительскойКонстанты = "ИспользоватьЗаказыКлиентов" Тогда
		Если Не НаборКонстант.ИспользоватьЗаказыКлиентов Тогда
			НаборКонстант.ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам	= Ложь;
			НаборКонстант.ИспользоватьРеализациюПоНесколькимЗаказам				= Ложь;
			НаборКонстант.ВедетсяРаботаЧерезТорговыхПредставителей				= Ложь;
			НаборКонстант.ИспользоватьСогласованиеЗаказовКлиентов				= Ложь;
			НаборКонстант.НеЗакрыватьЗаказыКлиентовБезПолнойОплаты				= Ложь;
			НаборКонстант.НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки			= Ложь;
			
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьАктыВыполненныхРаботПоНесколькимЗаказам");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьРеализациюПоНесколькимЗаказам");
			УстановитьЗначениеКонстантыПоИмени("ВедетсяРаботаЧерезТорговыхПредставителей");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьСогласованиеЗаказовКлиентов");
			УстановитьЗначениеКонстантыПоИмени("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты");
			УстановитьЗначениеКонстантыПоИмени("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ВедетсяРаботаЧерезТорговыхПредставителей" Тогда
		Если Не НаборКонстант.ВедетсяРаботаЧерезТорговыхПредставителей Тогда
			НаборКонстант.ИспользованиеЗаданийТорговымПредставителям = ПредопределенноеЗначение("Перечисление.ИспользованиеЗаданийТорговымПредставителям.НеИспользуются");
			
			УстановитьЗначениеКонстантыПоИмени("ИспользованиеЗаданийТорговымПредставителям");
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользованиеЗаданийТорговымПредставителям" Тогда
		ЗаданияИспользуются = 
		(НаборКонстант.ИспользованиеЗаданийТорговымПредставителям = ПредопределенноеЗначение("Перечисление.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями"))
		Или (НаборКонстант.ИспользованиеЗаданийТорговымПредставителям = ПредопределенноеЗначение("Перечисление.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяТорговымиПредставителямиДляПланирования"));
		
		Если Не ЗаданияИспользуются Тогда
			НаборКонстант.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре = Ложь;
			НаборКонстант.НеДетализироватьЗаданияТорговымПредставителямПоНоменклатуре = Ложь;
		КонецЕсли;
		
		НаборКонстант.ИспользоватьЗаданияДляУправленияТорговымиПредставителями = (НаборКонстант.ИспользованиеЗаданийТорговымПредставителям = ПредопределенноеЗначение("Перечисление.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями"));
		НаборКонстант.ИспользоватьЗаданияТорговымПредставителямДляПланирования = (НаборКонстант.ИспользованиеЗаданийТорговымПредставителям = ПредопределенноеЗначение("Перечисление.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяТорговымиПредставителямиДляПланирования"));
		
		УстановитьЗначениеКонстантыПоИмени("ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре");
		УстановитьЗначениеКонстантыПоИмени("НеДетализироватьЗаданияТорговымПредставителямПоНоменклатуре");
		
		УстановитьЗначениеКонстантыПоИмени("ИспользоватьЗаданияДляУправленияТорговымиПредставителями");
		УстановитьЗначениеКонстантыПоИмени("ИспользоватьЗаданияТорговымПредставителямДляПланирования");
		
	ИначеЕсли ИмяРодительскойКонстанты = "ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре" Тогда
		НаборКонстант.НеДетализироватьЗаданияТорговымПредставителямПоНоменклатуре = (Не НаборКонстант.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре
		И НаборКонстант.ИспользованиеЗаданийТорговымПредставителям = ПредопределенноеЗначение("Перечисление.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями"));
		
		УстановитьЗначениеКонстантыПоИмени("НеДетализироватьЗаданияТорговымПредставителямПоНоменклатуре");
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьСогласованиеЗаказовКлиентов" Тогда
		
		Если НаборКонстант.ИспользоватьСогласованиеЗаказовКлиентов Тогда
			НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи = Истина;
			
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьБизнесПроцессыИЗадачи");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьЗаказыПоставщикам" Тогда
		Если Не НаборКонстант.ИспользоватьЗаказыПоставщикам Тогда
			НаборКонстант.ИспользоватьСогласованиеЗаказовПоставщикам		= Ложь;
			НаборКонстант.ИспользоватьПоступлениеПоНесколькимЗаказам		= Ложь;
			НаборКонстант.НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления = Ложь;
			НаборКонстант.НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты		= Ложь;
			
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьСогласованиеЗаказовПоставщикам");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьПоступлениеПоНесколькимЗаказам");
			УстановитьЗначениеКонстантыПоИмени("НеЗакрыватьЗаказыПоставщикамБезПолногоПоступления");
			УстановитьЗначениеКонстантыПоИмени("НеЗакрыватьЗаказыПоставщикамБезПолнойОплаты");
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьСогласованиеЗаказовПоставщикам" Тогда
		Если НаборКонстант.ИспользоватьСогласованиеЗаказовПоставщикам Тогда
			НаборКонстант.ИспользоватьБизнесПроцессыИЗадачи = Истина;
			
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьБизнесПроцессыИЗадачи");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользованиеСоглашенийСКлиентами" Тогда
		
		Если НаборКонстант.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения Тогда
			НаборКонстант.ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами	= Истина;
			НаборКонстант.ИспользоватьТиповыеСоглашенияСКлиентами					= Истина;
			НаборКонстант.ИспользоватьИндивидуальныеСоглашенияСКлиентами			= Истина;
			
		ИначеЕсли НаборКонстант.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения Тогда
			НаборКонстант.ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами	= Ложь;
			НаборКонстант.ИспользоватьТиповыеСоглашенияСКлиентами					= Истина;
			НаборКонстант.ИспользоватьИндивидуальныеСоглашенияСКлиентами			= Ложь;
			
		ИначеЕсли НаборКонстант.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения Тогда
			НаборКонстант.ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами	= Ложь;
			НаборКонстант.ИспользоватьТиповыеСоглашенияСКлиентами					= Ложь;
			НаборКонстант.ИспользоватьИндивидуальныеСоглашенияСКлиентами			= Истина;
			
		КонецЕсли;
		
		УстановитьЗначениеКонстантыПоИмени("ИспользоватьТиповыеИИндивидуальныеСоглашенияСКлиентами");
		УстановитьЗначениеКонстантыПоИмени("ИспользоватьТиповыеСоглашенияСКлиентами");
		УстановитьЗначениеКонстантыПоИмени("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ВалютаУправленческогоУчетаПриИзмененииСервер()
	
	Если НаборКонстант.ВалютаУправленческогоУчета <> ВалютаУправленческогоУчета Тогда
		
		НаборКонстант.ВалютаУправленческогоУчета = ВалютаУправленческогоУчета;
		
		УстановитьЗначениеКонстантыПоИмени("ВалютаУправленческогоУчета");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ВалютаРегламентированногоУчетаПриИзмененииСервер()
	
	Если НаборКонстант.ВалютаРегламентированногоУчета <> ВалютаРегламентированногоУчета Тогда
		
		НаборКонстант.ВалютаРегламентированногоУчета = ВалютаРегламентированногоУчета;
		
		УстановитьЗначениеКонстантыПоИмени("ВалютаРегламентированногоУчета");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОсновнойКалендарьПредприятияПриИзмененииСервер()
	
	НаборКонстант.ОсновнойКалендарьПредприятия = ОсновнойКалендарьПредприятия;
	
	УстановитьЗначениеКонстантыПоИмени("ОсновнойКалендарьПредприятия");
	
КонецПроцедуры

&НаСервере 
Процедура ИспользованиеСоглашенийСКлиентамиПриИзмененииСервер()
	
	// Использовать типовые и индивидуальные
	Если ИспользованиеСоглашенийСКлиентами = 0 Тогда
		НаборКонстант.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения;
	
	// Использовать только типовые
	ИначеЕсли ИспользованиеСоглашенийСКлиентами = 1 Тогда
		НаборКонстант.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения;
	
	// Использовать только индивидуальные
	ИначеЕсли ИспользованиеСоглашенийСКлиентами = 2 Тогда
		НаборКонстант.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения;
	
	КонецЕсли;
	
	УстановитьЗначениеКонстантыПоИмени("ИспользованиеСоглашенийСКлиентами");
	
КонецПроцедуры

&НаСервере 
Процедура ИспользоватьЗаказыКлиентовПриИзмененииСервер()
	
	НаборКонстант.ИспользоватьЗаказыКлиентов = ?(ИспользоватьЗаказыКлиентов = 1, Истина, Ложь);
	
	УстановитьЗначениеКонстантыПоИмени("ИспользоватьЗаказыКлиентов");
	
КонецПроцедуры

&НаСервере 
Процедура ИспользоватьЗаказыПоставщикамПриИзмененииСервер()
	
	НаборКонстант.ИспользоватьЗаказыПоставщикам = ?(ИспользоватьЗаказыПоставщикам = 1, Истина, Ложь);
	
	УстановитьЗначениеКонстантыПоИмени("ИспользоватьЗаказыПоставщикам");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Формирование итоговой информации

&НаСервере 
Функция БанковскиеСчетаОрганизаций()
	
	БанковскиеСчетаОрганизаций = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БанковскиеСчетаОрганизаций.Ссылка КАК БанковскийСчет,
	               |	БанковскиеСчетаОрганизаций.Владелец КАК Организация
	               |ИЗ
	               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	               |ГДЕ
	               |	НЕ БанковскиеСчетаОрганизаций.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		БанковскиеСчетаОрганизаций = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат БанковскиеСчетаОрганизаций;
	
КонецФункции

&НаСервере 
Функция КассыОрганизаций()
	
	КассыОрганизаций = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Кассы.Ссылка КАК Касса,
	               |	Кассы.Владелец КАК Организация
	               |ИЗ
	               |	Справочник.Кассы КАК Кассы
	               |ГДЕ
	               |	НЕ Кассы.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		КассыОрганизаций = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат КассыОрганизаций;
	
КонецФункции

&НаСервере 
Функция ПодразделенияПредприятия()
	
	ПодразделенияПредприятия = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Подразделения.Ссылка КАК Подразделение
	               |ИЗ
	               |	Справочник.СтруктураПредприятия КАК Подразделения
	               |ГДЕ
	               |	НЕ Подразделения.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ПодразделенияПредприятия = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат ПодразделенияПредприятия;
	
КонецФункции

&НаСервере 
Функция СкладыПредприятия()
	
	СкладыПредприятия = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Склады.Ссылка КАК Склад
	               |ИЗ
	               |	Справочник.Склады КАК Склады
	               |ГДЕ
	               |	НЕ Склады.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		СкладыПредприятия = РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
	Возврат СкладыПредприятия;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ИтоговаяИнформация = Обработки.ПомощникБыстройНастройкиПараметровУчета.ПолучитьМакет("МакетИтоговойИнформации").ПолучитьТекст();
	
	// Базовая информация
	СтрокаВалют = "";
	Для Каждого Валюта Из Валюты Цикл 
		СтрокаВалют = СтрокаВалют + ?(ПустаяСтрока(СтрокаВалют),"",", ") + Валюта;
	КонецЦикла;
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#Валюты#", СтрокаВалют);
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ВалютаУправленческогоУчета#", ВалютаУправленческогоУчета);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ВалютаРегламентированногоУчета#", ВалютаРегламентированногоУчета);
	
	СтрокаЕдиницИзмерения = "";
	Для Каждого ЕдиницаИзмерения Из ЕдиницыИзмерения Цикл 
		СтрокаЕдиницИзмерения = СтрокаЕдиницИзмерения + ?(ПустаяСтрока(СтрокаЕдиницИзмерения),"",", ") + ЕдиницаИзмерения;
	КонецЦикла;
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ЕдиницыИзмерения#", СтрокаЕдиницИзмерения);
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ОсновнойКалендарьПредприятия#", ?(ОсновнойКалендарьПредприятия.Пустая(), НСтр("ru = 'Не указан'"), ОсновнойКалендарьПредприятия));
	
	// Организации предприятия
	ОрганизацииБанковскиеСчетаКассы = "";
	БанковскиеСчетаОрганизаций = БанковскиеСчетаОрганизаций();
	КассыОрганизаций = КассыОрганизаций();
		
	Для Каждого Организация Из Организации Цикл 
		ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + ?(ПустаяСтрока(ОрганизацииБанковскиеСчетаКассы),"", "<BR><BR>");
		
		ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + НСтр("ru = 'Организация'") + ": " + "<EM>" + Организация.Значение + "</EM>";
		
		// Заполним банковские счета
		ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + ?(ПустаяСтрока(ОрганизацииБанковскиеСчетаКассы),"", "<BR>");
		Если БанковскиеСчетаОрганизаций = Неопределено Тогда
			ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + НСтр("ru = 'Банковские счета'") + ": " + "<EM>" + НСтр("ru = 'Не заданы'") + "</EM>";
			
		Иначе
			ОтборПоОрганизации = Новый Структура("Организация", Организация.Значение);
			НайденныеБанковскиеСчета = БанковскиеСчетаОрганизаций.НайтиСтроки(ОтборПоОрганизации);
			
			Если НайденныеБанковскиеСчета.Количество() = 0 Тогда
				ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + НСтр("ru = 'Банковские счета'") + ": " + "<EM>" + НСтр("ru = 'Не заданы'") + "</EM>";
				
			Иначе
				СтрокаБанковскихСчетов = "";
				Для Каждого БанковскийСчет Из НайденныеБанковскиеСчета Цикл 
					СтрокаБанковскихСчетов = СтрокаБанковскихСчетов + ?(ПустаяСтрока(СтрокаБанковскихСчетов),"",", ") + БанковскийСчет.БанковскийСчет;
				КонецЦикла;
				ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + НСтр("ru = 'Банковские счета'") + ": " + "<EM>" + СтрокаБанковскихСчетов + "</EM>";
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполним кассы
		ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + ?(ПустаяСтрока(ОрганизацииБанковскиеСчетаКассы),"", "<BR>");
		Если КассыОрганизаций = Неопределено Тогда
			ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + НСтр("ru = 'Кассы'") + ": " + "<EM>" + НСтр("ru = 'Не заданы'") + "</EM>";
			
		Иначе
			ОтборПоОрганизации = Новый Структура("Организация", Организация.Значение);
			НайденныеКассы = КассыОрганизаций.НайтиСтроки(ОтборПоОрганизации);
			
			Если НайденныеКассы.Количество() = 0 Тогда
				ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + НСтр("ru = 'Кассы'") + ": " + "<EM>" + НСтр("ru = 'Не заданы'") + "</EM>";
				
			Иначе
				СтрокаКасс = "";
				Для Каждого Касса Из НайденныеКассы Цикл 
					СтрокаКасс = СтрокаКасс + ?(ПустаяСтрока(СтрокаКасс),"",", ") + Касса.Касса;
				КонецЦикла;
				ОрганизацииБанковскиеСчетаКассы = ОрганизацииБанковскиеСчетаКассы + НСтр("ru = 'Кассы'") + ": " + "<EM>" + СтрокаКасс + "</EM>";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ОрганизацииБанковскиеСчетаКассы#", ОрганизацииБанковскиеСчетаКассы);
	
	// Структура предприятия
	ПодразделенияПредприятия = ПодразделенияПредприятия();
	СтрокаПодразделений = "";
	Если ПодразделенияПредприятия = Неопределено Тогда
		СтрокаПодразделений = НСтр("ru = 'Не заданы'");
		
	Иначе
		Для Каждого Подразделение Из ПодразделенияПредприятия Цикл 
			СтрокаПодразделений = СтрокаПодразделений + ?(ПустаяСтрока(СтрокаПодразделений),"",", ") + Подразделение.Подразделение;
		КонецЦикла;
			
	КонецЕсли;
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ПодразделенияПредприятия#", СтрокаПодразделений);
	
	СкладыПредприятия = СкладыПредприятия();

	СтрокаСкладов = "";
	Если СкладыПредприятия = Неопределено Тогда
		СтрокаСкладов = НСтр("ru = 'Не заданы'");
		
	Иначе
		Для Каждого Склад Из СкладыПредприятия Цикл 
			СтрокаСкладов = СтрокаСкладов + ?(ПустаяСтрока(СтрокаСкладов),"",", ") + Склад.Склад;
		КонецЦикла;
			
	КонецЕсли;
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#СкладыПредприятия#", СтрокаСкладов);
	
	// Соглашения с клиентами
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ВариантИспользованияСоглашенийСКлиентами#", Константы.ИспользованиеСоглашенийСКлиентами.Получить());
	
	//Заказы
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ИспользованиеЗаказовКлиентов#", ?(ИспользоватьЗаказыКлиентов = 0, "Не используются", "Используются"));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ИспользованиеЗаказовПоставщикам#", ?(ИспользоватьЗаказыПоставщикам = 0, "Не используются", "Используются"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ГоризонтальнаяГруппа(Имя, РодительскаяГруппа = Неопределено, Элемент = Неопределено)
	
	ГоризонтальнаяГруппа = Элементы.Вставить(Имя, Тип("ГруппаФормы"), РодительскаяГруппа, Элемент);
	ГоризонтальнаяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГоризонтальнаяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГоризонтальнаяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГоризонтальнаяГруппа.ОтображатьЗаголовок = Ложь;
	ГоризонтальнаяГруппа.РастягиватьПоГоризонтали = Ложь;
	
	Возврат ГоризонтальнаяГруппа;
	
КонецФункции

&НаСервере
Функция КомандаФормы(ИмяКоманды, ЗаголовокКоманды, ДействиеКоманды)
	
	КомандаФормы = Команды.Добавить(ИмяКоманды);
	КомандаФормы.Заголовок = ЗаголовокКоманды;
	КомандаФормы.Действие = ДействиеКоманды;
	
	Возврат КомандаФормы;
	
КонецФункции

&НаСервере 
Функция СсылкаСправочникаПоИдентификатору(ИмяОбъектаМетаданных, ИдентификаторСтрока)
	
	ИдентификаторСправочника = Новый УникальныйИдентификатор(ИдентификаторСтрока);
	
	Возврат Справочники[ИмяОбъектаМетаданных].ПолучитьСсылку(ИдентификаторСправочника);
	
КонецФункции

&НаСервере 
Функция УникальныйИдентификаторНормализованный(Ссылка)
	
	УникальныйИдентификаторПоСсылке = Строка(Ссылка.УникальныйИдентификатор());
	УникальныйИдентификаторНормализованный = СтрЗаменить(УникальныйИдентификаторПоСсылке, "-", "_");
	
	Возврат УникальныйИдентификаторНормализованный;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьВидимостьКнопокКоманднойПанели(Элементы)
	
	ТекущаяСтраница = Элементы.СтраницыШагов.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		Элементы.Назад.Видимость = Ложь;
		Элементы.Далее.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Готово.Видимость = Ложь;
		Элементы.Закрыть.Видимость = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2
		ИЛИ ТекущаяСтраница = Элементы.СтраницаШаг3 
		ИЛИ ТекущаяСтраница = Элементы.СтраницаШаг4 
		ИЛИ ТекущаяСтраница = Элементы.СтраницаШаг5 Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее.Видимость = Истина;
		Элементы.Далее.КнопкаПоУмолчанию = Истина;
		Элементы.Готово.Видимость = Ложь;
		Элементы.Закрыть.Видимость = Истина;
		
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаФинал Тогда
		Элементы.Назад.Видимость = Истина;
		Элементы.Далее.Видимость = Ложь;
		Элементы.Готово.Видимость = Истина;
		Элементы.Готово.КнопкаПоУмолчанию = Истина;
		Элементы.Закрыть.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьЗаголовокФормы(Заголовок, Элементы)
	
	ТекущаяСтраница = Элементы.СтраницыШагов.ТекущаяСтраница;
	
	Заголовок = НСтр("ru='Помощник быстрой настройки'") + " (" + ТекущаяСтраница.Заголовок + ")";
	
КонецПроцедуры

&НаСервере 
Функция ТекстЗапросаПоБанковскимСчетам()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	БанковскиеСчетаОрганизаций.Ссылка,
	|	БанковскиеСчетаОрганизаций.ПометкаУдаления
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	|
	|УПОРЯДОЧИТЬ ПО
	|	БанковскиеСчетаОрганизаций.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере 
Функция ТекстЗапросаПоВалютам()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Валюты.Ссылка,
	|	Валюты.ПометкаУдаления
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере 
Функция ТекстЗапросаПоКассам()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Кассы.Ссылка,
	|	Кассы.ПометкаУдаления
	|ИЗ
	|	Справочник.Кассы КАК Кассы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Кассы.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере 
Функция ТекстЗапросаПоОрганизациям()
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СистемыНалогообложенияОрганизацийСрезПоследних.Организация,
	               |	СистемыНалогообложенияОрганизацийСрезПоследних.Период КАК ПериодСистемыНалогообложения,
	               |	СистемыНалогообложенияОрганизацийСрезПоследних.СистемаНалогообложения
	               |ПОМЕСТИТЬ СистемыНалогообложения
	               |ИЗ
	               |	РегистрСведений.СистемыНалогообложенияОрганизаций.СрезПоследних КАК СистемыНалогообложенияОрганизацийСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкаМетодовОценкиСтоимостиТоваровСрезПоследних.Организация,
	               |	НастройкаМетодовОценкиСтоимостиТоваровСрезПоследних.Период КАК ПериодМетодаОценки,
	               |	НастройкаМетодовОценкиСтоимостиТоваровСрезПоследних.МетодОценки
	               |ПОМЕСТИТЬ МетодыОценки
	               |ИЗ
	               |	РегистрСведений.НастройкаМетодовОценкиСтоимостиТоваров.СрезПоследних КАК НастройкаМетодовОценкиСтоимостиТоваровСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Организации.Ссылка,
	               |	Организации.ПометкаУдаления,
	               |	ЕСТЬNULL(СистемыНалогообложения.ПериодСистемыНалогообложения, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодСистемыНалогообложения,
	               |	ЕСТЬNULL(СистемыНалогообложения.СистемаНалогообложения, ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.ПустаяСсылка)) КАК СистемаНалогообложения,
	               |	ЕСТЬNULL(МетодыОценки.ПериодМетодаОценки, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодМетодаОценки,
	               |	ЕСТЬNULL(МетодыОценки.МетодОценки, ЗНАЧЕНИЕ(Перечисление.МетодыОценкиСтоимостиТоваров.ПустаяСсылка)) КАК МетодОценки
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СистемыНалогообложения КАК СистемыНалогообложения
	               |		ПО (СистемыНалогообложения.Организация = Организации.Ссылка)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ МетодыОценки КАК МетодыОценки
	               |		ПО (МетодыОценки.Организация = Организации.Ссылка)
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА &ИспользоватьУправленческуюОрганизацию
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ НЕ Организации.Предопределенный
	               |		КОНЕЦ
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Организации.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере 
Функция ТекстЗапросаПоСкладам()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Склады.Ссылка,
	|	Склады.ПометкаУдаления
	|ИЗ
	|	Справочник.Склады КАК Склады
	|
	|УПОРЯДОЧИТЬ ПО
	|	Склады.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере 
Функция ТекстЗапросаПоПодразделениям()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка,
	|	СтруктураПредприятия.ПометкаУдаления
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтруктураПредприятия.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере 
Функция ТекстЗапросаПоЕдиницамИзмерения()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка,
	|	ЕдиницыИзмерения.ПометкаУдаления
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕдиницыИзмерения.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере 
Функция ТекстЗапросаВалютыРегламентированногоУчета()
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	Валюты.Ссылка
	|ИЗ
	|	Справочник.Валюты КАК Валюты
	|ГДЕ
	|	НЕ Валюты.ПометкаУдаления
	|	И Валюты.Код = ""643""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюты.Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере 
Процедура ДобавитьКомандуИКнопкуУказатьСистемуНалогообложения(УникальныйИдентификатор, РодительскаяГруппа)
	
	КомандаУказатьНалогообложение = КомандаФормы("УказатьСистемуНалогообложения_" + УникальныйИдентификатор, НСтр("ru='Указать систему налогообложения'"), "Подключаемый_УказатьСистемуНалогообложения");
	КнопкаУказатьНалогообложение = Элементы.Добавить("УказатьСистемуНалогообложения_" + УникальныйИдентификатор, Тип("КнопкаФормы"), РодительскаяГруппа);
	КнопкаУказатьНалогообложение.Вид = ВидКнопкиФормы.Гиперссылка;
	КнопкаУказатьНалогообложение.ИмяКоманды = "УказатьСистемуНалогообложения_" + УникальныйИдентификатор;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьКомандуИКнопкуУказатьМетодОценкиСтоимостиТоваров(УникальныйИдентификатор, РодительскаяГруппа)
	
	КомандаУказатьНалогообложение = КомандаФормы("УказатьМетодОценки_" + УникальныйИдентификатор, НСтр("ru='Указать метод оценки стоимости товаров'"), "Подключаемый_УказатьМетодОценкиСтоимостиТоваров");
	КнопкаУказатьНалогообложение = Элементы.Добавить("УказатьМетодОценки_" + УникальныйИдентификатор, Тип("КнопкаФормы"), РодительскаяГруппа);
	КнопкаУказатьНалогообложение.Вид = ВидКнопкиФормы.Гиперссылка;
	КнопкаУказатьНалогообложение.ИмяКоманды = "УказатьМетодОценки_" + УникальныйИдентификатор;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьДополнительныеКоманды(ИмяПункта, ДанныеЭлемента, УникальныйИдентификаторЭлемента, РодительскаяГруппа)
	
	Если ИмяПункта = "Организации" Тогда
		Если ДанныеЭлемента.СистемаНалогообложения.Пустая() Тогда 
			ДобавитьКомандуИКнопкуУказатьСистемуНалогообложения(УникальныйИдентификаторЭлемента, РодительскаяГруппа) 
		КонецЕсли;
		
		Если ДанныеЭлемента.МетодОценки.Пустая() Тогда 
			ДобавитьКомандуИКнопкуУказатьМетодОценкиСтоимостиТоваров(УникальныйИдентификаторЭлемента, РодительскаяГруппа) 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция ДополнительнаяИнформация(ИмяПункта, ДанныеЭлемента)
	
	ДополнительнаяИнформация = "";
	
	Если ИмяПункта = "Организации" Тогда
		ДополнительнаяИнформация = ДанныеЭлемента.Ссылка.НаименованиеСокращенное;
		
	ИначеЕсли ИмяПункта = "Валюты" Тогда
		ДополнительнаяИнформация = НСтр("ru='Курс:'") + " " + РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДанныеЭлемента.Ссылка, ТекущаяДата()).Курс;
		
	ИначеЕсли ИмяПункта = "ЕдиницыИзмерения" Тогда
		ДополнительнаяИнформация = НРег(ДанныеЭлемента.Ссылка.НаименованиеПолное);
		
	КонецЕсли;
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

&НаСервере 
Процедура ОбновитьСписокЭлементовПункта(ИмяПункта)
	
	// Получим элементы
	Запрос = Новый Запрос;
	
	МаксКоличествоЭлементовПункта = 3;
	ДополнительнаяИнформацияТребуется = Ложь;
	ДополнительныеКомандыТребуются = Ложь;
	ДополнительнаяИнформация = "";
	
	Если ИмяПункта = "Организации" Тогда
		ТекстЗапроса = ТекстЗапросаПоОрганизациям();
		Запрос.УстановитьПараметр("ИспользоватьУправленческуюОрганизацию", ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
		
		ПрефиксЭлементаФормы = "Организация_";
		ОбработчикСобытияЭлементаФормы = "Подключаемый_ОрганизацияНажатие";
		
		ДополнительнаяИнформацияТребуется = Истина;
		ДополнительныеКомандыТребуются = Истина;
		
		НаименованиеКомандыОткрытияСписка = НСтр("ru='Окрыть список организаций'");
		
		МаксКоличествоЭлементовПункта = 0;
		
	ИначеЕсли ИмяПункта = "БанковскиеСчета" Тогда
		ТекстЗапроса = ТекстЗапросаПоБанковскимСчетам();
		
		ПрефиксЭлементаФормы = "БанковскийСчет_";
		ОбработчикСобытияЭлементаФормы = "Подключаемый_БанковскийСчетНажатие";
		НаименованиеКомандыОткрытияСписка = НСтр("ru='Открыть список банковских счетов'");
		
	ИначеЕсли ИмяПункта = "Валюты" Тогда
		ТекстЗапроса = ТекстЗапросаПоВалютам();
		
		ПрефиксЭлементаФормы = "Валюта_";
		ОбработчикСобытияЭлементаФормы = "Подключаемый_ВалютаНажатие";
		
		ДополнительнаяИнформацияТребуется = Истина;
		
		НаименованиеКомандыОткрытияСписка = НСтр("ru='Открыть список валют'");
		
	ИначеЕсли ИмяПункта = "Кассы" Тогда
		ТекстЗапроса = ТекстЗапросаПоКассам();
		
		ПрефиксЭлементаФормы = "Касса_";
		ОбработчикСобытияЭлементаФормы = "Подключаемый_КассаНажатие";
		НаименованиеКомандыОткрытияСписка = НСтр("ru='Открыть список касс'");
		
	ИначеЕсли ИмяПункта = "Склады" Тогда
		ТекстЗапроса = ТекстЗапросаПоСкладам();
		
		ПрефиксЭлементаФормы = "Склад_";
		ОбработчикСобытияЭлементаФормы = "Подключаемый_СкладНажатие";
		НаименованиеКомандыОткрытияСписка = НСтр("ru='Открыть список складов(складских территорий)'");
		
	ИначеЕсли ИмяПункта = "Подразделения" Тогда
		ТекстЗапроса = ТекстЗапросаПоПодразделениям();
		
		ПрефиксЭлементаФормы = "Подразделение_";
		ОбработчикСобытияЭлементаФормы = "Подключаемый_ПодразделениеНажатие";
		НаименованиеКомандыОткрытияСписка = НСтр("ru='Открыть структуру предприятия'");
		
	ИначеЕсли ИмяПункта = "ЕдиницыИзмерения" Тогда
		ТекстЗапроса = ТекстЗапросаПоЕдиницамИзмерения();
		
		ПрефиксЭлементаФормы = "ЕдиницаИзмерения_";
		ОбработчикСобытияЭлементаФормы = "Подключаемый_ЕдиницаИзмеренияНажатие";
		
		ДополнительнаяИнформацияТребуется = Истина;
		
		НаименованиеКомандыОткрытияСписка = НСтр("ru='Открыть список единиц измерения'");
		
		МаксКоличествоЭлементовПункта = 4;
		
	КонецЕсли;
	
	СписокДобавленныхЭлементов = ЭтаФорма[ИмяПункта];
	КомандаОткрытияСписка = "ОткрытьВсе" + ИмяПункта;
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	
	// Обновим список элементов
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТаблицаЭлементов = РезультатЗапроса.Выгрузить();
		
		СписокДобавленныхЭлементов.Очистить();
		
		// Проверим количество элементов к добавлению
		ОтборНеПомеченныхКУдалению = Новый Структура("ПометкаУдаления", Ложь);
		КоличествоНеПомеченныхКУдалению = ТаблицаЭлементов.НайтиСтроки(ОтборНеПомеченныхКУдалению).Количество();
		
		// Обновим элементы формы
		СчетчикДобавленныхЭлементовФормы = 0;
		ДобавлятьЭлементФормыВИнтерфейс = (МаксКоличествоЭлементовПункта = 0 ИЛИ НЕ КоличествоНеПомеченныхКУдалению > МаксКоличествоЭлементовПункта);
		
		Для Каждого СтрокаЭлементов Из ТаблицаЭлементов Цикл
			
			Если НЕ МаксКоличествоЭлементовПункта = 0 И СчетчикДобавленныхЭлементовФормы = МаксКоличествоЭлементовПункта Тогда
				ДобавлятьЭлементФормыВИнтерфейс = Ложь;
			КонецЕсли;
			
			УникальныйИдентификаторЭлемента = УникальныйИдентификаторНормализованный(СтрокаЭлементов.Ссылка);
			ЗаголовокЭлементаФормы = СтрокаЭлементов.Ссылка.Наименование;
			
			ВыведенныйЭлементФормы = Элементы.Найти(ПрефиксЭлементаФормы + УникальныйИдентификаторЭлемента);
			Если НЕ ВыведенныйЭлементФормы = Неопределено Тогда
				Элементы.Удалить(ВыведенныйЭлементФормы);
			КонецЕсли;
			
			Если ДополнительныеКомандыТребуются Тогда
				ВыведенныйЭлементФормы = Элементы.Найти("Группа" + ПрефиксЭлементаФормы + УникальныйИдентификаторЭлемента);
				Если НЕ ВыведенныйЭлементФормы = Неопределено Тогда
					Элементы.Удалить(ВыведенныйЭлементФормы);
				КонецЕсли;
				
				Если ИмяПункта = "Организации" Тогда
					ВыведенныйЭлементФормы = Команды.Найти("УказатьСистемуНалогообложения_" + УникальныйИдентификаторЭлемента);
					Если НЕ ВыведенныйЭлементФормы = Неопределено Тогда
						Команды.Удалить(ВыведенныйЭлементФормы);
					КонецЕсли;
					
					ВыведенныйЭлементФормы = Команды.Найти("УказатьМетодОценки_" + УникальныйИдентификаторЭлемента);
					Если НЕ ВыведенныйЭлементФормы = Неопределено Тогда
						Команды.Удалить(ВыведенныйЭлементФормы);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДобавлятьЭлементФормыВИнтерфейс И НЕ СтрокаЭлементов.ПометкаУдаления Тогда
				
				Если ДополнительныеКомандыТребуются Тогда
					ГоризонтальнаяГруппа = ГоризонтальнаяГруппа("Группа" + ПрефиксЭлементаФормы + УникальныйИдентификаторЭлемента, Элементы["Группа" + ИмяПункта], Элементы["ГруппаКоманд" + ИмяПункта]);
					НадписьЭлементаПункта = Элементы.Вставить(ПрефиксЭлементаФормы + УникальныйИдентификаторЭлемента, Тип("ДекорацияФормы"), ГоризонтальнаяГруппа);
					
				Иначе
					НадписьЭлементаПункта = Элементы.Вставить(ПрефиксЭлементаФормы + УникальныйИдентификаторЭлемента, Тип("ДекорацияФормы"), Элементы["Группа" + ИмяПункта], Элементы["ГруппаКоманд" + ИмяПункта]);
					
				КонецЕсли;
				
				НадписьЭлементаПункта.Вид = ВидДекорацииФормы.Надпись;
				
				Если ДополнительнаяИнформацияТребуется Тогда
					ДополнительнаяИнформация = ДополнительнаяИнформация(ИмяПункта, СтрокаЭлементов);
					
				КонецЕсли;
				
				НадписьЭлементаПункта.Заголовок = ЗаголовокЭлементаФормы + ?(НЕ ПустаяСтрока(ДополнительнаяИнформация), " (" + ДополнительнаяИнформация + ")", "");
				НадписьЭлементаПункта.Гиперссылка = Истина;
				НадписьЭлементаПункта.Ширина = 45;
				НадписьЭлементаПункта.РастягиватьПоГоризонтали = Истина;
				НадписьЭлементаПункта.ЦветТекста = ЦветаСтиля.ВыполненнаяЗадача;
				НадписьЭлементаПункта.УстановитьДействие("Нажатие", ОбработчикСобытияЭлементаФормы);
				
				Если ДополнительныеКомандыТребуются Тогда
					ДобавитьДополнительныеКоманды(ИмяПункта, СтрокаЭлементов, УникальныйИдентификаторЭлемента, ГоризонтальнаяГруппа);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ СтрокаЭлементов.ПометкаУдаления Тогда
				СписокДобавленныхЭлементов.Добавить(СтрокаЭлементов.Ссылка);
				СчетчикДобавленныхЭлементовФормы = СчетчикДобавленныхЭлементовФормы + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ МаксКоличествоЭлементовПункта = 0 И СписокДобавленныхЭлементов.Количество() > МаксКоличествоЭлементовПункта Тогда
			Элементы[КомандаОткрытияСписка].Заголовок = НаименованиеКомандыОткрытияСписка + " (" + СписокДобавленныхЭлементов.Количество() + ")...";
			Элементы[КомандаОткрытияСписка].Видимость = Истина;
		Иначе
			Элементы[КомандаОткрытияСписка].Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьСписокЭлементовПунктаОрганизацииСервер()
	
	ОбновитьСписокЭлементовПункта("Организации");
	ОбновитьСписокЭлементовПункта("БанковскиеСчета");
	ОбновитьСписокЭлементовПункта("Кассы");
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьЗависимости()
	
	ТекущаяСтраница = Элементы.СтраницыШагов.ТекущаяСтраница;
	
	ВалютыУказаны = (Валюты.Количество() > 0);
	Элементы.ЗагрузитьКурсыВалют.Видимость = ВалютыУказаны;
	ВалютаУправленческогоУчетаУказана = ЗначениеЗаполнено(ВалютаУправленческогоУчета);
	ВалютаРегламентированногоУчетаУказана = ЗначениеЗаполнено(ВалютаРегламентированногоУчета);
	
	ЕдиницыИзмеренияУказаны = (ЕдиницыИзмерения.Количество() > 0);
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 
		И ВалютыУказаны
		И ВалютаУправленческогоУчетаУказана И ВалютаРегламентированногоУчетаУказана
		И ЕдиницыИзмеренияУказаны Тогда
		
		Элементы.Далее.Доступность = Истина;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2
		ИЛИ ТекущаяСтраница = Элементы.СтраницаШаг3
		ИЛИ ТекущаяСтраница = Элементы.СтраницаШаг4 
		ИЛИ ТекущаяСтраница = Элементы.СтраницаШаг5 Тогда
		
		Элементы.Далее.Доступность = Истина;
		
	Иначе
		
		Элементы.Далее.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВалютаРегламентированногоУчета()
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Валюта.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапросаВалютыРегламентированногоУчета();
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			Валюта = Выборка.Ссылка;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Валюта;
	
КонецФункции

&НаСервере
Функция ПараметрыУчета()
	
	ПараметрыУчета = Новый Структура;
	
	ПараметрыУчета.Вставить("ВалютаУправленческогоУчета", ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета());
	ПараметрыУчета.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета());
	
	ПараметрыУчета.Вставить("ОсновнойКалендарьПредприятия", Константы.ОсновнойКалендарьПредприятия.Получить());
	
	ПараметрыУчета.Вставить("ИспользованиеСоглашенийСКлиентами", Константы.ИспользованиеСоглашенийСКлиентами.Получить());
	
	ПараметрыУчета.Вставить("ИспользоватьЗаказыКлиентов", Константы.ИспользоватьЗаказыКлиентов.Получить());
	ПараметрыУчета.Вставить("ИспользоватьЗаказыПоставщикам", Константы.ИспользоватьЗаказыПоставщикам.Получить());
	
	Возврат ПараметрыУчета;
	
КонецФункции

&НаСервере
Процедура ВосстановитьПараметрыУчета()
	
	ПараметрыУчета = ПараметрыУчета();
	
	ВалютаУправленческогоУчета			= ПараметрыУчета.ВалютаУправленческогоУчета;
	ВалютаУправленческогоУчетаПриИзмененииСервер();
	
	ВалютаРегламентированногоУчета		= ПараметрыУчета.ВалютаРегламентированногоУчета;
	ВалютаРегламентированногоУчетаПриИзмененииСервер();
	
	ОсновнойКалендарьПредприятия		= ПараметрыУчета.ОсновнойКалендарьПредприятия;
	
	Если ПараметрыУчета.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТиповыеИИндивидуальныеСоглашения Тогда
		ИспользованиеСоглашенийСКлиентами	= 0;
	ИначеЕсли ПараметрыУчета.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоТиповыеСоглашения Тогда
		ИспользованиеСоглашенийСКлиентами	= 1;
	ИначеЕсли ПараметрыУчета.ИспользованиеСоглашенийСКлиентами = Перечисления.ИспользованиеСоглашенийСКлиентами.ТолькоИндивидуальныеСоглашения Тогда
		ИспользованиеСоглашенийСКлиентами	= 2;
	КонецЕсли;
	
	ИспользоватьЗаказыКлиентов			= ?(ПараметрыУчета.ИспользоватьЗаказыКлиентов, 1, 0);
	ИспользоватьЗаказыПоставщикам		= ?(ПараметрыУчета.ИспользоватьЗаказыПоставщикам, 1, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиСклады()
	
	Элементы.НадписьСкладыДобавлены.Видимость = (Склады.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьЗависимостиПодразделения()
	
	Элементы.НадписьПодразделенияДобавлены.Видимость = (Подразделения.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьЗависимостиБезналичныеРасчеты()
	
	Элементы.НадписьБанковскиеСчетаДобавлены.Видимость = (БанковскиеСчета.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьЗависимостиНаличныеРасчеты()
	
	Элементы.НадписьКассыДобавлены.Видимость = (Кассы.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьЗависимостиВалюты()
	
	Элементы.НадписьВалютыДобавлены.Видимость = (Валюты.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьЗависимостиЕдиницыИзмерения()
	
	Элементы.НадписьЕдиницыИзмеренияДобавлены.Видимость = (ЕдиницыИзмерения.Количество() > 0);
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьЗависимостиОрганизации()
	
	Элементы.НадписьОрганизацииДобавлены.Видимость = (Организации.Количество() > 0);
	
КонецПроцедуры

&НаСервере 
Процедура СоздатьОсновноеПодразделение()
	
	Если Подразделения.Количество() = 0 Тогда
		ОсновноеПодразделение = Справочники.СтруктураПредприятия.СоздатьЭлемент();
		ОсновноеПодразделение.Наименование = НСтр("ru='Основное подразделение'");
		ОсновноеПодразделение.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура СоздатьОсновнойСклад()
	
	Если Склады.Количество() = 0 Тогда
		ОсновнойСклад = Справочники.Склады.СоздатьЭлемент();
		ОсновнойСклад.Наименование = НСтр("ru='Основной склад'");
		
		ЗначенияЗаполнения = Новый Структура("ВариантКонтроля, УровеньОбслуживания", 
		Перечисления.ВариантыКонтроля.ОстаткиСУчетомРезерва, Перечисления.УровниОбслуживания.УровеньОбслуживания84_0);
		ОсновнойСклад.Заполнить(ЗначенияЗаполнения);
		
		ОсновнойСклад.ДополнительныеСвойства.Вставить("ПропуститьОбновлениеФлагаКонтроляОперативныхОстатков");
		ОсновнойСклад.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПриПереходеКСтранице4()
	
	// Проверим все ли элементы созданы
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ОрганизацииУказаны", (Организации.Количество() > 0));
	ПараметрыЗаполнения.Вставить("БанковскиеСчетаУказаны", (БанковскиеСчета.Количество() > 0));
	ПараметрыЗаполнения.Вставить("КассыУказаны", (Кассы.Количество() > 0));
	
	Если НЕ (ПараметрыЗаполнения.ОрганизацииУказаны 
				И ПараметрыЗаполнения.БанковскиеСчетаУказаны 
				И ПараметрыЗаполнения.КассыУказаны) Тогда
		ЗаполнитьДанныеСтраницы2(ПараметрыЗаполнения);
		
		ОбновитьЗависимостиОрганизации();
		ОбновитьЗависимостиБезналичныеРасчеты();
		ОбновитьЗависимостиНаличныеРасчеты();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ПриПереходеКСтранице3()
	
	// Проверим все ли элементы созданы
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ПодразделенияУказаны", (Подразделения.Количество() > 0));
	ПараметрыЗаполнения.Вставить("СкладыУказаны", (Склады.Количество() > 0));
	
	Если НЕ (ПараметрыЗаполнения.ПодразделенияУказаны 
				И ПараметрыЗаполнения.СкладыУказаны) Тогда
		ЗаполнитьДанныеСтраницы3(ПараметрыЗаполнения);
		
		ОбновитьЗависимостиПодразделения();
		ОбновитьЗависимостиСклады();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура СоздатьБанковскийСчетОрганизации(Организация)
	
	ОсновойБанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.СоздатьЭлемент();
	ОсновойБанковскийСчет.Владелец				= Организация.Ссылка;
	ОсновойБанковскийСчет.Наименование			= НСтр("ru='Основной банковский счет'") + " " + "(" + ВалютаРегламентированногоУчета + ")";
	ОсновойБанковскийСчет.НомерСчета			= "00000000000000000000";
	ОсновойБанковскийСчет.ВалютаДенежныхСредств	= ВалютаРегламентированногоУчета;
	ОсновойБанковскийСчет.ВариантВыводаМесяца	= Перечисления.ВариантыВыводаМесяцаВДатеДокумента.Числом;
	ОсновойБанковскийСчет.Записать();
	
КонецПроцедуры

&НаСервере 
Процедура СоздатьКассуОрганизации(Организация)
	
	ОсноваяКасса = Справочники.Кассы.СоздатьЭлемент();
	ОсноваяКасса.Владелец				= Организация.Ссылка;
	ОсноваяКасса.Наименование			= НСтр("ru='Основная касса'") + " " + "(" + ВалютаРегламентированногоУчета + ")";
	ОсноваяКасса.ВалютаДенежныхСредств	= ВалютаРегламентированногоУчета;
	ОсноваяКасса.Записать();
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДанныеСтраницы2(ПараметрыЗаполнения)
	
	СозданаОсновнаяОрганизация = Ложь;
	
	Если НЕ ПараметрыЗаполнения.ОрганизацииУказаны Тогда
		
		ОсновнаяОрганизация = Справочники.Организации.СоздатьЭлемент();
		ОсновнаяОрганизация.Наименование	= НСтр("ru='Основная организация'");
		ОсновнаяОрганизация.ЮрФизЛицо		= Перечисления.ЮрФизЛицо.ЮрЛицо;
		ОсновнаяОрганизация.Записать();
		
		СистемыНалогообложенияОрганизации = РегистрыСведений.СистемыНалогообложенияОрганизаций.СоздатьНаборЗаписей();
		СистемыНалогообложенияОрганизации.Отбор.Организация.Значение = ОсновнаяОрганизация.Ссылка;
		СистемыНалогообложенияОрганизации.Отбор.Организация.Использование = Истина;
		
		ОсновнаяСистемаНалогообложения							= СистемыНалогообложенияОрганизации.Добавить();
		ОсновнаяСистемаНалогообложения.Период					= НачалоГода(ТекущаяУниверсальнаяДата());
		ОсновнаяСистемаНалогообложения.Организация				= ОсновнаяОрганизация.Ссылка;
		ОсновнаяСистемаНалогообложения.СистемаНалогообложения	= Перечисления.СистемыНалогообложения.Общая;
		
		СистемыНалогообложенияОрганизации.Записать(Ложь);
		
		НастройкиМетодовОценкиСтоимостиТоваров	= РегистрыСведений.НастройкаМетодовОценкиСтоимостиТоваров.СоздатьНаборЗаписей();
		НастройкиМетодовОценкиСтоимостиТоваров.Отбор.Организация.Значение = ОсновнаяОрганизация.Ссылка;
		НастройкиМетодовОценкиСтоимостиТоваров.Отбор.Организация.Использование = Истина;
		
		МетодОценкиСтоимостиТоваров				= НастройкиМетодовОценкиСтоимостиТоваров.Добавить();
		МетодОценкиСтоимостиТоваров.Период		= НачалоГода(ТекущаяУниверсальнаяДата());
		МетодОценкиСтоимостиТоваров.Организация	= ОсновнаяОрганизация.Ссылка;
		МетодОценкиСтоимостиТоваров.МетодОценки	= Перечисления.МетодыОценкиСтоимостиТоваров.СредняяЗаМесяц;
		
		НастройкиМетодовОценкиСтоимостиТоваров.Записать(Ложь);
		
		СозданаОсновнаяОрганизация = Истина;
		
		ОбновитьСписокЭлементовПункта("Организации");
		
	КонецЕсли;
	
	Если СозданаОсновнаяОрганизация И НЕ ПараметрыЗаполнения.БанковскиеСчетаУказаны Тогда
		
		СоздатьБанковскийСчетОрганизации(ОсновнаяОрганизация);
		
		ОбновитьСписокЭлементовПункта("БанковскиеСчета");
	
	КонецЕсли;
	
	Если СозданаОсновнаяОрганизация И НЕ ПараметрыЗаполнения.КассыУказаны Тогда
		
		СоздатьКассуОрганизации(ОсновнаяОрганизация);
		
		ОбновитьСписокЭлементовПункта("Кассы");
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДанныеСтраницы3(ПараметрыЗаполнения)
	
	Если НЕ ПараметрыЗаполнения.ПодразделенияУказаны Тогда
		СоздатьОсновноеПодразделение();
	
	КонецЕсли;
	
	ОбновитьСписокЭлементовПункта("Подразделения");
	
	Если НЕ ПараметрыЗаполнения.СкладыУказаны Тогда
		СоздатьОсновнойСклад();
		
	КонецЕсли;
	
	ОбновитьСписокЭлементовПункта("Склады");
	
КонецПроцедуры



