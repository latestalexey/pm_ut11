////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ОбъектПланирования = Параметры.ОбъектПланирования;
	Операция = Параметры.Операция;
	Стадия = Параметры.Стадия;
	ДатаНачалаДействия = Параметры.ДатаНачалаДействия;
	//
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПодборТоваровПоКатегориямНастройкиФормы",);
	Если СохраненныеНастройки = Неопределено Тогда
		ПоказыватьПодобранныеТовары = Истина;
	Иначе
		Если СохраненныеНастройки.Свойство("ПоказыватьПодобранныеТовары") Тогда
			ПоказыватьПодобранныеТовары = СохраненныеНастройки.ПоказыватьПодобранныеТовары;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.НачальнаяСтраница) Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПодборТоваров;
		Элементы.СтраницаВыборОперацииИОбъекта.Видимость = Ложь;
		Элементы.СтраницаПодборТоваров.Видимость = Истина;
		Элементы.СтраницаПредварительныйПросмотр.Видимость = Ложь;
	Иначе
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы[Параметры.НачальнаяСтраница];
		Для Каждого Страница ИЗ Элементы.СтраницыПомощника.ПодчиненныеЭлементы Цикл
			Если Страница.Имя = Параметры.НачальнаяСтраница Тогда
				Страница.Видимость = Истина;
			Иначе
				Страница.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НаДату", ДатаНачалаДействия, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОбъектПланирования", ОбъектПланирования, Истина);
	
	Если Параметры.ФормироватьДеревоПриОткрытии Тогда
		СформироватьДеревоКатегорийСервер();
	КонецЕсли;
	
	ЭтаФорма.Заголовок = НСтр("ru='Подбор по категориям'");
	Элементы.ФормаПеренестиВДокумент.Видимость = Истина;
	Элементы.ФормаПеренестиВДокумент.КнопкаПоУмолчанию = Истина;
	
	Элементы.ОбластьПодобранныеТовары.Видимость = ПоказыватьПодобранныеТовары;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьИнформационнуюНадписьКоличестваТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПеренестиВДокумент И Объект.ТаблицаВыбранныхТоваров.Количество() > 0 Тогда
		ТекстВопроса=НСтр("ru='Перенести выбранные позиции в документ?'");
		Ответ=Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ=КодВозвратаДиалога.Да Тогда
			ПеренестиВДокумент=Истина;
		ИначеЕсли Ответ=КодВозвратаДиалога.Отмена Тогда
			Отказ=Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ПоказыватьПодобранныеТовары",     ПоказыватьПодобранныеТовары);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ПодборТоваровПоКатегориямНастройкиФормы",,ПараметрыЗакрытия);
	
	Если ПеренестиВДокумент Тогда
		СтруктураАдресов = ПоместитьТоварыВХранилище();
		ОповеститьОВыборе(СтруктураАдресов);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СПИСОК

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаТаблицы = Элемент.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		//
		СтруктураПоиска = Новый Структура("Номенклатура", СтрокаТаблицы.Ссылка);
		УжеВыбрано = ТоварУжеВыбран(СтруктураПоиска);
		Если НЕ УжеВыбрано Тогда
				Если (Операция = ПредопределенноеЗначение("Перечисление.ОперацииИзмененияАссортимента.ВыводИзАссортимента")
					ИЛИ Операция = ПредопределенноеЗначение("Перечисление.ОперацииИзмененияАссортимента.ПереносВАрхивОтзыв")) Тогда
					
					Если (СтрокаТаблицы.СтадияАссортимента = Стадия ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтадияАссортимента)) Тогда
						ТекстВопроса = НСтр("ru = 'Данный товар уже выведен из ассортимента.
												  |Добавление его в документ не требуется.'");
						Ответ = РезультатВопросаОДобавленииТовара(ТекстВопроса);
						Если Ответ <> КодВозвратаДиалога.Да Тогда
							Возврат;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если СтрокаТаблицы.СтадияАссортимента = Стадия
						И Операция <> ПредопределенноеЗначение("Перечисление.ОперацииИзмененияАссортимента.ИзменениеСостоянияАссортимента") Тогда
						
						ТекстВопроса = НСтр("ru = 'Данный товар уже находится в стадии ""%1""
												  |Добавление его в документ не требуется.'");
						
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, СтрокаТаблицы.СтадияАссортимента);
						Ответ = РезультатВопросаОДобавленииТовара(ТекстВопроса);
						Если Ответ <> КодВозвратаДиалога.Да Тогда
							Возврат;
						КонецЕсли;
					КонецЕсли;
					МаркаОтбора=?(СтрокаТаблицы.Марка="Прочие марки",ПредопределенноеЗначение("Справочник.Марки.ПустаяСсылка"),СтрокаТаблицы.Марка);
					СтруктураКвоты = СтруктураКвотыПоКатегории(ОбъектПланирования,
																СтрокаТаблицы.ТоварнаяКатегория,
																МаркаОтбора,
																ДатаНачалаДействия);
					Если СтруктураКвоты.Квота=0 Тогда // и еще вопрос...
						ТекстВопроса = НСтр("ru = 'По товарной категории ""%1""%2 не установлена квота.
												  |Присутствие данного товара в ассортименте
												  |противоречит ассортиментной политике.'");
						СтрокаМарка="";
						Если ЗначениеЗаполнено(МаркаОтбора) Тогда
							СтрокаМарка = НСтр("ru = '
													 |и марке ""%1""'");
							СтрокаМарка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаМарка, МаркаОтбора);
						КонецЕсли;
						ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса,
																							   СтрокаТаблицы.ТоварнаяКатегория,
																							   СтрокаМарка
																							   );
						Ответ = РезультатВопросаОДобавленииТовара(ТекстВопроса);
						Если Ответ <> КодВозвратаДиалога.Да Тогда
							Возврат;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			НоваяСтрока = Объект.ТаблицаВыбранныхТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Номенклатура = СтрокаТаблицы.Ссылка;
			ОбновитьНаполнениеСУчетомПодбораВДереве(НоваяСтрока.ПолучитьИдентификатор(), 1);
			ЭтаФорма.Модифицированность = Истина;
			//
			ТаблицаВыбранныхТоваровПриИзменении();
			Если Не ПоказыватьПодобранныеТовары Тогда
				
				ТекстСобытия = НСтр("ru = 'Товар добавлен в таблицу подбора'");
				ТекстОповещения = НСтр("ru = 'Товар %%Товар%% добавлен в таблицу подбора'");
				ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Товар%%", Строка(СтрокаТаблицы.Ссылка));
				
				ПоказатьОповещениеПользователя(ТекстСобытия, ,ТекстОповещения);
				
			КонецЕсли;
		Иначе
			ТекстСобытия = НСтр("ru = 'Товар уже присутствует в таблице подбора'");
			ТекстОповещения = НСтр("ru = 'Товар %%Товар%% уже присутствует в таблице подбора'");
			ТекстОповещения = СтрЗаменить(ТекстОповещения, "%%Товар%%", Строка(СтрокаТаблицы.Ссылка));
			
			ПоказатьОповещениеПользователя(ТекстСобытия, ,ТекстОповещения);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ=Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДЕРЕВОКАТЕГОРИЙ

&НаКлиенте
Процедура ДеревоКатегорийПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("УстановитьОтборПоТекущейСтрокеДереваОбработчикОжидания", 0.2, Истина);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТАБЛИЦАВЫБРАННЫХТОВАРОВ

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровПередУдалением(Элемент, Отказ)
	
	ТекущаяУдаляемаяСтрока = Элементы.ТаблицаВыбранныхТоваров.ТекущиеДанные;
	Если ТекущаяУдаляемаяСтрока <> Неопределено Тогда
		ТекущаяСтрокаДерева = Элементы.ДеревоКатегорий.ТекущаяСтрока;
		ОбновитьНаполнениеСУчетомПодбораВДереве(ТекущаяУдаляемаяСтрока.ПолучитьИдентификатор(), -1);
		Элементы.ДеревоКатегорий.ТекущаяСтрока = ТекущаяСтрокаДерева;
		ОбновитьИнформационнуюНадписьКоличестваТоваров();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	ПеренестиВДокумент = Истина;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры


&НаКлиенте
Процедура ВыполнитьПоиск()
	
	Если НЕ ПодборТоваровКлиент.ВыполнениеПоискаТоваровВозможно(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискТоваровНаСервере();
	
	ПодборТоваровКлиент.ПослеВыполненияПоискаТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискТоваровНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискТоваров(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ТаблицаВыбранныхТоваровПриИзменении()
	
	ОбновитьИнформационнуюНадписьКоличестваТоваров();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТекущейСтрокеДереваОбработчикОжидания()
	ТекущаяСтрокаДерева=Элементы.ДеревоКатегорий.ТекущиеДанные;
	Список.Отбор.Элементы.Очистить();
	Если ТекущаяСтрокаДерева<>Неопределено Тогда
		Если ТипЗнч(ТекущаяСтрокаДерева.ВидКатегорияМарка)=Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
			Если ТекущаяСтрокаДерева.ЭтоГруппаВидов Тогда
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
					Список,
					"ОтборВидНоменклатуры",
					ТекущаяСтрокаДерева.ВидКатегорияМарка,
					Истина,
					ВидСравненияКомпоновкиДанных.ВИерархии);
			Иначе
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
					Список,
					"ОтборВидНоменклатуры",
					ТекущаяСтрокаДерева.ВидКатегорияМарка,
					Истина,
					ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущаяСтрокаДерева.ВидКатегорияМарка)=Тип("СправочникСсылка.ТоварныеКатегории") Тогда
			Если ТекущаяСтрокаДерева.ЭтоГруппаКатегорий Тогда
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
					Список,
					"ОтборТоварнаяКатегория",
					ТекущаяСтрокаДерева.ВидКатегорияМарка,
					Истина,
					ВидСравненияКомпоновкиДанных.ВИерархии);
			Иначе
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
					Список,
					"ОтборТоварнаяКатегория",
					ТекущаяСтрокаДерева.ВидКатегорияМарка,
					Истина,
					ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекущаяСтрокаДерева.ВидКатегорияМарка)=Тип("СправочникСсылка.Марки")
			ИЛИ ТипЗнч(ТекущаяСтрокаДерева.ВидКатегорияМарка)=Тип("Строка") Тогда
			РодительСтрокиДерева=ТекущаяСтрокаДерева.ПолучитьРодителя();
			Если РодительСтрокиДерева<>Неопределено Тогда
				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
					Список,
					"ОтборТоварнаяКатегория",
					РодительСтрокиДерева.ВидКатегорияМарка,
					Истина,
					ВидСравненияКомпоновкиДанных.Равно);
			КонецЕсли;
			ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
				Список,
				"ОтборМарка",
				ТекущаяСтрокаДерева.ВидКатегорияМарка,
				Истина,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ВыполнитьПоиск();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоКатегорийСервер()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Квоты.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	Квоты.Марка КАК Марка,
	|	Квоты.Квота КАК Квота,
	|	Квоты.ПроцентОтклонения КАК ПроцентОтклонения
	|ПОМЕСТИТЬ втПланКатегории
	|ИЗ
	|	РегистрСведений.КвотыАссортимента.СрезПоследних(&НаДату, ОбъектПланирования = &ОбъектПланирования) КАК Квоты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФорматыМагазинов КАК Форматы
	|		ПО Квоты.ОбъектПланирования = Форматы.Ссылка
	|			И (Квоты.Период В
	|				(ВЫБРАТЬ
	|					МАКСИМУМ(К.Период)
	|				ИЗ
	|					РегистрСведений.КвотыАссортимента КАК К
	|				ГДЕ
	|					К.Период <= &НаДату
	|					И К.ОбъектПланирования = &ОбъектПланирования))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникНоменклатура.Ссылка КАК Ссылка,
	|	СправочникНоменклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	ЕСТЬNULL(ПланКатегории.Марка, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)) КАК Марка,
	|	ЕСТЬNULL(ПланКатегории.Квота, 0) КАК Квота,
	|	Ассортимент.Номенклатура КАК НоменклатураНаполнения,
	|	ЕСТЬNULL(Ассортимент.РольАссортимента, ЗНАЧЕНИЕ(Перечисление.РолиАссортимента.ПустаяСсылка)) КАК РольАссортимента,
	|	ЕСТЬNULL(Ассортимент.РазрешеныЗакупки, ЛОЖЬ) КАК РазрешеныЗакупки,
	|	ЕСТЬNULL(Ассортимент.РазрешеныПродажи, ЛОЖЬ) КАК РазрешеныПродажи,
	|	Ассортимент.ВидЦены КАК ВидЦены
	|ПОМЕСТИТЬ втТекущийАссортимент
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
	|		ПО (Ассортимент.Номенклатура = СправочникНоменклатура.Ссылка)
	|			И (Ассортимент.ОбъектПланирования = &ОбъектПланирования)
	|			И (Ассортимент.РазрешеныЗакупки)
	|			И (Ассортимент.Регистратор В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Ассорти.Регистратор
	|				ИЗ
	|					РегистрСведений.Ассортимент КАК Ассорти
	|				ГДЕ
	|					Ассорти.Номенклатура = Ассортимент.Номенклатура
	|					И Ассорти.ОбъектПланирования = &ОбъектПланирования
	|					И Ассорти.Период <= &НаДату
	|				УПОРЯДОЧИТЬ ПО
	|					Ассорти.Период УБЫВ,
	|					Ассорти.ДатаРегистратора УБЫВ,
	|					Ассорти.Регистратор УБЫВ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПланКатегории КАК ПланКатегории
	|		ПО (ПланКатегории.ТоварнаяКатегория = СправочникНоменклатура.ТоварнаяКатегория)
	|			И (ПланКатегории.Марка = СправочникНоменклатура.Марка)
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущийАссортимент.ВидНоменклатуры,
	|	ТекущийАссортимент.ТоварнаяКатегория,
	|	ТекущийАссортимент.Марка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущийАссортимент.Ссылка) КАК ВсегоНоменклатурыВКатегории,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТекущийАссортимент.НоменклатураНаполнения) КАК НаполнениеКатегории
	|ПОМЕСТИТЬ втИтогиПоКатегориям
	|ИЗ
	|	втТекущийАссортимент КАК ТекущийАссортимент
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущийАссортимент.ВидНоменклатуры,
	|	ТекущийАссортимент.ТоварнаяКатегория,
	|	ТекущийАссортимент.Марка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тКатегории.ВидНоменклатуры КАК ВидНоменклатуры,
	|	тКатегории.ВидНоменклатуры.Наименование КАК НаименованиеВидаНоменклатуры,
	|	тКатегории.ВидНоменклатуры.ЭтоГруппа КАК ЭтоГруппаВидов,
	|	тКатегории.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	тКатегории.ТоварнаяКатегория.Наименование КАК НаименованиеКатегории,
	|	тКатегории.ТоварнаяКатегория.ЭтоГруппа КАК ЭтоГруппаКатегорий,
	|	тКатегории.Марка КАК Марка,
	|	тКатегории.НаименованиеМарки КАК НаименованиеМарки,
	|	тКатегории.Квота КАК Квота,
	|	тКатегории.ПроцентОтклонения КАК ПроцентОтклонения,
	|	ИтогиПоКатегориям.ВсегоНоменклатурыВКатегории КАК ВсегоНоменклатуры,
	|	ИтогиПоКатегориям.НаполнениеКатегории КАК Наполнение
	|ИЗ
	|	(ВЫБРАТЬ
	|		СправочникКатегории.Владелец КАК ВидНоменклатуры,
	|		СправочникКатегории.Ссылка КАК ТоварнаяКатегория,
	|		ЕСТЬNULL(ПланКатегории.Марка, ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка)) КАК Марка,
	|		ЕСТЬNULL(ПланКатегории.Марка.Наименование, ""Прочие марки"") КАК НаименованиеМарки,
	|		ЕСТЬNULL(ПланКатегории.Квота, 0) КАК Квота,
	|		ЕСТЬNULL(ПланКатегории.ПроцентОтклонения, 0) КАК ПроцентОтклонения
	|	ИЗ
	|		Справочник.ТоварныеКатегории КАК СправочникКатегории
	|			ЛЕВОЕ СОЕДИНЕНИЕ втПланКатегории КАК ПланКатегории
	|			ПО СправочникКатегории.Ссылка = ПланКатегории.ТоварнаяКатегория
	|	ГДЕ
	|		НЕ СправочникКатегории.ЭтоГруппа) КАК тКатегории
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоКатегориям КАК ИтогиПоКатегориям
	|		ПО тКатегории.ТоварнаяКатегория = ИтогиПоКатегориям.ТоварнаяКатегория
	|			И тКатегории.ВидНоменклатуры = ИтогиПоКатегориям.ВидНоменклатуры
	|			И тКатегории.Марка = ИтогиПоКатегориям.Марка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НаименованиеВидаНоменклатуры,
	|	НаименованиеКатегории,
	|	НаименованиеМарки
	|ИТОГИ
	|	МАКСИМУМ(НаименованиеМарки),
	|	СУММА(Квота),
	|	0 КАК ПроцентОтклонения,
	|	СУММА(ВсегоНоменклатуры),
	|	СУММА(Наполнение)
	|ПО
	|	ВидНоменклатуры ИЕРАРХИЯ,
	|	ТоварнаяКатегория ИЕРАРХИЯ");
	Запрос.УстановитьПараметр("ОбъектПланирования", ОбъектПланирования);
	Запрос.УстановитьПараметр("НаДату", ДатаНачалаДействия);
	//
	РезультатЗапроса=Запрос.Выполнить();
	ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПоРезультатуЗапроса(РезультатЗапроса)
	ДеревоОбъект=РеквизитФормыВЗначение("ДеревоКатегорий",Тип("ДеревоЗначений"));
	ДеревоОбъект.Строки.Очистить();
	//
	ДеревоРезультат=РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьПодчиненныеСтроки(ДеревоОбъект, ДеревоРезультат);
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоКатегорий");
	Элементы.ДеревоКатегорий.НачальноеОтображениеДерева=НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеСтроки(ПриемникРодитель, ИсточникРодитель)
	
	Для Каждого СтрокаИсточника ИЗ ИсточникРодитель.Строки Цикл
		СтрокаПриемника=ПриемникРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника,СтрокаИсточника);
		СтрокаПриемника.НаполнениеСУчетомПодбора = СтрокаИсточника.Наполнение;
		Если СтрокаИсточника.Марка <> Null Тогда
			Если ЗначениеЗаполнено(СтрокаИсточника.Марка) Тогда
				СтрокаПриемника.ВидКатегорияМарка=СтрокаИсточника.Марка;
			Иначе
				СтрокаПриемника.ВидКатегорияМарка=СтрокаИсточника.НаименованиеМарки;
			КонецЕсли;
			СтрокаПриемника.ЭтоИтог=Ложь;
			СтрокаПриемника.ИндексКартинки=2;
		ИначеЕсли СтрокаИсточника.ТоварнаяКатегория <> Null Тогда
			СтрокаПриемника.ВидКатегорияМарка=СтрокаИсточника.ТоварнаяКатегория;
			СтрокаПриемника.ЭтоИтог=Истина;
			Если СтрокаИсточника.ЭтоГруппаКатегорий Тогда
				СтрокаПриемника.ИндексКартинки=0;
			Иначе
				СтрокаПриемника.ИндексКартинки=1;
			КонецЕсли;
		Иначе
			СтрокаПриемника.ВидКатегорияМарка=СтрокаИсточника.ВидНоменклатуры;
			СтрокаПриемника.ЭтоИтог=Истина;
			СтрокаПриемника.ИндексКартинки=0;
		КонецЕсли;
		
		// И рекурсивно подчиненные
		ЗаполнитьПодчиненныеСтроки(СтрокаПриемника,СтрокаИсточника);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	ВременнаяТаблицаТовары = Объект.ТаблицаВыбранныхТоваров.Выгрузить();
	
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(ВременнаяТаблицаТовары, УникальныйИдентификатор);
	СтруктураАдресов = Новый Структура;
	СтруктураАдресов.Вставить("АдресТоваровВХранилище", АдресТоваровВХранилище);
	
	Возврат СтруктураАдресов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьИнформационнуюНадписьКоличестваТоваров()
	
	ПозицииПрописью = НРег(ЧислоПрописью(Объект.ТаблицаВыбранныхТоваров.Количество(), "Л = ru_RU; ДП = Ложь; НП = Истина; НД = Ложь;", НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано %Позиций% (" + ?(ПоказыватьПодобранныеТовары, "Скрыть", "Показать") + ")'");
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Позиций%", ПозицииПрописью);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаполнениеСУчетомПодбораВДереве(ИдентификаторСтрокиПодобранныхТоваров, Количество)
	СтрокаПодобранныхТоваров = Объект.ТаблицаВыбранныхТоваров.НайтиПоИдентификатору(ИдентификаторСтрокиПодобранныхТоваров);
	Если СтрокаПодобранныхТоваров <> Неопределено Тогда
		Обновлять = Ложь;
		Если (СтрокаПодобранныхТоваров.СтадияАссортимента <> Перечисления.СтадииАссортимента.РазрешеныЗакупкиИПродажи 
			И СтрокаПодобранныхТоваров.СтадияАссортимента <> Перечисления.СтадииАссортимента.РазрешеныТолькоЗакупки)
			И (Операция <> Перечисления.ОперацииИзмененияАссортимента.ВводВАссортиментСОтсрочкойНачалаПродаж
				И Операция <> Перечисления.ОперацииИзмененияАссортимента.ПереносВАрхивОтзыв) Тогда
			// если товар был запрещен к закупке - т.е. отсутствовал в ассортименте,
			// и операция не вывода из ассортимента
			// то в результате наполненность поменяется в большую сторону
			Обновлять = Истина;
		ИначеЕсли (СтрокаПодобранныхТоваров.СтадияАссортимента = Перечисления.СтадииАссортимента.РазрешеныЗакупкиИПродажи 
			ИЛИ СтрокаПодобранныхТоваров.СтадияАссортимента = Перечисления.СтадииАссортимента.РазрешеныТолькоЗакупки)
			И (Операция = Перечисления.ОперацииИзмененияАссортимента.ВыводИзАссортимента
				ИЛИ Операция = Перечисления.ОперацииИзмененияАссортимента.ПереносВАрхивОтзыв) Тогда
			// если товар был разрешен к закупке - т.е. присутствовал в ассортименте,
			// и операция вывода из ассортимента
			// то в результате наполненность поменяется в меньшую сторону => меняем знак
			Обновлять = Истина;
			Количество = - Количество;
		КонецЕсли;
		Если Обновлять Тогда
			СтрокаДерева = НайтиСтрокуВДеревеКоллекции(ДеревоКатегорий, СтрокаПодобранныхТоваров.ТоварнаяКатегория);
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.НаполнениеСУчетомПодбора = СтрокаДерева.НаполнениеСУчетомПодбора + Количество;
				СтрокаДереваСтроки = СтрокаДерева.ПолучитьЭлементы();
				Для Каждого ПодчиненнаяСтрока ИЗ СтрокаДереваСтроки  Цикл
					Если ПодчиненнаяСтрока.ВидКатегорияМарка = СтрокаПодобранныхТоваров.Марка
						ИЛИ (ПодчиненнаяСтрока.ВидКатегорияМарка = "Прочие марки" И НЕ ЗначениеЗаполнено(СтрокаПодобранныхТоваров.Марка)) Тогда
						ПодчиненнаяСтрока.НаполнениеСУчетомПодбора = ПодчиненнаяСтрока.НаполнениеСУчетомПодбора + Количество;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ОбновитьНаполнениеСУчетомПодбораРодителейСтроки(СтрокаДерева, Количество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаполнениеСУчетомПодбораРодителейСтроки(СтрокаДерева, Количество)
	ТекущаяСтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Если ТекущаяСтрокаРодитель <> Неопределено Тогда
		ТекущаяСтрокаРодитель.НаполнениеСУчетомПодбора = ТекущаяСтрокаРодитель.НаполнениеСУчетомПодбора + Количество;
		ОбновитьНаполнениеСУчетомПодбораРодителейСтроки(ТекущаяСтрокаРодитель, Количество);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуВДеревеКоллекции(ДеревоКолекция, ТоварнаяКатегория)
	НайденнаяСтрока = Неопределено;
	ЭлементыКоллекции = ДеревоКолекция.ПолучитьЭлементы();
	Для Каждого ЭлементКоллекции ИЗ ЭлементыКоллекции Цикл
		Если ЭлементКоллекции.ВидКатегорияМарка = ТоварнаяКатегория Тогда
			НайденнаяСтрока = ЭлементКоллекции;
			Прервать;
		Иначе
			ЭлементКоллекцииВПодчиненных = НайтиСтрокуВДеревеКоллекции(ЭлементКоллекции, ТоварнаяКатегория);
			Если ЭлементКоллекцииВПодчиненных <> Неопределено Тогда
				НайденнаяСтрока = ЭлементКоллекцииВПодчиненных;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат НайденнаяСтрока;
КонецФункции

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказыватьПодобранныеТовары = НЕ ПоказыватьПодобранныеТовары;
	Элементы.ОбластьПодобранныеТовары.Видимость = ПоказыватьПодобранныеТовары;
	ОбновитьИнформационнуюНадписьКоличестваТоваров();
	
КонецПроцедуры

&НаСервере
Функция СтруктураКвотыПоКатегории(ОбъектПланирования, ТоварнаяКатегория, МаркаОтбора, ДатаНачалаДействия)
	СтруктураКвоты = АссортиментСервер.СтруктураКвотыПоКатегории(ОбъектПланирования,
																ТоварнаяКатегория,
																МаркаОтбора,
																ДатаНачалаДействия);
	Возврат СтруктураКвоты;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ТекущаяСтрока = Элементы.Список.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОткрытьЗначение(ТекущаяСтрока.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция РезультатВопросаОДобавленииТовара(ТекстВопроса)
	
	СписокКнопок = Новый СписокЗначений;
	СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Добавить'"));
	СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не добавлять'"));
	Результат = Вопрос(ТекстВопроса, СписокКнопок);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТоварУжеВыбран(СтруктураПоиска)
	ЕстьРезультат = Ложь;
	МассивНайденных = Объект.ТаблицаВыбранныхТоваров.НайтиСтроки(СтруктураПоиска);
	Если МассивНайденных.Количество() > 0 Тогда
		ЕстьРезультат = Истина;
	КонецЕсли;
	Возврат ЕстьРезультат;
КонецФункции