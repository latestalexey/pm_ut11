&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	КодФормы = "Обработка_ПодборТоваровВДокументЗакупки_Форма";
	
	ПервоеОткрытиеФормы = ПодборТоваровСервер.ПервоеОткрытиеФормы(КодФормы);
	
	Если ПервоеОткрытиеФормы Тогда
		ПодборТоваровСервер.УстановитьПараметрыДереваОтбораКачествоНовый(ЭтаФорма);
	КонецЕсли;
	
	ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере(ЭтаФорма);
	
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Валюта                                        = Параметры.Валюта;
	Дата                                          = Параметры.Дата;
	Объект.Склад                                  = Параметры.Склад;
	Соглашение                                    = Параметры.Соглашение;
	Партнер                                       = Параметры.Партнер;
	Объект.Соглашение                             = Параметры.Соглашение;
	РегистрироватьЦеныПоУсловиям                  = Параметры.РегистрироватьЦеныПоУсловиям;
	РежимПодбораИспользоватьСкладыВТабличнойЧасти = Параметры.РежимПодбораИспользоватьСкладыВТабличнойЧасти;
	СкрыватьПодакцизныеТовары                     = Параметры.СкрыватьПодакцизныеТовары;
	ПоставщикПартнер                              = Параметры.Партнер;
	
	Элементы.ДекорацияПодакцизныйТовар.Видимость = Параметры.ОтображатьФлагСкрыватьПодакцизныеТовары;
	
	// Установить параметры динамических списков.
	МассивСкладов = Склады.ВыгрузитьЗначения();
	
	// ... список номенклатуры.
	ЗначениеОтбора = ?(ЗначениеЗаполнено(СегментНоменклатуры), СегментНоменклатуры, Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "УсловиеЦеныПоставщика", УсловиеЦеныПоставщика);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СегментНоменклатуры", ЗначениеОтбора, ЗначениеЗаполнено(СегментНоменклатуры));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Соглашение", Соглашение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Валюта", Валюта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Дата", Дата);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Склад", МассивСкладов);
	
	// ... список номенклатуры поставщика.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатураПоставщика, "УсловиеЦеныПоставщика", УсловиеЦеныПоставщика);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатураПоставщика, "Соглашение", Соглашение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатураПоставщика, "Валюта", Валюта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаНоменклатураПоставщика, "Дата", Дата);
	
	// ... список характеристик.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "УсловиеЦеныПоставщика", УсловиеЦеныПоставщика);
	ЗначениеОтбора = ?(ЗначениеЗаполнено(СегментНоменклатуры), СегментНоменклатуры, Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "СегментНоменклатуры", ЗначениеОтбора, ЗначениеЗаполнено(СегментНоменклатуры));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Соглашение", Соглашение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Валюта", Валюта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Дата", Дата);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Номенклатура",          Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ЕдиницаИзмерения",      Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ТипНоменклатуры",       Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВидНоменклатуры",       Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "СтавкаНДС",             Перечисления.СтавкиНДС.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Склад",                 МассивСкладов);
	
	// ... иерархия номенклатуры поставщика.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ИерархияНоменклатурыПоставщика.Отбор, "Владелец", ПоставщикПартнер);	
	
	Элементы.КорзинаСклад.Видимость = Склады.Количество() > 1 И РежимПодбораИспользоватьСкладыВТабличнойЧасти;
	
	Если Параметры.ПоказыватьПодобранныеТовары <> Неопределено Тогда
		ПоказыватьПодобранныеТовары = Параметры.ПоказыватьПодобранныеТовары;
	КонецЕсли;
	
	Если Параметры.РежимПодбораБезКоличественныхПараметров <> Неопределено Тогда
		РежимПодбораБезКоличественныхПараметров = Параметры.РежимПодбораБезКоличественныхПараметров;
	КонецЕсли;
	
	Если Параметры.РежимПодбораБезСуммовыхПараметров <> Неопределено Тогда
		РежимПодбораБезСуммовыхПараметров = Параметры.РежимПодбораБезСуммовыхПараметров;
	КонецЕсли;
	
	Если Параметры.СкрыватьРучныеСкидки <> Неопределено Тогда
		СкрыватьРучныеСкидки = Параметры.СкрыватьРучныеСкидки;
	КонецЕсли;
		
	Если НЕ РежимПодбораБезСуммовыхПараметров Тогда
		
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			ВызватьИсключение НСтр("ru = 'Параметр ""Валюта"" не заполнен.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.КорзинаЦена.Заголовок = НСтр("ru = 'Цена'") + " (" +Валюта + ")";
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"Номенклатура.ПодакцизныйТовар",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"ОтборПоУмолчанию",
		СкрыватьПодакцизныеТовары
	);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ПодборТаблицаНоменклатураПоставщика.Отбор,
		"Владелец",
		Параметры.Партнер,
		ВидСравненияКомпоновкиДанных.Равно,
		"ОтборПоУмолчанию",
		ЗначениеЗаполнено(Параметры.Партнер)
	);
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
		
		Команды["ПеренестиВДокумент"].Заголовок = Параметры.ЗаголовокКнопкиПеренести;
		Команды["ПеренестиВДокумент"].Подсказка = Параметры.ЗаголовокКнопкиПеренести;
		
	КонецЕсли;
	
	Если Параметры.РежимПодбораБезКоличественныхПараметров Тогда
		Элементы.КорзинаКоличественныеПараметры.Видимость = Ложь;
	КонецЕсли;
	
	СкрыватьКомандуОстаткиНаСкладах = Параметры.СкрыватьКомандуОстаткиНаСкладах;
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтображатьОстаткиНадпись", "Видимость", НЕ СкрыватьКомандуОстаткиНаСкладах И Склады.Количество() > 0);
	
	Если ПервоеОткрытиеФормы Тогда
		ОтображатьОстатки = Истина;
	КонецЕсли;
		
	// Свойства таблицы "Остатки товаров".
	Элементы.ОстаткиТоваров.Видимость = ОтображатьОстатки И НЕ (РежимПодбораБезКоличественныхПараметров ИЛИ СкрыватьКомандуОстаткиНаСкладах);
	
	// Свойства таблицы "Остатки товаров поставщика".
	Элементы.ОстаткиТоваровПоставщика.Видимость = ОтображатьОстатки И НЕ СкрыватьКомандуОстаткиНаСкладах;
	
	// Установить видимость элементов отображения остатков.
	Элементы.ПодборТаблицаНоменклатураВНаличииОстаток.Видимость = НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки;
	Элементы.ПодборТаблицаНоменклатураДоступно.Видимость = НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки;
	
	Элементы.ТолькоВНаличии.Видимость = НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки;
	Элементы.ТолькоВНаличии.Доступность = ЗначениеЗаполнено(Объект.Склад);
	
	Элементы.ПодборТаблицаХарактеристикиВНаличииОстаток.Видимость = НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки;
	Элементы.ПодборТаблицаХарактеристикиДоступно.Видимость = НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки;
	
	// Установить видимость элементов отображения цен.
	Элементы.КонтекстноеМенюПодборТаблицаНоменклатурыПоставщикаПерейтиКЦенамНоменклатуры.Видимость = НЕ Параметры.СкрыватьКомандуЦеныНоменклатуры И РегистрироватьЦеныПоУсловиям;	
	Элементы.КонтекстноеМенюПодборТаблицаНоменклатурыПерейтиКЦенамНоменклатуры.Видимость = НЕ Параметры.СкрыватьКомандуЦеныНоменклатуры И РегистрироватьЦеныПоУсловиям;
	Элементы.КонтекстноеМенюПодборТаблицаХарактеристикиЦеныНоменклатуры.Видимость = НЕ Параметры.СкрыватьКомандуЦеныНоменклатуры И РегистрироватьЦеныПоУсловиям;
	
	Элементы.Список.ПодчиненныеЭлементы.ПодборТаблицаНоменклатураЦена.Видимость = НЕ Параметры.СкрыватьКомандуЦеныНоменклатуры;
	Элементы.ПодборТаблицаХарактеристики.ПодчиненныеЭлементы.ПодборТаблицаХарактеристикиЦена.Видимость = НЕ Параметры.СкрыватьКомандуЦеныНоменклатуры;
	
	Элементы.УсловиеЦеныПоставщика.Видимость = Не Соглашение.Пустая();
	Элементы.УсловиеЦеныПоставщикаНоменклатура.Видимость = Не Соглашение.Пустая();

	Если Параметры.РежимПодбораБезСуммовыхПараметров Тогда
		
		Элементы.КорзинаСуммаРучнойСкидки.Видимость = Ложь;
		Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
		Элементы.КорзинаСумма.Видимость = Ложь;
		Элементы.КорзинаЦена.Видимость = Ложь;
		Элементы.ПодборТаблицаНоменклатураЦена.Видимость = Ложь;
		Элементы.ПодборТаблицаНоменклатураПоставщикаЦена.Видимость = Ложь;
		Элементы.ПодборТаблицаХарактеристикиЦена.Видимость = Ложь;
		Элементы.ГруппаФильтрПоЦене.Видимость = Ложь;
		Элементы.УсловиеЦеныПоставщикаНоменклатура.Видимость = Ложь;
		Элементы.УсловиеЦеныПоставщика.Видимость = Ложь;
		
	КонецЕсли;
	
	Если Параметры.СкрыватьРучныеСкидки Тогда
		Элементы.КорзинаСуммаРучнойСкидки.Видимость   = Ложь;
		Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
	КонецЕсли;
	
	// Установить свойства настройки "Запрашивать количество и цену".
	Если НЕ (Параметры.ЗапрашиватьКоличество = Неопределено) Тогда
		ЗапрашиватьКоличество = Параметры.ЗапрашиватьКоличество;
	КонецЕсли;
	
	Элементы.ЗапрашиватьКоличествоЦену.Видимость = НЕ Параметры.СкрыватьКнопкуЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка   = ЗапрашиватьКоличество;
	
	Элементы.ОбластьПодобранныеТовары.Видимость = ПоказыватьПодобранныеТовары;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков") 
		ИЛИ НЕ ЗначениеЗаполнено(Параметры.Партнер) Тогда
		
		Элементы.ПодборТаблицаНоменклатураПоставщика.Видимость = Ложь;
		Элементы.СтраницаНоменклатураПоставщика.Видимость = Ложь;
		Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
	КонецЕсли;
	
	ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");

	Если ИспользоватьРучныеСкидкиВПродажах Тогда
		ПодборТоваровСервер.УстановитьМаксимальныйПроцентРучнойСкидки(ЭтаФорма);
	КонецЕсли;
	
	ВидНоменклатурыДоИзменения = ВидНоменклатуры;
	
	ПодборТоваровКлиентСервер.УстановитьЗаголовокФормыПодбора(ЭтаФорма);
	
	ЗаполнитьСписокВыбораУсловияЦенПоставщиков();
	
	ЕстьПравоСозданияНоменклатуры   = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
	ЕстьПравоСозданияХарактеристики = ПравоДоступа("Добавление", Метаданные.Справочники.ХарактеристикиНоменклатуры);
	
	Элементы.СтраницаСоздатьНоменклатуру.Видимость = ЕстьПравоСозданияНоменклатуры;
	Элементы.СтраницаСоздатьХарактеристику.Видимость = ЕстьПравоСозданияХарактеристики;
	
	УстановитьСвойстваПанелиСозданияНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
	ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстатки(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПодборТоваровКлиент.ПередЗакрытиемФормыПодбораТоваров(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкиФормыНаСервере();
	
	АдресТоваровВХранилище = АдресТоваровВХранилище();
	
	Если ПеренестиВДокумент И АдресТоваровВХранилище <> Неопределено Тогда
		
		Структура = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
		ОповеститьОВыборе(Структура);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Номенклатура" Тогда
			
		Если ЗначениеЗаполнено(Источник) Тогда
			
			НоваяНоменклатураСсылка = Источник;
			Элементы.Список.ТекущаяСтрока = Источник;
			
			ЗаписьНового = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

	Если ИмяСобытия = "Закрытие_ПомощникНового_Номенклатура" И ЗаписьНового Тогда
		
		ЗаписьНового = Ложь;
				
			Если Параметр.ХарактеристикиИспользуются И Параметр.ПерейтиКСпискуХарактеристик Тогда
				ПерейтиКСпискуХарактеристикНаСервере();
			ИначеЕсли Не Параметр.ХарактеристикиИспользуются Тогда
				
				Параметр.Номенклатура = НоваяНоменклатураСсылка;
				
				Если Параметр.ЭтоТовар И Склады.Количество() = 1 И РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
					Параметр.Склад = Склады.Получить(0).Значение;
				КонецЕсли;
				
				ДобавитьВКорзину(Параметр);
				
			КонецЕсли;
		
	КонецЕсли;

	Если ИмяСобытия = "Запись_ХарактеристикиНоменклатуры" Тогда
		
		Если ЗначениеЗаполнено(Источник) Тогда
			
			Элементы.ПодборТаблицаХарактеристики.ТекущаяСтрока = Источник;
			
			ЗаписьНового = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПомощникНового_Характеристика" И ЗаписьНового Тогда
		
		ЗаписьНового = Ложь;
		
		//Добавление в корзину после создания характеристики.
		СтрокаТаблицыХарактеристик = Элементы.ПодборТаблицаХарактеристики.ТекущиеДанные;
		Если СтрокаТаблицыХарактеристик = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
		
		СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
		
		Если СтрокаТаблицыНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти И Склады.Количество() = 1 Тогда
			ПараметрыТовара.Склад = Склады.Получить(0).Значение;
		КонецЕсли;
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		ДобавитьВКорзину(ПараметрыТовара);	
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВариантНавигацииПриИзменении(Элемент)
	
	ВариантНавигацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНавигацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	ВидНоменклатурыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПриНажатииНаИнформационнуюНадпись(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОстаткиНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПриИзмененииОтображенияОстатковПоСкладамДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	
	ИспользоватьФильтрыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрНоменклатурыПоставщикаПриИзменении(Элемент)
	
	ИспользоватьФильтрНоменклатурыПоставщикаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаОтПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаДоПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаОтПоставщикаПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенПоставщикаНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаДоПоставщикаПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенПоставщикаНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура СегментПриИзменении(Элемент)
	
	СегментНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеЦеныПоставщикаПриИзменении(Элемент)
	
	УсловиеЦеныПоставщикаПриИзмененииНаСервере();
 
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	ТолькоВНаличииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПоставщикаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураИсходногоКачестваПриИзменении(Элемент)
	
	НоменклатураИсходногоКачестваПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ДЕРЕВО ОТБОРОВ

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПодборТоваровКлиент.ДеревоОтборовВыбор(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	ПодборТоваровКлиент.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ИЕРАРХИЯ НОМЕНКЛАТУРЫ

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ИерархияНоменклатурыПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ИЕРАРХИЯ НОМЕНКЛАТУРЫ ПОСТАВЩИКА

&НаКлиенте
Процедура ИерархияНоменклатурыПоставщикаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПоставщикаПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиИерархииНоменклатурыПоставщика(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПоставщикаПриАктивизацииСтрокиОбработчикОжидания()
	
	ИерархияНоменклатурыПоставщикаПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ОСТАТКИ ТОВАРОВ

&НаКлиенте
Процедура ОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыОстатков = ОстаткиТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТаблицыОстатков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаТаблицыОстатков.СкладДоступенДляВыбора Тогда
		Предупреждение(НСтр("ru = 'Данный склад не был выбран в редактируемом документе.'"));
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются 
		И НЕ НавигацияПоХарактеристикам Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Не выбрана характеристика. Перейти к выбору характеристик?'"), РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ПерейтиКСпискуХарактеристикНаСервере();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	Если НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Элементы.ПодборТаблицаХарактеристики.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
		ПараметрыТовара.Склад = СтрокаТаблицыОстатков.Склад;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскиванияОстатков(ЭтаФорма, Элемент, ПараметрыПеретаскивания);	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ОСТАТКИ ТОВАРОВ ПОСТАВЩИКА

&НаКлиенте
Процедура ОстаткиТоваровПоставщикаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицыНоменклатурыПоставщика = Элементы.ПодборТаблицаНоменклатураПоставщика.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатурыПоставщика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыОстатков = ОстаткиТоваровПоставщика.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТаблицыОстатков = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ СтрокаТаблицыОстатков.СкладДоступенДляВыбора Тогда
		
		Предупреждение(НСтр("ru = 'Данный склад не был выбран в редактируемом документе.'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатурыПоставщика);
	
	Если СтрокаТаблицыНоменклатурыПоставщика.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти И Склады.Количество() = 1 Тогда
		ПараметрыТовара.Склад = СтрокаТаблицыОстатков.Склад;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);
	
КонецПроцедуры


&НаКлиенте
Процедура ОстаткиТоваровПоставщикаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскиванияОстатков(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ПОДБОР ТАБЛИЦА НОМЕНКЛАТУРЫ ПОСТАВЩИКА

&НаКлиенте
Процедура ПодборТаблицаНоменклатурыПоставщикаПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиНоменклатурыПоставщика(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатурыПоставщикаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицыНоменклатурыПоставщика = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатурыПоставщика.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыНоменклатурыПоставщика.Номенклатура) Тогда
		
		ТекстОповещения = НСтр("ru='В номенклатуре поставщика %Номенклатура% не указана номенклатура.'");
		ТекстОповещения = СтрЗаменить(ТекстОповещения, "%Номенклатура%", СтрокаТаблицыНоменклатурыПоставщика.Ссылка);
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Невозможно подобрать номенклатуру'"),
			,
			ТекстОповещения,
			БиблиотекаКартинок.Информация32
		);
		
		ОткрытьЗначение(СтрокаТаблицыНоменклатурыПоставщика.Ссылка);
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатурыПоставщика);
	
	Если СтрокаТаблицыНоменклатурыПоставщика.ЭтоТовар И Склады.Количество() = 1 И РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
		ПараметрыТовара.Склад = Склады.Получить(0).Значение;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);

КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПоставщикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыПоставщика(Партнер, Элементы.Корзина.ТекущиеДанные, Элементы.НоменклатураПоставщика.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПоставщикаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
	  
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ПОДБОР ТАБЛИЦА ХАРАКТЕРИСТИКИ

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыХарактеристик(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку характеристик.
	Отказ = Неопределено;
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыХарактеристик(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыХарактеристик = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	
	СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти И Склады.Количество() = 1 Тогда
		ПараметрыТовара.Склад = Склады.Получить(0).Значение;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиНачалоПеретаскиванияМассив(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СПИСОК

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтаФорма);
	                                            
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку номенклатуры.
	Отказ = Неопределено;
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатуры = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются Тогда
		ПерейтиКСпискуХарактеристикНаСервере();
	Иначе
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
		
		Если СтрокаТаблицыНоменклатуры.ЭтоТовар И Склады.Количество() = 1 И РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
			ПараметрыТовара.Склад = Склады.Получить(0).Значение;
		КонецЕсли;
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		ДобавитьВКорзину(ПараметрыТовара);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);
	   
КонецПроцедуры
        
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ КОРЗИНА

&НаКлиенте
Процедура КорзинаПриИзменении()
	
	ПриИзмененииКорзиныНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	СтруктураЗаполненияЦены.Вставить("Партнер", Партнер);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	СтруктураЗаполненияЦены.Вставить("Партнер", Партнер);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьТекстИнформационнойНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата",       ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта",     Валюта);
	СтруктураЗаполненияЦены.Вставить("Партнер",    Партнер);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
	
	СтруктураДействий = Новый Структура;
	
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки",                          СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьТекстИнформационнойНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьТекстИнформационнойНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	Иначе
		
		СтруктураЗаполненияЦены = Новый Структура;
		
		СтруктураЗаполненияЦены.Вставить("Дата",       ТекущаяДата());
		СтруктураЗаполненияЦены.Вставить("Валюта",     Валюта);
		СтруктураЗаполненияЦены.Вставить("Партнер",    Партнер);
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьТекстИнформационнойНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаУсловиеЦеныПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата",       ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта",     Валюта);
	СтруктураЗаполненияЦены.Вставить("Партнер",    Партнер);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьТекстИнформационнойНадписи();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВЗакупках", Новый Структура("ИспользоватьРучныеСкидки"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьТекстИнформационнойНадписи();
	
КонецПроцедуры
                                         
&НаКлиенте                             
Процедура КорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретащитьВКорзинуНаСервере(ПараметрыПеретаскивания.Значение);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СПИСОК КАЧЕСТВА

&НаКлиенте
Процедура СписокКачестваПометкаПриИзменении(Элемент)
	
	СписокКачестваПометкаПриИзмененииНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьТекущийЭлементНавигация(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементНавигация(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСписокТоваров(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСписокТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементНоменклатураПоставщика(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементНоменклатураПоставщика(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементКорзина(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементКорзина(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСтрокаПоиска(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСтрокаПоиска(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = НЕ ЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ТекущееСообщениеПользователю = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатуры(Команда)
	
	ПерейтиКСпискуНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатуры(Команда)
	
	ПодборТоваровКлиент.ЦеныНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
		
	Отказ = Истина;
	
	СтруктураПараметров = Новый Структура("Родитель, ВидНоменклатуры, АдресТаблицыПараметров, АдресТаблицыСопостовления");
	
	Если ИспользоватьФильтры Тогда
		
		Если ВариантНавигации = "ПоСвойствам" Тогда
			
			Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
				
				СтруктураАдресовТаблиц = АдресТаблицПараметровДереваОтборовНаСервере();
				
				СтруктураПараметров.АдресТаблицыПараметров = СтруктураАдресовТаблиц.АдресТаблицыПараметров;
				СтруктураПараметров.АдресТаблицыСопостовления = СтруктураАдресовТаблиц.АдресТаблицыСопостовления;
				
				СтруктураПараметров.ВидНоменклатуры = ВидНоменклатуры;
				
			КонецЕсли;
			
		Иначе
			
			СтруктураПараметров.Родитель = ?(ТекущаяИерархияНоменклатуры = Неопределено, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
			ТекущаяИерархияНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	                
	ОткрытьФорму("Справочник.Номенклатура.Форма.ПомощникНового",  СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюХарактеристику(Команда)
	
	ПараметрыФормы = Новый Структура("Владелец, ВидНоменклатуры, АдресТаблицы");
	
	Если ИспользоватьФильтры
		И ЗначениеЗаполнено(ВидНоменклатуры)
		И ДеревоОтборов.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ПараметрыФормы.АдресТаблицы    = АдресТаблицыПараметровДереваОтборовНаСервере();
		ПараметрыФормы.ВидНоменклатуры = ТекущаяСтрокаНоменклатуры.ВидНоменклатуры;
		
	КонецЕсли;
	
	ПараметрыФормы.Владелец = ВладелецХарактеристик();
	
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ПомощникНового", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыДругогоКачества(Команда)
	
	ТоварыДругогоКачестваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборыПоСвойствам(Команда)
	
	СброситьОтборыПоСвойствамНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаКлиенте
Процедура ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания()
	
	ПолучитьИнформациюОТовареНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВКорзинуНаСервере(Форма, Объект, ПараметрыТовара, НовыеСтроки)
	
	ТекстОповещенияИтог = "";
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("Номенклатура",               ПараметрыТовара.Номенклатура);
		
		Если ЗначениеЗаполнено(ПараметрыТовара.НоменклатураПоставщика) Тогда
			Отбор.Вставить("НоменклатураПоставщика", ПараметрыТовара.НоменклатураПоставщика);
		КонецЕсли;
		
		Отбор.Вставить("Характеристика",             ПараметрыТовара.Характеристика);
		Отбор.Вставить("ХарактеристикиИспользуются", ПараметрыТовара.ХарактеристикиИспользуются);
		
		Отбор.Вставить("Упаковка",                   НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",                       НоваяСтрока.Цена);
		Отбор.Вставить("УсловиеЦеныПоставщика",      НоваяСтрока.УсловиеЦеныПоставщика);
		Отбор.Вставить("Склад",                      НоваяСтрока.Склад);
		Отбор.Вставить("ПроцентРучнойСкидки",        НоваяСтрока.ПроцентРучнойСкидки);
		
		СтрокаНайдена = Ложь;
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
		Иначе
			СтрокаНайдена = Истина;
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		
		СтруктураДействий = Новый Структура;
		
		Если НЕ СтрокаНайдена Тогда
			
			Если ПараметрыТовара.Свойство("НоменклатураПоставщика") Тогда
				Если НЕ ЗначениеЗаполнено(ПараметрыТовара.НоменклатураПоставщика) Тогда
					СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Форма.Партнер);
				КонецЕсли;
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Форма.Партнер);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		
		// Для передачи строки табличной части на сервер, поместим данные строки в структуру.
		ПараметрыСтроки = Новый Структура("ИсходныйНомерСтроки, Количество, КоличествоУпаковок, Номенклатура, НоменклатураПоставщика, НомерСтроки, Склад, Сумма, Упаковка, УсловиеЦеныПоставщика, Характеристика, ХарактеристикиИспользуются, Цена, ПроцентРучнойСкидки, СуммаРучнойСкидки");
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущаяСтрока);
		
		#Если НаКлиенте Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ПараметрыСтроки, СтруктураДействий, Неопределено);
		#Иначе
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ПараметрыСтроки, СтруктураДействий, Неопределено);
		#КонецЕсли
		
		Если НЕ Форма.ПоказыватьПодобранныеТовары Тогда
			
			ТекстОповещения = Символы.ПС + НСтр("ru = 'Товар ""[Товар]"" стоимостью [Цена] [Валюта] в количестве [КоличествоУпаковок] [ЕдиницаИзмерения] добавлен в корзину'");
			
			ВставляемыеЗначения = Новый Структура("Товар, Цена, Валюта, КоличествоУпаковок, ЕдиницаИзмерения");
			
			ВставляемыеЗначения.Товар              = Строка(ТекущаяСтрока.Номенклатура) + ?(ЗначениеЗаполнено(ПараметрыТовара.Характеристика)," ("+ПараметрыТовара.Характеристика+")","");
			ВставляемыеЗначения.Цена               = Формат(ТекущаяСтрока.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=");
			ВставляемыеЗначения.Валюта             = Форма.Валюта;
			ВставляемыеЗначения.ЕдиницаИзмерения   = ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка), НоваяСтрока.Упаковка, НСтр("ru = 'ед.'"));
			ВставляемыеЗначения.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок;
			
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОповещения, ВставляемыеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Перенесем обработанные на сервере данные в строку - элемент коллекции.
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыСтроки);
	
	Если НовыеСтроки.Количество() > 0 Тогда
		Форма.Элементы.Корзина.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ТекстОповещения;
	
КонецФункции

&НаСервере
Процедура ПеретащитьВКорзинуНаСервере(НовыеСтроки)
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Если НоваяСтрока.Упаковка.Пустая() Тогда 
			НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
		КонецЕсли;
	
		Отбор = Новый Структура;
		
		Отбор.Вставить("Номенклатура",               НоваяСтрока.Номенклатура);
		
		Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураПоставщика) Тогда
			Отбор.Вставить("НоменклатураПоставщика", НоваяСтрока.НоменклатураПоставщика);
		КонецЕсли;
		
		Отбор.Вставить("Характеристика",             НоваяСтрока.Характеристика);
		Отбор.Вставить("ХарактеристикиИспользуются", НоваяСтрока.ХарактеристикиИспользуются);
		
		Отбор.Вставить("Упаковка",                   НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",                       НоваяСтрока.Цена);
		Отбор.Вставить("УсловиеЦеныПоставщика",      НоваяСтрока.УсловиеЦеныПоставщика);
		Отбор.Вставить("Склад",                      НоваяСтрока.Склад);
		
		СтрокаНайдена = Ложь;
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
		Иначе
			СтрокаНайдена = Истина;
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		
		СтруктураДействий = Новый Структура;
		
		Если НЕ СтрокаНайдена Тогда
			
			Если НоваяСтрока.Свойство("НоменклатураПоставщика") Тогда
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураПоставщика) Тогда
					СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
				КонецЕсли;
			Иначе
				СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Партнер);
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		
		// Для передачи строки табличной части на сервер, поместим данные строки в структуру.
		ПараметрыСтроки = Новый Структура("ИсходныйНомерСтроки, Количество, КоличествоУпаковок, Номенклатура, НоменклатураПоставщика, НомерСтроки, Склад, Сумма, Упаковка, УсловиеЦеныПоставщика, Характеристика, ХарактеристикиИспользуются, Цена");
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущаяСтрока);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ПараметрыСтроки, СтруктураДействий, Неопределено);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыСтроки);
	КонецЦикла;
		
	ПриИзмененииКорзиныНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыТовара)
	
	НовыеСтроки = Новый Массив;
	
	Если ЗапрашиватьКоличество И НЕ РежимПодбораБезКоличественныхПараметров Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура, Характеристика, Упаковка, Цена,
		|Дата, Валюта, Склады, Склад, ЭтоУслуга, Соглашение, ИспользоватьСкладыВТабличнойЧасти,
		|СкрытьЦену, РедактироватьЦену, РегистрироватьЦеныПоУсловиям, МаксПроцентРучнойСкидки, СкрыватьРучныеСкидки");
		
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыТовара);
		
		ПараметрыФормы.Дата                              = Дата;
		ПараметрыФормы.Валюта                            = Валюта;
		ПараметрыФормы.Склады                            = Склады.ВыгрузитьЗначения();
		ПараметрыФормы.Соглашение                        = Соглашение;
		ПараметрыФормы.ИспользоватьСкладыВТабличнойЧасти = РежимПодбораИспользоватьСкладыВТабличнойЧасти;
		ПараметрыФормы.СкрытьЦену                        = РежимПодбораБезСуммовыхПараметров;
		ПараметрыФормы.РедактироватьЦену                 = Истина;
		ПараметрыФормы.РегистрироватьЦеныПоУсловиям      = РегистрироватьЦеныПоУсловиям;
		ПараметрыФормы.СкрыватьРучныеСкидки              = СкрыватьРучныеСкидки ИЛИ РежимПодбораБезСуммовыхПараметров;
		ПараметрыФормы.МаксПроцентРучнойСкидки           = МаксПроцентРучнойСкидки;
		ПараметрыФормы.Упаковка                          = ПараметрыТовара.Упаковка;
		
		ПодобранныеТовары = ОткрытьФормуМодально("Обработка.ПодборТоваровВДокументЗакупки.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		
		Если ПодобранныеТовары = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
			
			НоваяСтрока = ПодборТоваровКлиентСервер.ПараметрыТовара();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
			
			НовыеСтроки.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	Иначе
		
		НоваяСтрока = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
		
		Если НоваяСтрока.Упаковка.Пустая() Тогда 
			НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
		КонецЕсли;
		
		НовыеСтроки.Добавить(НоваяСтрока);
		
	КонецЕсли;
	
	ТекстОповещения = ДобавитьВКорзинуНаСервере(ЭтаФорма, Объект, ПараметрыТовара, НовыеСтроки);
	
	Если НЕ ПоказыватьПодобранныеТовары Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Товар добавлен в корзину'"), , ТекстОповещения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) И Элементы.СтраницыСписокНоменклатуры.ТекущаяСтраница = Элементы.ГруппаНоменклатура Тогда
		ТекущийЭлемент = Элементы.СтрокаПоиска;
	КонецЕсли;
		
	КорзинаПриИзменении();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция АдресТаблицПараметровДереваОтборовНаСервере()
	
	Структура = Новый Структура("АдресТаблицыПараметров, АдресТаблицыСопостовления");
	
	Структура.АдресТаблицыПараметров = ПодборТоваровСервер.АдресТаблицыПараметровДереваОтборов(ЭтаФорма);
	Структура.АдресТаблицыСопостовления = ПодборТоваровСервер.АдресТаблицыСопостовленияДереваОтборов(ЭтаФорма);

	Возврат Структура;
	
КонецФункции

&НаСервере
Функция АдресТаблицыПараметровДереваОтборовНаСервере()
	
	Возврат ПодборТоваровСервер.АдресТаблицыПараметровДереваОтборов(ЭтаФорма);
	
КонецФункции

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Товары = Объект.Корзина.Выгрузить();
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	НавигацияПоНоменклатуреПоставщика = (ТекущаяСтраница = Элементы.СтраницаНоменклатураПоставщика);
	СтраницыПриСменеСтраницыНаСервере();
	Если НавигацияПоНоменклатуреПоставщика Тогда
		ПодборТоваровКлиент.ПриАктивизацииСтрокиНоменклатурыПоставщика(ЭтаФорма);
	ИначеЕсли  НавигацияПоХарактеристикам Тогда	
	    ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыХарактеристик(ЭтаФорма);
	Иначе
		ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтаФорма);
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстИнформационнойНадписи()

	ПозицииПрописью = НРег(ЧислоПрописью(Объект.Корзина.Количество(), "Л = ru_RU; ДП = Ложь; НП = Истина; НД = Ложь;", НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
	
	Если РежимПодбораБезКоличественныхПараметров ИЛИ РежимПодбораБезСуммовыхПараметров Тогда
		
		ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано %Позиций% %СкрытьОтобразить%'");
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Позиций%", ПозицииПрописью);
		
	Иначе
		
		ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано %Позиций% на сумму %Сумма% %Валюта% %СкрытьОтобразить%'");
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Сумма%", Формат(Объект.Корзина.Итог("Сумма"), "ЧЦ=15; ЧДЦ=2; ЧН="));
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Валюта%", Валюта);
		ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись,"%Позиций%", ПозицииПрописью);
		
	КонецЕсли;
	
	ИнформационнаяНадпись = СтрЗаменить(ИнформационнаяНадпись, "%СкрытьОтобразить%", ?(ПоказыватьПодобранныеТовары, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'")));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ПодборТоваровКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	Если НЕ ПодборТоваровКлиент.ВыполнениеПоискаТоваровВозможно(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискТоваровНаСервере();
	
	ПодборТоваровКлиент.ПослеВыполненияПоискаТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискТоваровНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция АдресТоваровВХранилище()
	
	АдресВХранилище = Неопределено;
	
	Если ПеренестиВДокумент Тогда
		АдресВХранилище = ПоместитьТоварыВХранилище();
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий на сервере

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииИспользованияФильтров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьФильтрНоменклатурыПоставщикаПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииИспользованияФильтровНоменклатурыПоставщика(ЭтаФорма);
		
КонецПроцедуры

&НаСервере
Процедура ВариантНавигацииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВариантаНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВидаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДиапазонаЦенНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоДиапазонуЦен(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДиапазонаЦенПоставщикаНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоДиапазонуЦенПоставщика(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СегментНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииСегментаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УсловиеЦеныПоставщикаПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииУсловияЦеныПоставщика(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТолькоВНаличииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборТолькоВНаличии(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ДеревоОтборовОтборПриИзменении(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиНаСервере()
	
	ПодборТоваровСервер.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИерархияНоменклатурыПоставщикаПриАктивизацииСтрокиНаСервере()
	
	ПодборТоваровСервер.ПриАктивизацииСтрокиИерархииНоменклатурыПоставщика(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураИсходногоКачестваПриИзмененииНаСервере()
	
	ПодборТоваровСервер.НоменклатураИсходногоКачестваПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СписокКачестваПометкаПриИзмененииНаСервере()
	
	ПодборТоваровСервер.СписокКачестваПометкаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуНоменклатурыНаСервере()
	
	ПодборТоваровСервер.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	ПодборТоваровСервер.СохранитьНастройкиФормыПодбора(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуХарактеристикНаСервере()
	
	ПодборТоваровСервер.ПерейтиКСпискуХарактеристик(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюОТовареНаСервере()
	
	ПодборТоваровСервер.ПолучитьИнформациюОТовареПриЗакупке(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКорзиныНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииКорзины(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораУсловияЦенПоставщиков()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УсловияЦенПоставщиков.Ссылка КАК УсловияЦен
	|ИЗ
	|	Справочник.УсловияЦенПоставщиков КАК УсловияЦенПоставщиков
	|ГДЕ
	|	УсловияЦенПоставщиков.Владелец = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	УсловияЦен = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УсловияЦен");
	
	УсловияЦенпоставщиковСписокВыбора = Элементы.УсловиеЦеныПоставщика.СписокВыбора;
	УсловияЦенпоставщиковСписокВыбора.Очистить();
	УсловияЦенпоставщиковСписокВыбора.ЗагрузитьЗначения(УсловияЦен);
	УсловияЦенпоставщиковСписокВыбора.Добавить(Справочники.УсловияЦенПоставщиков.ПустаяСсылка(),НСтр("ru='<без условия>'"));
	
	УсловиеЦеныПоставщикаНоменклатураСписокВыбора = Элементы.УсловиеЦеныПоставщикаНоменклатура.СписокВыбора;
	УсловиеЦеныПоставщикаНоменклатураСписокВыбора.Очистить();
	УсловиеЦеныПоставщикаНоменклатураСписокВыбора.ЗагрузитьЗначения(УсловияЦен);
	УсловиеЦеныПоставщикаНоменклатураСписокВыбора.Добавить(Справочники.УсловияЦенПоставщиков.ПустаяСсылка(),НСтр("ru='<без условия>'"));
	
КонецПроцедуры

&НаСервере
Функция ВладелецХарактеристик()
	
	Возврат ПодборТоваровСервер.ВладелецХарактеристик(ТекущаяСтрокаНоменклатуры.Номенклатура);
	
КонецФункции

&НаСервере
Процедура ТоварыДругогоКачестваНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоНоменклатуреДругогоКачества(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СтраницыПриСменеСтраницыНаСервере()
	
	ПодборТоваровСервер.УстановитьСтраницуКнопокНавигации(ЭтаФорма);
	
	УстановитьСвойстваПанелиСозданияНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваПанелиСозданияНоменклатуры()
	
	Элементы.КоманднаяПанельСоздатьНоменклатуру.Доступность = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНоменклатура);
	
КонецПроцедуры
	
&НаСервере
Процедура СброситьОтборыПоСвойствамНаСервере()
	
	ПодборТоваровСервер.СброситьОтборыПоСвойствам(ЭтаФорма);
	
КонецПроцедуры


