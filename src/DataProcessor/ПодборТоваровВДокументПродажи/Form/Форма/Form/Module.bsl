&НаКлиенте
Перем КэшированныеЗначения; //текущая номенклатура для передачи в обработчики ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Документ = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма";
	
	ПервоеОткрытиеФормы = ПодборТоваровСервер.ПервоеОткрытиеФормы(КодФормы);
	
	Если ПервоеОткрытиеФормы Тогда
		ПодборТоваровСервер.УстановитьПараметрыДереваОтбораКачествоНовый(ЭтаФорма);
	КонецЕсли;
	
	ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере(ЭтаФорма);
	
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры       = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	
	Если Параметры.Свойство("СегментНоменклатуры") Тогда
		СегментНоменклатуры = Параметры.СегментНоменклатуры;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СегментНоменклатуры",
		"Доступность", ПравоДоступа("Просмотр",Метаданные.Справочники.СегментыНоменклатуры));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КорзинаНоменклатура",
		"ТолькоПросмотр", Параметры.СкрыватьВыборНоменклатуры);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация",
		"Видимость", Параметры.СкрыватьПодакцизныеТовары);
	
	Валюта = Параметры.Валюта;
	Дата = Параметры.Дата;
	Объект.Склад = Параметры.Склад;
	Соглашение = Параметры.Соглашение;
	Объект.ЦенаВключаетНДС = Параметры.ЦенаВключаетНДС;
	РежимПодбораИспользоватьСкладыВТабличнойЧасти = Параметры.РежимПодбораИспользоватьСкладыВТабличнойЧасти;
	СкрыватьПодакцизныеТовары = Параметры.СкрыватьПодакцизныеТовары;
	
	Если Параметры.ПоказыватьПодобранныеТовары <> Неопределено Тогда
		ПоказыватьПодобранныеТовары = Параметры.ПоказыватьПодобранныеТовары;
	КонецЕсли;
	
	Если Параметры.РежимПодбораБезКоличественныхПараметров <> Неопределено Тогда
		РежимПодбораБезКоличественныхПараметров = Параметры.РежимПодбораБезКоличественныхПараметров;
	КонецЕсли;
	
	Если Параметры.РежимПодбораБезСуммовыхПараметров <> Неопределено Тогда
		РежимПодбораБезСуммовыхПараметров = Параметры.РежимПодбораБезСуммовыхПараметров;
	КонецЕсли;
	
	Если Параметры.СкрыватьРучныеСкидки <> Неопределено Тогда
		СкрыватьРучныеСкидки = Параметры.СкрыватьРучныеСкидки;
	КонецЕсли;
	
	Если Параметры.ИспользоватьДатыОтгрузки <> Неопределено Тогда
		ИспользоватьДатыОтгрузки = Параметры.ИспользоватьДатыОтгрузки;
	КонецЕсли;
	
	Элементы.КорзинаДатаОтгрузки.Видимость = ИспользоватьДатыОтгрузки;
	
	Если НЕ РежимПодбораБезСуммовыхПараметров Тогда
		Если НЕ ЗначениеЗаполнено(Соглашение) Тогда
			ВызватьИсключение НСтр("ru = 'Параметр ""Соглашение с клиентом"" не заполнен.'");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Валюта) Тогда
			ВызватьИсключение НСтр("ru = 'Параметр ""Валюта"" не заполнен.'");
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоглашениеШапка.ВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ВидЦены
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеновыеГруппы.ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК ЦеновыеГруппы
	|ГДЕ
	|	ЦеновыеГруппы.Ссылка = &Соглашение");
	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	ВидыЦен.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦен"));
	
	//В том случае если форма открывается внешним пользователем, необходимо изменить текст запроса
	//для списка номенклатуры и списка характеристик.
	Если РольДоступна("ПартнерСамообслуживание") Тогда
		УстановитьТекстЗапросаСпискаНоменклатурыДляПартнера();
		УстановитьТекстЗапросаСпискаХарактеристикДляПартнера();
	КонецЕсли;
	
	// Установить параметры динамических списков.
	МассивСкладов  = Склады.ВыгрузитьЗначения();
	МассивВидовЦен = ВидыЦен.ВыгрузитьЗначения();
	
	// ... номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СегментНоменклатуры", СегментНоменклатуры, ЗначениеЗаполнено(СегментНоменклатуры));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Соглашение",          Соглашение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Валюта",              Валюта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Дата",                НачалоДня(ТекущаяДата()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВидыЦен",             МассивВидовЦен);
	
	// ... характеристик.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Номенклатура",          Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ЕдиницаИзмерения",      Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Соглашение",            Соглашение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Валюта",                Валюта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Дата",                  НачалоДня(ТекущаяДата()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВидыЦен",               МассивВидовЦен);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ТипНоменклатуры",       Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВидНоменклатуры",       Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ЦеноваяГруппа",         Справочники.ЦеновыеГруппы.ПустаяСсылка());
	
	Если НЕ РольДоступна("ПартнерСамообслуживание") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Склад", МассивСкладов);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Склад", МассивСкладов);
	КонецЕсли;
	
	Если СкрыватьПодакцизныеТовары Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор,
			"Номенклатура.ПодакцизныйТовар",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно, 
			"ОтборПоУмолчанию",
			СкрыватьПодакцизныеТовары);
	КонецЕсли;
	
	Если Параметры.РежимПодбораБезКоличественныхПараметров Тогда
		Элементы.КорзинаКоличественныеПараметры.Видимость = Ложь;
	КонецЕсли;
	
	СкрыватьКомандуОстаткиНаСкладах = Параметры.СкрыватьКомандуОстаткиНаСкладах;
	
	// Видимость настройки "Отображать остатки".
	КоличествоСкладов = Склады.Количество();
	ВидимостьОтображатьОстаткиПоСкладамДокумента = НЕ СкрыватьКомандуОстаткиНаСкладах И НЕ (КоличествоСкладов = 0);
	
	ОтображатьОстатки = ВидимостьОтображатьОстаткиПоСкладамДокумента;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтображатьОстаткиНадпись", "Видимость", ВидимостьОтображатьОстаткиПоСкладамДокумента);
	
	// Свойства таблицы "Остатки товаров".
	ВидимостьОстатковТоваров = ПервоеОткрытиеФормы ИЛИ ОтображатьОстатки;
	
	Если РежимПодбораБезКоличественныхПараметров ИЛИ НЕ СкрыватьКомандуОстаткиНаСкладах Тогда
		ВидимостьОстатковТоваров = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОстаткиТоваров", "Видимость", ВидимостьОстатковТоваров);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокВНаличииОстаток", "Видимость", НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СписокДоступно", "Видимость", НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодборТаблицаХарактеристикиВНаличииОстаток", "Видимость", НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ПодборТаблицаХарактеристикиДоступно", "Видимость", НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТолькоВНаличии", "Видимость", НЕ СкрыватьКомандуОстаткиНаСкладах ИЛИ ОтображатьОстатки);
	
	Если РольДоступна("ПартнерСамообслуживание") Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТолькоВНаличии", "Видимость", Ложь);
	КонецЕсли; 
	
	Если Параметры.РежимПодбораБезСуммовыхПараметров Тогда
		Элементы.КорзинаСуммаРучнойСкидки.Видимость = Ложь;
		Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
		Элементы.КорзинаСумма.Видимость = Ложь;
		Элементы.КорзинаЦена.Видимость = Ложь;
		Элементы.ПодборТаблицаНоменклатураЦена.Видимость = Ложь;
		Элементы.ПодборТаблицаХарактеристикиЦена.Видимость = Ложь;
		Элементы.ГруппаФильтрПоЦене.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.СкрыватьРучныеСкидки Тогда
		Элементы.КорзинаСуммаРучнойСкидки.Видимость = Ложь;
		Элементы.КорзинаПроцентРучнойСкидки.Видимость = Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиПеренести) Тогда
		Команды["ПеренестиВДокумент"].Заголовок = Параметры.ЗаголовокКнопкиПеренести;
		Команды["ПеренестиВДокумент"].Подсказка = Параметры.ЗаголовокКнопкиПеренести;
	КонецЕсли;
	
	// Свойства настройки "Запрашивать количество и цену".
	ЗаголовокКнопкиЗапрашиватьКоличествоИЦену = "Запрашивать количество и цену";
	Если ЗначениеЗаполнено(Параметры.ЗаголовокКнопкиЗапрашиватьКоличествоИЦену) Тогда
		ЗаголовокКнопкиЗапрашиватьКоличествоИЦену = Параметры.ЗаголовокКнопкиЗапрашиватьКоличествоИЦену;
	КонецЕсли;
	
	Если Параметры.ЗапрашиватьКоличество <> Неопределено Тогда
		ЗапрашиватьКоличество = Параметры.ЗапрашиватьКоличество;
	КонецЕсли;
	
	Элементы.ЗапрашиватьКоличествоЦену.Видимость = НЕ Параметры.СкрыватьКнопкуЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличествоЦену.Заголовок = ЗаголовокКнопкиЗапрашиватьКоличествоИЦену;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = ЗапрашиватьКоличество;
	
	Элементы.КонтекстноеМенюПодборТаблицаНоменклатураЦеныНоменклатуры.Видимость = НЕ Параметры.СкрыватьКомандуЦеныНоменклатуры;
	Элементы.КонтекстноеМенюПодборТаблицаХарактеристикиЦеныНоменклатуры.Видимость = НЕ Параметры.СкрыватьКомандуЦеныНоменклатуры;
	
	Элементы.КорзинаВидЦены.Видимость = НЕ Параметры.СкрыватьКолонкуВидЦены;
	Элементы.ОбластьПодобранныеТовары.Видимость = ПоказыватьПодобранныеТовары;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ТолькоВНаличии", "Доступность", ЗначениеЗаполнено(Объект.Склад));
	Элементы.КорзинаИндексСовместноПродаваемыеТовары.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
	
	ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	
	Если ИспользоватьРучныеСкидкиВПродажах Тогда
		ПодборТоваровСервер.УстановитьМаксимальныйПроцентРучнойСкидки(ЭтаФорма);
	КонецЕсли;

	ВидНоменклатурыДоИзменения = ВидНоменклатуры;
	
	ЕстьПравоСозданияНоменклатуры = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
	ЕстьПравоСозданияХарактеристики = ПравоДоступа("Добавление", Метаданные.Справочники.ХарактеристикиНоменклатуры);
	
	Элементы.СтраницаСоздатьНоменклатуру.Видимость = ЕстьПравоСозданияНоменклатуры;
	Элементы.СтраницаСоздатьХарактеристику.Видимость = ЕстьПравоСозданияХарактеристики;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
	ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстатки(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПодборТоваровКлиент.ПередЗакрытиемФормыПодбораТоваров(ЭтаФорма, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкиФормыНаСервере();
	АдресТоваровВХранилище = АдресТоваровВХранилище();
	
	Если ПеренестиВДокумент И АдресТоваровВХранилище <> Неопределено Тогда
		Структура = Новый Структура("АдресТоваровВХранилище", АдресТоваровВХранилище);
		ОповеститьОВыборе(Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Номенклатура" Тогда
		Если ЗначениеЗаполнено(Источник) Тогда
			НоваяНоменклатураСсылка = Источник;
			Элементы.Список.ТекущаяСтрока = Источник;
			
			ЗаписьНового = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПомощникНового_Номенклатура" И ЗаписьНового Тогда
		ЗаписьНового = Ложь;
		
		Если Параметр.ХарактеристикиИспользуются И Параметр.ПерейтиКСпискуХарактеристик Тогда
			ПерейтиКСпискуХарактеристикНаСервере();
		ИначеЕсли Не Параметр.ХарактеристикиИспользуются Тогда
			Параметр.Номенклатура = НоваяНоменклатураСсылка;
			
			Если Параметр.ЭтоТовар И Склады.Количество() = 1 И РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
				Параметр.Склад = Склады.Получить(0).Значение;
			КонецЕсли;
			
			ДобавитьВКорзину(Параметр);
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ХарактеристикиНоменклатуры" Тогда
		Если ЗначениеЗаполнено(Источник) Тогда
			Элементы.ПодборТаблицаХарактеристики.ТекущаяСтрока = Источник;
			ЗаписьНового = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПомощникНового_Характеристика" И ЗаписьНового Тогда
		ЗаписьНового = Ложь;
		
		СтрокаТаблицыХарактеристик = Элементы.ПодборТаблицаХарактеристики.ТекущиеДанные;
		Если СтрокаТаблицыХарактеристик = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
		
		Если СтрокаТаблицыНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти И Склады.Количество() = 1 Тогда
			ПараметрыТовара.Склад = Склады.Получить(0).Значение;
		КонецЕсли;
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		ДобавитьВКорзину(ПараметрыТовара);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВариантНавигацииПриИзменении(Элемент)
	
	ВариантНавигацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНавигацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	Если ВидНоменклатуры<>ВидНоменклатурыДоИзменения Тогда
		ВидНоменклатурыПриИзмененииНаСервере();
		ВидНоменклатурыДоИзменения = ВидНоменклатуры;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПриНажатииНаИнформационнуюНадпись(ЭтаФорма, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОстаткиНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПриИзмененииОтображенияОстатковПоСкладамДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаДоПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаОтПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СегментПриИзменении(Элемент)
	
	СегментНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	//АСТЕК
	ПерейтиКСпискуНоменклатурыНаСервере();
	//-
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	ТолькоВНаличииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	
	ИспользоватьФильтрыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураИсходногоКачестваПриИзменении(Элемент)
	
	НоменклатураИсходногоКачестваПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ КОРЗИНА

&НаКлиенте
Процедура КорзинаПриИзменении()
	
	ПриИзмененииКорзиныНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураЗаполненияЦены = Новый Структура;
	
	СтруктураЗаполненияЦены.Вставить("Дата",   ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка",     Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	Иначе
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	
	СтруктураЗаполненияЦены = Новый Структура;
		
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	Если ЗначениеЗаполнено(Соглашение) Тогда
		
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка", Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	Иначе
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
		
	ИначеЕсли ЗначениеЗаполнено(Соглашение) Тогда
		
		СтруктураЗаполненияЦены.Вставить("Соглашение", Соглашение);
		СтруктураЗаполненияЦены.Вставить("Ссылка", Неопределено);
		
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", СтруктураЗаполненияЦены);
		
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
		
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата", ТекущаяДата());
	СтруктураЗаполненияЦены.Вставить("Валюта", Валюта);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", СтруктураЗаполненияЦены);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаПриИзменении(Элемент)
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", Новый Структура("ИспользоватьРучныеСкидки"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(Элементы.Корзина.ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте                             
Процедура КорзинаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретащитьВКорзинуНаСервере(ПараметрыПеретаскивания.Значение);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ДЕРЕВО ОТБОРОВ

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПодборТоваровКлиент.ДеревоОтборовВыбор(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	ПодборТоваровКлиент.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ИЕРАРХИЯ НОМЕНКЛАТУРЫ

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ИерархияНоменклатурыПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ОСТАТКИ ТОВАРОВ

&НаКлиенте
Процедура ОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыОстатков = ОстаткиТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТаблицыОстатков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаТаблицыОстатков.СкладДоступенДляВыбора Тогда
		Предупреждение(НСтр("ru = 'Данный склад не был выбран в редактируемом документе.'"));
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются 
		И НЕ НавигацияПоХарактеристикам Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Не выбрана характеристика. Перейти к выбору характеристик?'"), РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ПерейтиКСпискуХарактеристикНаСервере();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	Если НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Элементы.ПодборТаблицаХарактеристики.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
	КонецЕсли; 
	
	Если СтрокаТаблицыНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
		ПараметрыТовара.Склад = СтрокаТаблицыОстатков.Склад;
	КонецЕсли;
	
	ПараметрыТовара.ДатаОтгрузки = СтрокаТаблицыОстатков.Период;
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиТоваровНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскиванияОстатков(ЭтаФорма, Элемент, ПараметрыПеретаскивания);	   

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ПОДБОР ТАБЛИЦА ХАРАКТЕРИСТИКИ

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыХарактеристик(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку характеристик.
	Отказ = Неопределено;
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыХарактеристик(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыХарактеристик = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	
	Если СтрокаТаблицыНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти И Склады.Количество() = 1 Тогда
		ПараметрыТовара.Склад = Склады.Получить(0).Значение;
	КонецЕсли;
	
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
		
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);	   

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СПИСОК

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку номенклатуры.
	Отказ = Неопределено;
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатуры = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются Тогда
		ПерейтиКСпискуХарактеристикНаСервере();
	Иначе
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
		
		Если СтрокаТаблицыНоменклатуры.ЭтоТовар И РежимПодбораИспользоватьСкладыВТабличнойЧасти И Склады.Количество() = 1 Тогда
			ПараметрыТовара.Склад = Склады.Получить(0).Значение;
		КонецЕсли;
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		ДобавитьВКорзину(ПараметрыТовара);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.Копирование;
	
	ПодборТоваровКлиент.ПолучитьДанныеПеретаскивания(ЭтаФорма, Элемент, ПараметрыПеретаскивания);   
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СПИСОК КАЧЕСТВА

&НаКлиенте
Процедура СписокКачестваПометкаПриИзменении(Элемент)
	
	СписокКачестваПометкаПриИзмененииНаСервере();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура УстановитьТекущийЭлементНавигация(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементНавигация(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСписокТоваров(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСписокТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементКорзина(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементКорзина(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСтрокаПоиска(Команда)
	
	ПодборТоваровКлиент.УстановитьТекущийЭлементСтрокаПоиска(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = НЕ ЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ТекущееСообщениеПользователю = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатуры(Команда)
	
	ПерейтиКСпискуНоменклатурыНаСервере();
			
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатуры(Команда)
	
	ПодборТоваровКлиент.ЦеныНоменклатуры(Этаформа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ПодборТоваровКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СПодобраннойНоменклатуройСовместноПродается(Команда)
	
	СПодобраннойНоменклатуройСовместноПродаетсяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСоСхожимиСвойствами(Команда)
	
	ТоварыСоСхожимиСвойствамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДругогоКачества(Команда)
	
	ТоварыДругогоКачестваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
		
	Отказ = Истина;
	
	СтруктураПараметров = Новый Структура("Родитель, ВидНоменклатуры, АдресТаблицыПараметров, АдресТаблицыСопостовления");
	
	Если ИспользоватьФильтры Тогда
		
		Если ВариантНавигации = "ПоСвойствам" Тогда
			
			Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
				
				СтруктураАдресовТаблиц = АдресТаблицПараметровДереваОтборовНаСервере();
				
				СтруктураПараметров.АдресТаблицыПараметров = СтруктураАдресовТаблиц.АдресТаблицыПараметров;
				СтруктураПараметров.АдресТаблицыСопостовления = СтруктураАдресовТаблиц.АдресТаблицыСопостовления;
				
				СтруктураПараметров.ВидНоменклатуры = ВидНоменклатуры;

			КонецЕсли;
			
		Иначе
			
			СтруктураПараметров.Родитель = ?(ТекущаяИерархияНоменклатуры = Неопределено, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
			ТекущаяИерархияНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ПомощникНового", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюХарактеристику(Команда)
	
	ПараметрыФормы = Новый Структура("Владелец, ВидНоменклатуры, АдресТаблицы");
	
	Если ИспользоватьФильтры
		И ЗначениеЗаполнено(ВидНоменклатуры)
		И ДеревоОтборов.ПолучитьЭлементы().Количество() > 0 Тогда
		                                  
		ПараметрыФормы.АдресТаблицы    = АдресТаблицыПараметровДереваОтборовНаСервере();
		ПараметрыФормы.ВидНоменклатуры = ТекущаяСтрокаНоменклатуры.ВидНоменклатуры;
		
	КонецЕсли;
	
	ПараметрыФормы.Владелец = ВладелецХарактеристик();
	
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ПомощникНового", ПараметрыФормы, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборыПоСвойствам(Команда)
	
	СброситьОтборыПоСвойствамНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий на сервере

&НаСервере
Процедура СегментНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииСегментаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураИсходногоКачестваПриИзмененииНаСервере()
	
	ПодборТоваровСервер.НоменклатураИсходногоКачестваПриИзменении(ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаКлиенте
Процедура ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания()
	
	ПолучитьИнформациюОТовареНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьВКорзинуНаСервере(Форма, Объект, ПараметрыТовара, НовыеСтроки)
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("Номенклатура",   ПараметрыТовара.Номенклатура);
		Отбор.Вставить("Характеристика", ПараметрыТовара.Характеристика);
		Отбор.Вставить("ХарактеристикиИспользуются", ПараметрыТовара.ХарактеристикиИспользуются);
		Отбор.Вставить("Упаковка",       НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",           НоваяСтрока.Цена);
		Отбор.Вставить("ВидЦены",        НоваяСтрока.ВидЦены);
		Отбор.Вставить("Склад",          НоваяСтрока.Склад);
		Отбор.Вставить("ПроцентРучнойСкидки",        НоваяСтрока.ПроцентРучнойСкидки);
		
		Если Форма.ИспользоватьДатыОтгрузки Тогда
			Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		КонецЕсли;
		
		Отбор.Вставить("СрокПоставки", ПараметрыТовара.СрокПоставки);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		//АСТЕК если не установлено плюсовать, то имитируем пустой поиск
		Если РезультатПоиска.Количество() = 0 ИЛИ (Не Форма.Плюсовать)Тогда
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
			СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
		Иначе
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		
		// Для передачи строки табличной части на сервер, поместим данные строки в структуру.
		ПараметрыСтроки = Новый Структура("Номенклатура, Характеристика, Упаковка, Цена, Количество, КоличествоУпаковок, Сумма, ВидЦены, Склад, ДатаОтгрузки, СрокПоставки, ИндексСовместноПродаваемыеТовары, ПроцентРучнойСкидки, СуммаРучнойСкидки");
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущаяСтрока);
		
		#Если НаКлиенте Тогда
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ПараметрыСтроки, СтруктураДействий, Неопределено);
		#Иначе
		ОбработкаТабличнойЧастиВызовСервера.ОбработатьСтрокуТЧ(ПараметрыСтроки, СтруктураДействий, Неопределено);
		#КонецЕсли
		
		Если НЕ Форма.ПоказыватьПодобранныеТовары Тогда
			
			ТекстОповещения = Символы.ПС + НСтр("ru = 'Товар ""[Товар]"" стоимостью [Цена] [Валюта] в количестве [КоличествоУпаковок] [ЕдиницаИзмерения] добавлен в корзину'");
			
			ВставляемыеЗначения = Новый Структура("Товар, Цена, Валюта, КоличествоУпаковок, ЕдиницаИзмерения");
			
			ВставляемыеЗначения.Товар              = Строка(ТекущаяСтрока.Номенклатура) + ?(ЗначениеЗаполнено(ПараметрыТовара.Характеристика)," ("+ПараметрыТовара.Характеристика+")","");
			ВставляемыеЗначения.Цена               = Формат(ТекущаяСтрока.Цена, "ЧЦ=15; ЧДЦ=2; ЧН=");
			ВставляемыеЗначения.Валюта             = Форма.Валюта;
			ВставляемыеЗначения.ЕдиницаИзмерения   = ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка), НоваяСтрока.Упаковка, НСтр("ru = 'ед.'"));
			ВставляемыеЗначения.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок;
			
			ТекстОповещения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОповещения, ВставляемыеЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Перенесем обработанные на сервере данные в строку - элемент коллекции.
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыСтроки);
	
	Если НовыеСтроки.Количество() > 0 Тогда
		Форма.Элементы.Корзина.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат ТекстОповещения;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(ПараметрыТовара)
	
	НовыеСтроки = Новый Массив;
	
	Если ЗапрашиватьКоличество И НЕ РежимПодбораБезКоличественныхПараметров Тогда
		
		ПараметрыФормы = Новый Структура("Номенклатура, Характеристика, ВидЦены, Упаковка, Цена, Склад,
		|ДатаОтгрузки, ЭтоУслуга, ЭтоТовар, Дата, Валюта, СкрытьЦену, РедактироватьЦену, РедактироватьВидЦены, 
		|Склады, ИспользоватьДатыОтгрузки, ИспользоватьСкладыВТабличнойЧасти, ЦенаВключаетНДС, МаксПроцентРучнойСкидки, СкрыватьРучныеСкидки");
		
		ЗаполнитьЗначенияСвойств(ПараметрыФормы, ПараметрыТовара);
		
		ПараметрыФормы.Дата = Дата;
		ПараметрыФормы.Валюта = Валюта;
		ПараметрыФормы.СкрытьЦену = РежимПодбораБезСуммовыхПараметров;
		ПараметрыФормы.РедактироватьЦену = Истина;
		ПараметрыФормы.РедактироватьВидЦены = Истина;
		ПараметрыФормы.Склады = Склады.ВыгрузитьЗначения();
		ПараметрыФормы.ИспользоватьДатыОтгрузки = ИспользоватьДатыОтгрузки;
		ПараметрыФормы.ИспользоватьСкладыВТабличнойЧасти = РежимПодбораИспользоватьСкладыВТабличнойЧасти;
		ПараметрыФормы.ЦенаВключаетНДС = Объект.ЦенаВключаетНДС;
		ПараметрыФормы.СкрыватьРучныеСкидки = СкрыватьРучныеСкидки ИЛИ РежимПодбораБезСуммовыхПараметров;
		ПараметрыФормы.МаксПроцентРучнойСкидки = МаксПроцентРучнойСкидки;
		ПараметрыФормы.Упаковка = ПараметрыТовара.Упаковка;

		ПодобранныеТовары = ОткрытьФормуМодально("Обработка.ПодборТоваровВДокументПродажи.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		
		Если ПодобранныеТовары = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ПодобранныйТовар Из ПодобранныеТовары Цикл
			
			НоваяСтрока = ПодборТоваровКлиентСервер.ПараметрыТовара();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыТовара);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодобранныйТовар);
			
			НовыеСтроки.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	Иначе
		
		Если ПараметрыТовара.Упаковка.Пустая() Тогда 
			ПараметрыТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(ПараметрыТовара.Номенклатура);
		КонецЕсли;
		
		НовыеСтроки.Добавить(ПараметрыТовара);
		
	КонецЕсли;
	
	ТекстОповещения = ДобавитьВКорзинуНаСервере(ЭтаФорма, Объект, ПараметрыТовара, НовыеСтроки);
	
	Если НЕ ПоказыватьПодобранныеТовары Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Товар добавлен в корзину'"), , ТекстОповещения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) И Элементы.СтраницыСписокНоменклатуры.ТекущаяСтраница = Элементы.ГруппаНоменклатура Тогда
		ТекущийЭлемент = Элементы.СтрокаПоиска;
	КонецЕсли;
	
	КорзинаПриИзменении();
	
КонецПроцедуры

&НаСервере
Процедура ПеретащитьВКорзинуНаСервере(НовыеСтроки)
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Если НоваяСтрока.Упаковка.Пустая() Тогда 
			НоваяСтрока.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(НоваяСтрока.Номенклатура);
		КонецЕсли;
		
		Отбор = Новый Структура;
		
		Отбор.Вставить("Номенклатура",   НоваяСтрока.Номенклатура);
		Отбор.Вставить("Характеристика", НоваяСтрока.Характеристика);
		Отбор.Вставить("ХарактеристикиИспользуются", НоваяСтрока.ХарактеристикиИспользуются);
		Отбор.Вставить("Упаковка",       НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена",           НоваяСтрока.Цена);
		Отбор.Вставить("ВидЦены",        НоваяСтрока.ВидЦены);
		Отбор.Вставить("Склад",          НоваяСтрока.Склад);
		Отбор.Вставить("ПроцентРучнойСкидки",        НоваяСтрока.ПроцентРучнойСкидки);
		
		Если ИспользоватьДатыОтгрузки Тогда
			Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		КонецЕсли;
		
		Отбор.Вставить("СрокПоставки", НоваяСтрока.СрокПоставки);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		
		РезультатПоиска = Объект.Корзина.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			ТекущаяСтрока = Объект.Корзина.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
			СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
		Иначе
			ТекущаяСтрока = РезультатПоиска[0];
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		
		// Для передачи строки табличной части на сервер, поместим данные строки в структуру.
		ПараметрыСтроки = Новый Структура("Номенклатура, Характеристика, Упаковка, Цена, Количество, КоличествоУпаковок, Сумма, ВидЦены, Склад, ДатаОтгрузки, СрокПоставки, ИндексСовместноПродаваемыеТовары, ПроцентРучнойСкидки, СуммаРучнойСкидки");
		ЗаполнитьЗначенияСвойств(ПараметрыСтроки, ТекущаяСтрока);
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ПараметрыСтроки, СтруктураДействий, Неопределено);
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ПараметрыСтроки);
	КонецЦикла;
		
	ПриИзмененииКорзиныНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	Если НЕ ПодборТоваровКлиент.ВыполнениеПоискаТоваровВозможно(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискТоваровНаСервере();
	ПодборТоваровКлиент.ПослеВыполненияПоискаТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискТоваровНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискТоваров(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция ПоместитьТоварыВХранилище()
	
	Товары = Объект.Корзина.Выгрузить();
	АдресТоваровВХранилище = ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
	Возврат АдресТоваровВХранилище;
	
КонецФункции

&НаСервере
Процедура УстановитьТекстЗапросаСпискаНоменклатурыДляПартнера()
	
	// Из текста запроса исключается таблица "ВсеОстатки".
	
	Список.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Артикул,
	|	СправочникНоменклатура.Наименование КАК Наименование,
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	СправочникНоменклатура.Ссылка КАК ЭлементСписка,
	|	СправочникНоменклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
	|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
	|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|				ТОГДА СоглашениеТовары.Цена
	|			КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|							ТОГДА СоглашениеТовары.ВидЦены
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеШапка.ВидЦен
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
	|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ЕСТЬNULL(ЦеныНоменклатурыХарактеристик.Цена, 0) КАК МаксимальнаяЦенаХарактеристики,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ЭтоГруппа
	|			ТОГДА ВЫБОР
	|					КОГДА СправочникНоменклатура.ПометкаУдаления
	|						ТОГДА 13
	|					ИНАЧЕ 12
	|				КОНЕЦ
	|		ИНАЧЕ -1 + ВЫБОР
	|				КОГДА СправочникНоменклатура.ПометкаУдаления
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|					ТОГДА 1
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	СправочникНоменклатура.Ссылка,
	|	СправочникНоменклатура.ПометкаУдаления,
	|	СправочникНоменклатура.Родитель,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ХарактеристикиИспользуются,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоТовар,
	|	ВЫБОР
	|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслуга
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И СправочникНоменклатура.Ссылка = СоглашениеТовары.Номенклатура
	|			И (СоглашениеТовары.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|			И СправочникНоменклатура.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
	|		{ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|			МАКСИМУМ(ЦеныНоменклатуры.ВидЦены) КАК ВидЦены,
	|			МАКСИМУМ(ЦеныНоменклатуры.Цена) КАК Цена
	|		ИЗ
	|			РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатуры
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ЦеныНоменклатуры.Номенклатура) КАК ЦеныНоменклатурыХарактеристик
	|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатурыХарактеристик.Номенклатура
	|			И (ЦеныНоменклатурыХарактеристик.ВидЦены = ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|					ТОГДА СоглашениеТовары.ВидЦены
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеШапка.ВидЦен
	|			КОНЕЦ)}
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				ВидЦены В (&ВидыЦен)
	|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка)
	|			И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|					ТОГДА СоглашениеТовары.ВидЦены
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеШапка.ВидЦен
	|			КОНЕЦ)}
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ СправочникНоменклатура.ЭтоГруппа
	|{ГДЕ
	|	(1 В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				1
	|			ИЗ
	|				РегистрСведений.НоменклатураСегмента КАК Сегменты
	|			ГДЕ
	|				Сегменты.Номенклатура = СправочникНоменклатура.Ссылка
	|				И Сегменты.Сегмент = &СегментНоменклатуры))}";
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаСпискаХарактеристикДляПартнера()
	
	// Из текста запроса исключается таблица "ВсеОстатки".
	
	ПодборТаблицаХарактеристики.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ХарактеристикиНоменклатуры.ПометкаУдаления
	|			ТОГДА 1
	|			ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	&Номенклатура КАК Номенклатура,
	|	&ТипНоменклатуры КАК ТипНоменклатуры,
	|	&ВидНоменклатуры КАК ВидНоменклатуры,
	|	&ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|				ТОГДА СоглашениеТовары.Цена
	|			КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|							ТОГДА СоглашениеТовары.ВидЦены
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеШапка.ВидЦен
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
	|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ХарактеристикиНоменклатуры.Ссылка,
	|	ХарактеристикиНоменклатуры.ПометкаУдаления
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ПО (СоглашениеШапка.Ссылка = &Соглашение)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И (&Номенклатура = СоглашениеТовары.Номенклатура)
	|			И (СоглашениеТовары.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка)
	|			И (&ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа)
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&Дата,
	|				ВидЦены В (&ВидыЦен)
	|					И Номенклатура = &Номенклатура) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
	|			И (ЦеныНоменклатуры.ВидЦены = ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|					ТОГДА СоглашениеТовары.ВидЦены
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеШапка.ВидЦен
	|			КОНЕЦ)}
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК Сегменты
	|		ПО (Сегменты.Номенклатура = &Номенклатура)
	|			И (Сегменты.Характеристика = ХарактеристикиНоменклатуры.Ссылка)}
	|ГДЕ
	|	ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристик
	|{ГДЕ
	|	(Сегменты.Сегмент = &СегментНоменклатуры)}";
	
КонецПроцедуры

&НаСервере
Функция АдресТоваровВХранилище()
	
	АдресВХранилище = Неопределено;
	
	Если ПеренестиВДокумент Тогда
		АдресВХранилище = ПоместитьТоварыВХранилище();
	КонецЕсли;
	
	Возврат АдресВХранилище;
	
КонецФункции

&НаСервере
Функция АдресТаблицПараметровДереваОтборовНаСервере()
	
	Структура = Новый Структура("АдресТаблицыПараметров, АдресТаблицыСопостовления");
	
	Структура.АдресТаблицыПараметров = ПодборТоваровСервер.АдресТаблицыПараметровДереваОтборов(ЭтаФорма);
	Структура.АдресТаблицыСопостовления = ПодборТоваровСервер.АдресТаблицыСопостовленияДереваОтборов(ЭтаФорма);

	Возврат Структура;
	
КонецФункции

&НаСервере
Функция АдресТаблицыПараметровДереваОтборовНаСервере()
	
	АдресТаблицы = ПодборТоваровСервер.АдресТаблицыПараметровДереваОтборов(ЭтаФорма);
	
	Возврат АдресТаблицы;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий на сервере

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	ПодборТоваровСервер.СохранитьНастройкиФормыПодбора(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуХарактеристикНаСервере()
	
	ПодборТоваровСервер.ПерейтиКСпискуХарактеристик(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуНоменклатурыНаСервере()
	
	ПодборТоваровСервер.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТолькоВНаличииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборТолькоВНаличии(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииИспользованияФильтров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДиапазонаЦенНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоДиапазонуЦен(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВидаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВариантНавигацииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВариантаНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СписокКачестваПометкаПриИзмененииНаСервере()
	
	ПодборТоваровСервер.СписокКачестваПометкаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСоСхожимиСвойствамиНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииОтображенияТоваровСоСхожимиСвойствами(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СПодобраннойНоменклатуройСовместноПродаетсяНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоНоменклатуреПродаваемойСовместно(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнформациюОТовареНаСервере()
	
	ПодборТоваровСервер.ПолучитьИнформациюОТовареПриПродаже(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиНаСервере()
	
	ПодборТоваровСервер.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКорзиныНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииКорзины(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;	
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСумму");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КорзинаСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Корзина.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("ПересчитыватьСуммуРучнойСкидки", Ложь));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(ЭтаФорма);
	
	
КонецПроцедуры

&НаСервере
Процедура ТоварыДругогоКачестваНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоНоменклатуреДругогоКачества(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ВладелецХарактеристик()
	
	Возврат	ПодборТоваровСервер.ВладелецХарактеристик(ТекущаяСтрокаНоменклатуры.Номенклатура);		
	
КонецФункции

&НаСервере
Процедура СброситьОтборыПоСвойствамНаСервере()
	
	ПодборТоваровСервер.СброситьОтборыПоСвойствам(ЭтаФорма);
	
КонецПроцедуры

            



