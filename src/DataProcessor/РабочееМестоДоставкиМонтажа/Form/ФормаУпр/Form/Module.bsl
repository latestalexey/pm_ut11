// ПРОЦЕДУРЫ ОБАРБОТКИ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	КалендарьНаФорме = ТекущаяДата();
	ПутьКФайлу  = КаталогВременныхФайлов();
	ПолеХТМЛ = ПутьКФайлу + "index.html";
	ПодключитьОбработчикОжидания("ОжиданиеИзменения",1);
КонецПроцедуры


// ПРОЦЕДУРЫ ДЛЯ ОБРАБОТКИ ЗАДАЧ


&НаСервере
Процедура ИзменитьВремяЗадачи()
	ОбъектДокумент = ТекущаяЗадача.ПолучитьОбъект();
	Если ОбъектДокумент.Метаданные().Реквизиты.Найти("АК_ДатаВремяИсполненияУслуги") <> Неопределено тогда
		ОбъектДокумент.АК_ДатаВремяИсполненияУслуги = НоваяДатаНачала;
	КонецЕсли;
	ОбъектДокумент.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

&НаСервере
Функция ПолучитьУИДпоНавигационнойСсылке(стрНавигационнаяССылка) Экспорт
	Если Документы.ЗаказПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(стрНавигационнаяССылка)).ПолучитьОбъект() <> Неопределено тогда
		ТекущаяЗадача = Документы.ЗаказПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(стрНавигационнаяССылка));
	КонецЕсли;
КонецФункции


// ОБРАБОТЧИКИ ОЖИДАНИЯ


&НаКлиенте
Процедура ОжиданиеИзменения()
	Если Элементы.ПолеХТМЛ.Документ.ActiveElement.OffSetParent<>Неопределено тогда
		Если Элементы.ПолеХТМЛ.Документ.ActiveElement.OffSetParent.ID <> "" тогда
			ИД =Элементы.ПолеХТМЛ.Документ.ActiveElement.OffSetParent.ID;
			Элемент = Элементы.ПолеХТМЛ.Документ.getElementById(ИД);
			Если СтрокаСостояния <> Элемент.Style.CSSText тогда
				СтрокаСостояния = Элемент.Style.CSSText;
				МассивЭлементов = ИзСтрокиСРазделителями(СтрокаСостояния,";",ложь);
				
				лШирина = МассивЭлементов[0];
				лШирина = СтрЗаменить(лШирина,"WIDTH:"," ");
				лШирина = СтрЗаменить(лШирина,"px"," ");
				лШирина = СокрЛП(лШирина);
				лШирина = Число(лШирина);

				
				лВысота = МассивЭлементов[1];
				лВысота = СтрЗаменить(лВысота,"HEIGHT:"," ");
				лВысота = СтрЗаменить(лВысота,"px"," ");
				лВысота = СокрЛП(лВысота);
				лВысота = Число(лВысота);
				
				лВерх = МассивЭлементов[2];
				лВерх = СтрЗаменить(лВерх,"TOP:"," ");
				лВерх = СтрЗаменить(лВерх,"px"," ");
				лВерх = СокрЛП(лВерх);
				лВерх = Число(лВерх);
				
				лЛево = МассивЭлементов[3];
				лЛево = СтрЗаменить(лЛево,"LEFT:"," ");
				лЛево = СтрЗаменить(лЛево,"px"," ");
				лЛево = СокрЛП(лЛево);
				лЛево = Число(лЛево);
				
				Строка = "";
				Если лЛево>90 и лЛево < 260 тогда
					Строка = "Понедельник";
					ПолучитьУИДпоНавигационнойСсылке(ИД);
					НоваяДатаНачала = НачалоНедели(КалендарьНаФорме) +32400 + (лВерх-20)*45;
					НоваяДатаОкончания = НачалоНедели(КалендарьНаФорме)+32400 + (лВерх + лВысота -20)*45;
					Если ЗначениеЗаполнено(ТекущаяЗадача) тогда
						ИзменитьВремяЗадачи();
					КонецЕсли;
				КонецЕсли;
				
				Если лЛево>240 и лЛево < 410 тогда
					Строка = "Вторник";	
					ПолучитьУИДпоНавигационнойСсылке(ИД);
					НоваяДатаНачала = НачалоНедели(КалендарьНаФорме)+32400  + (лВерх-20)*45 + 86400*1;
					НоваяДатаОкончания = НачалоНедели(КалендарьНаФорме)+32400 + (лВерх + лВысота-20)*45+86400*1;
					Если ЗначениеЗаполнено(ТекущаяЗадача) тогда
						ИзменитьВремяЗадачи();
					КонецЕсли;
				КонецЕсли;
				
				Если лЛево>390 и лЛево < 560 тогда
					Строка = "Среда";	
					ПолучитьУИДпоНавигационнойСсылке(ИД);
					НоваяДатаНачала = НачалоНедели(КалендарьНаФорме)+32400  + (лВерх-20)*45 + 86400*2;
					НоваяДатаОкончания = НачалоНедели(КалендарьНаФорме)+32400 + (лВерх + лВысота-20)*45+86400*2;
					Если ЗначениеЗаполнено(ТекущаяЗадача) тогда
						ИзменитьВремяЗадачи();
					КонецЕсли;
				КонецЕсли;
				
				Если лЛево>540 и лЛево < 710 тогда
					Строка = "Четверг";	
					ПолучитьУИДпоНавигационнойСсылке(ИД);
					НоваяДатаНачала = НачалоНедели(КалендарьНаФорме) +32400 + (лВерх-20)*45 + 86400*3;
					НоваяДатаОкончания = НачалоНедели(КалендарьНаФорме) +32400+ (лВерх + лВысота-20)*45+86400*3;
					Если ЗначениеЗаполнено(ТекущаяЗадача) тогда
						ИзменитьВремяЗадачи();
					КонецЕсли;
				КонецЕсли;
				
				Если лЛево>690 и лЛево < 860 тогда
					Строка = "Пятница";	
					ПолучитьУИДпоНавигационнойСсылке(ИД);
					НоваяДатаНачала = НачалоНедели(КалендарьНаФорме) +32400 + (лВерх-20)*45 + 86400*4;
					НоваяДатаОкончания = НачалоНедели(КалендарьНаФорме)+32400 + (лВерх + лВысота-20)*45+86400*4;
					Если ЗначениеЗаполнено(ТекущаяЗадача) тогда
						ИзменитьВремяЗадачи();
					КонецЕсли;
				КонецЕсли;
				
				Если лЛево>840 и лЛево < 1010 тогда
					Строка = "Суббота";	
					ПолучитьУИДпоНавигационнойСсылке(ИД);
					НоваяДатаНачала = НачалоНедели(КалендарьНаФорме)+32400  + (лВерх-20)*45 + 86400*5;
					НоваяДатаОкончания = НачалоНедели(КалендарьНаФорме)+32400 + (лВерх + лВысота-20)*45+86400*5;
					Если ЗначениеЗаполнено(ТекущаяЗадача) тогда
						ИзменитьВремяЗадачи();
					КонецЕсли;
				КонецЕсли;
				
				Если лЛево>990 и лЛево < 1150 тогда
					Строка = "Воскресенье";	
					ПолучитьУИДпоНавигационнойСсылке(ИД);
					НоваяДатаНачала = НачалоНедели(КалендарьНаФорме) +32400 + (лВерх-20)*45 + 86400*6;
					НоваяДатаОкончания = НачалоНедели(КалендарьНаФорме)+32400 + (лВерх + лВысота-20)*45+86400*6;
					Если ЗначениеЗаполнено(ТекущаяЗадача) тогда
						ИзменитьВремяЗадачи();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КОнецЕсли;
КонецПроцедуры


// ПРОЦЕДУРА ОБРАБОТКИ ХТМЛ ДОКУМЕНТЫ


&НаСервере
Процедура ЗаполнитьТаблицаРезультата()
	ТаблицаДляЗаполнения.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |ГДЕ
	               |	ЗаказПоставщику.АК_ДатаВремяИсполненияУслуги МЕЖДУ &Нач И &Кон
	               |	И ЗаказПоставщику.АК_ТипУслуги = &АК_ТипУслуги";
	
	Запрос.УстановитьПараметр("Нач",НачалоНедели(КалендарьНаФорме) );
	Запрос.УстановитьПараметр("Кон",КонецНедели(КалендарьНаФорме) );
	Запрос.УстановитьПараметр("АК_ТипУслуги",Перечисления.АК_ТипУслуги.Доставка);


	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() цикл
		ВыборкаДокументов  = Выборка.Ссылка;
		ННавСсылка = ПолучитьНавигационнуюСсылку(ВыборкаДокументов.Ссылка);
		
		ДеньНедели = ДеньНедели(ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги);
		ПозицияХ = ДеньНедели * 150 - 50;
		Если  ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги  = НачалоДня(ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги) тогда
			ПозицияУ = 20;	
		Иначе
			ПозицияУ = (ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги - (НачалоДня(ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги)+32400) )/45 +20;
		КонецЕсли;
		Высота = 100;
		Ширина = 140;
		
		НоваяСтрокаТЗ = ТаблицаДляЗаполнения.Добавить();
		НоваяСтрокаТЗ.id = ВыборкаДокументов.Ссылка.УникальныйИдентификатор();
		НоваяСтрокаТЗ.left = Цел(ПозицияХ);
		НоваяСтрокаТЗ.top = Цел(ПозицияУ);
		НоваяСтрокаТЗ.width = Цел(Ширина);
		НоваяСтрокаТЗ.height = Цел(Высота);
		
		ТЗ = ВыборкаДокументов.Ссылка.ДополнительныеУслуги.Выгрузить();
		ТЗ.Свернуть("ЗаказКлиента","");
		Строка = "";
		Для каждого ТекСтр из ТЗ цикл
			Строка = Строка + ТекСтр.ЗаказКлиента.Номер + " , "+Символы.ПС;	
		КОнецЦикла;
		
		НоваяСтрокаТЗ.tekst = "Доставка    " + + Символы.ПС + Строка(Выборка.ссылка.АК_ЗаказчикУслуги) + Символы.ПС + Строка;
		НоваяСтрокаТЗ.href = ННавСсылка;
	КонецЦикла;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПоставщику.Ссылка
	               |ИЗ
	               |	Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |ГДЕ
	               |	ЗаказПоставщику.АК_ДатаВремяИсполненияУслуги МЕЖДУ &Нач И &Кон
	               |	И ЗаказПоставщику.АК_ТипУслуги = &АК_ТипУслуги";
	
	Запрос.УстановитьПараметр("Нач",НачалоНедели(КалендарьНаФорме) );
	Запрос.УстановитьПараметр("Кон",КонецНедели(КалендарьНаФорме) );
	Запрос.УстановитьПараметр("АК_ТипУслуги",Перечисления.АК_ТипУслуги.Монтаж);


	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() цикл
		ВыборкаДокументов  = Выборка.Ссылка;
		ННавСсылка = ПолучитьНавигационнуюСсылку(ВыборкаДокументов.Ссылка);
		
		ДеньНедели = ДеньНедели(ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги);
		ПозицияХ = ДеньНедели * 150 - 50;
		Если  ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги  = НачалоДня(ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги) тогда
			ПозицияУ = 20;	
		Иначе
			ПозицияУ = (ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги - (НачалоДня(ВыборкаДокументов.АК_ДатаВремяИсполненияУслуги)+32400) )/45 +20;
		КонецЕсли;
		Высота = 100;
		Ширина = 140;
		
		НоваяСтрокаТЗ = ТаблицаДляЗаполнения.Добавить();
		НоваяСтрокаТЗ.id = ВыборкаДокументов.Ссылка.УникальныйИдентификатор();
		НоваяСтрокаТЗ.left = Цел(ПозицияХ);
		НоваяСтрокаТЗ.top = Цел(ПозицияУ);
		НоваяСтрокаТЗ.width = Цел(Ширина);
		НоваяСтрокаТЗ.height = Цел(Высота);
		
		ТЗ = ВыборкаДокументов.Ссылка.ДополнительныеУслуги.Выгрузить();
		ТЗ.Свернуть("ЗаказКлиента","");
		Строка = "";
		Для каждого ТекСтр из ТЗ цикл
			Строка = Строка + ТекСтр.ЗаказКлиента.Номер + " , "+Символы.ПС;	
		КОнецЦикла;
		
		НоваяСтрокаТЗ.tekst = "Монтаж    " +  Символы.ПС +Строка(Выборка.ссылка.АК_ЗаказчикУслуги) + Символы.ПС + Строка;
		НоваяСтрокаТЗ.href = ННавСсылка;
		НоваяСтрокаТЗ.cvet = "yellow";
	КонецЦикла;	
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗадачи()
	mainObj= Элементы.ПолеХТМЛ.Документ.getElementbyid("tasks");
	Если mainObj = Неопределено тогда
		Возврат;
	КонецЕсли;
	Пока mainObj.childNodes.length > 0 Цикл
		oneChild = mainObj.lastChild;
		mainObj.removeChild(oneChild);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНаФорме()
	ОчиститьЗадачи();
	Для каждого ТекСтр из ТаблицаДляЗаполнения цикл
		// Создадим задачу
		массивЗадач= Элементы.ПолеХТМЛ.Документ.getElementbyid("tasks");
		newDiv  = Элементы.ПолеХТМЛ.Документ.createElement("div");
		newDiv.className = "taskitem";  
		newDiv.id = ТекСтр.id;
		newDiv.style.left = ТекСтр.left;
		newDiv.style.top = ТекСтр.top;
		newDiv.style.width = ТекСтр.width;
		newDiv.style.height = ТекСтр.height;
		Если Не ПустаяСтрока(ТекСтр.Cvet) тогда
			newDiv.style.background = ТекСтр.Cvet;		
		КонецЕсли;

				newDiv.innerHTML = "<a href="""+ТекСтр.href+""" ><p class=""tasklink"""+"> "+ТекСтр.tekst+"</p></a>";
		Попытка
			массивЗадач.appendChild(newDiv);
		Исключение
			Возврат;
		КонецПопытки;
	КонецЦикла;	
	Попытка
		Элементы.ПолеХТМЛ.Документ.parentWindow.eval("UpdateHandlers()");
	Исключение
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьТаблицу()
	ЗаполнитьТаблицаРезультата();
	ОтобразитьНаФорме();
КонецПроцедуры


// ДРУГИЕ ПРОЦЕДУРЫ  И ФУНКЦИИ


 &НаСервере
Функция ИзСтрокиСРазделителями(СтрокаТекста, Разделитель, НаличиеКавычек) Экспорт
	СписокДанных = Новый Массив;
	
	ПрошлыйРазделитель = 0;
	КоличествоСимволов = 0;
	Для а=1 По СтрДлина(СтрокаТекста) Цикл
		
		Если Сред(СтрокаТекста,а,1) = Разделитель Тогда
			
			ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1),КоличествоСимволов);
			Если НаличиеКавычек Тогда
				ВыбранноеЗначение = Сред(ВыбранноеЗначение, 2, (СтрДлина(ВыбранноеЗначение) - 2));
			КонецЕсли;
			СписокДанных.Добавить(ВыбранноеЗначение);
			ПрошлыйРазделитель = а;
			КоличествоСимволов = 0;
			Продолжить;
			
		КонецЕсли;
		КоличествоСимволов = КоличествоСимволов + 1;
		
	КонецЦикла;
	ВыбранноеЗначение = Сред(СтрокаТекста,(ПрошлыйРазделитель + 1));
	Если НаличиеКавычек Тогда
		ВыбранноеЗначение = Сред(ВыбранноеЗначение, 2, (СтрДлина(ВыбранноеЗначение) - 2));
	КонецЕсли;
	СписокДанных.Добавить(ВыбранноеЗначение);
	Возврат СписокДанных;
КонецФункции // ()

&НаКлиенте
Процедура Заполнить(Команда)
	ЗаполнитьТаблицу();
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элементы.ПолеХТМЛ.Документ.ActiveElement.OffSetParent<>Неопределено тогда
		Если Элементы.ПолеХТМЛ.Документ.ActiveElement.OffSetParent.ID <> "" тогда
			ИД =Элементы.ПолеХТМЛ.Документ.ActiveElement.OffSetParent.ID;
			ПолучитьУИДпоНавигационнойСсылке(ИД);
			ОткрытьЗначение(ТекущаяЗадача);
		иначе
			//Сообщить("Вот тут создадим задачу");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	ЗаполнитьТаблицаРезультата();
	ОтобразитьНаФорме();
КонецПроцедуры

&НаКлиенте
Процедура ПолеХТМЛДокументСформирован(Элемент)
	ЗаполнитьТаблицу();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекОб = РеквизитФормыВЗначение("Объект");
	КаталоГфайлов = КаталогВременныхФайлов();
	Файл = ТекОб.ПолучитьМакет("Index");
	Файл.Записать(КаталоГфайлов + "Index.html");
	
	Файл = ТекОб.ПолучитьМакет("jquery");
	Файл.Записать(КаталоГфайлов + "jquery-1.9.0.js");
	
	Файл = ТекОб.ПолучитьМакет("jquery_ui");
	Файл.Записать(КаталоГфайлов + "jquery-ui.min.js");
	
	Файл = ТекОб.ПолучитьМакет("script");
	Файл.Записать(КаталоГфайлов + "script.js");
	
	Файл = ТекОб.ПолучитьМакет("style");
	Файл.Записать(КаталоГфайлов + "style.css");
	
КонецПроцедуры



