////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	КаталогДляСохраненияДанных = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьЛокальныйКаталогФайлов();
	
	ЗаполнитьФормуЗадачи(Параметры);
	УстановитьПризнакЗадачаПросрочена();
	УстановитьОформлениеЗадач(ЭтаФорма.УсловноеОформление);

	Если Не ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		Элементы.ФормаСоздатьПисьмо.Видимость = Ложь;
		Элементы.ЗадатьВопросАвтору.Видимость = Ложь;
	КонецЕсли;
		
	ИнтеграцияС1СДокументооборотПереопределяемый.ДополнительнаяОбработкаФормыЗадачи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьДоступностьКомандРаботыСФайлами();
	ОбновитьДоступностьКомандПринятияКИсполнению();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Режим = новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Сохранить'"));
		Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не сохранять'"));
		Режим.Добавить(КодВозвратаДиалога.Отмена,НСтр("ru='Редактировать'"));
		Ответ = Вопрос(ТекстВопроса, Режим,,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			
			ИзменитьЗадачу();
			
			ПараметрыОповещения = Новый Структура("id", ПроцессID);
			Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, ВладелецФормы);
			
			ПараметрыОповещения = Новый Структура("name, id, type", Представление, id, Тип);
			Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ВладелецФормы);
			
		ИначеЕсли Ответ <> КодВозвратаДиалога.Нет Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотДокумент" И Источник = Элементы.ДеревоПриложенийСсылка Тогда 
		Если ЗначениеЗаполнено(Параметр) Тогда
			Если Параметр.Свойство("id") И Параметр.Свойство("type") Тогда
				ОбработкаОповещенияЗаписьДокумента(Параметр);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ДатаИсполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаИсполненияВремяПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РассмотрениеРезультатВыполненияПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатВыполненияОбработкиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура БизнесПроцессПредметаРассмотренияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		БизнесПроцессПредметаРассмотренияТип, БизнесПроцессПредметаРассмотренияID, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметРассмотренияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("id", ПредметРассмотренияID);
	ПараметрыФормы.Вставить("type", ПредметРассмотренияТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы, ЭтаФорма, ПредметРассмотренияID);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ИСПОЛНИТЕЛИ"

&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИсполнителиКомментарийПроверяющего" 
		ИЛИ Поле.Имя = "ИсполнителиОтправленоНаДоработку" Тогда
		Возврат;
	Иначе
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Исполнители[ВыбраннаяСтрока].ЗадачаID) Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("id", Исполнители[ВыбраннаяСтрока].ЗадачаID);
			ПараметрыФормы.Вставить("type", Исполнители[ВыбраннаяСтрока].ЗадачаТип);
			ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОтправленоНаДоработкуПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиКомментарийПроверяющегоПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ДЕРЕВО ПРИЛОЖЕНИЙ"

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Строка = Элемент.ТекущиеДанные;
	
	Если Строка <> Неопределено Тогда
		Если ЗначениеЗаполнено(Строка.СсылкаНаОбъект) Тогда
			ПараметрыФормы = Новый Структура("Ключ", Строка.СсылкаНаОбъект);
			ОткрытьФорму(Строка.СсылкаТип+".ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		ИначеЕсли Строка.СсылкаТип = "DMFile" Тогда
			ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(Строка.СсылкаID, Строка.Расширение, Строка.Ссылка, 
				Строка.Размер, Строка.ДатаМодификации,
				КаталогДляСохраненияДанных, УникальныйИдентификатор);
		Иначе
			ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(Строка.СсылкаТип,Строка.СсылкаID, Строка);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРаботыСФайлами();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ЭТАПЫ"

&НаКлиенте
Процедура ЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Этапы.ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.Этапы.ТекущиеДанные.ЗапущенныйБизнесПроцессID) Тогда
			ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
				Элементы.Этапы.ТекущиеДанные.ЗапущенныйБизнесПроцессТип,
				Элементы.Этапы.ТекущиеДанные.ЗапущенныйБизнесПроцессID, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьКарточку(Команда)

	Строка = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если Строка <> Неопределено Тогда
		Если ЗначениеЗаполнено(Строка.СсылкаНаОбъект) Тогда
			ПараметрыФормы = Новый Структура("Ключ", Строка.СсылкаНаОбъект);
			ОткрытьФорму(Строка.СсылкаТип+".ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		Иначе
			ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(Строка.СсылкаТип, Строка.СсылкаID, Строка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуПервая(Команда)
	
	Если ПроцессТип = "DMBusinessProcessRegistration" Тогда
		Если ЗначениеЗаполнено(ПредметID) Тогда
			Зарегистрирован = ПроверитьРегистрациюПредмета();
			Если НЕ Зарегистрирован Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Документ ""%1"" не зарегистрирован!
				|Для регистрации откройте карточку документа и укажите регистрационный номер и дату регистрации.'"),Предмет));
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" Тогда
		Если РезультатID = "ПринятоОбязательнымиУчастниками" Тогда 
			ТекстВопроса = Нстр("ru = 'Есть непринявшие приглашения участники. При подтверждении они будут исключены из списка участников. Продолжить?'");
			РезультатОтвета = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
			Если РезультатОтвета <> КодВозвратаДиалога.Да Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Тип = "DMBusinessProcessIssuesSolutionTaskQuestion" Тогда
		Если ВидВопросаID = "Иное" И НЕ ЗначениеЗаполнено(РезультатВыполнения) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			    НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),, 
				"РезультатВыполнения");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьЗадачуОповеститьЗакрытьФорму(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуВторая(Команда)
	
	Если (ПроцессТип = "DMBusinessProcessApproval" И ЭтоТочкаМаршрута("Согласовать"))
		ИЛИ (ПроцессТип = "DMBusinessProcessInvitation" И ЭтоТочкаМаршрута("Пригласить"))
		ИЛИ Тип = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			    НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),, 
				"РезультатВыполнения");
			Возврат;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" И ЭтоТочкаМаршрута("Утвердить") Тогда
		Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Укажите причину отклонения документа'"),, 
				"РезультатВыполнения");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("id, type, taskId", ПроцессID, ПроцессТип, ID);
	
	Если ПроцессТип = "DMBusinessProcessApproval" И ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Успешно = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессСогласование", ПараметрыФормы);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" И ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Успешно = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессУтверждение", ПараметрыФормы);
		
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" И ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Успешно = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессПриглашение", ПараметрыФормы);
		
	Иначе
		Успешно = Истина;
		
	КонецЕсли;
	
	Если Успешно = Истина Тогда
		ВыполнитьЗадачуОповеститьЗакрытьФорму(2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадачуТретья(Команда)
	
	Если ПроцессТип = "DMBusinessProcessApproval" Тогда
		Если Не ЗначениеЗаполнено(РезультатВыполнения) Тогда 
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Комментарий"" не заполнено'"),, 
			"РезультатВыполнения");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьЗадачуОповеститьЗакрытьФорму(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Модифицированность Тогда
		Если ИзменитьЗадачу() Тогда
			Модифицированность = Ложь;
			ПараметрыОповещения = Новый Структура("name, id, type", ЭтаФорма.Наименование, ЭтаФорма.ID, ЭтаФорма.Тип);
			Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
			Закрыть();
		КонецЕсли;
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	Если Модифицированность Тогда
		Если ИзменитьЗадачу() Тогда 
			Модифицированность = Ложь;
			ПараметрыОповещения = Новый Структура("name, id, type", ЭтаФорма.Наименование, ЭтаФорма.ID, ЭтаФорма.Тип);
			Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДляПросмотра(Команда)
	
	Строка = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если Строка <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(
			Строка.СсылкаID, 
			Строка.Расширение,
			Строка.Ссылка, 
			Строка.Размер, 
			Строка.ДатаМодификации, 
			КаталогДляСохраненияДанных, 
			УникальныйИдентификатор
			);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	ВыбраннаяСтрока = Элементы.Исполнители.ТекущаяСтрока;
	
	Если ЗначениеЗаполнено(Исполнители[ВыбраннаяСтрока].ЗадачаID) Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("id", Исполнители[ВыбраннаяСтрока].ЗадачаID);
		ПараметрыФормы.Вставить("type", Исполнители[ВыбраннаяСтрока].ЗадачаТип);
		ПараметрыФормы.Вставить("ТочкаМаршрута",Исполнители[ВыбраннаяСтрока].ТочкаМаршрута);
		ПараметрыФормы.Вставить("ТипПроцесса",ПроцессТип);
			
		ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перенаправить(Команда)
	
	Если Модифицированность Тогда
		ИзменитьЗадачу();
	КонецЕсли;
	
	ПараметрыФормы = новый Структура;
	ПараметрыФормы.Вставить("Задача",Наименование);
	ПараметрыФормы.Вставить("ЗадачаID",ID);
	ПараметрыФормы.Вставить("ЗадачаТип",Тип);
	
	Успешно = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ПеренаправлениеЗадачи", ПараметрыФормы, ЭтаФорма);
	Если Успешно = Истина Тогда
		ПараметрыОповещения = Новый Структура("name, id, type", ЭтаФорма.Наименование, ЭтаФорма.ID, ЭтаФорма.Тип);
		Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	ПринятаКИсполнению = ПринятьЗадачуКИсполнениюНаСервере();
	
	Если ПринятаКИсполнению Тогда
		Состояние(НСтр("ru = 'Задача принята к исполнению!'"));
		ОбновитьДоступностьКомандПринятияКИсполнению();
		ПараметрыОповещения = Новый Структура("name, id, type", ЭтаФорма.Наименование, ЭтаФорма.ID, ЭтаФорма.Тип);
		Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ЭтаФорма.ВладелецФормы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцесс(Команда)
	
	ПараметрыФормы = новый Структура("ГлавнаяЗадача, Предмет", новый Структура, новый Структура);
	
	ПараметрыФормы.ГлавнаяЗадача.Вставить("name", Наименование);
	ПараметрыФормы.ГлавнаяЗадача.Вставить("id", ID);
	ПараметрыФормы.ГлавнаяЗадача.Вставить("type", Тип);
	
	ПараметрыФормы.Предмет.Вставить("name", Предмет);
	ПараметрыФормы.Предмет.Вставить("id", ПредметID);
	ПараметрыФормы.Предмет.Вставить("type", ПредметТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса",ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)
	
	ПараметрыФормы = новый Структура("Предмет", новый Структура);
	
	ПараметрыФормы.Предмет.Вставить("name", Наименование);
	ПараметрыФормы.Предмет.Вставить("id", ID);
	ПараметрыФормы.Предмет.Вставить("type", Тип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо",ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьБизнесПроцесс(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ПроцессТип, ПроцессID, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросАвтору(Команда)
	
	ПарметрыФормы = новый Структура;
	ПарметрыФормы.Вставить("id",ID);
	ПарметрыФормы.Вставить("type",Тип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессРешениеВопросовНовыйВопрос", ПарметрыФормы, ЭтаФорма, ID);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьДоступностьКомандПринятияКИсполнению()
	
	Элементы.ФормаПринятьКИсполнению.Доступность = (НЕ ПринятаКИсполнению и ВозможностьРедактирования);
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьФормуЗадачи(Параметры)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Условия = новый Массив;
	Условия.Добавить("withDependentObjects");
	Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Параметры.type, Параметры.id, Условия);
	ОбъектXDTO = Ответ.objects[0];
	
	//Заполним реквизиты, общие для всех задач
	ID = ОбъектXDTO.objectId.id;
	Тип = ОбъектXDTO.objectId.type;
	Представление = ОбъектXDTO.objectID.presentation;
	Наименование = ОбъектXDTO.Name;
	Заголовок = ОбъектXDTO.objectID.presentation;
	Выполнена = ОбъектXDTO.executed;
	ПринятаКИсполнению = ОбъектXDTO.accepted;
	Дата = ОбъектXDTO.beginDate;
	Номер = ОбъектXDTO.number;
	СрокИсполнения = ОбъектXDTO.dueDate;
	РезультатВыполнения = ОбъектXDTO.executionComment;
	ДатаИсполнения = ОбъектXDTO.endDate;
	Описание = ОбъектXDTO.description;
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.importance,"Важность");
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.state,"Состояние");
	КонецЕсли;
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.parentBusinessProcess, "Процесс", Истина);
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.author, "Автор");
	ЗаполнитьДанныеАдресации(ЭтаФорма, ОбъектXDTO.performer);
	УстановитьТочкуМаршрута(ОбъектXDTO.businessProcessStep);
	
	ПроцессОбъект = ОбъектXDTO.parentBusinessProcess;
	
	Если ОбъектXDTO.Установлено("target") Тогда
    	ПредметОбъект = ОбъектXDTO.target;
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ПредметОбъект, "Предмет");
	Иначе
		ПредметОбъект = Неопределено;
	КонецЕсли;
	
	ПоддержкаСовместимости_ЗаполнитьПроцессПредметЗадачи(Прокси, ОбъектXDTO, ПредметОбъект, ПроцессОбъект);
	
	// заполним дерево приложений
	Если ПроцессТип <> "DMBusinessProcessIssuesSolution" Тогда
		ЗаполнитьДеревоПриложений(ПредметОбъект);
	КонецЕсли;
	
	// установим возможность выполнения
	Если НЕ (Выполнена ИЛИ СостояниеID = "Остановлен") Тогда
		ДатаИсполнения = ТекущаяДата();
		ДоступноВыполнение = Истина;
	Иначе
		Элементы.ТекстРезультатаВыполнения.Видимость = Истина;
		ДоступноВыполнение = Ложь;
	КонецЕсли;
	
	// установим видимость остановки
	Если СостояниеID = "Остановлен" Тогда 
		Элементы.ГруппаСведенияОбОстановке.Видимость = Истина; 
	Иначе
		Элементы.ГруппаСведенияОбОстановке.Видимость = Ложь; 
	КонецЕсли;

	//Заполним описание
	Если Элементы.Найти("ПолноеОписаниеЗадачи") <> Неопределено Тогда
		Если Не ПустаяСтрока(ОбъектXDTO.description) Тогда
			ПолноеОписаниеЗадачи = ПолноеОписаниеЗадачи + ОбъектXDTO.description;
		КонецЕсли;
		
		Если ПроцессОбъект.Свойства().Получить("executionComment") <> Неопределено Тогда
			Если Не ПустаяСтрока(ПроцессОбъект.executionComment) Тогда
				Если Не ПустаяСтрока(ПолноеОписаниеЗадачи) Тогда
					ПолноеОписаниеЗадачи = 	ПолноеОписаниеЗадачи + Символы.ПС + Символы.ПС;
				КонецЕсли;
				ПолноеОписаниеЗадачи = 	ПолноеОписаниеЗадачи + НСтр("ru = 'История выполнения:'")
				+ Символы.ПС + "------------------------------------"
				+ Символы.ПС + ПроцессОбъект.executionComment;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Настроим видимость и заполним реквизиты, специфичные для данный точки маршрута
	Элементы.РезультатВыполнения.ТолькоПросмотр = НЕ ДоступноВыполнение;
	Элементы.ДатаИсполнения.ТолькоПросмотр = НЕ ДоступноВыполнение;
	Элементы.ДатаИсполненияВремя.ТолькоПросмотр = НЕ ДоступноВыполнение;
	
	Если ПроцессТип = "DMBusinessProcessApproval" Тогда
		ЗаполнитьДанныеБПСогласование(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" Тогда
		ЗаполнитьДанныеБПУтверждение(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessConsideration" Тогда
		ЗаполнитьДанныеБПРассмотрение(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessOrder" Тогда
		ЗаполнитьДанныеБППоручение(Прокси, ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessPerformance" Тогда
		ЗаполнитьДанныеБПИсполнение(Прокси, ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMComplexBusinessProcess" Тогда
		ЗаполнитьДанныеБПКомплексныйПроцесс(Прокси, ПроцессОбъект);
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" Тогда
		ЗаполнитьДанныеБПРегистрация();
	ИначеЕсли ПроцессТип = "DMBusinessProcessAcquaintance" Тогда
		ЗаполнитьДанныеБПОзнакомление();
	ИначеЕсли ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		ЗаполнитьДанныеБПРешениеВопросов(ОбъектXDTO);
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" Тогда
		ЗаполнитьДанныеБППриглашение(ОбъектXDTO);
	Иначе
		ВывестиИнформмациюОНедоступностиВыполненияЗадачи();
	КонецЕсли;
	
	// установим возможность редактирования задачи
	ВозможностьРедактирования = ?(ОбъектXDTO.Установлено("changeRight"), ОбъектXDTO.changeRight, Ложь);
	Если СостояниеID = "Остановлен" Тогда 
 		ВозможностьРедактирования = Ложь;
	КонецЕсли;
	
	УстановитьВозможностьРедактирования(ВозможностьРедактирования);
	       
КонецПроцедуры

&НаСервере
Процедура ПоддержкаСовместимости_ЗаполнитьПроцессПредметЗадачи(Прокси, ОбъектXDTO, ПредметОбъект, ПроцессОбъект)
	
	Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		
		МассивОбъектов = новый Массив;
		МассивКолонок = новый Массив;
		
		МассивОбъектов.Добавить(новый Структура("id, type", ОбъектXDTO.parentBusinessProcess.ObjectID.id, ОбъектXDTO.parentBusinessProcess.ObjectID.type));
		МассивКолонок.Добавить("name");
		МассивКолонок.Добавить("objectId");
		МассивКолонок.Добавить("checkResults");
		МассивКолонок.Добавить("executionComment");
		
		Если ОбъектXDTO.Установлено("target") Тогда
			Если Найти(ОбъектXDTO.target.objectID.type,"Document") <> 0 Тогда
				МассивОбъектов.Добавить(новый Структура("id, type", ОбъектXDTO.target.ObjectID.id, ОбъектXDTO.target.ObjectID.type));
				МассивКолонок.Добавить("files");
				МассивКолонок.Добавить("externalObject");
			ИначеЕсли ОбъектXDTO.target.objectID.type = "DMFile" Тогда
				МассивОбъектов.Добавить(новый Структура("id, type", ОбъектXDTO.target.ObjectID.id, ОбъектXDTO.target.ObjectID.type));
				МассивКолонок.Добавить("extension");
				МассивКолонок.Добавить("modificationDateUniversal");
				МассивКолонок.Добавить("size");
			КонецЕсли;
		КонецЕсли;

		Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъекты(Прокси, МассивОбъектов, МассивКолонок);
		
		ПроцессОбъект = Ответ.objects[0];

		Если Ответ.objects.Количество() > 1 Тогда
			ПредметОбъект = Ответ.objects[1];
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПриложений(ПредметОбъект) 
	
    ДеревоПриложений.Очистить();
	
	Если ПредметОбъект <> Неопределено Тогда
		Если ПоддерживаемыеТипыСоставныхПредметов().Найти(ПредметТип) <> Неопределено Тогда
			Если ПредметОбъект.Установлено("externalObject") Тогда
				Если ЗначениеЗаполнено(ПредметОбъект.externalObject.type) Тогда
					УстановитьПривилегированныйРежим(Истина);
					СсылкаНаОбъект = ИнтеграцияС1СДокументооборот.ПолучитьСсылкуНаОбъектПоВнешнемуОбъекту(ПредметОбъект.externalObject);
					Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
						Если СсылкаНаОбъект.ПолучитьОбъект() <> Неопределено Тогда
							Стр = ДеревоПриложений.Добавить();
							Стр.Ссылка = Строка(СсылкаНаОбъект);
							Стр.СсылкаID = ПредметОбъект.externalObject.id;
							Стр.СсылкаТип = ПредметОбъект.externalObject.type;
							Стр.СсылкаНаОбъект = СсылкаНаОбъект;
							УстановитьКартинкуТипаОбъекта(Стр);
							ДополнитьИмяПредметаПоТипуОбъекта(Стр.Ссылка, Стр.СсылкаТип);
						КонецЕсли;
					КонецЕсли;
					УстановитьПривилегированныйРежим(Ложь);
				КонецЕсли;
			КонецЕсли;
			ИмяПредмета = ПредметОбъект.name;
			ДополнитьИмяПредметаПоТипуОбъекта(ИмяПредмета, ПредметОбъект.ObjectID.type);
			Стр = ДеревоПриложений.Добавить();
			Стр.Ссылка = ИмяПредмета;
			Стр.СсылкаID = ПредметОбъект.ObjectID.id;
			Стр.СсылкаТип = ПредметОбъект.ObjectID.type;
			Стр.КартинкаТипаОбъекта = 10;
			Если ПредметОбъект.Свойства().Получить("files") <> Неопределено Тогда
				Для каждого Файл из ПредметОбъект.files Цикл
					Стр = ДеревоПриложений.Добавить();
					ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Стр,Файл,"Ссылка");
					Стр.Расширение = Файл.extension;
					Стр.ДатаМодификации = Файл.modificationDateUniversal;
					Стр.Размер = Файл.size;
					Стр.КартинкаТипаОбъекта = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.extension);
					УстановитьКартинкуТипаОбъекта(Стр);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ПредметТип = "DMFile" Тогда
			Стр = ДеревоПриложений.Добавить();
			ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Стр, ПредметОбъект,"Ссылка");
			Стр.Расширение = ПредметОбъект.extension;
			Стр.ДатаМодификации = ПредметОбъект.modificationDateUniversal;
			Стр.Размер = ПредметОбъект.size;
			Стр.КартинкаТипаОбъекта = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ПредметОбъект.extension);
		Иначе
			Стр = ДеревоПриложений.Добавить();
			ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Стр, ПредметОбъект,"Ссылка");
			ДополнитьИмяПредметаПоТипуОбъекта(Стр.Ссылка, Стр.СсылкаТип);
			Стр.КартинкаТипаОбъекта = 10;
		КонецЕсли;
	КонецЕсли;
	
	КоличествоПриложений = ДеревоПриложений.Количество();
	Если КоличествоПриложений <> 0 Тогда
		Элементы.ГруппаКоманднаяПанельПриложения.Доступность = Истина;
	Иначе
		Элементы.ГруппаКоманднаяПанельПриложения.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоддерживаемыеТипыСоставныхПредметов()
	
	ТипыПредметов = новый Массив;
	ТипыПредметов.Добавить("DMInternalDocument");
	ТипыПредметов.Добавить("DMOutgoingDocument");
	ТипыПредметов.Добавить("DMIncomingDocument");
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		ТипыПредметов.Добавить("DMActivity");
		ТипыПредметов.Добавить("DMOutgoingEMail");
		ТипыПредметов.Добавить("DMIncomingEMail");
	КонецЕсли;
	
	Возврат ТипыПредметов;
	
КонецФункции

&НаСервере
Процедура УстановитьКартинкуТипаОбъекта(СтрокаПредмета)
	Если Найти(СтрокаПредмета.СсылкаТип,"Документ.") <> 0 Тогда
		СтрокаПредмета.КартинкаТипаОбъекта = БиблиотекаКартинок.Документ;
	ИначеЕсли Найти(СтрокаПредмета.СсылкаТип,"Справочник.") <> 0 Тогда
		СтрокаПредмета.КартинкаТипаОбъекта = БиблиотекаКартинок.Справочник
	ИначеЕсли Найти(СтрокаПредмета.СсылкаТип,"БизнесПроцесс.") <> 0 Тогда
		СтрокаПредмета.КартинкаТипаОбъекта = БиблиотекаКартинок.БизнесПроцесс;
	ИначеЕсли Найти(СтрокаПредмета.СсылкаТип,"Задача.") <> 0 Тогда
		СтрокаПредмета.КартинкаТипаОбъекта = БиблиотекаКартинок.Задача;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура УстановитьВозможностьРедактирования(Доступно)
	
	ЭтаФорма.Элементы.ГруппаИсполнение.Доступность = Доступно;
	ЭтаФорма.Элементы.ФормаПеренаправить.Доступность = Доступно;
	ЭтаФорма.Элементы.ФормаПринятьКИсполнению.Доступность = Доступно;
	ЭтаФорма.Элементы.ФормаЗаписатьИЗакрыть.Доступность = Доступно;
	ЭтаФорма.Элементы.ФормаЗаписать.Доступность = Доступно;
	ЭтаФорма.Элементы.РезультатВыполнения.Доступность = Доступно;
	ЭтаФорма.Элементы.РезультатВыполненияСкрытый.ТолькоПросмотр = НЕ Доступно;
	ЭтаФорма.Элементы.РезультатВыполненияОбработки.ТолькоПросмотр = НЕ Доступно;
	ЭтаФорма.Элементы.СтраницаРезультатРассмотрения.ТолькоПросмотр = НЕ Доступно;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТочкуМаршрута(ИмяТочкиМаршрута)
	
	Если ПроцессТип = "DMBusinessProcessApproval" Тогда
		Если ИмяТочкиМаршрута = "Ознакомиться с результатом согласования" Тогда
			ТочкаМаршрута = "Ознакомиться";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessOrder" Тогда
		Если ИмяТочкиМаршрута = "Контролировать поручение" Тогда
			ТочкаМаршрута = "Контролировать";
		ИначеЕсли ИмяТочкиМаршрута = "Проверить поручение" Тогда
			ТочкаМаршрута = "Проверить";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessPerformance" Тогда
		Если ИмяТочкиМаршрута = "Ответственное исполнение" Тогда
			ТочкаМаршрута = "ОтветственноеИсполнение";
		ИначеЕсли ИмяТочкиМаршрута = "Контролировать исполнение" Тогда
			ТочкаМаршрута = "Контролировать";
		ИначеЕсли ИмяТочкиМаршрута = "Проверить исполнение" Тогда
			ТочкаМаршрута = "Проверить";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessRegistration" Тогда
		Если ИмяТочкиМаршрута = "Ознакомиться с регистрацией" Тогда
			ТочкаМаршрута = "Ознакомиться";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessConfirmation" Тогда
		Если Найти(ИмяТочкиМаршрута, "Ознакомиться с результатом утверждения") <> 0 Тогда
			ТочкаМаршрута = "Ознакомиться";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessConsideration" Тогда
		Если ИмяТочкиМаршрута = "Обработать резолюцию" Тогда
			ТочкаМаршрута = "Ознакомиться";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMComplexBusinessProcess" Тогда
		Если ИмяТочкиМаршрута = "Контролировать ход процесса" Тогда
			ТочкаМаршрута = "Контролировать";
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessIncomingDocumentProcessing" Тогда
		Если ИмяТочкиМаршрута = "Исполнение \ ознакомление" Тогда
			ТочкаМаршрута = "ИсполнениеОзнакомление";
		ИначеЕсли ИмяТочкиМаршрута = "В дело" Тогда
			ТочкаМаршрута = "ВДело";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessInternalDocumentProcessing" Тогда
		Если ИмяТочкиМаршрута = "Рассмотрение" Тогда
			ТочкаМаршрута = "ВложенныйПроцесс1";
		ИначеЕсли ИмяТочкиМаршрута = "Исполнение \ ознакомление" Тогда
			ТочкаМаршрута = "ВложенныйПроцесс2";
		ИначеЕсли ИмяТочкиМаршрута = "В дело" Тогда
			ТочкаМаршрута = "ВложенныйПроцесс3";
		Иначе
			ТочкаМаршрута = ИмяТочкиМаршрута;
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessIssuesSolution" Тогда
		Если ИмяТочкиМаршрута = "Рассмотреть вопрос" Тогда
			ТочкаМаршрута = "РассмотрениеИнициатором";
		ИначеЕсли ИмяТочкиМаршрута = "Ознакомиться с результатом рассмотрения" Тогда
			ТочкаМаршрута = "ОзнакомлениеСРезультатомРассмотрения";
		КонецЕсли;
	ИначеЕсли ПроцессТип = "DMBusinessProcessInvitation" Тогда
		Если ИмяТочкиМаршрута = "Пригласить" Тогда
			ТочкаМаршрута = "Пригласить";
		ИначеЕсли ИмяТочкиМаршрута = "Ознакомиться с результатом приглашения" Тогда
			ТочкаМаршрута = "Ознакомиться";
		ИначеЕсли ИмяТочкиМаршрута = "Оповестить о результатах приглашения" Тогда
			ТочкаМаршрута = "Оповестить";
		КонецЕсли;
	Иначе
		ТочкаМаршрута = ИмяТочкиМаршрута;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоТочкаМаршрута(ИмяТочкиМаршрута)
	
	Если ТочкаМаршрута = ИмяТочкиМаршрута Тогда
		Возврат Истина
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеБПСогласование(ЗадачаОбъект)
	
	//заполнение номера итерации
	НомерИтерации = ЗадачаОбъект.iterationNumber;
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;

	Если ЭтоТочкаМаршрута("Согласовать") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Согласовано'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Согласовано 
															|с замечаниями'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Заголовок = НСтр("ru='Не согласовано'");
		
		Элементы.ГруппаЦикл.Видимость = Истина;
		
		//заполнение результата согласования задачи
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.approvalResult, "Результат");
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = Строка(Результат) + ".";
			Если РезультатID = "Согласовано" Или РезультатID = "СогласованоСЗамечаниями" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			ИначеЕсли РезультатID = "НеСогласовано" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Повторить
															|согласование...'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		//заполнение результата согласования
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.approvalResult, "Результат");
		ОтправленоНаПовторноеСогласование = ЗадачаОбъект.returned;
		
		//заполнение листа согласования
		Для каждого СтрокаРезультата из ЗадачаОбъект.approvalResults Цикл
			СтрИсполнения = Исполнители.Добавить();
			СтрИсполнения.РезультатВыполнения = СтрокаРезультата.approvalComment;
			СтрИсполнения.ДатаИсполнения = СтрокаРезультата.approvalDate;
			СтрИсполнения.КартинкаСостояния = 1;
			ЗаполнитьДанныеАдресации(СтрИсполнения, СтрокаРезультата.approvalPerformer);
			ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(СтрИсполнения,СтрокаРезультата.approvalResult,"Результат");
		КонецЦикла;
		
		Элементы.ГруппаСогласование.Видимость = Истина;
		Элементы.Исполнители.Видимость = Истина;
		Элементы.ИсполнителиИсполнитель.Заголовок = НСтр("ru = 'Согласующее лицо'");
		Элементы.ИсполнителиДатаИсполнения.Видимость = Ложь;
		Элементы.ИсполнителиДатаСогласования.Видимость = Истина;
		Элементы.ИсполнителиРезультат.Видимость = Истина;
		Элементы.РезультатВыполнения.Видимость = Ложь;
		Элементы.РезультатВыполненияСкрытый.Видимость = Истина;
		Элементы.Исполнители.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;

		Если (РезультатID = "Согласовано") Или (РезультатID = "СогласованоСЗамечаниями") Тогда 
			Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		ИначеЕсли РезультатID = "НеСогласовано" Тогда 
			Элементы.РезультатСогласования.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
		
		//заголовки кнопок
		Если РезультатID = "НеСогласовано" Тогда 
			Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Завершить 
																|согласование'");
		Иначе	
			Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		КонецЕсли;
		
		//заполнение текста результата выполнения для выполненной задачи
		Если ОтправленоНаПовторноеСогласование <> Неопределено Тогда
			Если ОтправленоНаПовторноеСогласование Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Отправлено на повторное согласование.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе	
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерИтерации <= 1 Тогда 
		Элементы.НомерИтерацииСогласования.Видимость = Ложь;
		Элементы.НомерИтерацииСогласование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПУтверждение(ЗадачаОбъект)
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	//заполнение номера итерации
	НомерИтерации = ЗадачаОбъект.iterationNumber;
	
	Если ЭтоТочкаМаршрута("Утвердить") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Утверждено'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Не утверждено'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		Элементы.ГруппаЦикл.Видимость = Истина;
		
		//заполнение результата утверждения
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма,ЗадачаОбъект.confirmationResult,"Результат");
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = Строка(Результат) + ".";
			Если РезультатID = "Утверждено" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			ИначеЕсли РезультатID = "НеУтверждено" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Повторить 
															|утверждение...'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		ОтправленоНаПовторноеУтверждение = ЗадачаОбъект.returned;
		
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.confirmationResult,"Результат");
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.confirmationPerformer.user, "Утверждающий");
		ДатаУтверждения = ЗадачаОбъект.confirmationDate;
		РезультатВыполненияУтверждения = ЗадачаОбъект.confirmationComment;
		
		Элементы.ГруппаУтверждение.Видимость = Истина;
		Элементы.РезультатВыполнения.Видимость = Ложь;
		Элементы.РезультатВыполненияСкрытый.Видимость = Истина;
		
		Если (РезультатID = "Утверждено") Тогда 
			Элементы.РезультатУтверждения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		ИначеЕсли РезультатID = "НеУтверждено" Тогда 
			Элементы.РезультатУтверждения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
		
		//заголовки кнопок
		Если РезультатID = "НеУтверждено" Тогда 
			Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Завершить
																|утверждение'");
		Иначе	
			Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		КонецЕсли;
		
		//заполнение текста результата выполнения для выполненной задачи
		Если ОтправленоНаПовторноеУтверждение <> Неопределено Тогда
			Если ОтправленоНаПовторноеУтверждение Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Отправлено на повторное утверждение.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе	
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерИтерации <= 1 Тогда 
		Элементы.НомерИтерацииУтверждения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБППоручение(Прокси, ЗадачаОбъект)
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	Если ЭтоТочкаМаршрута("Выполнить") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Выполнено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Выполнено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Проверить") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Завершить поручение'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Вернуть на доработку'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		//заполнение результата выполнения 
		Если ЗадачаОбъект.Установлено("returned") Тогда
			ВозвращеноНаДоработку = ЗадачаОбъект.returned;
		Иначе
			ВозвращеноНаДоработку = Ложь;
		КонецЕсли;
		
		//заполнение текста результата выполнения для выполненной задачи
		Если Выполнена Тогда
			Если ВозвращеноНаДоработку Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Возвращено на доработку.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Контролировать") Тогда
		
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Снять с контроля'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Снято с контроля.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиВыполнена.Видимость = Истина;
		
		СписокЗадач = ПолучитьЗадачиБизнесПроцесса(Прокси);
		Для каждого Задача из СписокЗадач Цикл
			Если Найти(Задача.businessProcessStep,"Контролировать") <> 0 Тогда
				СтрИсполнения = Исполнители.Добавить();
				ЗаполнитьСтрокуЗадачи(СтрИсполнения,Задача);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПИсполнение(Прокси, ЗадачаОбъект)
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	Если ЭтоТочкаМаршрута("Исполнить") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Исполнено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Исполнено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("ОтветственноеИсполнение") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Исполнено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Исполнено и проверено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.Заголовок = "Соисполнители";
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.Исполнители.ПодчиненныеЭлементы.ИсполнителиВыполнена.Видимость = Истина;
		Элементы.ИсполнителиВыполнена.Видимость = Ложь;
		
		СписокЗадач = ПолучитьЗадачиБизнесПроцесса(Прокси);
		
		Для каждого Задача из СписокЗадач Цикл
			Если Задача.businessProcessStep = "Исполнить" Тогда
				СтрИсполнения = Исполнители.Добавить();
				ЗаполнитьСтрокуЗадачи(СтрИсполнения,Задача);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЭтоТочкаМаршрута("Контролировать") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Снять с контроля'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Проконтролировано.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.Заголовок = НСтр("ru = 'Ход исполнения'");
		Элементы.ИсполнителиСрокИсполнения.Видимость = Истина;
		Элементы.ИсполнителиВыполнена.Видимость = Истина;
		Элементы.ИсполнителиКартинкаСостояния.Видимость = Ложь;
		Элементы.ИсполнителиКартинкаОтветственный.Видимость = Истина;
		
		СписокЗадач = ПолучитьЗадачиБизнесПроцесса(Прокси);
		Для каждого Задача из СписокЗадач Цикл
			Если Найти(Задача.businessProcessStep,"Контролировать") = 0 Тогда
				СтрИсполнения = Исполнители.Добавить();
				ЗаполнитьСтрокуЗадачи(СтрИсполнения,Задача);
				Если Найти(Задача.businessProcessStep, "Ответственное") <> 0 Тогда
					СтрИсполнения.КартинкаОтветственный = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ЭтоТочкаМаршрута("Проверить") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Проверено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Проверено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Элементы.ИсполнителиОтправленоНаДоработку.ТолькоПросмотр = Истина;
			Элементы.ИсполнителиКомментарийПроверяющего.ТолькоПросмотр = Истина;
		КонецЕсли;
		Элементы.ГруппаЦиклИсполнение.Видимость = Истина;
		Элементы.РезультатВыполнения.Видимость = Ложь;
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.ТолькоПросмотр = Ложь;
		Элементы.Исполнители.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ИсполнителиКомментарий.Заголовок = НСтр("ru = 'Результат выполнения'");
		Элементы.ИсполнителиОтправленоНаДоработку.Видимость = Истина;
		Элементы.ИсполнителиОтправленоНаДоработку.Заголовок = НСтр("ru = 'Вернуть на доработку'");
		Элементы.ИсполнителиКомментарийПроверяющего.Видимость = Истина;
		Элементы.ИсполнителиКартинкаСостояния.Видимость = Ложь;
		Элементы.ИсполнителиКартинкаОтветственный.Видимость = Истина;
		
		НомерИтерации = ЗадачаОбъект.iterationNumber;
		
		Для каждого СтрокаXDTO из ЗадачаОбъект.checkResults цикл
			СтрИсполнения = Исполнители.Добавить();
			ЗаполнитьСтрокуЗадачи(СтрИсполнения, СтрокаXDTO.executorTask);
			СтрИсполнения.ЗадачаID = СтрокаXDTO.executorTask.objectID.id;
			СтрИсполнения.ОтправленоНаДоработку = СтрокаXDTO.returned;
			СтрИсполнения.КомментарийПроверяющего = СтрокаXDTO.checkComment;
			СтрИсполнения.НомерИтерации = ЗадачаОбъект.iterationNumber;
			Если Найти(СтрокаXDTO.executorTask.businessProcessStep, "Ответственное") <> 0 Тогда
				СтрИсполнения.КартинкаОтветственный = Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НомерИтерации <= 1 Тогда 
		Элементы.НомерИтерацииИсполнения.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПОзнакомление()
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
	Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
	Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
	
	Если Выполнена Тогда
		Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Снято с контроля.'");
		Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
	КонецЕсли;
		
	Если ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПРегистрация()
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	Если ЭтоТочкаМаршрута("Зарегистрировать") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Зарегистрировано'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Зарегистрировано и отправлено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
	ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Ознакомился'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Ознакомился.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПРассмотрение(ЗадачаОбъект)
	
	Элементы.СтраницаОсновныхЗадач.ОтображатьЗаголовок = Истина;
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Элементы.ГруппаТрудозатраты.Видимость = Ложь;
	Элементы.РезультатВыполнения.Видимость = Ложь;
	
	Если ЭтоТочкаМаршрута("Рассмотреть") Тогда
		Элементы.ГруппаКомандыВыполнения.Видимость = Ложь;
		Элементы.ГруппаДатаИВремяВыполнения.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполненияРассмотрение.Заголовок = НСтр("ru = 'Рассмотрено.'");
			Элементы.ТекстРезультатаВыполненияРассмотрение.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Элементы.ТекстРезультатаВыполненияРассмотрение.Видимость = Истина;
			Элементы.ТекстРезультатаВыполнения.Видимость = Ложь;
		КонецЕсли;
		Элементы.СтраницаРезультатРассмотрения.Видимость = Истина;
		Элементы.СтраницаРезультатРассмотрения.ТолькоПросмотр = НЕ ДоступноВыполнение;
		Элементы.ГруппаКомандыВыполненияРассмотрениеРассмотрено.Видимость = ДоступноВыполнение;
		
	ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Обработано'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Обработано.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Элементы.СтраницаРезультатОбработки.Видимость = Истина;
		КонецЕсли;
		
		Резолюция = ЗадачаОбъект.resolution;
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.resolutionPerformer.user, "РезолюцияРассмотрел");
		РезолюцияДатаРассмотрения = ЗадачаОбъект.resolutionDate;
		
		Элементы.Резолюция.Видимость = Истина;
		Элементы.ГруппаРассмотрел.Видимость = Истина;
		Элементы.СтраницаОсновныхЗадач.Заголовок = НСтр("ru = 'Что обработать'");
		Элементы.СтраницаРезультатОбработки.Видимость = Истина;
		Элементы.СтраницаРезультатОбработки.ТолькоПросмотр = НЕ ДоступноВыполнение;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБПКомплексныйПроцесс(Прокси, ПроцессОбъект)
	
	Элементы.РезультатВыполнения.Видимость = Ложь;
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	
	Если ЭтоТочкаМаршрута("Контролировать") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Проконтролировано'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Снято с контроля.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		Элементы.Этапы.Видимость = Истина;
		НомерСтроки = 1;
		Для Каждого Этап Из ПроцессОбъект.stages Цикл
			НоваяСтрока = Этапы.Добавить();
			НоваяСтрока.НомерСтроки = НомерСтроки;
			НоваяСтрока.ИдентификаторЭтапа = Этап.stageID;
			НоваяСтрока.ИсполнителиЭтапаСтрокой = Этап.participants;
			ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(НоваяСтрока, Этап.template, "ШаблонБизнесПроцесса");
			ДополнитьИмяШаблонаПоТипуШаблона(НоваяСтрока);
			НоваяСтрока.ПредшественникиЭтапаСтрокой = Этап.stagePredecessors;
			НоваяСтрока.ПредшественникиВариантИспользования = Этап.predecessorsUseOption;
			НоваяСтрока.БезусловныйПереходКСледующемуБылВыполнен = Этап.unconditionalPassageExecuted;
			НоваяСтрока.ЗадачаВыполнена = Этап.executed;
			ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(НоваяСтрока, Этап.businessProcess, "ЗапущенныйБизнесПроцесс");
			НоваяСтрока.Срок = Этап.duration;
			НомерСтроки = НомерСтроки + 1;
			Если Этап.Установлено("businessProcess") Тогда
				НоваяСтрока.СрокВыполнения = Этап.businessProcess.dueDate;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере          
Процедура ЗаполнитьДанныеБПРешениеВопросов(ЗадачаОбъект)
	
	Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		ВывестиИнформмациюОНедоступностиВыполненияЗадачи();
		Возврат;
	КонецЕсли;
	
	Элементы.ЗадатьВопросАвтору.Видимость = Ложь;
	Элементы.ФормаПеренаправить.Видимость = Ложь;
	Элементы.ПредметРассмотрения.Видимость = Истина;
	Элементы.БизнесПроцессПредметаРассмотрения.Видимость = Истина;
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.issueTask.parentBusinessProcess, "БизнесПроцессПредметаРассмотрения", Истина);
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.issueTask, "ПредметРассмотрения", Истина);
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.issueType, "ВидВопроса");
	НомерИтерации = ЗадачаОбъект.iterationNumber;
	Элементы.Наименование.Заголовок = НСтр("ru='Наименование'");
	Элементы.ПолноеОписаниеЗадачиЗаголовок.Заголовок = 
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='История вопроса (цикл: %1)'"),НомерИтерации);
	Элементы.ДекорацияЗаголовокПриложений.Заголовок = "Файлы:";
	
	Для каждого Файл из ЗадачаОбъект.files Цикл
		Стр = ДеревоПриложений.Добавить();
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Стр,Файл,"Ссылка");
		Стр.Расширение = Файл.extension;
		Стр.ДатаМодификации = Файл.modificationDateUniversal;
		Стр.Размер = Файл.size;
		Стр.КартинкаТипаОбъекта = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.extension);
		УстановитьКартинкуТипаОбъекта(Стр);
	КонецЦикла;
	
	КоличествоПриложений = ДеревоПриложений.Количество();
	
	Если ЭтоТочкаМаршрута("РассмотрениеИнициатором") И ВидВопросаID = "Иное" Тогда
		Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Рассмотрено'");
		Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Рассмотрено.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		Элементы.РезультатВыполнения.АвтоОтметкаНезаполненного = Истина;
		Элементы.РезультатВыполнения.АвтоВыборНезаполненного = Истина;
		
	ИначеЕсли ЭтоТочкаМаршрута("ОзнакомлениеСРезультатомРассмотрения") Тогда
		Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Закрыть вопрос'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Уточнить'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		Если ЗадачаОбъект.Установлено("returned") Тогда
			ВозвращеноНаДоработку = ЗадачаОбъект.returned;
		Иначе
			ВозвращеноНаДоработку = Ложь;
		КонецЕсли;
		Если ВидВопросаID = "ПереносСрока" Тогда
			Элементы.ДекорацияСтатусРассмотрения.Видимость = Истина;
			Если ЗадачаОбъект.postponingAmount = 0 Тогда
				Элементы.ДекорацияСтатусРассмотрения.Заголовок = НСтр("ru = 'Перенос срока не согласован.'");
				Элементы.ДекорацияСтатусРассмотрения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе
				Элементы.ДекорацияСтатусРассмотрения.Заголовок = НСтр("ru = 'Автор задачи перенес срок.'");
			КонецЕсли;
		КонецЕсли;
		Если Выполнена Тогда
			Если ВозвращеноНаДоработку Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Отправлено на уточнение.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Иначе
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСТР("ru = 'Выполнено.'");
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ВывестиИнформмациюОНедоступностиВыполненияЗадачи();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеБППриглашение(ЗадачаОбъект)
	
	Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		ВывестиИнформмациюОНедоступностиВыполненияЗадачи();
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
	НомерИтерации = ЗадачаОбъект.iterationNumber;
	
	Если ЭтоТочкаМаршрута("Пригласить") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Принять 
															|приглашение'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Отклонить 
															|приглашение'");
		Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
		
		Элементы.ГруппаМестоВремя.Видимость = Истина;
		ДатаНачала = ЗадачаОбъект.activityBegin;
		ДатаОкончания = ЗадачаОбъект.activityEnd;
		МестоПроведения = ЗадачаОбъект.activityVenue;
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.invitationResult, "Результат");
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = Строка(Результат) + ".";
			Если РезультатID = "Принято" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			ИначеЕсли РезультатID = "НеПринято" Тогда 
				Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Ознакомиться") Тогда
		Элементы.ВыполнитьЗадачуПервая.Заголовок = НСтр("ru='Подтвердить 
															|приглашения'");
		Элементы.ВыполнитьЗадачуВторая.Заголовок = НСтр("ru='Повторить 
															|приглашение...'");
		Элементы.ВыполнитьЗадачуТретья.Заголовок = НСтр("ru='Отменить 
															|приглашение'");
		Если Выполнена Тогда
			Если ЗадачаОбъект.returned Тогда
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Отправлено на повторное приглашение.'");
			Иначе	
				Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Приглашение завершено.'");
			КонецЕсли;
		КонецЕсли;
		
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.invitationResult, "Результат");
		
		// цвет результата
		Если РезультатID = "ПринятоВсемиУчастниками" Или РезультатID = "ПринятоОбязательнымиУчастниками" Тогда
			Элементы.РезультатПриглашения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		Иначе
			Элементы.РезультатПриглашения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
		
		// заголовки кнопок
		Если РезультатID = "ПринятоВсемиУчастниками" Тогда 
			Элементы.ВыполнитьЗадачуПервая.Видимость = Истина;
			Элементы.ВыполнитьЗадачуВторая.Видимость = Ложь;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
			
		ИначеЕсли РезультатID = "ПринятоОбязательнымиУчастниками" Тогда 	
			Элементы.ВыполнитьЗадачуПервая.Видимость = Истина;
			Элементы.ВыполнитьЗадачуВторая.Видимость = Истина;
			Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Ложь;
			
		ИначеЕсли РезультатID = "НеПринятоОбязательнымиУчастниками"
			Или РезультатID = "НеПринятоВсемиУчастниками" Тогда 
			Элементы.ВыполнитьЗадачуПервая.Видимость = Ложь;
			Элементы.ВыполнитьЗадачуВторая.Видимость = Истина;
			Элементы.ВыполнитьЗадачуВторая.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
			Элементы.ВыполнитьЗадачуТретья.Видимость = Истина;
			
		КонецЕсли;
		
		Элементы.ГруппаПриглашение.Видимость = Истина;
		Элементы.Исполнители.Видимость = Истина;
		Элементы.Исполнители.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элементы.ИсполнителиИсполнитель.Заголовок = НСтр("ru='Участник'");
		Элементы.ИсполнителиРезультат.Видимость = Истина;
		Элементы.ИсполнителиЯвкаОбязательна.Видимость = Истина;
		Элементы.ИсполнителиДатаИсполнения.Видимость = Ложь;
		Элементы.РезультатВыполнения.Видимость = Ложь;
		Элементы.РезультатВыполненияСкрытый.Видимость = Истина;
		
		//заполнение листа приглашения
		Для каждого СтрокаРезультата из ЗадачаОбъект.invitationResults Цикл
			СтрИсполнения = Исполнители.Добавить();
			СтрИсполнения.РезультатВыполнения = СтрокаРезультата.invitationComment;
			СтрИсполнения.ДатаОтвета = СтрокаРезультата.invitationDate;
			СтрИсполнения.КартинкаСостояния = 1;
			ЗаполнитьДанныеАдресации(СтрИсполнения, СтрокаРезультата.invitationPerformer);
			ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(СтрИсполнения,СтрокаРезультата.invitationResult,"Результат");
			СтрИсполнения.ЯвкаОбязательна =  СтрокаРезультата.invitationPerformer.attendanceCompulsory;
		КонецЦикла;
		
		Если НомерИтерации <= 1 Тогда 
			Элементы.НомерИтерацииПриглашения.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли ЭтоТочкаМаршрута("Оповестить") Тогда
		
		Элементы.ГруппаМестоВремя.Видимость = Истина;
		Элементы.ГруппаПриглашение.Видимость = Истина;
		Элементы.ГруппаКомандыВыполнения.Видимость = ДоступноВыполнение;
		
		ДатаНачала = ЗадачаОбъект.activityBegin;
		ДатаОкончания = ЗадачаОбъект.activityEnd;
		МестоПроведения = ЗадачаОбъект.activityVenue;
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ЗадачаОбъект.invitationResult, "Результат");
		
		Если Выполнена Тогда
			Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru = 'Ознакомился.'");
			Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		КонецЕсли;
		
		// результат приглашения
		Если РезультатID = "ПринятоВсемиУчастниками"
			Или РезультатID = "ПринятоОбязательнымиУчастниками" Тогда 
			Результат = "Приглашение подтверждено с указанным местом и временем";
			Элементы.РезультатПриглашения.ЦветТекста = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
		Иначе
			Результат = "Приглашение отменено с указанным местом и временем";
			Элементы.РезультатПриглашения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
		КонецЕсли;
		
		Если НомерИтерации <= 1 Тогда 
			Элементы.НомерИтерацииПриглашения.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИнформмациюОНедоступностиВыполненияЗадачи()
	
	Элементы.ГруппаКомандыВыполнения.Видимость = Ложь;
	Элементы.ТекстРезультатаВыполнения.Видимость = Истина;
	Элементы.ДекорацияВнимание.Видимость = Истина;
	
	Элементы.ТекстРезультатаВыполнения.Заголовок = НСтр("ru='Выполнение задач такого типа не поддерживается в данной версии 1С:Документооборота.'");
	Элементы.ТекстРезультатаВыполнения.ЦветТекста = ЦветаСтиля.ОтметкаОтрицательногоВыполненияЗадачи;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИмяШаблонаПоТипуШаблона(СтрокаЭтапа)
	
	Дополнение = "";
	Если СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessOrderTemplate"	Тогда Дополнение = НСтр("ru = 'Поручение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessConsiderationTemplate" Тогда Дополнение = НСтр("ru = 'Рассмотрение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessRegistrationTemplate" Тогда Дополнение = НСтр("ru = 'Регистрация'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessApprovalTemplate" 	Тогда Дополнение = НСтр("ru = 'Согласование'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessConfirmationTemplate" Тогда Дополнение = НСтр("ru = 'Утверждение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessPerformanceTemplate" 	Тогда Дополнение = НСтр("ru = 'Исполнение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessAcquaintanceTemplate" Тогда Дополнение = НСтр("ru = 'Ознакомление'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMCompoundBusinessProcessTemplate" 	Тогда Дополнение = НСтр("ru = 'Составной процесс'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMComplexBusinessProcessTemplate" 		Тогда Дополнение = НСтр("ru = 'Комплексный процесс'");
	КонецЕсли;
	Если Не ПустаяСтрока(Дополнение) Тогда
		СтрокаЭтапа.ШаблонБизнесПроцесса = Дополнение + ": " + СтрокаЭтапа.ШаблонБизнесПроцесса;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ПроверитьРегистрациюПредмета()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, ПредметТип, ПредметID);
	ОбъектXDTO = Ответ.objects[0];
	
	Если ЗначениеЗаполнено(ОбъектXDTO.regNumber) И ЗначениеЗаполнено(ОбъектXDTO.regDate) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуЗадачи(СтрокаЗадачи,Задача)
	
	ЗаполнитьДанныеАдресации(СтрокаЗадачи, Задача.performer);
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,Задача,"Задача");
	СтрокаЗадачи.СрокИсполнения = Задача.dueDate;
	СтрокаЗадачи.РезультатВыполнения = Задача.executionComment;
	СтрокаЗадачи.ДатаИсполнения = Задача.endDate;
	СтрокаЗадачи.Выполнена = Задача.executed;
	СтрокаЗадачи.ТочкаМаршрута = Задача.businessProcessStep;
	СтрокаЗадачи.КартинкаСостояния = ?(СтрокаЗадачи.Выполнена,1,0);
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьЗадачиБизнесПроцесса(Прокси)
	
	Запрос = СоздатьОбъект(Прокси, "DMGetTasksTreeRequest");
	Отбор = СоздатьОбъект(Прокси, "DMGetTasksTreeQuery");
	ОбъектXDTO = СоздатьОбъект(Прокси,"DMObject");
	ОбъектXDTO.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ПроцессID, ПроцессТип);
	ОбъектXDTO.name = Процесс;
	
	Отбор.businessProcess.Добавить(ОбъектXDTO);
	
	Запрос.query = Отбор;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.businessProcesses[0].tasks;
	
КонецФункции

&НаСервере 
Процедура ДополнитьИмяПредметаПоТипуОбъекта(ИмяПредмета, ТипОбъекта)
	
	Если ТипОбъекта = "DMInternalDocument" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Внутренний документ)'");
	ИначеЕсли ТипОбъекта = "DMIncomingDocument" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Входящий документ)'");
	ИначеЕсли ТипОбъекта = "DMOutgoingDocument" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Исходящий документ)'");
	ИначеЕсли ТипОбъекта = "DMFile" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Файл)'");
	ИначеЕсли ТипОбъекта = "DMActivity" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Мероприятие)'");
	ИначеЕсли ТипОбъекта = "DMIncomingEMail" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Входящее письмо)'");
	ИначеЕсли ТипОбъекта = "DMOutgoingEMail" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Исходящее письмо)'");
	ИначеЕсли ТипОбъекта = "DMProject" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Проект)'");
	ИначеЕсли ТипОбъекта = "DMProjectTask" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Проектная задача)'");
	ИначеЕсли ТипОбъекта = "DMDiscussionMessage" Тогда
		ИмяПредмета = ИмяПредмета + Нстр("ru=' (Сообщение)'");
	ИначеЕсли Лев(ТипОбъекта, 2) <> "DM" Тогда
		КлассТип = ИнтеграцияС1СДокументооборот.РазложитьСтрокуВМассивПодстрок(ТипОбъекта,".");
		Если Найти(КлассТип[0],"Документ") <> 0 Тогда
			КлассТип[0] = "Документы";
		ИначеЕсли Найти(КлассТип[0],"Справочник") <> 0 Тогда
			КлассТип[0] = "Справочники";
		ИначеЕсли Найти(КлассТип[0],"БизнесПроцесс") <> 0 Тогда
			КлассТип[0] = "БизнесПроцессы";
		ИначеЕсли Найти(КлассТип[0],"Задача") <> 0 Тогда
			КлассТип[0] = "Задачи";
		КонецЕсли;
		ИмяПредмета = ИмяПредмета + " (" + Метаданные[КлассТип[0]][КлассТип[1]].Синоним + ")";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьПризнакЗадачаПросрочена()
	Если СрокИсполнения < ТекущаяДата() И СрокИсполнения <> '00010101000000' Тогда 
		ЗадачаПросрочена = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура УстановитьОформлениеЗадач(Знач УсловноеОформление) Экспорт

	// установка оформления для просроченных задач
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнители.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнители.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = КонецДня(ТекущаяДатаСеанса());
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнители.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ИсполнителиСрокИсполнения");
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этапы.СрокВыполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этапы.СрокВыполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДата();
	ЭлементОтбораДанных.Использование = Истина;
		
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Этапы.ЗапущенныйБизнесПроцессID");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЭтапыШаблонБизнесПроцесса");
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРаботыСФайлами()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.СсылкаТип = "DMFile" Тогда
			Элементы.ОткрытьДляПросмотра.Доступность = Истина;
		Иначе
			Элементы.ОткрытьДляПросмотра.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьУчастникаБизнесПроцесса(Прокси, ОбъектXDTO, Форма, ИмяРеквизита, ИмяРеквизитаАдресации)
	
	Если ЗначениеЗаполнено(Форма[ИмяРеквизита]) Тогда 
		ОбъектXDTO = СоздатьОбъект(Прокси, "DMBusinessProcessTaskExecutor");
		Если Форма[ИмяРеквизита + "Тип"] = "DMUser" Тогда
			ЗаполнитьXDTOПоОбъектномуРеквизиту(Прокси, ИмяРеквизита, "user", ОбъектXDTO);
		Иначе
			ЗаполнитьXDTOПоОбъектномуРеквизиту(Прокси, ИмяРеквизита, "role", ОбъектXDTO);
			
			Если ЗначениеЗаполнено(Форма["Основной" + ИмяРеквизитаАдресации]) Тогда
				ЗаполнитьXDTOПоОбъектномуРеквизиту(Прокси, "Основной" + ИмяРеквизитаАдресации,
					"mainAddressingObject", ОбъектXDTO);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Форма["Дополнительный" + ИмяРеквизитаАдресации]) Тогда
				ЗаполнитьXDTOПоОбъектномуРеквизиту(Прокси, "Дополнительный" + ИмяРеквизитаАдресации,
					"secondaryAddressingObject", ОбъектXDTO);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДанныеАдресации(Приемник, ИсполнительXDTO)
	
	Если ИсполнительXDTO.Установлено("user") Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.user,"Исполнитель")
	ИначеЕсли ИсполнительXDTO.Установлено("role") Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.role,"Исполнитель")
	КонецЕсли;
	
	Если ИсполнительXDTO.Установлено("mainAddressingObject") Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.mainAddressingObject, "ОсновнойОбъектАдресации")
	КонецЕсли;
	Если ИсполнительXDTO.Установлено("secondaryAddressingObject") Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Приемник, ИсполнительXDTO.secondaryAddressingObject, "ДополнительныйОбъектАдресации")
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьXDTOПоОбъектномуРеквизиту(Прокси, ИмяРеквизита, ИмяСвойстваОбъекта, ОбъектXDTO)
	
	СвойствоОбъекта = СоздатьОбъект(Прокси, ЭтаФорма[ИмяРеквизита+"Тип"]);
	СвойствоОбъекта.name = ЭтаФорма[ИмяРеквизита];
	СвойствоОбъекта.ObjectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ЭтаФорма[ИмяРеквизита+"ID"], ЭтаФорма[ИмяРеквизита+"Тип"]); 
	
	ОбъектXDTO[ИмяСвойстваОбъекта] = СвойствоОбъекта;
	
КонецПроцедуры

&НаСервере
Функция СоздатьОбъект(Прокси, Тип)
	
	Возврат ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Тип);
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьЗадачуОповеститьЗакрытьФорму(НомерКнопки)
	 
	Если ИзменитьЗадачу(Истина, НомерКнопки) Тогда
		ПараметрыОповещения = Новый Структура("id", ПроцессID);
		Оповестить("Запись_ДокументооборотБизнесПроцесс", ПараметрыОповещения, ВладелецФормы);
		ПараметрыОповещения = Новый Структура("name, id, type", Наименование, ID, Тип);
		Оповестить("Запись_ДокументооборотЗадача", ПараметрыОповещения, ВладелецФормы);
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзменитьЗадачу(ВыполнитьЗадачу = Ложь, НомерКнопки = 1) Экспорт
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ПроцессXDTO = СоздатьОбъект(Прокси, ПроцессТип);
	ПроцессXDTO.name = Процесс;
	ПроцессXDTO.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ПроцессID, ПроцессТип);
	
	Задача = СоздатьОбъект(Прокси, Тип);
	
	Задача.executed = ?(ВыполнитьЗадачу = Истина, ВыполнитьЗадачу, Выполнена);
	Задача.parentBusinessProcess = ПроцессXDTO;
	Задача.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	Задача.name = Наименование;
    Задача.number = Номер;
	Задача.description = Описание;
	Задача.beginDate = Дата;
	Задача.dueDate = СрокИсполнения;
	Задача.endDate = ДатаИсполнения;
	Задача.executionComment = РезультатВыполнения;
	Задача.businessProcessStep = ТочкаМаршрута;
	ЗаполнитьXDTOПоОбъектномуРеквизиту(Прокси, "Важность","importance", Задача);
	
	ЗаполнитьСвойстваОбъектаПоТипуЗадачи(Прокси, Задача, НомерКнопки);
	
	СоздатьУчастникаБизнесПроцесса(Прокси, Задача.performer, ЭтаФорма, "Исполнитель", "ОбъектАдресации");
	
	Ответ = ИнтеграцияС1СДокументооборот.ЗаписатьОбъект(Прокси, Задача);
	
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Ответ, "DMError") Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСвойстваОбъектаПоТипуЗадачи(Прокси, Задача, НомерКнопки)
	
	ИмяТипа = Задача.Тип().Имя;
	
	Если ИмяТипа = "DMBusinessProcessOrderTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskApproval" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMApprovalResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Согласовано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "Согласовано", "DMApprovalResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Согласовано с замечаниями";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "СогласованоСЗамечаниями", "DMApprovalResult");
		ИначеЕсли НомерКнопки = 3 Тогда
			Ответ.name = "Не согласовано";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "НеСогласовано", "DMApprovalResult");
		КонецЕсли;
		Задача.approvalResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessApprovalTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskConfirmation" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMConfirmationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Утверждено";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "Утверждено", "DMConfirmationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Не утверждено";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "НеУтверждено", "DMConfirmationResult");
		КонецЕсли;
		Задача.confirmationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConfirmationTaskCheckup" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessPerfomanceTaskCheckup" Тогда
		Задача.iterationNumber = НомерИтерации;
		Для каждого Строка из Исполнители Цикл
			СтрокаXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMBusinessProcessPerfomanceTaskCheckupResult");
            СтрокаXDTO.returned = Строка.ОтправленоНаДоработку;
			СтрокаXDTO.checkComment = Строка.КомментарийПроверяющего;
			ЗадачаИсточник = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Строка.ЗадачаТип, Строка.ЗадачаID);
			ЗадачаПриемник = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMBusinessProcessTask");
			ИнтеграцияС1СДокументооборот.ЗаполнитьЗначенияСвойствXDTO(Прокси, ЗадачаПриемник, ЗадачаИсточник.objects[0]);
			СтрокаXDTO.executorTask = ЗадачаПриемник;
			Задача.checkResults.Добавить(СтрокаXDTO);
		КонецЦИкла
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessConsiderationTaskAcquaint" Тогда
		Задача.resolution = Резолюция;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessIssuesSolutionTaskAnswer" Тогда
		Задача.returned = ?(НомерКнопки = 1, Ложь, Истина);
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskInvitation" Тогда
		Ответ = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси,"DMInvitationResult");
		Если НомерКнопки = 1 Тогда
			Ответ.name = "Принято";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "Принято", "DMInvitationResult");
		ИначеЕсли НомерКнопки = 2 Тогда
			Ответ.name = "Не принято";
			Ответ.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "НеПринято", "DMInvitationResult");
		КонецЕсли;
		Задача.invitationResult = Ответ;
		
	ИначеЕсли ИмяТипа = "DMBusinessProcessInvitationTaskAcquaint" Тогда
		Если НомерКнопки = 1 Тогда
			Задача.accepted = Истина;
		ИначеЕсли НомерКнопки = 2 Тогда
			Задача.returned = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияЗаписьДокумента(Параметр)
	
	МассивОбъектов = новый Массив;
	МассивКолонок = новый Массив;
	
	МассивОбъектов.Добавить(новый Структура("id, type",Параметр.id, Параметр.type));
	Если Найти(Параметр.type,"Document") <> 0 Тогда
		МассивКолонок.Добавить("files");
		МассивКолонок.Добавить("externalObject");
	ИначеЕсли Параметр.type = "DMFile" Тогда
		МассивКолонок.Добавить("extension");
		МассивКолонок.Добавить("modificationDateUniversal");
		МассивКолонок.Добавить("size");
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъекты(Прокси, МассивОбъектов, МассивКолонок);
	
	ПредметОбъект = Ответ.objects[0];
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ПредметОбъект, "Предмет");
	
	ЗаполнитьДеревоПриложений(ПредметОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПринятьЗадачуКИсполнениюНаСервере()
	
	ЗадачиКИсполнению = новый Массив;
	ЗадачиКИсполнению.Добавить(ID);
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Возврат ИнтеграцияС1СДокументооборотВызовСервера.ПринятьЗадачуКИсполнению(Прокси, ЗадачиКИсполнению);
	
КонецФункции