
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ВнешнийОбъект = Параметры.ВнешнийОбъект;
	МетаданныеПотребителя = Параметры.ВнешнийОбъект.Метаданные();
	ИмяПотребителя = ?(МетаданныеПотребителя.Синоним <> "", МетаданныеПотребителя.Синоним, МетаданныеПотребителя.Имя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТипОбъектаДокументооборота
		|ИЗ
		|	Справочник.НастройкиЗаполненияОбъектов1СДокументооборота
		|ГДЕ
		|	ТипОбъектаПотребителя = &ТипОбъектаПотребителя
		|	И Не ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТипОбъектаПотребителя", Параметры.ВнешнийОбъект.Метаданные().ПолноеИмя());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ТипОбъектаНастройки = Выборка.ТипОбъектаДокументооборота;
		Если ТипОбъектаНастройки = "DMIncomingDocument" Тогда 
			Элементы.ДекорацияДокументСоздать.Заголовок = Элементы.ДекорацияДокументСоздать.Заголовок + НСтр("ru = ' входящий документ'");
		ИначеЕсли ТипОбъектаНастройки = "DMOutgoingDocument" Тогда 
			Элементы.ДекорацияДокументСоздать.Заголовок = Элементы.ДекорацияДокументСоздать.Заголовок + НСтр("ru = ' исходящий документ'");
		ИначеЕсли ТипОбъектаНастройки = "DMInternalDocument" Тогда 	
			Элементы.ДекорацияДокументСоздать.Заголовок = Элементы.ДекорацияДокументСоздать.Заголовок + НСтр("ru = ' внутренний документ'");
		КонецЕсли;
		Элементы.ГруппаИнфо.Видимость = Ложь;
	Иначе	
		Элементы.ДекорацияДокументСоздать.Заголовок = Элементы.ДекорацияДокументСоздать.Заголовок + НСтр("ru = ' новый документ'");
		Элементы.ДекорацияИнфо.Заголовок = НСтр("ru = 'Не настроено заполнение документа 1С:Документооборота из '''") + ИмяПотребителя + НСтр("ru = ''''");
	КонецЕсли;
	
	Элементы.ПоказыватьВыполненные.Видимость = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2");
	ДоступноВыполнениеЗадач = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2");
	ДоступныКомплексныеПроцессы = ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2");
	
	ПолучитьДанныеДокумента();
	
	ОбновитьДекорацииДокумента();
	
	Если НЕ БизнесПроцессыЗаполнены Тогда
		ЗагрузитьДеревоБизнесПроцессовИЗадач();
		//условное оформление
		УстановитьУсловноеОформлениеДерева();
		БизнесПроцессыЗаполнены = Истина;
	КонецЕсли;
	
	Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		Элементы.ГруппаИсторияПереписки.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьДеревоСвязанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотДокумент" И Источник = Элементы.ДекорацияДокумент Тогда 
		ДокументID = Параметр.id;
		ДокументТип = Параметр.type;
		Документ = Параметр.name;
		ДополнитьПредставлениеДокумента(Документ, ДокументТип);
		ОбновитьДекорацииДокумента();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДокументооборотДокумент" И Источник = Элементы.СписокДокументов Тогда 
		СвязанныйДокументID = Параметр.id;
		СвязанныйДокументТип = Параметр.type;
		
		ЗаполнитьДанныеСвязанныхДокументов();
		РазвернутьДеревоСвязанных();
		
		Для Каждого СтрокаТипСвязи Из СписокДокументов.ПолучитьЭлементы() Цикл
			Для Каждого СтрокаСвязанныйДокумент Из СтрокаТипСвязи.ПолучитьЭлементы() Цикл 
				Если СтрокаСвязанныйДокумент.ID = СвязанныйДокументID И СтрокаСвязанныйДокумент.Тип = СвязанныйДокументТип Тогда 
					Элементы.СписокДокументов.ТекущаяСтрока = СтрокаСвязанныйДокумент.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДокументооборотБизнесПроцесс" Тогда
		РаскрытыеЭлементы = Новый СписокЗначений;
		ПолучитьМассивРаскрытыхЭлементов(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), РаскрытыеЭлементы);
		РаскрытыеЭлементы.Добавить(Параметр.ID);
		ЗагрузитьДеревоБизнесПроцессовИЗадач();
		УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, РаскрытыеЭлементы);
		УстановитьТекущийЭлементВДереве(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, Параметр.ID);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		ОбновитьСписокФайловКлиент();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДокументооборотИсходящееПисьмо" Тогда
		Если Источник = ЭтаФорма Тогда
			ПолучитьЗаполнитьДеревоПисем();
			РазвертнутьДеревоПисем();
		ИначеЕсли ЗначениеЗаполнено(Параметр) Тогда
			Если Параметр.ПредметID = ДокументID Тогда
				ПолучитьЗаполнитьДеревоПисем();
				РазвертнутьДеревоПисем();
			ИначеЕсли ПисьмоЕстьВСписке(Параметр.ПисьмоОснованиеID) Тогда
				ПолучитьЗаполнитьДеревоПисем();
				РазвертнутьДеревоПисем();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПоказыватьВыполненныеПриИзменении(Элемент)
	
	РаскрытыеЭлементы = Новый СписокЗначений;
	ПолучитьМассивРаскрытыхЭлементов(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), РаскрытыеЭлементы);
	ЗагрузитьДеревоБизнесПроцессовИЗадач();
	УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, РаскрытыеЭлементы); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДокументСоздатьНажатие(Элемент)
	
	Если ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ВнешнийОбъект);
	
	Если ЗначениеЗаполнено(ТипОбъектаНастройки) Тогда
		Если ТипОбъектаНастройки = "DMIncomingDocument" Тогда 
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВходящийДокумент", ПараметрыФормы, Элементы.ДекорацияДокумент);
		ИначеЕсли ТипОбъектаНастройки = "DMOutgoingDocument" Тогда 
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящийДокумент", ПараметрыФормы, Элементы.ДекорацияДокумент);
		ИначеЕсли ТипОбъектаНастройки = "DMInternalDocument" Тогда 
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент", ПараметрыФормы, Элементы.ДекорацияДокумент);
		КонецЕсли;
	Иначе
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить("DMIncomingDocument",  "Входящий документ");
		СписокВыбора.Добавить("DMOutgoingDocument",  "Исходящий документ");
		СписокВыбора.Добавить("DMInternalDocument",  "Внутренний документ");
		
		ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Укажите тип документа");
		Если ВыбранныйЭлемент <> Неопределено Тогда 
			Если ВыбранныйЭлемент.Значение = "DMIncomingDocument" Тогда 
				ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВходящийДокумент", ПараметрыФормы, Элементы.ДекорацияДокумент);
			ИначеЕсли ВыбранныйЭлемент.Значение = "DMOutgoingDocument" Тогда 
				ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящийДокумент", ПараметрыФормы, Элементы.ДекорацияДокумент);
			ИначеЕсли ВыбранныйЭлемент.Значение = "DMInternalDocument" Тогда 
				ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент", ПараметрыФормы, Элементы.ДекорацияДокумент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДокументВыбратьНажатие(Элемент)
	
	СтарыйID = ДокументID;
	СтарыйТип = ДокументТип;
	СтароеПредставление = Документ;
	
	Если ЗначениеЗаполнено(Документ) Тогда 
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вы действительно хотите заменить документ, соответствующий
						|%1?'"),Строка(Параметры.ВнешнийОбъект));
			
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("DMIncomingDocument",  "Входящий документ");
	СписокВыбора.Добавить("DMOutgoingDocument",  "Исходящий документ");
	СписокВыбора.Добавить("DMInternalDocument",  "Внутренний документ");
	
	ВыбранныйЭлемент = СписокВыбора.ВыбратьЭлемент("Укажите тип документа");
	Если ВыбранныйЭлемент <> Неопределено Тогда
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(ВыбранныйЭлемент.Значение, "Документ", ЭтаФорма);
		ОбработатьВыборДокумента(СтарыйID, СтарыйТип);
		РазвернутьДеревоСвязанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборДокумента(СтарыйID, СтарыйТип)
	
	ИзменитьДокументТекущегоОбъекта(СтарыйID, СтарыйТип);
	
	ЗагрузитьДеревоБизнесПроцессовИЗадач();
	Если ЗначениеЗаполнено(Документ) Тогда 
		ОбновитьДекорацииДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДокументНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ВнешнийОбъект);
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ДокументТип, ДокументID, Элемент, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДокументОчиститьНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Вы действительно хотите очистить соответствие для
					|%1?'"),Строка(Параметры.ВнешнийОбъект));
	
	Режим = новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Очистить'"));
	Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не очищать'"));
	
	Ответ = Вопрос(ТекстВопроса, Режим, ,КодВозвратаДиалога.Нет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	УдалитьСвязьНаСервере();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаФайлы Тогда
		Если НЕ ФайлыЗаполнены Тогда
			ЗаполнитьДанныеФайлов();
			ФайлыЗаполнены = Истина;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаСвязанныеДокументы Тогда
		Если НЕ ДокументыЗаполнены Тогда
			ЗаполнитьДанныеСвязанныхДокументов();
			РазвернутьДеревоСвязанных();
			ДокументыЗаполнены = Истина;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.ГруппаИсторияПереписки Тогда
		Если НЕ ПисьмаЗаполнены Тогда
			ПолучитьЗаполнитьДеревоПисем();
			РазвертнутьДеревоПисем();
			ПисьмаЗаполнены = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ДЕРЕВО БИЗНЕС ПРОЦЕССОВ И ЗАДАЧ"

&НаКлиенте
Процедура ДеревоБизнесПроцессовИЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьКарточкуВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоБизнесПроцессовИЗадачПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьКарточкуВыполнить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "СПИСОК ДОКУМЕНТОВ"

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуСвязанногоДокумента(ТекущиеДанные.Тип, ТекущиеДанные.ID);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуСвязанногоДокумента(ТекущиеДанные.Тип, ТекущиеДанные.ID);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокДокументов.ТекущиеДанные = Неопределено Тогда 
		Элементы.СписокДокументовСоздатьБизнесПроцессСвязанныйДокумент.Доступность = Ложь;
		Элементы.ИзменитьСвязанный.Доступность = Ложь;
		Элементы.СписокДокументовИзменитьСвязанный.Доступность = Ложь;
		Элементы.СписокДокументовГруппаУдалить.Доступность = Ложь;
	Иначе	
		Тип = Элементы.СписокДокументов.ТекущиеДанные.Тип;
		Если Тип = "DMIncomingDocument" Или Тип = "DMOutgoingDocument" Или Тип = "DMInternalDocument" Тогда 
			Элементы.СписокДокументовСоздатьБизнесПроцессСвязанныйДокумент.Доступность = Истина;
			Элементы.ИзменитьСвязанный.Доступность = Истина;
			Элементы.СписокДокументовИзменитьСвязанный.Доступность = Истина;
			Элементы.СписокДокументовГруппаУдалить.Доступность = Истина;
		Иначе
			Элементы.СписокДокументовСоздатьБизнесПроцессСвязанныйДокумент.Доступность = Ложь;
			Элементы.ИзменитьСвязанный.Доступность = Ложь;
			Элементы.СписокДокументовИзменитьСвязанный.Доступность = Ложь;
			Элементы.СписокДокументовГруппаУдалить.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "СПИСОК ФАЙЛОВ"

&НаКлиенте
Процедура СписокФайловПриАктивизацииСтроки(Элемент)
	ОбновитьДоступностьКомандСпискаФайлов();
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаВопроса = "";
	
	Если Элементы.СписокФайлов.ВыделенныеСтроки.Количество() = 1 Тогда
		СтрокаВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Пометить ""%1"" на удаление?'"), Элементы.СписокФайлов.ТекущиеДанные.Наименование);
	Иначе			
		СтрокаВопроса = НСтр("ru='Пометить выделенные элементы на удаление?'");
	КонецЕсли;
	
	Ответ = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдаление(Элементы.СписокФайлов.ВыделенныеСтроки);
	// обновить список
	ОбновитьСписокФайловКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	СоздатьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	МассивИменФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда
					МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
	ИдентификаторСозданногоФайла = Неопределено;
	Для Каждого ИмяФайла Из МассивИменФайлов Цикл
		ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеКлиент(ИмяФайла);
	КонецЦикла;
	
	// обновить список
	ОбновитьСписокФайловКлиент();
			
	Если МассивИменФайлов.Количество() = 1 И ИдентификаторСозданногоФайла <> Неопределено Тогда
		// открыть карточку файла
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект("DMFile", ИдентификаторСозданногоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьКарточкуФайлаВыполнить();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ИСТОРИЯ ПЕРЕПИСКИ"

&НаКлиенте
Процедура ДеревоПисемВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = ДеревоПисем.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ТекущаяСтрока.ПисьмоТип, ТекущаяСтрока.ПисьмоID, ЭтаФорма);
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

/////////////////////////////
// ПРОЦЕССЫ И ЗАДАЧИ

&НаКлиенте
Процедура ОткрытьКарточкуПроцессаЗадачи(Команда)
	
	ОткрытьКарточкуВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБизнесПроцесс(Команда)
	
	ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцесс(ВнешнийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокБизнесПроцессовИЗадач(Команда)
	
	РаскрытыеЭлементы = Новый СписокЗначений;
	ПолучитьМассивРаскрытыхЭлементов(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), РаскрытыеЭлементы);
	ЗагрузитьДеревоБизнесПроцессовИЗадач();
	УстановитьРазвернутостьЭлементовДерева(Элементы.ДеревоБизнесПроцессовИЗадач, ДеревоБизнесПроцессовИЗадач, РаскрытыеЭлементы); 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБизнесПроцессОсновнойДокумент(Команда)
		
	ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцессПоДокументуИзДО(ДокументID, ДокументТип);
	
КонецПроцедуры

/////////////////////////////
// ДОКУМЕНТЫ

&НаКлиенте
Процедура ИзменитьСвязанный(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВнешнийОбъект", Параметры.ВнешнийОбъект);
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		ТекущиеДанные.Тип, ТекущиеДанные.ID, Элементы.СписокДокументов, ПараметрыФормы);  

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязь(Команда)
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Тип = ТекущиеДанные.Тип;
	ID = ТекущиеДанные.ID;
	
	Если Тип = "DMIncomingDocument" Или Тип = "DMOutgoingDocument" Или Тип = "DMInternalDocument" Тогда 
		
		ДокументСтруктура = Новый Структура;
		ДокументСтруктура.Вставить("РеквизитID", ДокументID);
		ДокументСтруктура.Вставить("РеквизитТип", ДокументТип);
		ДокументСтруктура.Вставить("РеквизитПредставление", Документ);
		
		СвязанныйДокументСтруктура = Новый Структура;
		СвязанныйДокументСтруктура.Вставить("РеквизитID", ТекущиеДанные.ID);
		СвязанныйДокументСтруктура.Вставить("РеквизитТип", ТекущиеДанные.Тип);
		СвязанныйДокументСтруктура.Вставить("РеквизитПредставление", ТекущиеДанные.Заголовок);
		
		НайденнаяСтрока = СписокДокументов.НайтиПоИдентификатору(Элементы.СписокДокументов.ТекущаяСтрока);
		Родитель = НайденнаяСтрока.ПолучитьРодителя();
		
		ТипСвязиСтруктура = Новый Структура;
		ТипСвязиСтруктура.Вставить("РеквизитID", Родитель.ID);
		ТипСвязиСтруктура.Вставить("РеквизитТип", Родитель.Тип);
		ТипСвязиСтруктура.Вставить("РеквизитПредставление", Родитель.Заголовок);
		
		ОтсоединитьСвязанныйДокументНаСервере(ДокументСтруктура, ТипСвязиСтруктура, СвязанныйДокументСтруктура);
		РазвернутьДеревоСвязанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанный(Команда)
	
	УдалитьСвязанныйНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвязанные(Команда)
	
	Если ЗначениеЗаполнено(Документ) Тогда 
		ЗаполнитьДанныеСвязанныхДокументов();
		РазвернутьДеревоСвязанных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязанныйВнутренний(Команда)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	СоздатьСвязанныйДокумент("DMInternalDocument");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязанныйВходящий(Команда)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	СоздатьСвязанныйДокумент("DMIncomingDocument");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязанныйИсходящий(Команда)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	СоздатьСвязанныйДокумент("DMOutgoingDocument");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьСвязанныйВнутренний(Команда)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	ПрисоединитьСвязанныйДокумент("DMInternalDocument");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьСвязанныйВходящий(Команда)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	ПрисоединитьСвязанныйДокумент("DMIncomingDocument");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьСвязанныйИсходящий(Команда)
	
	Если Не ЗначениеЗаполнено(Документ) Тогда 
		Возврат;
	КонецЕсли;
	
	ПрисоединитьСвязанныйДокумент("DMOutgoingDocument");
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаНажатие(Элемент)
	
	ТекстПредупреждения = 
		НСтр("ru = 'Для настройки правил автоматического заполнения документов 1С:Документооборота обратитесь к Администратору.'");
		
	Предупреждение(ТекстПредупреждения);
		
КонецПроцедуры

////////////////////////////
// ФАЙЛЫ

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ОткрытьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайл(Команда)
	СоздатьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.ID;
	Расширение = Элементы.СписокФайлов.ТекущиеДанные.Расширение;
	Имя = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Размер = Элементы.СписокФайлов.ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = Элементы.СписокФайлов.ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	ИнтеграцияС1СДокументооборотКлиент.СохранитьКак(ИдентификаторФайла, Расширение, Имя, 
		Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьСписокФайловКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.ID;
	Если ИнтеграцияС1СДокументооборотКлиент.ОбновитьИзФайлаНаДиске(ИдентификаторФайла, УникальныйИдентификатор) Тогда
		ОбновитьСписокФайловКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.ID;
	ИмяФайла = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Описание = Элементы.СписокФайлов.ТекущиеДанные.Описание;
	Редактируется = Элементы.СписокФайлов.ТекущиеДанные.Редактируется;
	Зашифрован = Элементы.СписокФайлов.ТекущиеДанные.Зашифрован;
	
	МассивСуществующихПодписейФайла = ИнтеграцияС1СДокументооборотКлиент.ПолучитьМассивСуществующихПодписейФайла(
		ИдентификаторФайла, Элементы.СписокФайлов.ТекущиеДанные.ТаблицаПодписей);
	
	ИнтеграцияС1СДокументооборотКлиент.ПодписатьФайл(ИдентификаторФайла, ИмяФайла, Редактируется, Зашифрован,
		Описание, МассивСуществующихПодписейФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭЦПИзФайла(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.ID;
	ИмяФайла = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Описание = Элементы.СписокФайлов.ТекущиеДанные.Описание;
	
	МассивСуществующихПодписейФайла = ИнтеграцияС1СДокументооборотКлиент.ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, Элементы.СписокФайлов.ТекущиеДанные.ТаблицаПодписей);
	
	ИнтеграцияС1СДокументооборотКлиент.ДобавитьЭЦПИзФайла(ИдентификаторФайла, ИмяФайла, УникальныйИдентификатор,
		Описание, МассивСуществующихПодписейФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭЦП(Команда)
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.ID;
	Расширение = Элементы.СписокФайлов.ТекущиеДанные.Расширение;
	Имя = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Размер = Элементы.СписокФайлов.ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = Элементы.СписокФайлов.ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	ИнтеграцияС1СДокументооборотКлиент.СохранитьВместеСЭЦП(ИдентификаторФайла, Расширение, Имя, 
		Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
	
КонецПроцедуры

///////////////////////////////////////
// ПИСЬМА

&НаКлиенте
Процедура ОбновитьПисьма(Команда)
	ПолучитьЗаполнитьДеревоПисем();
	РазвертнутьДеревоПисем();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПисьмо(Команда)
	ТекущаяСтрока = Элементы.ДеревоПисем.ТекущиеДанные;
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ТекущаяСтрока.ПисьмоТип, ТекущаяСтрока.ПисьмоID, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)
	
	ПараметрыФормы = новый Структура("Предмет", новый Структура);
	
	ПараметрыФормы.Предмет.Вставить("name", Документ);
	ПараметрыФормы.Предмет.Вставить("id", ДокументID);
	ПараметрыФормы.Предмет.Вставить("type", ДокументТип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо",ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

/////////////////////////////
// ПРОЦЕССЫ И ЗАДАЧИ

&НаСервере
Процедура УстановитьУсловноеОформлениеДерева()
	
	Если ЭтаФорма.УсловноеОформление.Элементы.Количество() = 3 Тогда
		ЭлементДляУдаления = ЭтаФорма.УсловноеОформление.Элементы[2];
		ЭтаФорма.УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
	КонецЕсли;
	
	ЭлементУсловногоОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.Выполнено");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадач.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
	ЭлементОтбораДанных.Использование = Истина;
	
	НовыйЭлемент = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадачНаименование");
	
	НовыйЭлемент = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных("ДеревоБизнесПроцессовИЗадачСрокИсполнения");
		
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоЗадачИзОтветаВебСервиса(СтрокиДереваЗадач, СтрокиОтвета)
		
	Для Каждого ОднаСтрокаОтвета Из СтрокиОтвета Цикл
		Важность = 1;
		Если ОднаСтрокаОтвета.importance.objectId.id = "Низкая" Тогда
			Важность = 0;
		ИначеЕсли ОднаСтрокаОтвета.importance.objectId.id = "Обычная" Тогда
			Важность = 1;
		ИначеЕсли ОднаСтрокаОтвета.importance.objectId.id = "Высокая" Тогда 
			Важность = 2;
		КонецЕсли;
		Если Найти(ОднаСтрокаОтвета.objectId.type, "BusinessProcess") > 0
			И Найти(ОднаСтрокаОтвета.objectId.type, "Task") = 0 Тогда
			НоваяСтрока = СтрокиДереваЗадач.Добавить();
			НоваяСтрока.Важность = Важность;
			НоваяСтрока.Выполнено = ЗначениеЗаполнено(ОднаСтрокаОтвета.endDate);
			НоваяСтрока.Наименование = ОднаСтрокаОтвета.name;
			НоваяСтрока.ДатаНачала = ОднаСтрокаОтвета.beginDate;
			НоваяСтрока.Автор = ОднаСтрокаОтвета.author.name;
			НоваяСтрока.Тип = 0;
			НоваяСтрока.DMТип = ОднаСтрокаОтвета.objectId.type;
			НоваяСтрока.DMИд = ОднаСтрокаОтвета.objectId.id;
			ПостроитьДеревоЗадачИзОтветаВебСервиса(НоваяСтрока.Строки, ОднаСтрокаОтвета.tasks);
		ИначеЕсли Найти(ОднаСтрокаОтвета.objectId.type, "Task") > 0 Тогда
			Если ЭтоСлужебнаяЗадача(ОднаСтрокаОтвета) Тогда
				ПостроитьДеревоЗадачИзОтветаВебСервиса(СтрокиДереваЗадач, ОднаСтрокаОтвета.businessProcesses);
			Иначе	
				НоваяСтрока = СтрокиДереваЗадач.Добавить();
				НоваяСтрока.Важность = Важность;
				НоваяСтрока.Выполнено = ОднаСтрокаОтвета.executed;
				НоваяСтрока.Наименование = ОднаСтрокаОтвета.name;
				НоваяСтрока.СрокИсполнения = ОднаСтрокаОтвета.dueDate;
				НоваяСтрока.ДатаНачала = ОднаСтрокаОтвета.beginDate;
				Если ОднаСтрокаОтвета.performer.Установлено("user") Тогда
					НоваяСтрока.Исполнитель = ОднаСтрокаОтвета.performer.user.name;
				ИначеЕсли ОднаСтрокаОтвета.performer.Установлено("role") Тогда
					НоваяСтрока.Исполнитель = ОднаСтрокаОтвета.performer.role.name;
					Если ОднаСтрокаОтвета.performer.Установлено("mainAddressingObject") Тогда
						НоваяСтрока.Исполнитель = НоваяСтрока.Исполнитель + ", " + ОднаСтрокаОтвета.performer.mainAddressingObject.name;
					КонецЕсли;
					Если ОднаСтрокаОтвета.Performer.Установлено("secondaryAddressingObject") Тогда
						НоваяСтрока.Исполнитель = НоваяСтрока.Исполнитель + ", " + ОднаСтрокаОтвета.performer.secondaryAddressingObject.name;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.Тип = 1;
				НоваяСтрока.DMТип = ОднаСтрокаОтвета.objectId.type;
				НоваяСтрока.DMИд = ОднаСтрокаОтвета.objectId.id;
				НоваяСтрока.ТочкаМаршрута = ОднаСтрокаОтвета.businessProcessStep;
				ПостроитьДеревоЗадачИзОтветаВебСервиса(НоваяСтрока.Строки, ОднаСтрокаОтвета.businessProcesses);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуВыполнить()
	
	Если Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	ОбъектID = Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMИд;
	ОбъектТип = Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип;
	
	Если Найти(Элементы.ДеревоБизнесПроцессовИЗадач.ТекущиеДанные.DMТип, "Task") > 0 Тогда
		ПараметрыФормы = Новый Структура("id, type",ОбъектID ,ОбъектТип);
		Если ДоступноВыполнениеЗадач Тогда
			ФормаИмя = "Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача";
		Иначе
			ФормаИмя = "Обработка.ИнтеграцияС1СДокументооборот.Форма.КарточкаЗадачи";
		КонецЕсли;
		ОткрытьФорму(ФормаИмя, ПараметрыФормы, Элементы.ДеревоБизнесПроцессовИЗадач, ОбъектID);
	Иначе
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ОбъектТип, ОбъектID, Элементы.ДеревоБизнесПроцессовИЗадач);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДеревоБизнесПроцессовИЗадач()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetTasksTreeRequest");
	
	Запрос.query = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetTasksTreeQuery");
	
	Target = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Target.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	Target.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	Target.name = Строка(ВнешнийОбъект);

	Запрос.query.externalTarget.Добавить(Target);
	Если ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		Запрос.query.withExecuted = ПоказыватьВыполненные;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ДеревоЗадач = РеквизитФормыВЗначение("ДеревоБизнесПроцессовИЗадач", Тип("ДеревоЗначений"));
	ДеревоЗадач.Строки.Очистить();
	ПостроитьДеревоЗадачИзОтветаВебСервиса(ДеревоЗадач.Строки, Ответ.businessProcesses);
	ЗначениеВРеквизитФормы(ДеревоЗадач, "ДеревоБизнесПроцессовИЗадач");
    УстановитьУсловноеОформлениеДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьМассивРаскрытыхЭлементов(ДеревоЭлемент, МассивСтрокОдногоУровня, СписокРаскрытыхЭлементов)
	
	Для Каждого СтрокаОдногоУровня Из МассивСтрокОдногоУровня Цикл
		ИдЭлемента = СтрокаОдногоУровня.ПолучитьИдентификатор();
		Если ДеревоЭлемент.Развернут(ИдЭлемента) <> Неопределено 
			И ДеревоЭлемент.Развернут(ИдЭлемента) Тогда
			СписокРаскрытыхЭлементов.Добавить(СтрокаОдногоУровня.DMИд);
		КонецЕсли;
		ПолучитьМассивРаскрытыхЭлементов(ДеревоЭлемент, СтрокаОдногоУровня.ПолучитьЭлементы(), СписокРаскрытыхЭлементов);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРазвернутостьЭлементовДерева(ДеревоЭлемент, ДеревоРеквизит, СписокЭлементовДляРазвертывания)
	
	Если СписокЭлементовДляРазвертывания <> Неопределено Тогда
		Для Каждого ЭлементСписка Из СписокЭлементовДляРазвертывания Цикл
			Индекс = -1;
			НайтиЭлементВДереве(ДеревоБизнесПроцессовИЗадач.ПолучитьЭлементы(), ЭлементСписка.Значение, Индекс);
			Если Индекс > -1 Тогда
				Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьЭлементы().Количество() > 0 Тогда
					ДеревоЭлемент.Развернуть(ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Индекс).ПолучитьИдентификатор(), Ложь);
				Иначе
					Если ДеревоРеквизит.НайтиПоИдентификатору(Индекс).ПолучитьРодителя() <> Неопределено Тогда
						ДеревоЭлемент.Развернуть(ДеревоБизнесПроцессовИЗадач.НайтиПоИдентификатору(Индекс).ПолучитьРодителя().ПолучитьИдентификатор(), Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиЭлементВДереве(КоллекцияЭлементовОдногоУровня, ИскомыйЭлемент, Индекс) 
	
	Если КоллекцияЭлементовОдногоУровня.Количество() > 0 Тогда
		Для Каждого ЭлементДерева Из КоллекцияЭлементовОдногоУровня Цикл
			Если ЭлементДерева.DMИд = ИскомыйЭлемент Тогда
				Индекс = ЭлементДерева.ПолучитьИдентификатор();
			Иначе
				НайтиЭлементВДереве(ЭлементДерева.ПолучитьЭлементы(), ИскомыйЭлемент, Индекс);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементВДереве(ДеревоЭлемент, ДеревоРеквизит, ТекущийЭлемент) 
	
	Если ТекущийЭлемент <> Неопределено Тогда
		Индекс = -1;
		НайтиЭлементВДереве(ДеревоРеквизит.ПолучитьЭлементы(), ТекущийЭлемент, Индекс);
		Если Индекс > -1 Тогда
			ДеревоЭлемент.ТекущаяСтрока = Индекс;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоСлужебнаяЗадача(Задача)
	
	Служебная = Ложь;
	
	Если Задача.parentBusinessProcess.objectId.type = "DMComplexBusinessProcess" Тогда 
		Если Задача.businessProcessStep = "Выполнить все действия процесса" Тогда
			Служебная = Истина;
		КонецЕсли;
	ИначеЕсли Задача.parentBusinessProcess.objectId.type = "DMBusinessProcessInternalDocumentProcessing" 
			ИЛИ Задача.parentBusinessProcess.objectId.type = "DMBusinessProcessIncomingDocumentProcessing"
			ИЛИ Задача.parentBusinessProcess.objectId.type = "DMBusinessProcessOutgoingDocumentProcessing" Тогда
		Служебная = Истина;
	КонецЕсли;
	
	Возврат Служебная;
	
КонецФункции

/////////////////////////////
// ДОКУМЕНТЫ

&НаСервере
Процедура УдалитьСвязьНаСервере()
	
	УдалениеСвязи(ДокументID, ДокументТип, Параметры.ВнешнийОбъект);
	ЗагрузитьДеревоБизнесПроцессовИЗадач();
	
	ДокументID = "";
	ДокументТип = "";
	Документ = "";
	СсылкаНаВнешнийОбъект = Неопределено;
	
	СписокДокументов.ПолучитьЭлементы().Очистить();
	
	ОбновитьДекорацииДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДекорацииДокумента()
	
	ДокументЗаполнен = ЗначениеЗаполнено(ДокументID);
	
	Элементы.ДекорацияДокументСоздать.Видимость = НЕ ДокументЗаполнен;
	Элементы.ДекорацияДокументИли.Видимость = НЕ ДокументЗаполнен;
	Элементы.ДекорацияДокументВыбрать.Видимость = НЕ ДокументЗаполнен;
	
	Элементы.ДекорацияДокумент.Видимость = ДокументЗаполнен;
	Элементы.ДекорацияДокументОчистить.Видимость = ДокументЗаполнен;
	Элементы.ДеревоБизнесПроцессовИЗадач.Доступность = ДокументЗаполнен;
	
	Элементы.СписокДокументовГруппаСоздать.Доступность = ДокументЗаполнен;
	Элементы.СоздатьСвязанныйВходящий.Доступность = ДокументЗаполнен;
	Элементы.СоздатьСвязанныйИсходящий.Доступность =  ДокументЗаполнен;
	Элементы.СоздатьСвязанныйВнутренний.Доступность = ДокументЗаполнен;
	
	Элементы.СписокДокументовКонтекстноеМенюГруппаСоздать.Доступность = ДокументЗаполнен;
	
	Элементы.СписокДокументовГруппаПрисоединить.Доступность = ДокументЗаполнен;
	Элементы.ПрисоединитьСвязанныйВходящий.Доступность = ДокументЗаполнен;
	Элементы.ПрисоединитьСвязанныйИсходящий.Доступность = ДокументЗаполнен;
	Элементы.ПрисоединитьСвязанныйВнутренний.Доступность = ДокументЗаполнен;
	
	Элементы.СписокДокументовКонтекстноеМенюГруппаПрисоединить.Доступность = ДокументЗаполнен;
	
	Элементы.ДеревоПисемСоздатьПисьмо.Доступность = ДокументЗаполнен;
	Элементы.ДеревоПисемОткрытьПисьмо.Доступность = ДокументЗаполнен;
	Элементы.ДеревоПисемОбновитьПисьма.Доступность = ДокументЗаполнен;
	
	Модифицированность = Ложь;

КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеДокумента()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	ExternalObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	ExternalObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	ExternalObject.name = Строка(ВнешнийОбъект);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
	Запрос.externalObjects.Добавить(ExternalObject);
	
	Запрос.columnSet.Добавить("name"); 
	
	Результат = Прокси.execute(Запрос);
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") Тогда 
		ВызватьИсключение Результат.description;
	КонецЕсли;
		
	Если Результат.documents.Количество() > 0 Тогда 
		ОбъектXDTO = Результат.documents[0];
		
		ДокументID = ОбъектXDTO.objectId.id;
		ДокументТип = ОбъектXDTO.objectId.type;
		Документ = ОбъектXDTO.name;
		ДополнитьПредставлениеДокумента(Документ, ДокументТип);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеСвязанныхДокументов()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	ExternalObject.id = Строка(Параметры.ВнешнийОбъект.УникальныйИдентификатор());
	ExternalObject.type = Параметры.ВнешнийОбъект.Метаданные().ПолноеИмя();
	ExternalObject.name = Строка(Параметры.ВнешнийОбъект);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
	Запрос.externalObjects.Добавить(ExternalObject);
	
	Запрос.columnSet.Добавить("relations"); 
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
	Если Результат.documents.Количество() > 0 Тогда 
		ОбъектXDTO = Результат.documents[0];
		
		Дерево = РеквизитФормыВЗначение("СписокДокументов"); 
		Дерево.Строки.Очистить();
		
		Для Каждого Связь Из ОбъектXDTO.relations Цикл
			
			НайденнаяСтрока = Дерево.Строки.Найти(Связь.relationType.name, "Заголовок", Ложь);
			Если НайденнаяСтрока <> Неопределено Тогда 
				СтрокаТипСвязи = НайденнаяСтрока;
			Иначе
				СтрокаТипСвязи = Дерево.Строки.Добавить();
				СтрокаТипСвязи.Заголовок = Связь.relationType.name;
				СтрокаТипСвязи.ID = Связь.relationType.objectId.id;
				СтрокаТипСвязи.Тип = Связь.relationType.objectId.type;
			КонецЕсли;
			
			НоваяСтрока = СтрокаТипСвязи.Строки.Добавить();
			НоваяСтрока.Заголовок = Связь.relatedDocument.title;
			НоваяСтрока.Тип = Связь.relatedDocument.objectId.type;
			НоваяСтрока.ID 	= Связь.relatedDocument.objectId.id;
			НоваяСтрока.РегистрационныйНомер = Связь.relatedDocument.regNumber;
			НоваяСтрока.ДатаРегистрации = Связь.relatedDocument.regDate;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(Дерево, "СписокДокументов");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСвязанногоДокумента(Тип, ID)
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(Тип, ID, Элементы.СписокДокументов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавлениеСвязи(ID, Тип, ВнешнийОбъект)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddObjectLinkRequest");
			
	Запрос.ownerObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Запрос.ownerObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	Запрос.ownerObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	Запрос.ownerObject.name = Строка(ВнешнийОбъект);
	
	Запрос.linkedObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	Запрос.linkedObject.id = ID;
	Запрос.linkedObject.type = Тип;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалениеСвязи(ID, Тип, ВнешнийОбъект)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRemoveObjectLinkRequest");
			
	Запрос.ownerObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Запрос.ownerObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	Запрос.ownerObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	Запрос.ownerObject.name = Строка(ВнешнийОбъект);
	
	Запрос.linkedObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	Запрос.linkedObject.id = ID;
	Запрос.linkedObject.type = Тип;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьПредставлениеДокумента(Документ, ДокументТип)
	
	Если ЗначениеЗаполнено(Документ) Тогда 
		Если ДокументТип = "DMIncomingDocument" Тогда 
			Документ = Документ + НСтр("ru = ' (Входящий документ)'");
		ИначеЕсли ДокументТип = "DMOutgoingDocument" Тогда 
			Документ = Документ + НСтр("ru = ' (Исходящий документ)'");
		ИначеЕсли ДокументТип = "DMInternalDocument" Тогда 	
			Документ = Документ + НСтр("ru = ' (Внутренний документ)'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоСвязанных()
	
	Строки = СписокДокументов.ПолучитьЭлементы();
	Для Каждого Строка Из Строки Цикл 
		Элементы.СписокДокументов.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДокументТекущегоОбъекта(СтарыйID, СтарыйТип)
	
	Если (СтарыйID <> ДокументID) Или (СтарыйТип <> ДокументТип) Тогда 
		
		Если ЗначениеЗаполнено(СтарыйID) И ЗначениеЗаполнено(СтарыйТип) Тогда // удаление старой связи
			УдалениеСвязи(СтарыйID, СтарыйТип, Параметры.ВнешнийОбъект)
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументID) И ЗначениеЗаполнено(ДокументТип) Тогда // добавление новой связи
			ДобавлениеСвязи(ДокументID, ДокументТип, Параметры.ВнешнийОбъект);
		КонецЕсли;
		
		ПолучитьДанныеДокумента();
		ЗаполнитьДанныеСвязанныхДокументов();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСвязанныйДокумент(ТипДокумента)
	
	//открытие карточки документа
	Если ТипДокумента = "DMInternalDocument" Тогда 
		Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВнутреннийДокумент", , ЭтаФорма);
	ИначеЕсли ТипДокумента = "DMIncomingDocument" Тогда 
		Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВходящийДокумент", , ЭтаФорма);
	ИначеЕсли ТипДокумента = "DMOutgoingDocument" Тогда 
		Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящийДокумент", , ЭтаФорма);
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И ЗначениеЗаполнено(Результат.id)
		И ЗначениеЗаполнено(Результат.type) Тогда
		
		СвязанныйДокументСтруктура = Новый Структура;
		СвязанныйДокументСтруктура.Вставить("РеквизитID", Результат.id);
		СвязанныйДокументСтруктура.Вставить("РеквизитТип", Результат.type);
		СвязанныйДокументСтруктура.Вставить("РеквизитПредставление", Результат.name);
	Иначе	
		Возврат;
	КонецЕсли;
	
	// выбор типа связи
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", "DMRelationType");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Укажите тип связи исходного и созданного документа'"));
	
	DocumentFrom = Новый Структура("id, type", ДокументID, ДокументТип);
	DocumentTo = Новый Структура("id, type", СвязанныйДокументСтруктура.РеквизитID, СвязанныйДокументСтруктура.РеквизитТип);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("documentFrom, documentTo", DocumentFrom, DocumentTo));
	
	Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", ПараметрыФормы, ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ТипСвязиСтруктура = Результат;
	Иначе	
		Возврат;
	КонецЕсли;
	
	//создание связи
	ДокументСтруктура = Новый Структура;
	ДокументСтруктура.Вставить("РеквизитID", ДокументID);
	ДокументСтруктура.Вставить("РеквизитТип", ДокументТип);
	ДокументСтруктура.Вставить("РеквизитПредставление", Документ);
	
	ПрисоединитьСвязанныйДокументНаСервере(ДокументСтруктура, ТипСвязиСтруктура, СвязанныйДокументСтруктура);
	РазвернутьДеревоСвязанных();
		
	Для Каждого СтрокаТипСвязи Из СписокДокументов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаСвязанныйДокумент Из СтрокаТипСвязи.ПолучитьЭлементы() Цикл 
			Если СтрокаСвязанныйДокумент.ID = СвязанныйДокументСтруктура.РеквизитID 
			   И СтрокаСвязанныйДокумент.Тип = СвязанныйДокументСтруктура.РеквизитТип Тогда 
				Элементы.СписокДокументов.ТекущаяСтрока = СтрокаСвязанныйДокумент.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСвязанныйНаКлиенте()
	
	ТекущиеДанные = Элементы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Тип = ТекущиеДанные.Тип;
	ID = ТекущиеДанные.ID;
	
	Если Тип = "DMIncomingDocument" Или Тип = "DMOutgoingDocument" Или Тип = "DMInternalDocument" Тогда 
		ТекстВопроса = НСтр("ru = 'Пометить ""'") + ТекущиеДанные.Заголовок + НСтр("ru = '"" на удаление?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда 
			Возврат;
		КонецЕсли;
		
		УдалитьСвязанныйНаСервере(ТекущиеДанные.ID, ТекущиеДанные.Тип);
		
		ЗаполнитьДанныеСвязанныхДокументов();
		РазвернутьДеревоСвязанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныйНаСервере(ID, Тип)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDeleteRequest");
	
	ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	ОбъектИд.id = ID;
	ОбъектИд.type = Тип;
		
	Запрос.objectIds.Добавить(ОбъектИд);
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

&НаСервере
Процедура ПрисоединитьСвязанныйДокументНаСервере(ДокументСтруктура, ТипСвязиСтруктура, СвязанныйДокументСтруктура)
	
	// создание связи 
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Document = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDocument");
	Document.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ДокументСтруктура.РеквизитID, ДокументСтруктура.РеквизитТип);
	Document.name = ДокументСтруктура.РеквизитПредставление;
	
	RelatedDocument = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDocument");
	RelatedDocument.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, СвязанныйДокументСтруктура.РеквизитID, СвязанныйДокументСтруктура.РеквизитТип);
	RelatedDocument.name = СвязанныйДокументСтруктура.РеквизитПредставление;
	
	RelationType = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRelationType");
	RelationType.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ТипСвязиСтруктура.РеквизитID, ТипСвязиСтруктура.РеквизитТип);
	RelationType.name = ТипСвязиСтруктура.РеквизитПредставление;
	
	Связь = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDocumentRelation");
	Связь.document = Document;
	Связь.relationType = RelationType;
	Связь.relatedDocument = RelatedDocument;
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddDocumentRelationRequest");
	Запрос.relation = Связь;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ЗаполнитьДанныеСвязанныхДокументов();
	
КонецПроцедуры

&НаСервере
Процедура ОтсоединитьСвязанныйДокументНаСервере(ДокументСтруктура, ТипСвязиСтруктура, СвязанныйДокументСтруктура)
	
	// создание связи 
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Document = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDocument");
	Document.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ДокументСтруктура.РеквизитID, ДокументСтруктура.РеквизитТип);
	Document.name = ДокументСтруктура.РеквизитПредставление;
	
	RelatedDocument = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDocument");
	RelatedDocument.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, СвязанныйДокументСтруктура.РеквизитID, СвязанныйДокументСтруктура.РеквизитТип);
	RelatedDocument.name = СвязанныйДокументСтруктура.РеквизитПредставление;
	
	RelationType = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRelationType");
	RelationType.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ТипСвязиСтруктура.РеквизитID, ТипСвязиСтруктура.РеквизитТип);
	RelationType.name = ТипСвязиСтруктура.РеквизитПредставление;
	
	Связь = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDocumentRelation");
	Связь.document = Document;
	Связь.relationType = RelationType;
	Связь.relatedDocument = RelatedDocument;
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRemoveDocumentRelationRequest");
	Запрос.relation = Связь;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ЗаполнитьДанныеСвязанныхДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрисоединитьСвязанныйДокумент(ТипДокумента)
	
	// выбор документа
	Если ТипДокумента = "DMInternalDocument" Тогда ЗаголовокВыбора = НСтр("ru = 'Выбор внутреннего документа'");
	ИначеЕсли ТипДокумента = "DMIncomingDocument" Тогда ЗаголовокВыбора = НСтр("ru = 'Выбор входящего документа'");
	ИначеЕсли ТипДокумента = "DMOutgoingDocument" Тогда ЗаголовокВыбора = НСтр("ru = 'Выбор исходящего документа'");
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", ТипДокумента);
	ПараметрыФормы.Вставить("Заголовок", ЗаголовокВыбора);
	
	Если ТипДокумента = "DMInternalDocument" 
		И ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборВнутреннегоДокумента",
			ПараметрыФормы, ЭтаФорма);
	Иначе
		Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка",
			ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		СвязанныйДокументСтруктура = Результат;
	Иначе
		Возврат;
	КонецЕсли;
	
	// выбор типа связи
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТипОбъектаВыбора", "DMRelationType");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Укажите тип связи исходного и выбранного документа'"));
	
	DocumentFrom = Новый Структура("id, type", ДокументID, ДокументТип);
	DocumentTo = Новый Структура("id, type", СвязанныйДокументСтруктура.РеквизитID, СвязанныйДокументСтруктура.РеквизитТип);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("documentFrom, documentTo", DocumentFrom, DocumentTo));
	
	Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИзСписка", ПараметрыФормы, ЭтаФорма);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		ТипСвязиСтруктура = Результат;
	Иначе	
		Возврат;
	КонецЕсли;
	
	ДокументСтруктура = Новый Структура;
	ДокументСтруктура.Вставить("РеквизитID", ДокументID);
	ДокументСтруктура.Вставить("РеквизитТип", ДокументТип);
	ДокументСтруктура.Вставить("РеквизитПредставление", Документ);
	
	ПрисоединитьСвязанныйДокументНаСервере(ДокументСтруктура, ТипСвязиСтруктура, СвязанныйДокументСтруктура);
	РазвернутьДеревоСвязанных();
	
	Для Каждого СтрокаТипСвязи Из СписокДокументов.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаСвязанныйДокумент Из СтрокаТипСвязи.ПолучитьЭлементы() Цикл 
			Если СтрокаСвязанныйДокумент.ID = СвязанныйДокументСтруктура.РеквизитID 
			   И СтрокаСвязанныйДокумент.Тип = СвязанныйДокументСтруктура.РеквизитТип Тогда 
				Элементы.СписокДокументов.ТекущаяСтрока = СтрокаСвязанныйДокумент.ПолучитьИдентификатор();
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьБизнесПроцессСвязанныйДокумент(Команда)
	
	Если Элементы.СписокДокументов.ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.СписокДокументов.ТекущиеДанные.ID) Тогда
		Возврат;
	КонецЕсли;
		
	ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцессПоДокументуИзДО(Элементы.СписокДокументов.ТекущиеДанные.ID, Элементы.СписокДокументов.ТекущиеДанные.Тип);
	
КонецПроцедуры

/////////////////////////////
// ФАЙЛЫ

&НаСервере
Процедура ОбновитьСписокФайлов()
	
	СписокФайлов.Очистить();
	
	Файлы = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьСписокФайловПоОбъектуПотребителю(
		ВнешнийОбъект.УникальныйИдентификатор(), Строка(ВнешнийОбъект), ВнешнийОбъект.Метаданные().ПолноеИмя());
	
	Для каждого СведенияОФайле Из Файлы.files Цикл
		НоваяСтрока = СписокФайлов.Добавить();
		
		НоваяСтрока.Наименование = СведенияОФайле.name;
		НоваяСтрока.Расширение = СведенияОФайле.extension;
		НоваяСтрока.Описание = СведенияОФайле.description;
		НоваяСтрока.Размер = Формат(СведенияОФайле.size/1024, "ЧЦ=10; ЧН=0");
		НоваяСтрока.ПодписанЭЦП = СведенияОФайле.signed;
		НоваяСтрока.Автор = СведенияОФайле.author.name;
		НоваяСтрока.ID = СведенияОФайле.objectId.id;
		НоваяСтрока.ДатаСоздания = СведенияОФайле.creationDate;
		НоваяСтрока.ДатаМодификацииУниверсальная = СведенияОФайле.modificationDateUniversal;
		Редактируется = СведенияОФайле.editing;
		Зашифрован = СведенияОФайле.encrypted;
	
		НоваяСтрока.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(НоваяСтрока.Расширение);
		
		Для Каждого ПодписьXDTO Из СведенияОФайле.signatures Цикл
			Подпись = НоваяСтрока.ТаблицаПодписей.Добавить();
			
			Подпись.КомуВыданСертификат = ПодписьXDTO.author;
			Подпись.ДатаПодписи = ПодписьXDTO.date;
			Подпись.Комментарий = ПодписьXDTO.comment;
			Подпись.Отпечаток = ПодписьXDTO.thumbprint;
			
			ДвоичныеДанные = ПодписьXDTO.signature;
			Подпись.АдресПодписи = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			
			ДвоичныеДанныеСертификата = ПодписьXDTO.certificate;
			Если ДвоичныеДанныеСертификата <> Неопределено Тогда 
				Подпись.АдресСертификата = ПоместитьВоВременноеХранилище(ДвоичныеДанныеСертификата, УникальныйИдентификатор);
			КонецЕсли;
			
			Подпись.ИмяФайлаПодписи = ПодписьXDTO.signatureFileName;
			Подпись.УстановившийПодпись = ПодписьXDTO.signer.name;
			Подпись.УстановившийПодписьИд = ПодписьXDTO.signer.objectId.id;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайловКлиент(ИдентификаторФайла = Неопределено)
	
	Если ИдентификаторФайла <> Неопределено Тогда
		ТекущийИдентификаторФайла = ИдентификаторФайла;
	ИначеЕсли Элементы.СписокФайлов.ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.ID;
	КонецЕсли;
	
	ОбновитьСписокФайлов();
	Элементы.СписокФайлов.Обновить();
	
	// восстановим положение в списке
	Для Каждого Строка Из СписокФайлов Цикл
		Если Строка.ID = ТекущийИдентификаторФайла Тогда
			Элементы.СписокФайлов.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуФайлаВыполнить()
	
	ТекущиеДанные = Элементы.СписокФайлов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект("DMFile", ТекущиеДанные.ID);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	Если Элементы.СписокФайлов.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = Элементы.СписокФайлов.ТекущиеДанные.ID;
	Расширение = Элементы.СписокФайлов.ТекущиеДанные.Расширение;
	Имя = Элементы.СписокФайлов.ТекущиеДанные.Наименование;
	Размер = Элементы.СписокФайлов.ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = Элементы.СписокФайлов.ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(ИдентификаторФайла, Расширение, Имя, 
		Размер, ДатаМодификацииУниверсальная,
		КаталогДляСохраненияДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлВыполнить()
	
	ПараметрыОткрытия = Новый Структура("РежимСоздания", 1);
	Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеНовогоФайла", ПараметрыОткрытия);
	
	Если (ТипЗнч(Результат) = Тип("КодВозвратаДиалога")) ИЛИ (Результат = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = 1 Тогда
		СоздатьИзФайлаНаДиске();
	ИначеЕсли Результат = 2 Тогда
		ВыбратьСуществующийФайлВ1СДокументооборот();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзФайлаНаДиске()
	
	Если Не ЗначениеЗаполнено(ИдентификаторКорневойПапки1СДокументооборот) Тогда
		Предупреждение(НСтр("ru = 'Не указана корневая папка для хранения файлов 1С:Документооборота.'"));
		Возврат;
	КонецЕсли;
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	ИдентификаторСозданногоФайла = Неопределено;
	
	Если РасширениеПодключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Результат = ВыборФайла.Выбрать();
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	
		Если НЕ Результат Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеКлиент(ПолноеИмяФайла);
		
	Иначе 
		// Если веб-клиент без расширения
		
		ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент");

		ВремяИзменения = Дата('00010101'); // Т.к. не можем получить дату модификации файла на диске
		ВремяИзмененияУниверсальное = Дата('00010101');
		Размер = 0; // Т.к. не можем получить размер файла на диске
		ИмяБезРасширения = "";
		Расширение = "";
		АдресВременногоХранилищаТекста = "";

		// Поместим Файл в ВременноеХранилище
		АдресВременногоХранилищаФайла = "";
		ИмяФайла = "";
		Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, УникальныйИдентификатор) Тогда
			Возврат;
		КонецЕсли;

		СтрокиПути = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
		Если СтрокиПути.Количество() >= 2 Тогда
			Расширение = СтрокиПути[СтрокиПути.Количество()-1];
			ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
		Иначе
			ВызватьИсключение
			  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"),ИмяФайла);
		КонецЕсли;
		
		ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		ПараметрыСоздания.Расширение = Расширение;
		ПараметрыСоздания.ВремяИзменения = ВремяИзменения;
		ПараметрыСоздания.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
		ПараметрыСоздания.Имя = ИмяБезРасширения;
		ПараметрыСоздания.Размер = Размер;
		ПараметрыСоздания.Текст = "";
		ПараметрыСоздания.ВебКлиент = Истина;
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет сохранение файла ""%1"".
			|Пожалуйста, подождите...'"),
			ИмяФайла);
		
		Состояние(ТекстПояснения);
		
		ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания);
		Состояние();
		
	КонецЕсли;
	
	Если ИдентификаторСозданногоФайла <> Неопределено Тогда
		// обновить список
		ОбновитьСписокФайловКлиент(ИдентификаторСозданногоФайла);
			
		// открыть карточку файла
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект("DMFile", ИдентификаторСозданногоФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СоздатьИзФайлаНаДискеКлиент(ПолноеИмяФайла)
	
	ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент");
	ИдентификаторСозданногоФайла = Неопределено;
	
	НастройкиДокументооборот = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьНастройки();
	НужноИзвлечьТекст = НастройкиДокументооборот.НужноИзвлечьТекст;
		
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = Файл.ИмяБезРасширения + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	
	МаксРазмерФайла = ИнтеграцияС1СДокументооборотКлиентПовтИсп.ПолучитьМаксимальныйРазмерПередаваемогоФайла();
	РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
	
	Если Файл.Размер() > МаксРазмерФайла Тогда
		
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла для передачи (%3 Мб).'"),
				 Файл.Имя, 
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),           
				 ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		|Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	// Поместим Файл в ВременноеХранилище
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;

	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
		ВызватьИсключение
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	ПараметрыСоздания.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение);
	ПараметрыСоздания.ВремяИзменения = Файл.ПолучитьВремяИзменения();
	ПараметрыСоздания.ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	ПараметрыСоздания.Имя = Файл.ИмяБезРасширения;
	ПараметрыСоздания.Размер = Файл.Размер();
	ПараметрыСоздания.ВебКлиент = Ложь;
	
	Текст = "";
	Если НужноИзвлечьТекст Тогда
		Текст = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекст(Файл.ПолноеИмя);
	КонецЕсли;
	ПараметрыСоздания.Текст = Текст;
	
	ИдентификаторСозданногоФайла = СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания);
	
	Состояние();
	
	Возврат ИдентификаторСозданногоФайла;
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторКорневойПапкиФайлов1СДокументооборот() 
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторКорневойПапкиФайлов1СДокументооборот = Константы.ИдентификаторКорневойПапкиФайлов1СДокументооборот.Получить();
	Возврат ИдентификаторКорневойПапкиФайлов1СДокументооборот;
КонецФункции

&НаСервере
Функция СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddLinkedFileRequest");
	
	Запрос.rootFolderID = ПолучитьИдентификаторКорневойПапкиФайлов1СДокументооборот();
	
	Запрос.file = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMFile");
	
	Запрос.file.externalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Запрос.file.externalObject.name = Строка(ВнешнийОбъект);
	Запрос.file.externalObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	Запрос.file.externalObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	
	Запрос.file.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "DMFile");
	Запрос.file.binaryData = ПолучитьИзВременногоХранилища(ПараметрыСоздания.АдресВременногоХранилищаФайла);
	Запрос.file.extension = ПараметрыСоздания.Расширение;
	Запрос.file.modificationDate = ПараметрыСоздания.ВремяИзменения;
	Запрос.file.modificationDateUniversal = ПараметрыСоздания.ВремяИзмененияУниверсальное;
	Запрос.file.name = ПараметрыСоздания.Имя;
	Запрос.file.size = ПараметрыСоздания.Размер;
	
	Размер = Запрос.File.BinaryData.Размер();
	МаксРазмерФайла = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьМаксимальныйРазмерПередаваемогоФайла();
	РазмерВМб = Размер / (1024 * 1024);
	РазмерВМбМакс = МаксРазмерФайла / (1024 * 1024);
	
	Если Размер > МаксРазмерФайла Тогда
		ВызватьИсключение
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла для передачи (%3 Мб).'"),
			ПараметрыСоздания.Имя, 
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),                
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыСоздания.Текст) Тогда
		Запрос.file.text = ПараметрыСоздания.Текст;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.file.objectId.id;

КонецФункции

&НаКлиенте
Процедура ВыбратьСуществующийФайлВ1СДокументооборот()
	
	Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборФайла");
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		
		ДобавитьСсылкуНаСуществующийФайл(Результат);
		
		// обновить список
		ОбновитьСписокФайловКлиент(Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСсылкуНаСуществующийФайл(ИдентификаторФайла)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddObjectLinkRequest");
	
	Запрос.ownerObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
	Запрос.ownerObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
	Запрос.ownerObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
	Запрос.ownerObject.name = "";
	
	Запрос.linkedObject = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ИдентификаторФайла, "DMFile");
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецФункции

&НаСервере
Процедура ПометитьНаУдаление(Знач ВыделенныеСтроки)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDeleteRequest");
	
	Для Каждого НомерСтроки Из ВыделенныеСтроки Цикл
		Данные = СписокФайлов.НайтиПоИдентификатору(НомерСтроки);
		ОбъектXDTO = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, Данные.ID, "DMFile");
		Запрос.objectIds.Добавить(ОбъектXDTO);
	КонецЦикла;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов()
	УстановитьДоступностьКомманд(Элементы.СписокФайлов.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомманды(Команда, Доступность)
	Команда.Доступность = Доступность;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюОткрытьФайл, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюСохранитьКак, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюПодписать, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюДобавитьЭЦПИзФайла, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюСохранитьВместеСЭЦП, Ложь);
		
		УстановитьДоступностьКомманды(Элементы.СписокФайловОткрытьФайл, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловСохранитьКак, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловПодписать, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловДобавитьЭЦПИзФайла, Ложь);
		УстановитьДоступностьКомманды(Элементы.СписокФайловСохранитьВместеСЭЦП, Ложь);
		
	Иначе	
		
		Редактируется = ТекущиеДанные.Редактируется;
		ПодписанЭЦП 	= ТекущиеДанные.ПодписанЭЦП;
		Зашифрован 	= ТекущиеДанные.Зашифрован;
		
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюОткрытьФайл, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюСохранитьКак, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюПодписать, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюДобавитьЭЦПИзФайла, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.СписокФайловКонтекстноеМенюСохранитьВместеСЭЦП, ПодписанЭЦП);
		
		УстановитьДоступностьКомманды(Элементы.СписокФайловОткрытьФайл, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловСохранитьКак, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКомманды(Элементы.СписокФайловПодписать, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.СписокФайловДобавитьЭЦПИзФайла, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.СписокФайловСохранитьВместеСЭЦП, ПодписанЭЦП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьДанныеФайлов()

	ОбновитьСписокФайлов();
	
	КаталогДляСохраненияДанных = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьЛокальныйКаталогФайлов();
	
	ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот 
		= ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьНастройки().ИспользоватьЭлектронныеЦифровыеПодписи;
		
	ИспользоватьЭлектронныеЦифровыеПодписиВБСП = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьИспользоватьЭлектронныеЦифровыеПодписи();
	
	Если ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот = Ложь Тогда
		Элементы.СписокФайловПодписанЭЦП.Видимость = Ложь;
		
		Элементы.СписокФайловСохранитьВместеСЭЦП.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюСохранитьВместеСЭЦП.Видимость = Ложь;
	КонецЕсли;
	
	Если ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот = Ложь ИЛИ ИспользоватьЭлектронныеЦифровыеПодписиВБСП = Ложь Тогда
		Элементы.СписокФайловПодписать.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюПодписать.Видимость = Ложь;
		Элементы.СписокФайловДобавитьЭЦПИзФайла.Видимость = Ложь;
		Элементы.СписокФайловКонтекстноеМенюДобавитьЭЦПИзФайла.Видимость = Ложь;
	КонецЕсли;
	
	ИдентификаторКорневойПапки1СДокументооборот = ПолучитьИдентификаторКорневойПапкиФайлов1СДокументооборот();
	
КонецПроцедуры

///////////////////////////////////////
// ПОЧТА

&НаСервере
Процедура ПолучитьЗаполнитьДеревоПисем()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetCorrespondenceTreeQuery");
	ПредметXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
	ПредметXDTO.name = "";
	ПредметXDTO.objectID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ДокументID, ДокументТип);
	СписокУсловий.target.Добавить(ПредметXDTO);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetCorrespondenceTreeRequest");
	Запрос.query = СписокУсловий;

	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Дерево = РеквизитФормыВЗначение("ДеревоПисем");
	Дерево.Строки.Очистить();
	Для каждого Элемент из Ответ.followers Цикл
		ЗаполнитьСтрокуДерева(Дерево.Строки, Элемент);
	КонецЦикла;
	ЗначениеВРеквизитФормы(Дерево, "ДеревоПисем");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуДерева(СтрокиДерева, СтрокаXDTO)
	
	СтрокаДерева = СтрокиДерева.Добавить();
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(СтрокаДерева, СтрокаXDTO.object, "Письмо");
	СтрокаДерева.Адресаты = СтрокаXDTO.recipients;
	СтрокаДерева.Дата = СтрокаXDTO.date;
	
	Если СтрокаДерева.ПисьмоТип = "DMIncomingEMail" Тогда
		СтрокаДерева.Картинка = 0;
	ИначеЕсли СтрокаДерева.ПисьмоТип = "DMOutgoingEMail" Тогда
		СтрокаДерева.Картинка = 1;
	Иначе
		СтрокаДерева.Картинка = 2;
	КонецЕсли;
	
	Для каждого Элемент из СтрокаXDTO.followers Цикл
		ЗаполнитьСтрокуДерева(СтрокаДерева.Строки, Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвертнутьДеревоПисем()
	ЭлементыДерева = ДеревоПисем.ПолучитьЭлементы();
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Элементы.ДеревоПисем.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

 &НаКлиенте
Функция ПисьмоЕстьВСписке(ПисьмоID)
	
	ЭлементыДерева = ДеревоПисем.ПолучитьЭлементы();
	Возврат ПроверитьНаличиеЭлементаДерева(ЭлементыДерева,ПисьмоID);
	
КонецФункции

&НаКлиенте
Функция ПроверитьНаличиеЭлементаДерева(ЭлементыДерева, ПисьмоID)
	
	ПисьмоСуществует = Ложь;
	Для каждого ЭлементДерева из ЭлементыДерева Цикл
		Если ЭлементДерева.ПисьмоID = ПисьмоID Тогда 
			ПисьмоСуществует = Истина;
			Возврат ПисьмоСуществует;
		Иначе
			Подчиненные = ЭлементДерева.ПолучитьЭлементы();
		    ПисьмоСуществует = ПроверитьНаличиеЭлементаДерева(Подчиненные, ПисьмоID)
		КонецЕсли;
	КонецЦикла;

	Возврат ПисьмоСуществует;
	
КонецФункции


