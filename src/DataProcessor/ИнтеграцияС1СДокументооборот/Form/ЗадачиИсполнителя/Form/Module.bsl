////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//Проверим возможность подключения к веб-сервису
	ОшибкаПодключения = НЕ ПодключениеДоступно();
	
	Если НЕ ОшибкаПодключения Тогда
		Попытка
			Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
				ИнтеграцияС1СДокументооборот.ОбработатьФормуПриНедоступностиФункционалаВерсииСервиса(ЭтаФорма);
				Элементы.Выполненные.ТолькоПросмотр = Истина;
			КонецЕсли;
		Исключение
			ТолькоПросмотр = Истина;
			Элементы.ГруппаФункционалНеПоддерживается.Видимость = Истина;
			Элементы.ДекорацияФункционалНеПоддерживается.Заголовок = ОписаниеОшибки();
		КонецПопытки;

		Если Не ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
			Элементы.СоздатьПисьмо.Видимость = Ложь;
			Элементы.ЗадатьВопросАвтору.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОформлениеЗадач(ЭтаФорма.УсловноеОформление);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотЗадача" И Источник = ЭтаФорма Тогда
		ОбновитьСписокЗадачЧастично();
		РазвернутьГруппыЗадач();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьГруппыЗадач();
	
	#Если Не ВебКлиент Тогда
	Если НЕ ОшибкаПодключения Тогда
		Если ИнтеграцияС1СДокументооборотКлиентПовтИсп.ДоступенФункционалВерсииСервиса("1.2.6.2") Тогда
			ПодключитьОбработчикОжидания("Автообновление", 60, Истина);
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВыполненныеПриИзменении(Элемент)
	
	Модифицированность = Ложь;
	ОбновитьСписокЗадачНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ЗАДАЧИ"

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Задача = Элементы.ЗадачиИсполнителя.ТекущиеДанные;
	Если Задача <> Неопределено Тогда
		Если НЕ Задача.Группировка Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("id", Задача.ЗадачаID);
			ПараметрыФормы.Вставить("type", Задача.ЗадачаТип);
			ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы, ЭтаФорма, Задача.ЗадачаID);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	Модифицированность = Ложь;
	ОбновитьСписокЗадачНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
	
	Модифицированность = Ложь;
	Если Элементы.ЗадачиИсполнителя.ТекущиеДанные = Неопределено Тогда
		возврат;
	КонецЕсли;
	
	Если НЕ Элементы.ЗадачиИсполнителя.ТекущиеДанные.Группировка Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("id", Элементы.ЗадачиИсполнителя.ТекущиеДанные.ЗадачаID);
		ПараметрыФормы.Вставить("type", Элементы.ЗадачиИсполнителя.ТекущиеДанные.ЗадачаТип);
		ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.Задача", ПараметрыФормы, ЭтаФорма, Элементы.ЗадачиИсполнителя.ТекущиеДанные.ЗадачаID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПредмет(Команда)
	
	Модифицированность = Ложь;
	Если Элементы.ЗадачиИсполнителя.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы.ЗадачиИсполнителя.ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		Элементы.ЗадачиИсполнителя.ТекущиеДанные.ПредметТип,
		Элементы.ЗадачиИсполнителя.ТекущиеДанные.ПредметID,
		ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПроцесс(Команда)
	
	Модифицированность = Ложь;
	Если Элементы.ЗадачиИсполнителя.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы.ЗадачиИсполнителя.ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(
		Элементы.ЗадачиИсполнителя.ТекущиеДанные.ПроцессТип,
		Элементы.ЗадачиИсполнителя.ТекущиеДанные.ПроцессID,
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцесс(Команда)
	
	Модифицированность = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцесс();
	ОбновитьСписокЗадачЧастично();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)

	Модифицированность = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект("DMOutgoingEMail","", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПринятьКИсполнению(Команда)
	
	ПринятьЗадачиКИсполнению();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоВажности(Команда)
	СгруппироватьПоКолонке("ВажностьСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоБезГруппировки(Команда)
	СгруппироватьПоКолонке("");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоТочкеМаршрута(Команда)
	СгруппироватьПоКолонке("ТочкаМаршрута");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	СгруппироватьПоКолонке("Автор");
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПредмету(Команда)
	СгруппироватьПоКолонке("Предмет");
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросАвтору(Команда)
	
	Модифицированность = Ложь;
	
	Если Элементы.ЗадачиИсполнителя.ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы.ЗадачиИсполнителя.ТекущиеДанные.Группировка Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("id", Элементы.ЗадачиИсполнителя.ТекущиеДанные.ЗадачаID);
	ПараметрыФормы.Вставить("type", Элементы.ЗадачиИсполнителя.ТекущиеДанные.ЗадачаТип);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.БизнесПроцессРешениеВопросовНовыйВопрос", ПараметрыФормы, ЭтаФорма, Элементы.ЗадачиИсполнителя.ТекущиеДанные.ЗадачаID);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте 
Процедура РазвернутьГруппыЗадач()
	
	Если Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Дерево Тогда
		ЭлементыДерева = ЗадачиИсполнителя.ПолучитьЭлементы();
		Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
			Если ЭлементДерева.Группировка Тогда
				Элементы.ЗадачиИсполнителя.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоКолонке(ИмяКолонки)
	
	Модифицированность = Ложь;
	СгруппироватьПоКолонкеНаСервере(ИмяКолонки);
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьПоКолонкеНаСервере(ИмяКолонки)
	
	РежимГруппировки = ИмяКолонки;
	
	Если НЕ ЗначениеЗаполнено(ТаблицаЗадачСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадача = Элементы.ЗадачиИсполнителя.ТекущаяСтрока;
	Если ТекущаяЗадача <> неопределено Тогда
		ТекущаяЗадача = ЗадачиИсполнителя.НайтиПоИдентификатору(ТекущаяЗадача).ЗадачаID;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ЗадачиИсполнителя");
	
	ТаблицаЗадач = ПолучитьИзВременногоХранилища(ТаблицаЗадачСсылка);
	
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(РежимГруппировки) Тогда
		ТаблицаГруппировок = ТаблицаЗадач.Скопировать();
    	ТаблицаГруппировок.Свернуть(РежимГруппировки);
		Для каждого СтрокаГруппировки из ТаблицаГруппировок Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.Задача = СтрокаГруппировки[РежимГруппировки];
			СтрокаДерева.КартинкаЗадачи = 2;
			СтрокаДерева.Важность = 1;
			СтрокаДерева.Группировка = Истина;
			СтрокиГруппировки = ТаблицаЗадач.НайтиСтроки(новый Структура(РежимГруппировки,СтрокаГруппировки[РежимГруппировки]));
			Для каждого Строка из СтрокиГруппировки Цикл
				СтрокаЭлемента = СтрокаДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЭлемента,Строка);
			КонецЦикла;
		КонецЦикла;
		Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Дерево;
	Иначе
		Для каждого Строка из ТаблицаЗадач Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Строка);
		КонецЦикла;
		Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево,"ЗадачиИсполнителя");
	УстановитьТекущуюСтроку(ТекущаяЗадача);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтроку(ЗадачаID) 
	
	Если ЗначениеЗаполнено(ЗадачаID) Тогда
		Если Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Список Тогда
			СтрокиЗадачи = ЗадачиИсполнителя.ПолучитьЭлементы();
			Для каждого СтрокаЗадачи из СтрокиЗадачи Цикл
				Если СтрокаЗадачи.ЗадачаId = ЗадачаID Тогда
					Элементы.ЗадачиИсполнителя.ТекущаяСтрока = СтрокаЗадачи.ПолучитьИдентификатор();
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для каждого ГруппаДерева из ЗадачиИсполнителя.ПолучитьЭлементы() Цикл
				СтрокиЗадачи = ГруппаДерева.ПолучитьЭлементы();
				Для каждого СтрокаЗадачи из СтрокиЗадачи Цикл
					Если СтрокаЗадачи.ЗадачаId = ЗадачаID Тогда
						Элементы.ЗадачиИсполнителя.ТекущаяСтрока = СтрокаЗадачи.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Автообновление()
	
	ОбновитьСписокЗадачНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаСервере
Функция ПриложениеЯвляетсяВебКлиентом() Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	
	Возврат ЗначениеЗаполнено(СистемнаяИнформация.ИнформацияПрограммыПросмотра);
	
КонецФункции

&НаСервере
Процедура ПринятьЗадачиКИсполнению()
	
	Модифицированность = Ложь;
	МассивСтрок = Элементы.ЗадачиИсполнителя.ВыделенныеСтроки;
	Если МассивСтрок.Количество() <> 0 Тогда
		МассивЗадач = новый Массив;
		Для каждого Элемент из МассивСтрок Цикл
			Если ЗначениеЗаполнено(ЗадачиИсполнителя.НайтиПоИдентификатору(Элемент).ЗадачаID) Тогда
				МассивЗадач.Добавить(ЗадачиИсполнителя.НайтиПоИдентификатору(Элемент).ЗадачаID);
			КонецЕсли;
		КонецЦикла;
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		ИнтеграцияС1СДокументооборотВызовСервера.ПринятьЗадачуКИсполнению(Прокси, МассивЗадач);
		ОбновитьСписокЗадачЧастичноНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьОформлениеЗадач(УсловноеОформление)
	
	// установка оформления для просроченных задач
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачиИсполнителя.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачиИсполнителя.СрокИсполнения");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементОтбораДанных.ПравоеЗначение = КонецДня(ТекущаяДатаСеанса());
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗадачиИсполнителя.Выполнена");
	ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Ложь;
	ЭлементОтбораДанных.Использование = Истина;
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение =  Метаданные.ЭлементыСтиля.ПросроченныеДанныеЦвет.Значение; 
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОбластиОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОбластиОформления.Поле = Новый ПолеКомпоновкиДанных("ЗадачиИсполнителяСрокИсполнения");
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадачЧастично()
	
	ОбновитьСписокЗадачЧастичноНаСервере();
	РазвернутьГруппыЗадач();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗадачиИсполнителя(Прокси, Выполненные)
	
	СписокУсловий = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListQuery");
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "byUser";
	Условие.value = Истина;
	СписокУсловий.conditions.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "withExecuted";
	Условие.value = Выполненные;
	СписокУсловий.conditions.Добавить(Условие);
	
	Условие = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectListCondition");
	Условие.property = "withDelayed";
	Условие.value = Ложь;
	СписокУсловий.conditions.Добавить(Условие);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetObjectListRequest");
	Запрос.type = "DMBusinessProcessTask";
	Запрос.query = СписокУсловий;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Возврат Ответ.items;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокЗадач(ЗадачиXDTO)
	
	ТекущаяЗадача = Элементы.ЗадачиИсполнителя.ТекущаяСтрока;
	Если ТекущаяЗадача <> неопределено Тогда
		ТекущаяЗадача = ЗадачиИсполнителя.НайтиПоИдентификатору(ТекущаяЗадача).ЗадачаID;
	КонецЕсли;
	
	Дерево = РеквизитФормыВЗначение("ЗадачиИсполнителя");
	
	ТаблицаЗадач = новый ТаблицаЗначений;
	Для каждого Колонка из Дерево.Колонки Цикл
		ТаблицаЗадач.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	Для каждого ЗадачаXDTO из ЗадачиXDTO Цикл
		СтрокаЗадачи = ТаблицаЗадач.Добавить();
		ЗаполнитьСтрокуЗадачи(СтрокаЗадачи, ЗадачаXDTO.object);
	КонецЦикла;
	
	Дерево.Строки.Очистить();
	
	Если ЗначениеЗаполнено(РежимГруппировки) Тогда
		Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Дерево;
		ТаблицаГруппировок = ТаблицаЗадач.Скопировать();
    	ТаблицаГруппировок.Свернуть(РежимГруппировки);
		Для каждого СтрокаГруппировки из ТаблицаГруппировок Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			СтрокаДерева.Задача = СтрокаГруппировки[РежимГруппировки];
			СтрокаДерева.КартинкаЗадачи = 2;
			СтрокаДерева.Важность = 1;
			СтрокаДерева.Группировка = Истина;
			СтрокиГруппировки = ТаблицаЗадач.НайтиСтроки(новый Структура(РежимГруппировки,СтрокаГруппировки[РежимГруппировки]));
			Для каждого Строка из СтрокиГруппировки Цикл
				СтрокаЭлемента = СтрокаДерева.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЭлемента,Строка);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Список;
		Для каждого Строка из ТаблицаЗадач Цикл
			СтрокаДерева = Дерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДерева,Строка);
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Дерево,"ЗадачиИсполнителя");
	ТаблицаЗадачСсылка = ПоместитьВоВременноеХранилище(ТаблицаЗадач,УникальныйИдентификатор);
	УстановитьТекущуюСтроку(ТекущаяЗадача);
	
	ЗаполнитьДекорацииЧислаЗадач();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДекорацииЧислаЗадач()
	
	Просрочено = 0;
	НеПринято = 0;
	ТекущаяДата = ТекущаяДата();
	ТаблицаЗадач = ПолучитьИзВременногоХранилища(ТаблицаЗадачСсылка);
	НеВыполненныеЗадачи = ТаблицаЗадач.НайтиСтроки(новый Структура("Выполнена", Ложь));
	
	Для каждого СтрокаЗадачи из НеВыполненныеЗадачи Цикл
		Если ЗначениеЗаполнено(СтрокаЗадачи.СрокИсполнения) И СтрокаЗадачи.СрокИсполнения < ТекущаяДата Тогда
			Просрочено = Просрочено + 1;
		КонецЕсли;
		Если НЕ СтрокаЗадачи.ПринятаКИсполнению Тогда
			НеПринято = НеПринято + 1;
		КонецЕсли;
	КонецЦикла;
		
	Элементы.ДекорацияОбщееЧислоЗадачМне.Заголовок = НеВыполненныеЗадачи.Количество();
	Элементы.ДекорацияЧислоПросроченныхЗадачМне.Заголовок = Просрочено;
	Элементы.ДекорацияЧислоНепринятыхЗадачМне.Заголовок = НеПринято;
	Элементы.ДекорацияРазделительЧислаЗадачМне1.Заголовок = "/";
	Элементы.ДекорацияРазделительЧислаЗадачМне2.Заголовок = "/";
	
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСтрокуЗадачи(СтрокаЗадачи,ЗадачаXDTO)
	
	Важность = 1;
	Если ЗадачаXDTO.importance.objectId.id = "Низкая" Тогда
		Важность = 0;
	ИначеЕсли ЗадачаXDTO.importance.objectId.id = "Обычная" Тогда
		Важность = 1;
	ИначеЕсли ЗадачаXDTO.importance.objectId.id = "Высокая" Тогда 
		Важность = 2;
	КонецЕсли;
	
	СтрокаЗадачи.Важность = Важность;
	СтрокаЗадачи.ВажностьСтрокой = ЗадачаXDTO.importance.name;
	СтрокаЗадачи.КартинкаЗадачи = ?(ЗадачаXDTO.executed,1,0);
	СтрокаЗадачи.Выполнена = ЗадачаXDTO.executed;
	СтрокаЗадачи.ТочкаМаршрута = ЗадачаXDTO.businessProcessStep;
	СтрокаЗадачи.СрокИсполнения = ЗадачаXDTO.dueDate;
	СтрокаЗадачи.Записана = ЗадачаXDTO.beginDate;
	СтрокаЗадачи.Автор = ЗадачаXDTO.author.name;
	СтрокаЗадачи.ПринятаКИсполнению = ЗадачаXDTO.accepted;
	
	ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO.parentBusinessProcess,"Процесс");
	ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO.target,"Предмет");
	ЗаполнитьОбъектныйРеквизит(СтрокаЗадачи,ЗадачаXDTO,"Задача");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачНаСервере()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ЗадачиИсполнителяXDTO = ПолучитьЗадачиИсполнителя(Прокси, Выполненные);
	ЗаполнитьСписокЗадач(ЗадачиИсполнителяXDTO);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗадачЧастичноНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ТаблицаЗадачСсылка) Тогда
		ОбновитьСписокЗадачНаСервере();
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ЗадачиИсполнителяXDTO = ПолучитьЗадачиИсполнителя(Прокси, Выполненные);
	ТаблицаЗадач = ПолучитьИзВременногоХранилища(ТаблицаЗадачСсылка);
	ЗадачиКУдалению = ТаблицаЗадач.ВыгрузитьКолонку("ЗадачаID");
	
	Для каждого ЗадачаXDTO из ЗадачиИсполнителяXDTO Цикл
		СтрокиЗадач = ТаблицаЗадач.НайтиСтроки(новый Структура("ЗадачаID",ЗадачаXDTO.object.objectID.id));
		Если СтрокиЗадач.Количество() > 0 Тогда
			СтрокаЗадачи = СтрокиЗадач[0];
			ЗадачиКУдалению.Удалить(ЗадачиКУдалению.Найти(ЗадачаXDTO.object.objectID.id));
		Иначе
			СтрокаЗадачи = ТаблицаЗадач.Добавить();
		КонецЕсли;
		ЗаполнитьСтрокуЗадачи(СтрокаЗадачи,ЗадачаXDTO.object);
	КонецЦикла;
	
	Для каждого УдаляемаяЗадача из ЗадачиКУдалению Цикл
		СтрокиЗадач = ТаблицаЗадач.НайтиСтроки(новый Структура("ЗадачаID",УдаляемаяЗадача));
		Если СтрокиЗадач.Количество() > 0 Тогда
			ТаблицаЗадач.Удалить(СтрокиЗадач[0]);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗадачСсылка = ПоместитьВоВременноеХранилище(ТаблицаЗадач,УникальныйИдентификатор);
    СгруппироватьПоКолонкеНаСервере(РежимГруппировки);
	ЗаполнитьДекорацииЧислаЗадач();
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьОбъектныйРеквизит(Приемник, Источник, ИмяРеквизита)
	
	Если Источник <> Неопределено Тогда
		Приемник[ИмяРеквизита] = Источник.name;
		Приемник[ИмяРеквизита + "ID"] = Источник.objectId.id;
		Приемник[ИмяРеквизита + "Тип"] = Источник.objectId.type;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция ПодключениеДоступно()
	
	МестоположениеWSDL = Константы.АдресВебСервиса1СДокументооборот.Получить();
	Если ЗначениеЗаполнено(МестоположениеWSDL) И 
		Прав(МестоположениеWSDL, 1) <> "/" И Прав(МестоположениеWSDL, 1) <> "\" Тогда
		МестоположениеWSDL = МестоположениеWSDL + "/";
	КонецЕсли;
	МестоположениеWSDL = МестоположениеWSDL + "ws/dm.1cws?wsdl";
	
	ИмяПользователя = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтеграцияС1СДокументооборот", "Пользователь");
	Пароль = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ИнтеграцияС1СДокументооборот", "Пароль");
	
	Если ИмяПользователя = Неопределено ИЛИ ПустаяСтрока(ИмяПользователя) Тогда
		ОбработатьФормуПриОшибкеПодключения(НСтр("ru = 'Не заполнены параметры авторизации в 1С:Документообороте.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Определение = Новый WSОпределения(
			МестоположениеWSDL, 
			ИмяПользователя,
			Пароль);
		
		Прокси = Новый WSПрокси(
			Определение,
			"http://www.1c.ru/dm",
			"DMService",
			"DMServiceSoap");
			
		Возврат Истина;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Интеграция с 1С:Документооборотом'"), 
			УровеньЖурналаРегистрации.Ошибка,,, 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		ОбработатьФормуПриОшибкеПодключения(НСтр("ru = 'Не удалось подключиться к веб сервису 1С:Документооборота. 
			|Возможно не прошла авторизация, указан неверный адрес веб-сервиса или база 1С:Документооборота не опубликована на веб-сервере. 
			|Подробности в журнале регистрации. Проверьте настройки авторизации или обратитесь к администратору системы.'"));
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ОбработатьФормуПриОшибкеПодключения(ТекстОшибки)
	
	Элементы.ГруппаФункционалНеПоддерживается.Видимость = Истина;
	Элементы.ГруппаПроверкаАвторизации.Видимость = Истина;
	Элементы.ДекорацияФункционалНеПоддерживается.Заголовок = ТекстОшибки;
	Элементы.Выполненные.ТолькоПросмотр = Истина;
		
	ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНастройкиАвторизацииНажатие(Элемент)
	
	ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.АвторизацияВ1СДокументооборот");
	
	Если ПодключениеДоступно() Тогда
		Элементы.ГруппаПроверкаАвторизации.Видимость = Ложь;
		Элементы.ГруппаФункционалНеПоддерживается.Видимость = Ложь;
		Элементы.Выполненные.Доступность = Истина;
		ТолькоПросмотр = Ложь;
	КонецЕсли;
	
КонецПроцедуры
