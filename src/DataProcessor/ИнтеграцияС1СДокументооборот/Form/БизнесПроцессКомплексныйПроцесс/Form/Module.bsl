////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	//Если открывается новая карточка бизнес-процесса
	Если Параметры.Свойство("Предмет") И ЗначениеЗаполнено(Параметры.Предмет) И НЕ Параметры.Свойство("Шаблон") Тогда
		ЗаполнитьКарточкуНовогоБизнесПроцесса("DMComplexBusinessProcess", ЭтаФорма, Параметры.Предмет);
		
	//Если открывается карточка имеющегося бизнес-процесса 		
	ИначеЕсли ЗначениеЗаполнено(Параметры.id)
		И ЗначениеЗаполнено(Параметры.type) Тогда
		ID = Параметры.id;
		ДанныеБП = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Параметры.type, Параметры.id);
		ОбъектXDTO = ДанныеБП.objects[0];
		ЗаполнитьФормуИзОбъектаXDTO(ОбъектXDTO);
	Иначе 
		ОбъектXDTO = ИнтеграцияС1СДокументооборот.ПолучитьНовыйБизнесПроцесс(Прокси, "DMComplexBusinessProcess");
		ЗаполнитьФормуИзОбъектаXDTO(ОбъектXDTO);
	КонецЕсли;
	
	УстановитьВидимостьЭлементов();
	
	//Если открывается новая карточка по заполненному шаблону
	Если Параметры.Свойство("Шаблон") Тогда
		Если Параметры.Свойство("Предмет") Тогда
			ШаблонПроцесса = ИнтеграцияС1СДокументооборот.ПолучитьНовыйБизнесПроцессПоШаблону(Прокси, "DMComplexBusinessProcess", Параметры.Шаблон, Параметры.Предмет);
		Иначе
			ШаблонПроцесса = ИнтеграцияС1СДокументооборот.ПолучитьНовыйБизнесПроцессПоШаблону(Прокси, "DMComplexBusinessProcess", Параметры.Шаблон);
		КонецЕсли;
		ЗаполнитьФормуИзОбъектаXDTO(ШаблонПроцесса);
	КонецЕсли;
	ИнтеграцияС1СДокументооборотПереопределяемый.ДополнительнаяОбработкаФормыБизнесПроцесса(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	#Если Не ВебКлиент Тогда
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Режим = новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Сохранить'"));
		Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не сохранять'"));
		Режим.Добавить(КодВозвратаДиалога.Отмена,НСтр("ru='Редактировать'"));
		Ответ = Вопрос(ТекстВопроса, Режим);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = НЕ ЗаписатьОбъектВыполнить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	#Если ВебКлиент Тогда
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Режим = новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Сохранить'"));
		Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не сохранять'"));
		Ответ = Вопрос(ТекстВопроса, Режим);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьОбъектВыполнить();
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Изменен" И Параметр = Элементы.Предмет Тогда 
		Предмет = Источник.Представление;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ГлавнаяЗадачаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ГлавнаяЗадача) Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ГлавнаяЗадачаТип, ГлавнаяЗадачаID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ПредметТип, ПредметID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядокВыполненияПереключательПриИзменении(Элемент)
	
	ОбработатьВыборПорядкаВыполнения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка("DMBusinessProcessImportance", "Важность", ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMBusinessProcessImportance", Данныевыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMBusinessProcessImportance", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Важность", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Важность", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Автор", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", Данныевыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Автор", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Автор", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Результат = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборИсполнителяБизнесПроцесса",, ЭтаФорма);

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Результат.Свойство("Исполнитель", Контролер);
	Результат.Свойство("ИсполнительID", КонтролерID);
	Результат.Свойство("ИсполнительТип", КонтролерТип);
	
	Результат.Свойство("ОсновнойОбъектАдресации", ОсновнойОбъектАдресацииКонтролера);
	Результат.Свойство("ОсновнойОбъектАдресацииID", ОсновнойОбъектАдресацииКонтролераID);
	Результат.Свойство("ОсновнойОбъектАдресацииТип", ОсновнойОбъектАдресацииКонтролераТип);
	
	Результат.Свойство("ДополнительныйОбъектАдресации", ДополнительныйОбъектАдресацииКонтролера);
	Результат.Свойство("ДополнительныйОбъектАдресацииID", ДополнительныйОбъектАдресацииКонтролераID);
	Результат.Свойство("ДополнительныйОбъектАдресацииТип", ДополнительныйОбъектАдресацииКонтролераТип);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser;DMBusinessProcessExecutorRole", Данныевыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
		
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser;DMBusinessProcessExecutorRole", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			Если Элемент = Элементы.Проверяющий  Тогда
			    ИнтеграцияС1СДокументооборотКлиент.ПрименитьВыборУчастникаБизнесПроцессаВПоле("Проверяющий", "ОбъектАдресацииПроверяющего", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			ИначеЕсли Элемент = Элементы.Контролер Тогда
				ИнтеграцияС1СДокументооборотКлиент.ПрименитьВыборУчастникаБизнесПроцессаВПоле("Контролер", "ОбъектАдресацииКонтролера", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			Иначе
				ИнтеграцияС1СДокументооборотКлиент.ПрименитьВыборУчастникаБизнесПроцессаВСписке(Элемент.Родитель.Родитель, ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			КонецЕсли;
			СтандартнаяОбработка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ПрименитьВыборУчастникаБизнесПроцессаВПоле("Контролер", "ОбъектАдресацииКонтролера", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокДатаПриИзменении(Элемент)
	
	Если Срок = НачалоДня(Срок) Тогда
		Срок = КонецДня(Срок);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Записать(Команда)
	
	РезультатЗаписи = ЗаписатьОбъектВыполнить();
	
	Если РезультатЗаписи Тогда
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьБизнесПроцесса(ЭтаФорма, Ложь);
		ЭтаФорма.Заголовок = Представление;
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Бизнес-процесс ""%1"" сохранен.'"), Представление));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтартоватьИЗакрыть(Команда)
	
	РезультатЗапуска = ПодготовитьКПередачеИСтартоватьБизнесПроцесс();
	
	Если РезультатЗапуска Тогда
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьБизнесПроцесса(ЭтаФорма, Истина);
		ТекстСостояния = НСтр("ru = 'Бизнес-процесс ""%Наименование%"" успешно запущен.'");
		ТекстСостояния = СтрЗаменить(ТекстСостояния,"%Наименование%", Представление);
		Состояние(ТекстСостояния);
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	РезультатВыбораШаблона = ИнтеграцияС1СДокументооборотКлиент.ВыбратьШаблонБизнесПроцесса(ЭтаФорма);
	Если ТипЗнч(РезультатВыбораШаблона) = Тип("Структура") Тогда
		ЗаполнитьКарточкуПоШаблону(РезультатВыбораШаблона);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Если ПорядокВыполненияID <> "Смешанно" Тогда
		Элементы.ЭтапыПредшественникиЭтапаСтрокой.Видимость = Ложь;
	Иначе
		Элементы.ЭтапыПредшественникиЭтапаСтрокой.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуПоШаблону(ДанныеШаблона)
	
	РезультатЗаполнения = ИнтеграцияС1СДокументооборотВызовСервера.ЗаполнитьБизнесПроцессПоШаблону(ЭтаФорма, ДанныеШаблона);
	ЗаполнитьФормуИзОбъектаXDTO(РезультатЗаполнения.object);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуНовогоБизнесПроцесса(ТипБизнесПроцесса, Форма, Предмет)	
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	НовыйОбъект = ИнтеграцияС1СДокументооборот.ПолучитьНовыйОбъект(Прокси, ТипБизнесПроцесса, Предмет);
	ЗаполнитьФормуИзОбъектаXDTO(НовыйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуИзОбъектаXDTO(ОбъектXDTO) 
	
	Если ОбъектXDTO.Установлено("objectID") Тогда
		ID = ОбъектXDTO.objectID.id;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот.УстановитьСтандартнуюШапкуБизнесПроцесса(ОбъектXDTO, Этаформа);
	ИнтеграцияС1СДокументооборот.УстановитьКонтролераНаКарточке(ОбъектXDTO, Этаформа);
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.routingType, "ПорядокВыполнения");
	ОбработатьВыборПорядкаВыполнения();
	
	Этапы.Очистить();
	Номер = 1;
	Для Каждого Этап Из ОбъектXDTO.stages Цикл
		НоваяСтрока = Этапы.Добавить();
		НоваяСтрока.НомерСтроки = Номер;
 		НоваяСтрока.ИдентификаторЭтапа = Этап.stageID;
		НоваяСтрока.ИсполнителиЭтапаСтрокой = Этап.participants;
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(НоваяСтрока, Этап.template, "ШаблонБизнесПроцесса");
		ДополнитьИмяШаблонаПоТипуШаблона(НоваяСтрока);
        НоваяСтрока.ПредшественникиЭтапаСтрокой = Этап.stagePredecessors;
		НоваяСтрока.ПредшественникиВариантИспользования = Этап.predecessorsUseOption;
		НоваяСтрока.БезусловныйПереходКСледующемуБылВыполнен = Этап.unconditionalPassageExecuted;
		НоваяСтрока.ЗадачаВыполнена = Этап.executed;
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(НоваяСтрока, Этап.businessProcess, "ЗапущенныйБизнесПроцесс");
		Если Этап.Установлено("businessProcess") Тогда
			НоваяСтрока.СрокВыполнения = Этап.businessProcess.dueDate;
		КонецЕсли;
		Если ЗначениеЗаполнено(НоваяСтрока.СрокВыполнения) И НЕ НоваяСтрока.ЗадачаВыполнена Тогда
			НоваяСтрока.Срок = Формат(НоваяСтрока.СрокВыполнения,"ДФ='dd.MM.yyyy HH:mm'") + " ("+Этап.duration+")";
		Иначе
			НоваяСтрока.Срок = Этап.duration;
		КонецЕсли;
		Номер = Номер + 1;
	КонецЦикла;
	
	ПредшественникиЭтапов.Очистить();
	Для каждого Предшественник из ОбъектXDTO.predecessors Цикл
		НоваяСтрока = ПредшественникиЭтапов.Добавить();
		НоваяСтрока.ИдентификаторПоследователя = Предшественник.followerID;
		Если Предшественник.Установлено("predecessorID") Тогда
			НоваяСтрока.ИдентификаторПредшественника = Предшественник.predecessorID;
		КонецЕсли;
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(НоваяСтрока, Предшественник.passageCondition, "УсловиеПерехода");
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(НоваяСтрока, Предшественник.considerationCondition, "УсловиеРассмотрения");
		НоваяСтрока.УсловныйПереходБылВыполнен = Предшественник.passageExecuted;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьИмяШаблонаПоТипуШаблона(СтрокаЭтапа)
	
	Дополнение = "";
	Если СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessOrderTemplate"	Тогда Дополнение = НСтр("ru = 'Поручение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessConsiderationTemplate" Тогда Дополнение = НСтр("ru = 'Рассмотрение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessRegistrationTemplate" Тогда Дополнение = НСтр("ru = 'Регистрация'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessApprovalTemplate" 	Тогда Дополнение = НСтр("ru = 'Согласование'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessConfirmationTemplate" Тогда Дополнение = НСтр("ru = 'Утверждение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessPerformanceTemplate" 	Тогда Дополнение = НСтр("ru = 'Исполнение'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMBusinessProcessAcquaintanceTemplate" Тогда Дополнение = НСтр("ru = 'Ознакомление'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMCompoundBusinessProcessTemplate" 	Тогда Дополнение = НСтр("ru = 'Составной процесс'");
	ИначеЕсли СтрокаЭтапа.ШаблонБизнесПроцессаТип = "DMComplexBusinessProcessTemplate" 		Тогда Дополнение = НСтр("ru = 'Комплексный процесс'");
	КонецЕсли;
	Если Не ПустаяСтрока(Дополнение) Тогда
		СтрокаЭтапа.ШаблонБизнесПроцесса = Дополнение + ": " + СтрокаЭтапа.ШаблонБизнесПроцесса;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборПорядкаВыполнения()
	
	Если ПорядокВыполненияID <> "Смешанно" Тогда
		Элементы.ЭтапыПредшественникиЭтапаСтрокой.Видимость = Ложь;
	Иначе
		Элементы.ЭтапыПредшественникиЭтапаСтрокой.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСсылкуБизнесПроцесса(ОбъектXDTO)
	
	ID = ОбъектXDTO.objectId.id;
	Если ОбъектXDTO.objectId.Свойства().Получить("presentation") <> Неопределено Тогда
		Представление = ОбъектXDTO.objectId.presentation;
	Иначе
		Представление = ОбъектXDTO.name;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьОбъект(Прокси, Тип)
	
	Возврат ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, Тип);
	
КонецФункции

&НаСервере
Функция ПодготовитьКПередачеИЗаписатьБизнесПроцесс()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектXDTO = ПодготовитьБизнесПроцесс(Прокси);
	Если ЗначениеЗаполнено(ID) Тогда
		РезультатЗаписи = ИнтеграцияС1СДокументооборот.ЗаписатьОбъект(Прокси, ОбъектXDTO);
	Иначе
		РезультатСоздания = ИнтеграцияС1СДокументооборот.СоздатьНовыйОбъект(Прокси, ОбъектXDTO);
	КонецЕсли;
	
	Результат = ?(РезультатСоздания = Неопределено, РезультатЗаписи, РезультатСоздания);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);

	Если РезультатЗаписи <> Неопределено Тогда
		УстановитьСсылкуБизнесПроцесса(Результат.objects[0]);
	Иначе
		УстановитьСсылкуБизнесПроцесса(Результат.object);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПодготовитьКПередачеИСтартоватьБизнесПроцесс()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектXDTO = ПодготовитьБизнесПроцесс(Прокси);
	
	РезультатЗапуска = ИнтеграцияС1СДокументооборот.ЗапуститьБизнесПроцесс(Прокси, ОбъектXDTO);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатЗапуска);
	
	УстановитьСсылкуБизнесПроцесса(РезультатЗапуска.businessProcess);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПодготовитьБизнесПроцесс(Прокси)
		
	ОбъектXDTO = ИнтеграцияС1СДокументооборот.ПодготовитьШапкуБизнесПроцесса(Прокси, "DMComplexBusinessProcess", ЭтаФорма);
	
	//контролер
	ИнтеграцияС1СДокументооборот.СоздатьУчастникаБизнесПроцесса(Прокси, 
		ОбъектXDTO.controller, ЭтаФорма, "Контролер", "ОбъектАдресацииКонтролера");
		
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, ЭтаФорма,
		"ПорядокВыполнения", ОбъектXDTO.routingType, "DMBusinessProcessRoutingType");
	
	Для каждого Этап из Этапы Цикл
		ЭтапXDTO = СоздатьОбъект(Прокси, "DMComplexBusinessProcessStage");
		ЭтапXDTO.stageID = Строка(Этап.ИдентификаторЭтапа);
		ЭтапXDTO.participants = Этап.ИсполнителиЭтапаСтрокой;
		ЭтапXDTO.stagePredecessors = Этап.ПредшественникиЭтапаСтрокой;
		ЭтапXDTO.executed = Этап.ЗадачаВыполнена;
		Если ЗначениеЗаполнено(Этап.ЗапущенныйБизнесПроцессID) Тогда
			ЭтапXDTO.businessProcess = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Этап.ЗапущенныйБизнесПроцессТип, Этап.ЗапущенныйБизнесПроцессID);
		КонецЕсли;
		ЭтапXDTO.predecessorsUseOption = Этап.ПредшественникиВариантИспользования;
		ЭтапXDTO.unconditionalPassageExecuted = Этап.БезусловныйПереходКСледующемуБылВыполнен;
		
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Этап,
			"ШаблонБизнесПроцесса", ЭтапXDTO.template, "DMObject");
		
		ОбъектXDTO.stages.Добавить(ЭтапXDTO);
	КонецЦикла;
	
	Для каждого Предшественник из ПредшественникиЭтапов Цикл
		
		ПредшественникXDTO = СоздатьОбъект(Прокси, "DMComplexBusinessProcessStagePredecessor");
		ПредшественникXDTO.followerID = Предшественник.ИдентификаторПоследователя;
		ПредшественникXDTO.passageExecuted = Предшественник.УсловныйПереходБылВыполнен;
		
		Если ЗначениеЗаполнено(Предшественник.ИдентификаторПредшественника) Тогда
			ПредшественникXDTO.predecessorID = Предшественник.ИдентификаторПредшественника;
		КонецЕсли;
		
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Предшественник,
			"УсловиеПерехода", ПредшественникXDTO.passageCondition, "DMRoutingCondition");
			
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, Предшественник,
			"УсловиеРассмотрения", ПредшественникXDTO.considerationCondition, "DMPredecessorsStageConsiderationCondition");
			
		ОбъектXDTO.predecessors.Добавить(ПредшественникXDTO);
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьОбъектВыполнить()
	
	ПодготовитьКПередачеИЗаписатьБизнесПроцесс();
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

