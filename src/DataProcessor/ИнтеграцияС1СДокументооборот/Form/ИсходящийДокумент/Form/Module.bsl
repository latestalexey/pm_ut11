
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ID = Параметры.id;
	Тип = Параметры.type;
	Если НЕ ЗначениеЗаполнено(Тип) Тогда
		Тип = "DMOutgoingDocument";
	КонецЕсли;
	ВнешнийОбъект = Параметры.ВнешнийОбъект;
	КаталогДляСохраненияДанных = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьЛокальныйКаталогФайлов();
	
	// считать данные объекта
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Если ЗначениеЗаполнено(ID) И ЗначениеЗаполнено(Тип) Тогда 
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
		
		ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
		Запрос.objectIds.Добавить(ОбъектИд);
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
		ОбъектXDTO = Результат.objects[0];
		Заголовок = ОбъектXDTO.name + НСтр("ru = ' (Исходящий документ)'");
		Если Не ЗначениеЗаполнено(ВнешнийОбъект) Тогда
			ВнешнийОбъект = ИнтеграцияС1СДокументооборот.ПолучитьСсылкуНаОбъектПоВнешнемуОбъекту(ОбъектXDTO.externalObject);
		КонецЕсли;
	Иначе
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetNewObjectRequest");
		Запрос.type = Тип;
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		ОбъектXDTO = Результат;
		Заголовок = НСтр("ru = 'Исходящий документ (создание)'");
	КонецЕсли;
	
	// перенести данные в форму
	ПрочитатьОбъектВФорму(ОбъектXDTO);
	
	// файлы
	ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьСписокФайлов(ОбъектXDTO.files, Файлы, Элементы.ГруппаФайлы);
	
	// ЭЦП
	ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот 
		= ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьНастройки().ИспользоватьЭлектронныеЦифровыеПодписи;
		
	ИспользоватьЭлектронныеЦифровыеПодписиВБСП = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьИспользоватьЭлектронныеЦифровыеПодписи();
	
	Если ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот = Ложь Тогда
		Элементы.ФайлыПодписанЭЦП.Видимость = Ложь;
		Элементы.ГруппаЭЦП.Видимость = Ложь;
		
		Элементы.ФайлыСохранитьВместеСЭЦП.Видимость = Ложь;
		Элементы.ФайлыКонтекстноеМенюСохранитьВместеСЭЦП.Видимость = Ложь;
		
	Иначе
		ЗаполнитьСписокПодписей(ОбъектXDTO.signatures, ОбъектXDTO.files);
		
		Если ОбъектXDTO.Установлено("keyPropertiesValue") Тогда
			АдресСлепкаДокумента = ПоместитьВоВременноеХранилище(ОбъектXDTO.keyPropertiesValue, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьЭлектронныеЦифровыеПодписиВ1СДокументооборот = Ложь ИЛИ ИспользоватьЭлектронныеЦифровыеПодписиВБСП = Ложь Тогда
		Элементы.ФайлыПодписать.Видимость = Ложь;
		Элементы.ФайлыКонтекстноеМенюПодписать.Видимость = Ложь;
		Элементы.ФайлыДобавитьЭЦПИзФайла.Видимость = Ложь;
		Элементы.ФайлыКонтекстноеМенюДобавитьЭЦПИзФайла.Видимость = Ложь;
		Элементы.ФормаПодписатьДокумент.Видимость = Ложь;
	КонецЕсли;
	
	// реквизиты из потребителя
	Если Не ЗначениеЗаполнено(ID) И ЗначениеЗаполнено(ВнешнийОбъект) Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьФормуИзПотребителя(Параметры.ВнешнийОбъект, ЭтаФорма);
	КонецЕсли;
	
	Элементы.ФайлыЗаполнитьКопированием.Видимость = Ложь;
	Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда
		Если ФайловыеФункцииСлужебный.ЕстьХранимыеФайлы(ВнешнийОбъект) Тогда
			Элементы.ФайлыЗаполнитьКопированием.Видимость = Истина;
			Элементы.ФайлыЗаполнитьКопированием.Доступность = (Файлы.Количество() = 0);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда
		КомандыПечати = ИнтеграцияС1СДокументооборот.ПолучитьТаблицуМенеджеровПечатиОбъекта(ВнешнийОбъект.Метаданные().ПолноеИмя());
		Для каждого КомандаПечати из КомандыПечати Цикл
			ИмяКоманды = "Менеджер_"+СтрЗаменить(КомандаПечати.МенеджерПечати,".","_")+"_Команда_"+КомандаПечати.ИмяКоманды;
		    Команда = Команды.Добавить(ИмяКоманды);
		    Команда.Действие = "ОбработкаКомандыПечати";
		    Команда.Заголовок = КомандаПечати.ПредставлениеКоманды;
		    Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы.ФайлыДобавитьПечатнуюФорму);
		    Элемент.Заголовок =  КомандаПечати.ПредставлениеКоманды;
			Элемент.ИмяКоманды = ИмяКоманды;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.ТолькоПросмотр Тогда 
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		Элементы.ФормаСоздатьПисьмо.Видимость = Ложь;
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ДополнительнаяОбработкаФормыДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗакрытиеСПараметром Тогда 
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда 
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Режим = новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Сохранить'"));
		Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не сохранять'"));
		Режим.Добавить(КодВозвратаДиалога.Отмена,НСтр("ru='Редактировать'"));
		Ответ = Вопрос(ТекстВопроса, Режим,,КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда 
			ЗаписатьОбъект();
			ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтаФорма);
		ИначеЕсли Ответ <> КодВозвратаДиалога.Нет Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Истина;
	Результат = Новый Структура;
	Результат.Вставить("id", ID);
	Результат.Вставить("type", Тип);
	Результат.Вставить("name", Представление);
	
	ЗакрытиеСПараметром = Истина;
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотФайл" Тогда
		ОбновитьСписокФайловКлиент();
		ПрочитатьИОбновитьСписокПодписей();
		УстановитьДоступностьКомандСпискаЭЦП();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьКомандСпискаЭЦП();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMCorrespondent", "Получатель", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMCorrespondent", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Получатель", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMCorrespondent", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Получатель", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ПолучательID) И ЗначениеЗаполнено(ПолучательТип) Тогда 
		
		Correspondent = Новый Структура;
		Correspondent.Вставить("id", ПолучательID);
		Correspondent.Вставить("type", ПолучательТип);
		
		Отбор = Новый Структура;
		Отбор.Вставить("сorrespondent", Correspondent);
		
		ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMContactPerson", "Адресат", ЭтаФорма, Отбор);
		
	Иначе	
		ТекстСообщения = НСтр("ru = 'Не указано поле ""Получатель""'");
		Предупреждение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMContactPerson", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Адресат", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMContactPerson", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Адресат", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Подписал", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Подписал", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписалОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Подписал", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Подготовил", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Подготовил", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовилОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Подготовил", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMSubdivision", "Подразделение", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMSubdivision", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Подразделение", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMSubdivision", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Подразделение", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка("DMAccessLevel", "ГрифДоступа", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMAccessLevel", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("ГрифДоступа", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMAccessLevel", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрифДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("ГрифДоступа", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMOutgoingDocumentType", "ВидДокумента", ЭтаФорма) Тогда 
		ПриИзмененииВидаДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMOutgoingDocumentType", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("ВидДокумента", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
			
			ПриИзмененииВидаДокумента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMOutgoingDocumentType", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("ВидДокумента", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
	ПриИзмененииВидаДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMDeliveryMethod", "СпособОтправки", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMDeliveryMethod", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("СпособОтправки", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMDeliveryMethod", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОтправкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("СпособОтправки", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка("DMDocumentStatus", "Состояние", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMDocumentStatus", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Состояние", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMDocumentStatus", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Состояние", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка("DMOrganization", "Организация", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMOrganization", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Организация", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMOrganization", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Организация", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMActivityMatter", "ВопросДеятельности", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMActivityMatter", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("ВопросДеятельности", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMActivityMatter", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросДеятельностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("ВопросДеятельности", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка("DMCurrency", "Валюта", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMCurrency", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Валюта", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMCurrency", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Валюта", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Ответственный", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		 Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Ответственный", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Ответственный", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправленПриИзменении(Элемент)
	
	Если Отправлен Тогда
		ДатаОтправки = ПолучитьТекущуюДату();
	Иначе
		ДатаОтправки = '00010101';
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "СВОЙСТВА"

&НаКлиенте
Процедура СвойстваЗначениеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеДополнительногоРеквизита(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ФАЙЛЫ"

&НаКлиенте
Процедура ФайлыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	СоздатьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаВопроса = "";
	
	Если Элементы.Файлы.ВыделенныеСтроки.Количество() = 1 Тогда
		СтрокаВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Пометить ""%1"" на удаление?'"), Элементы.Файлы.ТекущиеДанные.Наименование);
	Иначе
		СтрокаВопроса = НСтр("ru='Пометить выделенные элементы на удаление?'");
	КонецЕсли;
	
	Ответ = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдаление(Элементы.Файлы.ВыделенныеСтроки);
	// обновить список
	ОбновитьСписокФайловКлиент();
	УстановитьДоступностьКомандСпискаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьКарточкуВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	ОбновитьДоступностьКомандСпискаФайлов();
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	
	МассивИменФайлов = Новый Массив;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		МассивИменФайлов.Добавить(ПараметрыПеретаскивания.Значение.ПолноеИмя);
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если ФайлПринятый.ЭтоФайл() Тогда
					МассивИменФайлов.Добавить(ФайлПринятый.ПолноеИмя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
	КонецЕсли;
	
	ИдентификаторСозданногоФайла = Неопределено;
	Для Каждого ИмяФайла Из МассивИменФайлов Цикл
		ИдентификаторСозданногоФайла = ИнтеграцияС1СДокументооборотКлиент.СоздатьИзФайлаНаДискеКлиент(ИмяФайла, УникальныйИдентификатор, ID, Тип, Представление);
	КонецЦикла;
	
	// обновить список
	ОбновитьСписокФайловКлиент(ИдентификаторСозданногоФайла);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ТАБЛИЦА ПОДПИСЕЙ"

&НаКлиенте
Процедура ТаблицаПодписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлектроннаяЦифроваяПодписьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОбработкаКомандыПечати(Команда)
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтаФорма);
	КонецЕсли;
	
	СписокФорматов = новый СписокЗначений;
	СписокФорматов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФайловСохраненияПечатныхФормОбъектов.PDF"));
	СписокФорматов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФайловСохраненияПечатныхФормОбъектов.MXL"));
	СписокФорматов.Добавить(ПредопределенноеЗначение("Перечисление.ТипыФайловСохраненияПечатныхФормОбъектов.XLS"));
	ФорматФайла = СписокФорматов.ВыбратьЭлемент(НСтр("ru = 'Выберите тип сохраняемого файла'"));
	
	Если ФорматФайла <> неопределено Тогда
		ИдентификаторыСозданныхФайлов = ИнтеграцияС1СДокументооборотВызовСервера.ПрисоединитьПечатнуюФормуОбъектаКДокументу(ВнешнийОбъект, ID, Тип, Представление, Команда.Имя, ФорматФайла.Значение);
		Если ИдентификаторыСозданныхФайлов.Количество() > 0 Тогда
			Для каждого Идентификатор из ИдентификаторыСозданныхФайлов Цикл
				ОбновитьСписокФайловКлиент(Идентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если ОграничиватьДоступностьПолей И ЗначениеЗаполнено(РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда 
		ТекстСообщения = НСтр("ru = 'При записи документ будет зарегистрирован и станет недоступным для изменения.
			|Продолжить?'");
	 
    	Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьОбъект();
	ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если ОграничиватьДоступностьПолей И ЗначениеЗаполнено(РегистрационныйНомер) И Не ЗначениеЗаполнено(НачальныйРегистрационныйНомер) Тогда 
		ТекстСообщения = НСтр("ru = 'При записи документ будет зарегистрирован и станет недоступным для изменения.
			|Продолжить?'");
	 
    	Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьОбъект();
	ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтаФорма);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрировать(Команда)
	
	Если ОграничиватьДоступностьПолей Тогда 
		ТекстСообщения = НСтр("ru = 'После регистрации документ станет недоступным для изменения.
			|Продолжить?'");
	 
    	Ответ = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗарегистрироватьНаСервере();
	
	ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтаФорма);
	
КонецПроцедуры

/////////////////////////////
// Файлы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	ОткрытьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайл(Команда)
	СоздатьФайлВыполнить();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	Расширение = ТекущиеДанные.Расширение;
	Имя = ТекущиеДанные.Наименование;
	Размер = ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	ИнтеграцияС1СДокументооборотКлиент.СохранитьКак(ИдентификаторФайла, Расширение, Имя, 
		Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	Если ИнтеграцияС1СДокументооборотКлиент.ОбновитьИзФайлаНаДиске(ИдентификаторФайла, УникальныйИдентификатор) Тогда
		ОбновитьСписокФайловКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКопированием(Команда)
	
	Режим = новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Заполнить'"));
	Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не заполнять'"));
	
	Ответ = Вопрос(НСтр("ru = 'Заполнить файлы копированием из присоединенных файлов?'"), Режим,, КодВозвратаДиалога.Да);
	Если Ответ <> КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтаФорма);
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Идет заполнение файлов копированием из присоединенных файлов ....'"));
	
	ЗаполнитьКопированиемСервер();
	
	Состояние();
	
КонецПроцедуры

/////////////////////////////
// Электронная подпись

&НаКлиенте
Процедура Подписать(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	ИмяФайла = ТекущиеДанные.Наименование;
	Описание = ТекущиеДанные.Описание;
	Редактируется = ТекущиеДанные.Редактируется;
	Зашифрован = ТекущиеДанные.Зашифрован;
	
	МассивСуществующихПодписейФайла = ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла);
	
	ИнтеграцияС1СДокументооборотКлиент.ПодписатьФайл(ИдентификаторФайла, ИмяФайла, Редактируется, Зашифрован, Описание,
		МассивСуществующихПодписейФайла);
		
	ПрочитатьИОбновитьСписокПодписей();
	УстановитьДоступностьКомандСпискаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭЦПИзФайла(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	ИмяФайла = ТекущиеДанные.Наименование;
	Описание = ТекущиеДанные.Описание;
	Редактируется = ТекущиеДанные.Редактируется;
	Зашифрован = ТекущиеДанные.Зашифрован;
	
	МассивСуществующихПодписейФайла = ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла);
	
	ИнтеграцияС1СДокументооборотКлиент.ДобавитьЭЦПИзФайла(ИдентификаторФайла, ИмяФайла, УникальныйИдентификатор,
		Описание, МассивСуществующихПодписейФайла);
	
	ПрочитатьИОбновитьСписокПодписей();
	УстановитьДоступностьКомандСпискаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВместеСЭЦП(Команда)
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	Расширение = ТекущиеДанные.Расширение;
	Имя = ТекущиеДанные.Наименование;
	Размер = ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	ИнтеграцияС1СДокументооборотКлиент.СохранитьВместеСЭЦП(ИдентификаторФайла, Расширение, Имя, 
		Размер, ДатаМодификацииУниверсальная, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодпись(Команда)
	ЭлектроннаяЦифроваяПодписьКлиент.ОткрытьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	
	Если Элементы.ТаблицаПодписей.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Элементы.ТаблицаПодписей.ТекущиеДанные.Объект) Тогда
		ЭлектроннаяЦифроваяПодписьКлиент.СохранитьПодпись(Элементы.ТаблицаПодписей.ТекущиеДанные.АдресПодписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ВыполнятьПроверкуЭЦПНаСервере = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ВыполнятьПроверкуЭЦПНаСервере;
	
	Если ВыполнятьПроверкуЭЦПНаСервере Тогда
		ПроверитьНаСервере();
	Иначе
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодписи(Элементы.ТаблицаПодписей.ВыделенныеСтроки, ТаблицаПодписей, 
			УникальныйИдентификатор, АдресСлепкаДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВсе(Команда)
	
	ВыполнятьПроверкуЭЦПНаСервере = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ВыполнятьПроверкуЭЦПНаСервере;
	
	Если ВыполнятьПроверкуЭЦПНаСервере Тогда
		
		ПроверитьВсеНаСервере();
		
	Иначе
	
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		Подписи = ИнтеграцияС1СДокументооборотКлиент.ПолучитьМассивДанныхПодписей(ТаблицаПодписей);
		ИнтеграцияС1СДокументооборотКлиент.ПроверитьПодписи(Подписи, ТаблицаПодписей, УникальныйИдентификатор, 
			АдресСлепкаДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Ответ = Вопрос(НСтр("ru = 'Удалить выделенные подписи?'"), РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьПодписиИОбновитьСписок();
	УстановитьДоступностьКомандСпискаЭЦП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьДокумент(Команда)
	
	Если ПустаяСтрока(ID) Тогда 
		
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны.
			|Выполнение действия ""Подписать"" возможно только после записи данных.
			|Данные будут записаны.'");
		Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		
		Если Результат <> КодВозвратаДиалога.ОК Тогда 
			Возврат;
		КонецЕсли;
		
		ЗаписатьОбъект();
		
	КонецЕсли;
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	МассивАдресов = Новый Массив;
	
	// УстановкаПодписиЭЦП
	
	Если ИнтеграцияС1СДокументооборотКлиент.СформироватьПодписьОбъекта(ЭтаФорма, МассивДанныхДляЗанесенияВБазу, МассивАдресов) Тогда
		
		ПодписатьЭЦПСервер(МассивДанныхДляЗанесенияВБазу);
		
		ИнтеграцияС1СДокументооборотКлиент.ИнформироватьОПодписании(Представление);  
		УстановитьДоступностьКомандСпискаЭЦП();
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////
// Бизнес-процессы

&НаКлиенте
Процедура СоздатьБизнесПроцесс(Команда)
	
	Если ЗначениеЗаполнено(ID) Тогда
		ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцессПоДокументуИзДО(ID, Тип, ЗаголовокДокумента);
	Иначе
		ТекстВопроса = НСтр("ru = 'Данные еще не записаны. 
							|Создание бизнес-процесса возможно только после записи данных. 
							|Данные будут записаны.'");
		Режим = РежимДиалогаВопрос.ОКОтмена;
		Ответ = Вопрос(ТекстВопроса, Режим, 0);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
		    Записать(Неопределено);
			ИнтеграцияС1СДокументооборотКлиент.СоздатьБизнесПроцессПоДокументуИзДО(ID, Тип, ЗаголовокДокумента);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмо(Команда)
	
	ПараметрыФормы = новый Структура("Предмет", новый Структура);
	
	ПараметрыФормы.Предмет.Вставить("name", ЗаголовокДокумента);
	ПараметрыФормы.Предмет.Вставить("id", ID);
	ПараметрыФормы.Предмет.Вставить("type", Тип);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо",ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПрочитатьОбъектВФорму(ОбъектXDTO)
	
	// заполнение реквизитов
	СоответсвиеРеквизитов = ИнтеграцияС1СДокументооборот.СоответствиеСвойствXDTOиРеквизитовФормыДокумента(Тип);
	Для Каждого СтрокаСоответсвия Из СоответсвиеРеквизитов Цикл
		ЗаполнитьРеквизитыФормыИзXDTO(СтрокаСоответсвия.Значение, ОбъектXDTO, СтрокаСоответсвия.Ключ);
	КонецЦикла;
	Представление = ОбъектXDTO.Name;
	
	НачальныйРегистрационныйНомер = РегистрационныйНомер;
	НачальнаяДатаРегистрации = ДатаРегистрации;
	
	// доступность по состоянию
	УстановитьДоступностьПоСостоянию(ОбъектXDTO);
	УстановитьДоступностьПоЭЦП(ОбъектXDTO);
	
	Элементы.Организация.Видимость 		  = (ОбъектXDTO.organizationEnabled   		= Истина);
	Элементы.ВопросДеятельности.Видимость = (ОбъектXDTO.activityMatterEnabled 		= Истина);
	Элементы.ГрифДоступа.Видимость 		  = (ОбъектXDTO.accessLevelEnabled 	  		= Истина);
	Элементы.Файлы.Видимость 			  = (ОбъектXDTO.filesEnabled 		  		= Истина);
	Элементы.ВидДокумента.Видимость 	  = (ОбъектXDTO.documentTypeEnabled   		= Истина);
	Элементы.Состояние.Видимость 	  	  = (ОбъектXDTO.statusEnabled 		  		= Истина);
	Элементы.Состояние.Доступность 	  	  = (ОбъектXDTO.statusChangeEnabled  		= Истина);
	ОграничиватьДоступностьПолей 		  = (ОбъектXDTO.limitPropertiesAvailability = Истина);
	
	// по виду 
	Элементы.СрокИсполнения.Видимость 	  = (ОбъектXDTO.documentType <> Неопределено И ОбъектXDTO.documentType.performanceDateEnabled = Истина); 
	Элементы.НомерПолучателя.Видимость    = (ОбъектXDTO.documentType <> Неопределено И ОбъектXDTO.documentType.externalNumberEnabled = Истина); 
	Элементы.ДатаПолучателя.Видимость 	  = (ОбъектXDTO.documentType <> Неопределено И ОбъектXDTO.documentType.externalNumberEnabled = Истина); 
	Элементы.Сумма.Видимость 		  	  = (ОбъектXDTO.documentType <> Неопределено И ОбъектXDTO.documentType.sumEnabled = Истина); 
	Элементы.Валюта.Видимость 		  	  = (ОбъектXDTO.documentType <> Неопределено И ОбъектXDTO.documentType.sumEnabled = Истина); 
	
	АвтоматическаяНумерация = (ОбъектXDTO.documentType <> Неопределено И ОбъектXDTO.documentType.automaticNumeration = Истина);
	Если АвтоматическаяНумерация Тогда 
		Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ДатаРегистрации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.Зарегистрировать.Доступность = Истина;
	Иначе
		Элементы.РегистрационныйНомер.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.ДатаРегистрации.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
		Элементы.Зарегистрировать.Доступность = Ложь;
	КонецЕсли;
	
	// дополнительные реквизиты
	ИнтеграцияС1СДокументооборот.ПоместитьДополнительныеРеквизитыНаФорму(ЭтаФорма, ОбъектXDTO);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодписиКОбъекту(Прокси, Объект)
	
	// тут ЭЦП добавить
	МассивПодписей = ПолучитьМассивСуществующихПодписейФайла(ID);
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		ПодписьXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMSignature");
		ИнтеграцияС1СДокументооборотВызовСервера.ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		Объект.Signatures.Добавить(ПодписьXDTO);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОбъект()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMOutgoingDocument");
	
	ИнтеграцияС1СДокументооборот.СформироватьДополнительныеСвойства(Прокси, ЭтаФорма, ОбъектXDTO);
	
	СоответсвиеРеквизитов = ИнтеграцияС1СДокументооборот.СоответствиеСвойствXDTOиРеквизитовФормыДокумента(Тип);
	Для Каждого СтрокаСоответсвия Из СоответсвиеРеквизитов Цикл
		ИнтеграцияС1СДокументооборот.ЗаполнитьXDTOизСтруктурыДокумента(
			Прокси, ОбъектXDTO, СтрокаСоответсвия.Ключ, СтрокаСоответсвия.Значение, ЭтаФорма);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ID) И ЗначениеЗаполнено(Тип) Тогда // обновление
		
		ОбъектXDTO.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
		ОбъектXDTO.name = Представление;
		
		ДобавитьПодписиКОбъекту(Прокси, ОбъектXDTO);
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMUpdateRequest");
		Запрос.objects.Добавить(ОбъектXDTO);
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		ОбъектXDTO = Результат.objects[0];
		
	Иначе // создание
		
		ОбъектXDTO.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "");
		ОбъектXDTO.name = Представление;
		
		Если ЗначениеЗаполнено(ВнешнийОбъект) Тогда 
			ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
			ExternalObject.id = Строка(ВнешнийОбъект.УникальныйИдентификатор());
			ExternalObject.type = ВнешнийОбъект.Метаданные().ПолноеИмя();
			ExternalObject.name = Строка(ВнешнийОбъект);
			
			ОбъектXDTO.externalObject = ExternalObject;
		КонецЕсли;
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMCreateRequest");
		Запрос.object = ОбъектXDTO;
		
		Результат = Прокси.execute(Запрос);
		ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
		
		ОбъектXDTO = Результат.object;
		ID  = ОбъектXDTO.objectId.id;
		Тип = ОбъектXDTO.objectId.type;
		
	КонецЕсли;
	
	// перечитать объект в форму
	ПрочитатьОбъектВФорму(ОбъектXDTO);
	
	Если ОбъектXDTO.Установлено("keyPropertiesValue") Тогда
		АдресСлепкаДокумента = ПоместитьВоВременноеХранилище(ОбъектXDTO.keyPropertiesValue, УникальныйИдентификатор);
	КонецЕсли;
	
	Модифицированность = Ложь;
	Заголовок = Представление + НСтр("ru = ' (Исходящий документ)'");
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьНаСервере()
	
	ЗаписатьОбъект();
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	ОбъектXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMOutgoingDocument");
	ОбъектXDTO.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	ОбъектXDTO.name = Представление;
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDocumentRegistrationRequest");
	Запрос.document = ОбъектXDTO;
		
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	ЗаполнитьРеквизитыФормыИзXDTO("ДатаРегистрации", 		Результат.document, "regDate");
	ЗаполнитьРеквизитыФормыИзXDTO("РегистрационныйНомер", 	Результат.document, "regNumber");
	ЗаполнитьРеквизитыФормыИзXDTO("Состояние", 				Результат.document, "status");
	Представление = Результат.document.name;
	
	// доступность по состоянию
	УстановитьДоступностьПоСостоянию(Результат.document);
	УстановитьДоступностьПоЭЦП(Результат.document);
	
	НачальныйРегистрационныйНомер = РегистрационныйНомер;
	НачальнаяДатаРегистрации = ДатаРегистрации;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыФормыИзXDTO(ИмяРеквизитаФормы, ОбъектXDTO, ИмяСвойстваXDTO)
	
	Если ОбъектXDTO.Установлено(ИмяСвойстваXDTO) Тогда
		ЗначениеСвойстваXDTO = ОбъектXDTO[ИмяСвойстваXDTO];
		Если ТипЗнч(ЗначениеСвойстваXDTO) = Тип("ОбъектXDTO") Тогда 
			ЭтаФорма[ИмяРеквизитаФормы + "Тип"] = ЗначениеСвойстваXDTO.objectId.type;
			ЭтаФорма[ИмяРеквизитаФормы + "ID"] 	= ЗначениеСвойстваXDTO.objectId.id;
			ЭтаФорма[ИмяРеквизитаФормы] 		= ЗначениеСвойстваXDTO.name;
		Иначе	
			ЭтаФорма[ИмяРеквизитаФормы] = ЗначениеСвойстваXDTO;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаДокумента() 
	
	ИнтеграцияС1СДокументооборот.ПриИзмененииВидаНаФормеДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоСостоянию(ОбъектXDTO)
	
	ДосупныеПоля = Новый Массив;
	Для Каждого ИмяПоля Из ОбъектXDTO.EnabledProperties Цикл
		ДосупныеПоля.Добавить(НРег(ИмяПоля));
	КонецЦикла;
	
	СоответсвиеРеквизитов = ИнтеграцияС1СДокументооборот.СоответствиеСвойствXDTOиРеквизитовФормыДокумента(Тип);
	Для Каждого СтрокаСоответсвия Из СоответсвиеРеквизитов Цикл
		Если ДосупныеПоля.Количество() = 0 Или ДосупныеПоля.Найти(НРег(СтрокаСоответсвия.Ключ)) <> Неопределено Тогда 
			Элементы[СтрокаСоответсвия.Значение].ТолькоПросмотр = Ложь;
		Иначе	
			Элементы[СтрокаСоответсвия.Значение].ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ДосупныеПоля.Количество() = 0 Или ДосупныеПоля.Найти("addFile") <> Неопределено Тогда 
		Элементы.ФайлыСоздатьФайл.Доступность = Истина;
		Элементы.ФайлыКонтекстноеМенюСоздатьФайл.Доступность = Истина;
		Элементы.Файлы.ИзменятьСоставСтрок = Истина;
	Иначе	
		Элементы.ФайлыСоздатьФайл.Доступность = Ложь;
		Элементы.ФайлыКонтекстноеМенюСоздатьФайл.Доступность = Ложь;
		Элементы.Файлы.ИзменятьСоставСтрок = Ложь;
	КонецЕсли;
	
	Если ДосупныеПоля.Количество() = 0 Или ДосупныеПоля.Найти("openFile") <> Неопределено Тогда 
		Элементы.ФайлыОткрытьФайл.Доступность = Истина;
		Элементы.ФайлыКонтекстноеМенюОткрытьФайл.Доступность = Истина;
	Иначе	
		Элементы.ФайлыОткрытьФайл.Доступность = Ложь;
		Элементы.ФайлыКонтекстноеМенюОткрытьФайл.Доступность = Ложь;
	КонецЕсли;
	
	Если ДосупныеПоля.Количество() = 0 Или ДосупныеПоля.Найти("saveFile") <> Неопределено Тогда 
		Элементы.ФайлыСохранитьКак.Доступность = Истина;
		Элементы.ФайлыКонтекстноеМенюСохранитьКак.Доступность = Истина;
	Иначе	
		Элементы.ФайлыСохранитьКак.Доступность = Ложь;
		Элементы.ФайлыКонтекстноеМенюСохранитьКак.Доступность = Ложь;
	КонецЕсли;
	
	Если ДосупныеПоля.Количество() = 0 Или ДосупныеПоля.Найти("editFile") <> Неопределено Тогда 
		Элементы.ФайлыОбновитьИзФайлаНаДиске.Доступность = Истина;
		Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Истина;
	Иначе
		Элементы.ФайлыОбновитьИзФайлаНаДиске.Доступность = Ложь;
		Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = Ложь;
	КонецЕсли;
	
	Если ДосупныеПоля.Количество() = 0 Или ДосупныеПоля.Найти("register") <> Неопределено Тогда 
		Элементы.Зарегистрировать.Доступность = Истина;
	Иначе
		Элементы.Зарегистрировать.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоЭЦП(ОбъектXDTO)
	
	Если ОбъектXDTO.signatures.Количество() <> 0 Тогда
		МассивИменПолей = ПолучитьИменаКлючевыхПолей();
		
		Для Каждого ИмяПоля Из МассивИменПолей Цикл
			Элементы[ИмяПоля].ТолькоПросмотр = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТекущуюДату()
	
	Возврат ТекущаяДатаСеанса();
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомманды(Команда, Доступность)
	Команда.Доступность = Доступность;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюПодписать, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюДобавитьЭЦПИзФайла, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюСохранитьВместеСЭЦП, Ложь);
		
		УстановитьДоступностьКомманды(Элементы.ФайлыОткрытьФайл, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыСохранитьКак, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыОбновитьИзФайлаНаДиске, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыПодписать, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыДобавитьЭЦПИзФайла, Ложь);
		УстановитьДоступностьКомманды(Элементы.ФайлыСохранитьВместеСЭЦП, Ложь);
		
	Иначе	
		
		Редактируется = ТекущиеДанные.Редактируется;
		ПодписанЭЦП 	= ТекущиеДанные.ПодписанЭЦП;
		Зашифрован 	= ТекущиеДанные.Зашифрован;
		
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Истина);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Истина);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюПодписать, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюДобавитьЭЦПИзФайла, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.ФайлыКонтекстноеМенюСохранитьВместеСЭЦП, ПодписанЭЦП);
		
		УстановитьДоступностьКомманды(Элементы.ФайлыОткрытьФайл, Истина);
		УстановитьДоступностьКомманды(Элементы.ФайлыСохранитьКак, Истина);
		УстановитьДоступностьКомманды(Элементы.ФайлыОбновитьИзФайлаНаДиске, Истина);
		УстановитьДоступностьКомманды(Элементы.ФайлыПодписать, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.ФайлыДобавитьЭЦПИзФайла, НЕ Редактируется И НЕ Зашифрован);
		УстановитьДоступностьКомманды(Элементы.ФайлыСохранитьВместеСЭЦП, ПодписанЭЦП);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКопированиемСервер()
	
	ИнтеграцияС1СДокументооборотВызовСервера.ЗаполнитьКопированием(ВнешнийОбъект, ID, Тип, Представление, УникальныйИдентификатор);
	ПрочитатьИОбновитьСписокФайлов();
	Элементы.ФайлыЗаполнитьКопированием.Доступность = (Файлы.Количество() = 0);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИменаКлючевыхПолей()
	
	МассивИмен = Новый Массив;
	
	МассивИмен.Добавить("ЗаголовокДокумента");
	МассивИмен.Добавить("Описание");
	
	Возврат МассивИмен;
	
КонецФункции

/////////////////////////////
// Файлы

&НаКлиенте
Процедура ОткрытьФайлВыполнить()
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторФайла = ТекущиеДанные.ID;
	Расширение = ТекущиеДанные.Расширение;
	Имя = ТекущиеДанные.Наименование;
	Размер = ТекущиеДанные.Размер * 1024; // преобразуем из КБ в байты
	ДатаМодификацииУниверсальная = ТекущиеДанные.ДатаМодификацииУниверсальная;
	
	ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(ИдентификаторФайла, Расширение, Имя, 
		Размер, ДатаМодификацииУниверсальная,
		КаталогДляСохраненияДанных, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуВыполнить()
	
	Если Элементы.Файлы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ID", Элементы.Файлы.ТекущиеДанные.ID);
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.КарточкаФайла", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьФайлВыполнить()
	
	Если ПустаяСтрока(ID) Тогда
		ЗаписатьОбъект();
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьДокумента(ЭтаФорма);
	КонецЕсли;
	
	СоздатьИзФайлаНаДиске();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьИзФайлаНаДиске()
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	ИдентификаторСозданногоФайла = Неопределено;
	
	Если РасширениеПодключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Результат = ВыборФайла.Выбрать();
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	
		Если НЕ Результат Тогда
			Возврат;
		КонецЕсли;
		
		ИдентификаторСозданногоФайла = ИнтеграцияС1СДокументооборотКлиент.СоздатьИзФайлаНаДискеКлиент(
			ПолноеИмяФайла, УникальныйИдентификатор, ID, Тип, Представление);
		
	Иначе 
		// Если веб-клиент без расширения
		
		ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент");

		ВремяИзменения = Дата('00010101'); // Т.к. не можем получить дату модификации файла на диске
		ВремяИзмененияУниверсальное = Дата('00010101');
		Размер = 0; // Т.к. не можем получить размер файла на диске
		ИмяБезРасширения = "";
		Расширение = "";
		АдресВременногоХранилищаТекста = "";

		// Поместим Файл в ВременноеХранилище
		АдресВременногоХранилищаФайла = "";
		ИмяФайла = "";
		Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла, ИмяФайла, ИмяФайла, Истина, УникальныйИдентификатор) Тогда
			Возврат;
		КонецЕсли;

		СтрокиПути = ИнтеграцияС1СДокументооборотКлиентПереопределяемый.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
		Если СтрокиПути.Количество() >= 2 Тогда
			Расширение = СтрокиПути[СтрокиПути.Количество()-1];
			ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
		Иначе
			ВызватьИсключение
			  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			    НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), ИмяФайла);
		КонецЕсли;
		
		ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
		ПараметрыСоздания.Расширение = Расширение;
		ПараметрыСоздания.ВремяИзменения = ВремяИзменения;
		ПараметрыСоздания.ВремяИзмененияУниверсальное = ВремяИзмененияУниверсальное;
		ПараметрыСоздания.Имя = ИмяБезРасширения;
		ПараметрыСоздания.Размер = Размер;
		ПараметрыСоздания.Текст = "";
		ПараметрыСоздания.ВебКлиент = Истина;
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Идет сохранение файла ""%1"".
			|Пожалуйста, подождите...'"),
			ИмяФайла);
		
		Состояние(ТекстПояснения);
		
		ИдентификаторСозданногоФайла = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания, ID, Тип, Представление);
		Состояние();
		
	КонецЕсли;
	
	Если ИдентификаторСозданногоФайла <> Неопределено Тогда
		// обновить список
		ОбновитьСписокФайловКлиент(ИдентификаторСозданногоФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодписей(ПодписиXDTO, ФайлыXDTO)

	ИнтеграцияС1СДокументооборотВызовСервера.ЗаполнитьСписокПодписейСервер(ПодписиXDTO, ФайлыXDTO, ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокФайловКлиент(ИдентификаторФайла = Неопределено)
	
	Если ИдентификаторФайла <> Неопределено Тогда
		ТекущийИдентификаторФайла = ИдентификаторФайла;
	ИначеЕсли Элементы.Файлы.ТекущиеДанные <> Неопределено Тогда
		ТекущийИдентификаторФайла = Элементы.Файлы.ТекущиеДанные.ID;
	КонецЕсли;
	
	ПрочитатьИОбновитьСписокФайлов();
	Элементы.Файлы.Обновить();
	
	// восстановим положение в списке
	Для Каждого Строка Из Файлы Цикл
		Если Строка.ID = ТекущийИдентификаторФайла Тогда
			Элементы.Файлы.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ФайлыЗаполнитьКопированием.Доступность = (Файлы.Количество() = 0);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИОбновитьСписокФайлов()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	Запрос.objectIds.Добавить(ОбъектИд);
	Запрос.columnSet.Добавить("files");
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);

	ОбъектXDTO = Результат.objects[0];
	ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьСписокФайлов(ОбъектXDTO.Files, Файлы, Элементы.ГруппаФайлы);
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдаление(Знач ВыделенныеСтроки)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMDeleteRequest");
	
	Для Каждого НомерСтроки Из ВыделенныеСтроки Цикл
		
		Данные = Файлы.НайтиПоИдентификатору(НомерСтроки);
		
		ОбъектXDTO = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, Данные.ID, "DMFile");
		
		Запрос.objectIds.Добавить(ОбъектXDTO);
		
	КонецЦикла;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	ПрочитатьИОбновитьСписокПодписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов()
	УстановитьДоступностьКомманд(Элементы.Файлы.ТекущиеДанные);
КонецПроцедуры

/////////////////////////////
// Электронная подпись

&НаКлиенте
Процедура УстановитьДоступностьКомандСпискаЭЦП()
	
	ЭтоПодпись = Истина;
	ЕстьПодписи = (ТаблицаПодписей.ПолучитьЭлементы().Количество() <> 0);
	
	ТекущиеДанные = Элементы.ТаблицаПодписей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЭтоПодпись = НЕ ПустаяСтрока(ТекущиеДанные.Объект);
	КонецЕсли;
		
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи И ЭтоПодпись;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи И ЭтоПодпись;
	
	Элементы.ТаблицаПодписейПроверить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейПроверитьВсе.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейОткрытьПодпись.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейУдалить.Доступность = ЕстьПодписи;
	Элементы.ТаблицаПодписейСохранить.Доступность = ЕстьПодписи;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла) 
	Возврат ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьМассивСуществующихПодписейФайла(ИдентификаторФайла, ТаблицаПодписей);
КонецФункции

&НаСервере
Процедура ПроверитьНаСервере()
	ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьПодписиНаСервере(Элементы.ТаблицаПодписей.ВыделенныеСтроки, 
		ТаблицаПодписей, УникальныйИдентификатор, АдресСлепкаДокумента);
КонецПроцедуры

&НаСервере
Процедура ПроверитьВсеНаСервере()
	ИнтеграцияС1СДокументооборотВызовСервера.ПроверитьВсеПодписиНаСервере(ТаблицаПодписей, УникальныйИдентификатор,
		АдресСлепкаДокумента);
КонецПроцедуры

&НаСервере
Процедура УдалитьПодписиИОбновитьСписок()
	
	//получаем массив для удаления
	ТаблицаУдаленныеСтроки = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьВыделенныеПодписи(
		Элементы.ТаблицаПодписей.ВыделенныеСтроки, ТаблицаПодписей);
		
	Если ТаблицаУдаленныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Соответствие = ИнтеграцияС1СДокументооборотВызовСервера.УдалитьПодписиДокумента(ТаблицаУдаленныеСтроки, ТаблицаПодписей);
	МассивXDTOОбъектов = Новый Массив;
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Для Каждого ПараКлючЗначение Из Соответствие Цикл
		
		ИдОбъекта = ПараКлючЗначение.Ключ;
		ДанныеВладельца = ПараКлючЗначение.Значение;
		ТипОбъекта = ДанныеВладельца.Тип;
		
		Если ТипОбъекта <> "DMFile" Тогда // документ
			
			ОбъектXDTO = СоздатьXDTOДокумент(Прокси, ДанныеВладельца.МассивПодписей);
			МассивXDTOОбъектов.Добавить(ОбъектXDTO);
			
		Иначе // файл
			
			Для Каждого Файл Из Файлы Цикл
				Если Файл.ID = ИдОбъекта Тогда
					ОбъектXDTO = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьXDTOФайл(Прокси, ДанныеВладельца.МассивПодписей, Файл);
					МассивXDTOОбъектов.Добавить(ОбъектXDTO);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборот.ЗаписатьОбъекты(Прокси, МассивXDTOОбъектов);
		
	ПрочитатьИОбновитьСписокПодписей();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьИОбновитьСписокПодписей()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектИд = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMRetrieveRequest");
	Запрос.objectIds.Добавить(ОбъектИд);
	Запрос.columnSet.Добавить("signatures");
	Запрос.columnSet.Добавить("files"); // также и файлы обновляем - чтобы иконку Подписан расставить
	Запрос.columnSet.Добавить("enabledProperties");
	Запрос.columnSet.Добавить("keyPropertiesValue");
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);

	ОбъектXDTO = Результат.objects[0];
	
	ЗаполнитьСписокПодписей(ОбъектXDTO.signatures, ОбъектXDTO.files);
	ИнтеграцияС1СДокументооборотВызовСервера.ОбновитьСписокФайлов(ОбъектXDTO.files, Файлы, Элементы.ГруппаФайлы);
	
	УстановитьДоступностьПоСостоянию(ОбъектXDTO);// доступность по состоянию
	УстановитьДоступностьПоЭЦП(ОбъектXDTO);
	
КонецПроцедуры

&НаСервере
Функция СоздатьXDTOДокумент(Прокси, МассивПодписей)
	
	ОбъектXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMOutgoingDocument");
	
	ИнтеграцияС1СДокументооборот.СформироватьДополнительныеСвойства(Прокси, ЭтаФорма, ОбъектXDTO);
	
	СоответсвиеРеквизитов = ИнтеграцияС1СДокументооборот.СоответствиеСвойствXDTOиРеквизитовФормыДокумента(Тип);
	Для Каждого СтрокаСоответсвия Из СоответсвиеРеквизитов Цикл
		ИнтеграцияС1СДокументооборот.ЗаполнитьXDTOизСтруктурыДокумента(
			Прокси, ОбъектXDTO, СтрокаСоответсвия.Ключ, СтрокаСоответсвия.Значение, ЭтаФорма);
	КонецЦикла;
	
	ОбъектXDTO.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ID, Тип);
	ОбъектXDTO.name = Представление;
	
	// добавим электронную подпись
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		
		ПодписьXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMSignature");
		ИнтеграцияС1СДокументооборотВызовСервера.ЗаполнитьXDTOПодпись(Прокси, ПодписьXDTO, ДанныеПодписи);
		ОбъектXDTO.signatures.Добавить(ПодписьXDTO);
		
	КонецЦикла;
	
	Возврат ОбъектXDTO;
	
КонецФункции

&НаСервере
Процедура ПодписатьЭЦПСервер(ДобавленныеПодписи)
	
	Соответствие = ИнтеграцияС1СДокументооборотВызовСервера.ПодписатьДокумент(ДобавленныеПодписи, ТаблицаПодписей);
	
	МассивXDTOОбъектов = Новый Массив;
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Для Каждого ПараКлючЗначение Из Соответствие Цикл
		
		ИдОбъекта = ПараКлючЗначение.Ключ;
		ДанныеВладельца = ПараКлючЗначение.Значение;
		ТипОбъекта = ДанныеВладельца.Тип;
		
		Если ТипОбъекта <> "DMFile" Тогда // документ
			
			ОбъектXDTO = СоздатьXDTOДокумент(Прокси, ДанныеВладельца.МассивПодписей);
			МассивXDTOОбъектов.Добавить(ОбъектXDTO);
			
		Иначе // файл
			
			Для Каждого Файл Из Файлы Цикл
				
				Если Файл.ID = ИдОбъекта Тогда
					ОбъектXDTO = ИнтеграцияС1СДокументооборотВызовСервера.СоздатьXDTOФайл(Прокси, ДанныеВладельца.МассивПодписей, Файл);
					МассивXDTOОбъектов.Добавить(ОбъектXDTO);
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ИнтеграцияС1СДокументооборот.ЗаписатьОбъекты(Прокси, МассивXDTOОбъектов);
	
	ПрочитатьИОбновитьСписокПодписей();
	
КонецПроцедуры
