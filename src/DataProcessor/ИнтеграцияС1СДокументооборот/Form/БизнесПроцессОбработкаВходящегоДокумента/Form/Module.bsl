////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	//Если открывается новая карточка бизнес-процесса
	Если Параметры.Свойство("Предмет") И ЗначениеЗаполнено(Параметры.Предмет) И НЕ Параметры.Свойство("Шаблон") Тогда
		ЗаполнитьКарточкуНовогоБизнесПроцесса("DMBusinessProcessIncomingDocumentProcessing", ЭтаФорма, Параметры.Предмет);
		
	//Если открывается карточка имеющегося бизнес-процесса 		
	ИначеЕсли ЗначениеЗаполнено(Параметры.id)
		И ЗначениеЗаполнено(Параметры.type) Тогда
		ID = Параметры.id;
		ДанныеБП = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Параметры.type, Параметры.id);
		ОбъектXDTO = ДанныеБП.objects[0];
		ЗаполнитьФормуИзОбъектаXDTO(ОбъектXDTO);
 	Иначе 
		ОбъектXDTO = ИнтеграцияС1СДокументооборот.ПолучитьНовыйБизнесПроцесс(Прокси, "DMBusinessProcessIncomingDocumentProcessing");
		ЗаполнитьФормуИзОбъектаXDTO(ОбъектXDTO);
	КонецЕсли;
	
	//Если открывается новая карточка по заполненному шаблону
	Если Параметры.Свойство("Шаблон") Тогда
		Если Параметры.Свойство("Предмет") Тогда
			ШаблонПроцесса = ИнтеграцияС1СДокументооборот.ПолучитьНовыйБизнесПроцессПоШаблону(Прокси, "DMBusinessProcessIncomingDocumentProcessing", Параметры.Шаблон, Параметры.Предмет);
		Иначе
			ШаблонПроцесса = ИнтеграцияС1СДокументооборот.ПолучитьНовыйБизнесПроцессПоШаблону(Прокси, "DMBusinessProcessIncomingDocumentProcessing", Параметры.Шаблон);
		КонецЕсли;
		ЗаполнитьФормуИзОбъектаXDTO(ШаблонПроцесса);
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборотПереопределяемый.ДополнительнаяОбработкаФормыБизнесПроцесса(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	#Если Не ВебКлиент Тогда
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Режим = новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Сохранить'"));
		Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не сохранять'"));
		Режим.Добавить(КодВозвратаДиалога.Отмена,НСтр("ru='Редактировать'"));
		Ответ = Вопрос(ТекстВопроса, Режим);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = НЕ ЗаписатьОбъектВыполнить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	#Если ВебКлиент Тогда
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Режим = новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да,НСтр("ru='Сохранить'"));
		Режим.Добавить(КодВозвратаДиалога.Нет,НСтр("ru='Не сохранять'"));
		Ответ = Вопрос(ТекстВопроса, Режим);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьОбъектВыполнить();
		КонецЕсли;
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДокументооборотДокумент" И Источник = Элементы.ПредметПредставление Тогда 
		Предмет = Параметр.Представление;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ГлавнаяЗадачаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ГлавнаяЗадача) Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ГлавнаяЗадачаТип, ГлавнаяЗадачаID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ПредметТип, ПредметID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонРассмотренияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMBusinessProcessConsiderationTemplate", "ШаблонРассмотрения", ЭтаФорма);
	
	Элементы.ШаблонИсполненияОзнакомленияПредставление.Доступность = НЕ ЗначениеЗаполнено(ШаблонРассмотрения);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонИсполненияОзнакомленияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//выбор типа шаблона бизнес-процесса
	СписокДоступныхТиповШаблоновБизнесПроцессов = Новый СписокЗначений;
	СписокДоступныхТиповШаблоновБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessPerformanceTemplate", "Шаблон исполнения"));
	СписокДоступныхТиповШаблоновБизнесПроцессов.Добавить(Новый Структура("XDTOClassName, Presentation", "DMBusinessProcessAcquaintanceTemplate", "Шаблон ознакомления"));
	ЗаголовокФормы = НСтр("ru = 'Тип шаблона бизнес-процесса'");
		
	ПараметрыФормы = Новый Структура("СписокДоступныхТипов, ЗаголовокФормы", СписокДоступныхТиповШаблоновБизнесПроцессов, ЗаголовокФормы);
	РезультатВыбораТипа = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.ВыборОдногоТипаИзСоставногоТипа", ПараметрыФормы, ЭтаФорма);
	Если РезультатВыбораТипа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИмяТипа = РезультатВыбораТипа;
	   	
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка(ИмяТипа, "ШаблонИсполненияОзнакомления", ЭтаФорма);
	
	Элементы.ШаблонРассмотренияПредставление.Доступность = НЕ ЗначениеЗаполнено(ШаблонИсполненияОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонПорученияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзСписка("DMBusinessProcessOrderTemplate", "ШаблонПоручения", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьПользователяИзДереваПодразделений("Автор", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", Данныевыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора("DMUser", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Автор", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Автор", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Записать(Команда)
	
	РезультатЗаписи = ЗаписатьОбъектВыполнить();
	
	Если РезультатЗаписи Тогда
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьБизнесПроцесса(ЭтаФорма, Ложь);
		ЭтаФорма.Заголовок = Представление;
		Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Бизнес-процесс ""%1"" сохранен.'"), Представление));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтартоватьИЗакрыть(Команда)
	
	РезультатЗапуска = ПодготовитьКПередачеИСтартоватьБизнесПроцесс();
	
	Если РезультатЗапуска Тогда 
		ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьБизнесПроцесса(ЭтаФорма, Истина);
		ТекстСостояния = НСтр("ru = 'Бизнес-процесс ""%Наименование%"" успешно запущен.'");
		ТекстСостояния = СтрЗаменить(ТекстСостояния,"%Наименование%", Представление);
		Состояние(ТекстСостояния);
		Модифицированность = Ложь;
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	РезультатВыбораШаблона = ИнтеграцияС1СДокументооборотКлиент.ВыбратьШаблонБизнесПроцесса(ЭтаФорма);
	Если ТипЗнч(РезультатВыбораШаблона) = Тип("Структура") Тогда
		ЗаполнитьКарточкуПоШаблону(РезультатВыбораШаблона);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьКарточкуПоШаблону(ДанныеШаблона)
	
	РезультатЗаполнения = ИнтеграцияС1СДокументооборотВызовСервера.ЗаполнитьБизнесПроцессПоШаблону(ЭтаФорма, ДанныеШаблона);
	ЗаполнитьФормуИзОбъектаXDTO(РезультатЗаполнения.object);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуНовогоБизнесПроцесса(ТипБизнесПроцесса, Форма, Предмет)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	НовыйОбъект = ИнтеграцияС1СДокументооборот.ПолучитьНовыйОбъект(Прокси, ТипБизнесПроцесса, Предмет);
	ЗаполнитьФормуИзОбъектаXDTO(НовыйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуИзОбъектаXDTO(ОбъектXDTO)
	
	ИнтеграцияС1СДокументооборот.УстановитьСтандартнуюШапкуБизнесПроцесса(ОбъектXDTO, Этаформа);
	
	//специфика обработки входящего документа
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.considerationTemplate, "ШаблонРассмотрения");
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.performanceAcquaintanceTemplate, "ШаблонИсполненияОзнакомления");
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ОбъектXDTO.orderTemplate, "ШаблонПоручения");
		
КонецПроцедуры

&НаСервере
Функция ПодготовитьКПередачеИЗаписатьБизнесПроцесс()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектXDTO = ПодготовитьБизнесПроцесс(Прокси);
	
	Если ЗначениеЗаполнено(ID) Тогда
		РезультатЗаписи = ИнтеграцияС1СДокументооборот.ЗаписатьОбъект(Прокси, ОбъектXDTO);
	Иначе
		РезультатСоздания = ИнтеграцияС1СДокументооборот.СоздатьНовыйОбъект(Прокси, ОбъектXDTO);
	КонецЕсли;
	
	Результат = ?(РезультатСоздания = Неопределено, РезультатЗаписи, РезультатСоздания);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);

	Если РезультатЗаписи <> Неопределено Тогда
		УстановитьСсылкуБизнесПроцесса(Результат.objects[0]);
	Иначе
		УстановитьСсылкуБизнесПроцесса(Результат.object);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПодготовитьКПередачеИСтартоватьБизнесПроцесс()
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ОбъектXDTO = ПодготовитьБизнесПроцесс(Прокси);
	
	РезультатЗапуска = ИнтеграцияС1СДокументооборот.ЗапуститьБизнесПроцесс(Прокси, ОбъектXDTO);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, РезультатЗапуска);
	
	УстановитьСсылкуБизнесПроцесса(РезультатЗапуска.businessProcess);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПодготовитьБизнесПроцесс(Прокси)
		
	ОбъектXDTO = ИнтеграцияС1СДокументооборот.ПодготовитьШапкуБизнесПроцесса(Прокси, 
		"DMBusinessProcessIncomingDocumentProcessing", ЭтаФорма,"Важность,Стартован,Завершен,Описание,Срок");
	
	//специфика Обработки входящего документа
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, ЭтаФорма,
		"ШаблонРассмотрения", ОбъектXDTO.considerationTemplate, "DMBusinessProcessConsiderationTemplate");
	
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, ЭтаФорма,
		"ШаблонИсполненияОзнакомления", ОбъектXDTO.performanceAcquaintanceTemplate, "DMBusinessProcessTemplate");
	
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(Прокси, ЭтаФорма,
 		"ШаблонПоручения", ОбъектXDTO.orderTemplate, "DMBusinessProcessOrderTemplate");
			
	Возврат ОбъектXDTO;
	
КонецФункции

&НаКлиенте
Функция ЗаписатьОбъектВыполнить()
	
	ПодготовитьКПередачеИЗаписатьБизнесПроцесс();
	Модифицированность = Ложь;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьСсылкуБизнесПроцесса(ОбъектXDTO)
	
	ID = ОбъектXDTO.objectId.id;
	Если ОбъектXDTO.objectId.Свойства().Получить("presentation") <> Неопределено Тогда
		Представление = ОбъектXDTO.objectId.presentation;
	Иначе
		Представление = ОбъектXDTO.name;
	КонецЕсли;
	
КонецПроцедуры

