////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	КаталогДляСохраненияДанных = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьЛокальныйКаталогФайлов();
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Если НЕ ИнтеграцияС1СДокументооборотПовтИсп.ДоступенФункционалВерсииСервиса("1.2.7.3") Тогда
		ВызватьИсключение("Функционал не поддерживается в данной версии 1С:Документооборота.");
	КонецЕсли;
		
	//Если открывается новая карточка писма
	Если Параметры.Свойство("ВнешнийОбъект") Тогда
		ЗаполнитьКарточкуНовогоПисьмаПоВнешнемуОбъекту(Прокси, Параметры);
		
	ИначеЕсли Параметры.Свойство("Предмет") И ЗначениеЗаполнено(Параметры.Предмет) Тогда
		ЗаполнитьКарточкуНовогоПисьма(Прокси, Параметры);
		
	//Если открывается карточка имеющегося письма
	ИначеЕсли ЗначениеЗаполнено(Параметры.ID) И ЗначениеЗаполнено(Параметры.type) Тогда
		Ответ = ИнтеграцияС1СДокументооборот.ПолучитьОбъект(Прокси, Параметры.type, Параметры.id);
		ПисьмоXDTO = Ответ.objects[0];
		ЗаполнитьФормуИзОбъектаXDTO(ПисьмоXDTO);
		
	Иначе 
		ПисьмоXDTO = ИнтеграцияС1СДокументооборот.ПолучитьНовоеИсходящееПисьмо(Прокси, "DMOutgoingEMail");
		ЗаполнитьФормуИзОбъектаXDTO(ПисьмоXDTO);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ID) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.ФормаЗакрыть.Видимость = Истина;
		Элементы.ПростойТекст.Видимость = Ложь;
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаОтправить.Видимость = Ложь;
		
		Элементы.ДеревоПриложений.ТолькоПросмотр = Истина;
		Элементы.Адресаты.ТолькоПросмотр = Истина;
		Элементы.Важность.ТолькоПросмотр = Истина;
		Элементы.Добавить.Доступность = Ложь;
		Элементы.Удалить.Доступность = Ложь;
		Элементы.Тема.ТолькоПросмотр = Истина;
		Элементы.ФормаДобавитьАдресатов.Видимость = Ложь;
	Иначе
		Элементы.HTMLПредставление.Видимость = Ложь;
		Элементы.ФормаЗакрыть.Видимость = Ложь;
		Элементы.ФормаПереслать.Видимость = Ложь;
		Элементы.СоздатьНаОсновании.Видимость = Ложь;
	КонецЕсли;
	
	ОтобразитьКоличествоФайловСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(ID) И Адресаты.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементПолучатель", 0.2, Истина);
	ИначеЕсли Не ЗначениеЗаполнено(Тема) Тогда
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементТема", 0.2, Истина);
	Иначе
		ПодключитьОбработчикОжидания("УстановитьТекущийЭлементТекст", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПисьмоОснованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПисьмоОснованиеID) Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ПисьмоОснованиеТип, ПисьмоОснованиеID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПредметID) Тогда
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьОбъект(ПредметТип, ПредметID, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ИнтеграцияС1СДокументооборотКлиент.ВыбратьЗначениеИзВыпадающегоСписка("DMBusinessProcessImportance", "Важность", ЭтаФорма); 
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора(
			"DMBusinessProcessImportance", Данныевыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьДанныеДляАвтоПодбора(
			"DMBusinessProcessImportance", ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Важность", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма);
			СтандартнаяОбработка = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора("Важность", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ДЕРЕВО ПРИЛОЖЕНИЙ"

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьЭлементДереваПриложений(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	СоздатьИзФайлаНаДиске();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
			ИмяФайла = ПараметрыПеретаскивания.Значение.ПолноеИмя;
			Файл = новый Файл(ИмяФайла);
			НоваяСтрока = ДеревоПриложений.Добавить();
			НоваяСтрока.ПутьКФайлуНаДиске = ИмяФайла;
			НоваяСтрока.Ссылка = Файл.ИмяБезРасширения;
			НоваяСтрока.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение);
			НоваяСтрока.КартинкаТипаОбъекта = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(НоваяСтрока.Расширение);
		ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
			Для каждого ЭлементМассива из ПараметрыПеретаскивания.Значение Цикл
				Если ТипЗнч(ЭлементМассива) = Тип("Файл") Тогда
					ИмяФайла = ЭлементМассива.ПолноеИмя;
					Файл = новый Файл(ИмяФайла);
					НоваяСтрока = ДеревоПриложений.Добавить();
					НоваяСтрока.ПутьКФайлуНаДиске = ИмяФайла;
					НоваяСтрока.Ссылка = Файл.ИмяБезРасширения;
					НоваяСтрока.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение);
					НоваяСтрока.КартинкаТипаОбъекта = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(НоваяСтрока.Расширение);
				КонецЕсли;
			КонецЦикла;
				
		КонецЕсли;
		
	Иначе 
		
		Предупреждение(НСтр("ru = 'Необходимо подключить расширение для работы  файлами.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ПеретаскиваемоеЗначение = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("Массив")
		И ТипЗнч(ПеретаскиваемоеЗначение) <> Тип("Файл") Тогда
		
		СтандартнаяОбработка = Истина;
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "АДРЕСАТЫ"

&НаКлиенте
Процедура АдресатыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Элемент.ТекущийЭлемент = Элементы.АдресатыАдресат;
	РежимДобавленияАдресата = Ложь;
	
	СтрокаДанных = Адресаты.НайтиПоИдентификатору(Элементы.Адресаты.ТекущаяСтрока);
	КоличествоАдресатовДоДобавления = Адресаты.Количество();
	Если Не ЗначениеЗаполнено(СтрокаДанных.ТипАдреса) Тогда
		Если КоличествоАдресатовДоДобавления = 1 Тогда
			СтрокаДанных.ТипАдреса = НСтр("ru='Кому:'");
		Иначе
			СтрокаДанных.ТипАдреса = НСтр("ru='Копия:'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыАдресатАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.АдреснаяКнига",,Элемент);
	ОбработатьВыборАдресата(РезультатВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыАдресатОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ПолучитьДанныеДляАвтоПодбораАдресата(ДанныеВыбора, Текст, СтандартнаяОбработка);
		
		Если ДанныеВыбора.Количество() = 1 Тогда 
			ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
				"Адресат", ДанныеВыбора[0].Значение, СтандартнаяОбработка, ЭтаФорма, Истина, Элемент);
			Элемент.Родитель.ТекущиеДанные.НеНайден = Ложь;
			СтандартнаяОбработка = Истина;
		ИначеЕсли ДанныеВыбора.Количество() = 0 Тогда
			СтандартнаяОбработка = Истина;
			Элемент.Родитель.ТекущиеДанные.НеНайден = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыАдресатАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		ПолучитьДанныеДляАвтоПодбораАдресата(ДанныеВыбора, Текст, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресатыАдресатОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИнтеграцияС1СДокументооборотКлиент.ОбработкаВыбораДанныхДляАвтоПодбора(
		"Адресат", ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма, Истина, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Переслать(Команда)
	
	ПараметрыФормы = новый Структура("Предмет", новый Структура);
	
	ПараметрыФормы.Предмет.Вставить("name", Тема);
	ПараметрыФормы.Предмет.Вставить("id", ID);
	ПараметрыФормы.Предмет.Вставить("type", Тип);
	ПараметрыФормы.Вставить("answerType", "transfer");
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.ИсходящееПисьмо",ПараметрыФормы);
	ПодключитьОбработчикОжидания("ЗакрытьФормуПриПересылке", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПроцесс(Команда)
	
	ПараметрыФормы = новый Структура("Предмет", новый Структура);
	
	ПараметрыФормы.Предмет.Вставить("id", ID);
	ПараметрыФормы.Предмет.Вставить("type", Тип);
	ПараметрыФормы.Предмет.Вставить("name", Представление);
	
	ОткрытьФорму("Обработка.ИнтеграцияС1СДокументооборот.Форма.СозданиеБизнесПроцесса",ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	ГотовоКОтправке = ПроверитьПисьмоПередОтправкой();
	
	Если НЕ ГотовоКОтправке Тогда 
		Возврат;
	КонецЕсли;
	
	//подготовка файлов для передачи
	МассивФайлов = Новый Массив;
	
	Для Каждого Строка Из ДеревоПриложений Цикл
		Если ЗначениеЗаполнено(Строка.ПутьКФайлуНаДиске) Тогда
			МассивФайлов.Добавить(ПодготовитьФайлНаДискеКлиент(Строка.ПутьКФайлуНаДиске));
		Иначе
			МассивФайлов.Добавить(ПодготовитьФайлВДокументообороте(Строка));
		КонецЕсли;
	КонецЦикла;
	
	ОтправитьНаСервере(МассивФайлов);
	ИнтеграцияС1СДокументооборотКлиент.Оповестить_ЗаписьИсходящегоПисьма(ЭтаФорма);
	ПодключитьОбработчикОжидания("ЗакрытьФормуПриПересылке",0.2, Истина);
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Письмо ""%1"" отправлено.'"), Тема));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАдресат(Команда)
	
	Элементы.Адресаты.ДобавитьСтроку();
	СтрокаДанных = Адресаты.НайтиПоИдентификатору(Элементы.Адресаты.ТекущаяСтрока);
	РезультатВыбора = ОткрытьФормуМодально("Обработка.ИнтеграцияС1СДокументооборот.Форма.АдреснаяКнига",,СтрокаДанных);
	
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
		Если РезультатВыбора.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаДанных, РезультатВыбора[0]);
		Иначе
			Для каждого ЭлементМассива из РезультатВыбора Цикл
				Если РезультатВыбора.Найти(ЭлементМассива) = 0 Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДанных, РезультатВыбора[0]);
				Иначе
					ТекущаяСтрока = Адресаты.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ЭлементМассива);
					ТекущаяСтрока.ТипАдреса =  СтрокаДанных.ТипАдреса;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОтменаРедактирования = Ложь;
	Элементы.Адресаты.ЗакончитьРедактированиеСтроки(ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	СоздатьИзФайлаНаДиске();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайл(Команда)
	ТекущаяСтрока = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		ДеревоПриложений.Удалить(ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьЭлементДереваПриложений(Элементы.ДеревоПриложений.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Основание) Тогда
		Основание.Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте 
Процедура ОткрытьЭлементДереваПриложений(Строка)
	
	Если Строка <> Неопределено Тогда
		Если ЗначениеЗаполнено(Строка.СсылкаID) Тогда
			ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(Строка.СсылкаID, Строка.Расширение, Строка.Ссылка, 
				Строка.Размер, Строка.ДатаМодификации, КаталогДляСохраненияДанных, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуИзОбъектаXDTO(ПисьмоXDTO)
	
	ID = ПисьмоXDTO.objectId.id;
	Тип = ПисьмоXDTO.objectId.type;
	Представление = ПисьмоXDTO.objectID.presentation;
	Тема = ПисьмоXDTO.subject;
	ТекстПисьма = ПисьмоXDTO.body;
	
	Если ЗначениеЗаполнено(ПисьмоXDTO.objectId.id) Тогда
		ДобавитьАдресатов(ПисьмоXDTO.senderAddress, НСтр("ru='От:'"));
	Иначе
		Отправитель = ПисьмоXDTO.senderAddress;
	КонецЕсли;
	
	ДобавитьАдресатов(ПисьмоXDTO.recipients, НСтр("ru='Кому:'"));
	ДобавитьАдресатов(ПисьмоXDTO.courtesyCopyRecipients, НСтр("ru='Копия:'"));
	ДобавитьАдресатов(ПисьмоXDTO.blindCourtesyCopyRecipients, НСтр("ru='СК:'"));
	
	ДатаСоздания = ПисьмоXDTO.creationDate;
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ПисьмоXDTO.importance,"Важность");
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ПисьмоXDTO.target,"Предмет");
	
	Если Не ЗначениеЗаполнено(ПредметID) Тогда 
		Предмет = "Нет";
		Элементы.Предмет.Гиперссылка = Ложь;
		Элементы.Основание.Видимость = Ложь;
	Иначе
		Основание = ИнтеграцияС1СДокументооборот.ПолучитьСсылкуНаОбъектПоВнешнемуОбъекту(ПисьмоXDTO.target.externalObject);
		Если НЕ ЗначениеЗаполнено(Основание) Тогда
			Элементы.Основание.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ПисьмоXDTO.Установлено("answerType") Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ПисьмоXDTO.answerType,"ТипОтвета");
	КонецЕсли;
	
	Если ТипОтветаID = "ПересылкаПисьма" ИЛИ НЕ ЗначениеЗаполнено(ТипОтветаID) Тогда
		Элементы.ПисьмоОснование.Видимость = Ложь;
	КонецЕсли;
	
	Если ПисьмоXDTO.Установлено("baseObject") Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(ЭтаФорма, ПисьмоXDTO.baseObject,"ПисьмоОснование");
	Иначе
		Элементы.ПисьмоОснование.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПисьмоXDTO.subject) Тогда
		Заголовок = ПисьмоXDTO.subject + НСтр("ru=' (Исходящее письмо)'");
	Иначе
		Заголовок = ПисьмоXDTO.objectID.presentation;
	КонецЕсли;
	
	Если ПисьмоXDTO.Свойства().Получить("files") <> Неопределено Тогда
		Для каждого Файл из ПисьмоXDTO.files Цикл
			Стр = ДеревоПриложений.Добавить();
			ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектныйРеквизит(Стр,Файл,"Ссылка");
			Стр.Расширение = Файл.extension;
			Стр.ДатаМодификации = Файл.modificationDateUniversal;
			Стр.Размер = Файл.size;
			Стр.КартинкаТипаОбъекта = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.extension);
			УстановитьКартинкуТипаОбъекта(Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАдресатов(СтрокаАдресатов, ТипАдреса)
	Если НЕ ПустаяСтрока(СтрокаАдресатов) Тогда
		МассивАдресатов = ИнтеграцияС1СДокументооборот.РазложитьСтрокуВМассивПодстрок(СтрокаАдресатов,";", Истина);
		Для каждого Адресат из МассивАдресатов Цикл
			Если НЕ ПустаяСтрока(СокрЛП(Адресат)) Тогда 
				СтрокаАдресата = Адресаты.Добавить();
				СтрокаАдресата.ТипАдреса = ТипАдреса;
				СтрокаАдресата.Адресат = СокрЛП(Адресат);
				СтрокаАдресата.АдресатТип = "DMObject";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуТипаОбъекта(СтрокаПредмета)
	Если Найти(СтрокаПредмета.СсылкаТип,"Документ.") <> 0 Тогда
		СтрокаПредмета.КартинкаТипаОбъекта = БиблиотекаКартинок.Документ;
	ИначеЕсли Найти(СтрокаПредмета.СсылкаТип,"Справочник.") <> 0 Тогда
		СтрокаПредмета.КартинкаТипаОбъекта = БиблиотекаКартинок.Справочник
	ИначеЕсли Найти(СтрокаПредмета.СсылкаТип,"БизнесПроцесс.") <> 0 Тогда
		СтрокаПредмета.КартинкаТипаОбъекта = БиблиотекаКартинок.БизнесПроцесс;
	ИначеЕсли Найти(СтрокаПредмета.СсылкаТип,"Задача.") <> 0 Тогда
		СтрокаПредмета.КартинкаТипаОбъекта = БиблиотекаКартинок.Задача;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуНовогоПисьма(Прокси, Параметры)
	
	Если Параметры.Предмет.type <> "DMIncomingEMail" Тогда
		НовыйОбъект = ИнтеграцияС1СДокументооборот.ПолучитьНовыйОбъект(Прокси, "DMOutgoingEMail", Параметры.Предмет);
	Иначе
		НовыйОбъект = ПолучитьОтветНаВходящееПисьмо(Прокси, Параметры);
	КонецЕсли;
	
	ЗаполнитьФормуИзОбъектаXDTO(НовыйОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКарточкуНовогоПисьмаПоВнешнемуОбъекту(Прокси, Параметры)
	
	ВнешнийОбъект = Параметры.ВнешнийОбъект;
	
	ПредметСтруктура = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьСвязанныйCВнешнимОбъектомДокумент(ВнешнийОбъект);
	
	Если ТипЗнч(ПредметСтруктура) <> Тип("Структура") Тогда
		ИмяТипа = ИнтеграцияС1СДокументооборотВызовСервера.ПолучитьИмяТипаДокументаДОИзНастроекЗаполнения(ВнешнийОбъект);
		Если ИмяТипа <> Неопределено Тогда
			ДокументXDTO = ИнтеграцияС1СДокументооборот.СоздатьДокументПоВнешнемуОбъекту(Прокси, ВнешнийОбъект, ИмяТипа);
			Если ДокументXDTO <> Неопределено Тогда
				ПредметСтруктура = новый Структура("id, type", ДокументXDTO.objectId.id, ДокументXDTO.objectID.type);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ПредметСтруктура) = Тип("Структура") Тогда
		НовыйОбъект = ИнтеграцияС1СДокументооборот.ПолучитьНовыйОбъект(Прокси, "DMOutgoingEMail", ПредметСтруктура);
		ЗаполнитьФормуИзОбъектаXDTO(НовыйОбъект);
		Возврат;
	КонецЕсли;
	
	МетаданныеПотребителя = ВнешнийОбъект.Метаданные();
	
	ИмяПотребителя = ?(МетаданныеПотребителя.Синоним <> "", МетаданныеПотребителя.Синоним, МетаданныеПотребителя.Имя);
	ТекстПредупреждения = НСтр("ru = 'Не настроено заполнение документа 1С:Документооборота из ''%ИмяПотребителя%''.'");
	ТекстПредупреждения = ТекстПредупреждения + Символы.ПС+ НСтр("ru = ' Для настройки правил автоматического заполнения обратитесь к администратору.'");
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%ИмяПотребителя%", ИмяПотребителя);
    ВызватьИсключение(ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОтветНаВходящееПисьмо(Прокси, Параметры)
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetIncomingEMailAnswerRequest");
	Запрос.type = "DMOutgoingEmail";
	
	Запрос.targetID = ИнтеграцияС1СДокументооборот.СоздатьObjectID(
		Прокси, Параметры.Предмет.id, Параметры.Предмет.type);
		
	Запрос.answerType = Параметры.answerType;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
	
	Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Ответ, "DMGetIncomingEMailAnswerResponse") Тогда
		Возврат Ответ.object;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтобразитьКоличествоФайловСервер()
	
	Если ДеревоПриложений.Количество() > 0 Тогда
		Элементы.ДеревоПриложенийСсылка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1)'"),
			ДеревоПриложений.Количество());
	Иначе
		Элементы.ДеревоПриложенийСсылка.Заголовок = НСтр("ru = 'Файлы'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтправитьНаСервере(МассивФайлов)
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	
	Письмо = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMOutgoingEMail");
	
	Письмо.name = Тема;
	Письмо.subject = Тема;
	Письмо.body = ТекстПисьма;
	Письмо.creationDate = ТекущаяДатаСеанса();
	Письмо.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "DMOutgoingEMail");
	
	Если ЗначениеЗаполнено(ПисьмоОснование) Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси, ЭтаФорма, "ПисьмоОснование", Письмо.baseObject, "DMObject");
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТипОтвета) Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси, ЭтаФорма, "ТипОтвета", Письмо.answerType, "DMEMailAnswerType");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Предмет) Тогда
		ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
			Прокси, ЭтаФорма, "Предмет", Письмо.target, "DMObject");
	КонецЕсли;
	
	ИнтеграцияС1СДокументооборот.ЗаполнитьОбъектXDTOИзОбъектногоРеквизита(
		Прокси, ЭтаФорма, "Важность", Письмо.importance, "DMEMailImportance");

		
	Письмо.recipients = ПолучитьСтрокуПолучателей("Кому:");
	Письмо.courtesyCopyRecipients = ПолучитьСтрокуПолучателей("Копия:");
	Письмо.blindCourtesyCopyRecipients = ПолучитьСтрокуПолучателей("СК:");
	
	Письмо.readyToBeSent = ТекущаяДатаСеанса();
	Письмо.senderAddress = Отправитель;
	
	// передача файлов
	Для Каждого ПараметрыФайла Из МассивФайлов Цикл
		Письмо.files.Добавить(ПодготовитьФайлКОтправке(Прокси, Параметрыфайла));
	КонецЦикла;
	
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMCreateRequest");
	Запрос.object = Письмо;
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуПолучателей(ТипАдреса)
	
	СтрокиПолучателей = Адресаты.НайтиСтроки(Новый Структура("ТипАдреса",ТипАдреса));
	АдресатыСтрокой = "";
	Для каждого Строка из СтрокиПолучателей Цикл
		АдресатыСтрокой = АдресатыСтрокой + Строка.Адресат + "; ";
	КонецЦикла;
	
	Возврат АдресатыСтрокой;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьФайлНаДискеКлиент(ПолноеИмяФайла)
	
	ПараметрыСоздания = Новый Структура("Имя, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное, АдресВременногоХранилищаФайла, Текст, ВебКлиент");
	ИдентификаторСозданногоФайла = Неопределено;
			
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ИмяФайла = Файл.ИмяБезРасширения + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
		
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		|Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	// Поместим Файл в ВременноеХранилище
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;

	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, УникальныйИдентификатор) Тогда
		ВызватьИсключение
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла в хранилище: %1'"), Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	ПараметрыСоздания.АдресВременногоХранилищаФайла = АдресВременногоХранилищаФайла;
	ПараметрыСоздания.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение);
	ПараметрыСоздания.ВремяИзменения = Файл.ПолучитьВремяИзменения();
	ПараметрыСоздания.ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	ПараметрыСоздания.Имя = Файл.ИмяБезРасширения;
	ПараметрыСоздания.Размер = Файл.Размер();
	ПараметрыСоздания.ВебКлиент = Ложь;
	
	Текст = "";
	ПараметрыСоздания.Текст = Текст;
	
	Возврат ПараметрыСоздания;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьФайлВДокументообороте(Строка)
	
	ПараметрыСоздания = Новый Структура("ID, Тип, Имя");
	ПараметрыСоздания.ID = Строка.СсылкаID;
	ПараметрыСоздания.Тип = Строка.СсылкаID;
	ПараметрыСоздания.Имя = Строка.Ссылка;
	
	Возврат ПараметрыСоздания;
	
КонецФункции

&НаКлиенте
Процедура СоздатьИзФайлаНаДиске()
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ВыборФайла.МножественныйВыбор = Истина;
		ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
		ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
		
		Результат = ВыборФайла.Выбрать();
		ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
	
		Если НЕ Результат Тогда
			Возврат;
		КонецЕсли;
		
		МассивФайлов = ВыборФайла.ВыбранныеФайлы;
		Для Каждого ИмяФайла Из МассивФайлов Цикл
			Файл = новый Файл(ИмяФайла);
			НоваяСтрока = ДеревоПриложений.Добавить();
			НоваяСтрока.ПутьКФайлуНаДиске = ИмяФайла;
			НоваяСтрока.Ссылка = Файл.ИмяБезРасширения;
			НоваяСтрока.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение);
			НоваяСтрока.КартинкаТипаОбъекта = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(НоваяСтрока.Расширение);
		КонецЦикла;
		
	Иначе 
		
		Предупреждение(НСтр("ru = 'Необходимо подключить расширение для работы  файлами.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьФайлКОтправке(Прокси, ПараметрыСоздания)
			
	Файл = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMFile");
	
	Файл.objectId = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObjectID");
	Файл.objectId.type = "DMFile";
	Файл.name = ПараметрыСоздания.Имя;
	
	Если ПараметрыСоздания.Свойство("ID") Тогда
		Файл.objectId.id = ПараметрыСоздания.ID;
	Иначе
		Файл.objectId.id = "";
		Файл.binaryData = ПолучитьИзВременногоХранилища(ПараметрыСоздания.АдресВременногоХранилищаФайла);
		Файл.extension = ПараметрыСоздания.Расширение;
		Файл.modificationDate = ПараметрыСоздания.ВремяИзменения;
		Файл.modificationDateUniversal = ПараметрыСоздания.ВремяИзмененияУниверсальное;
		Файл.size = ПараметрыСоздания.Размер;
		
		Размер = Файл.BinaryData.Размер();
		
		Если НЕ ПустаяСтрока(ПараметрыСоздания.Текст) Тогда
			Файл.text = ПараметрыСоздания.Текст;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Файл;

КонецФункции

&НаКлиенте
Процедура ЗакрытьФормуПриПересылке()
	
	Закрыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьДанныеДляАвтоПодбораАдресата(Данныевыбора, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetRecipientsListByNameRequest");
	Запрос.query = Текст;
	
	Результат = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Результат);
	
	НайденныеЗначения =  Результат.items;
	
	Для Каждого НайденноеЗначение Из НайденныеЗначения Цикл
		
		ДанныеДляВыбора = Новый Структура;
		ДанныеДляВыбора.Вставить("id", "");
		ДанныеДляВыбора.Вставить("type", "DMObject");
		ДанныеДляВыбора.Вставить("name", НайденноеЗначение);
		ДанныеВыбора.Добавить(ДанныеДляВыбора, НайденноеЗначение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементПолучатель()
		
	АвтоматическиНачатоРедактированиеАдреса = Истина;
	Элементы.Адресаты.ДобавитьСтроку();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТема()
	
	ТекущийЭлемент = Элементы.Тема;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементТекст()
	
	ТекущийЭлемент = Элементы.Тема;
	
	Если ЗначениеЗаполнено(ID) Тогда
		ТекущийЭлемент = Элементы.HTMLПредставление;
	Иначе
		ТекущийЭлемент = Элементы.ПростойТекст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборАдресата(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) = Тип("Массив") Тогда
		Если РезультатВыбора.Количество() = 1 Тогда
			ЗаполнитьЗначенияСвойств(Элементы.Адресаты.ТекущиеДанные, РезультатВыбора[0]);
			Элементы.Адресаты.ТекущиеДанные.НеНайден = Ложь;
		Иначе
			Для каждого ЭлементМассива из РезультатВыбора Цикл
				Если РезультатВыбора.Найти(ЭлементМассива) = 0 Тогда
					ЗаполнитьЗначенияСвойств(Элементы.Адресаты.ТекущиеДанные, РезультатВыбора[0]);
					Элементы.Адресаты.ТекущиеДанные.НеНайден = Ложь;
				Иначе
					ТекущаяСтрока = Адресаты.Добавить();
					ЗаполнитьЗначенияСвойств(ТекущаяСтрока,ЭлементМассива);
					ТекущаяСтрока.ТипАдреса =  Элементы.Адресаты.ТекущиеДанные.ТипАдреса;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

 &НаСервере
Функция ПроверитьПисьмоПередОтправкой()
	
	КодВозврата = Истина;
	
	СписокАдресов = новый Массив;
	Для каждого Стр из Адресаты Цикл
		Если ЗначениеЗаполнено(Стр.Адресат) Тогда
			СписокАдресов.Добавить(Стр.Адресат);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокАдресов.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя отправить письмо. Необходимо указать хотя бы одного получателя.'"),,
				"Адресаты");
		
		КодВозврата = Ложь;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Тема) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Нельзя отправить письмо. Не заполнена тема.'"),,
			"Тема");
		
		КодВозврата = Ложь;
		
	КонецЕсли;
	
	Если КодВозврата = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

