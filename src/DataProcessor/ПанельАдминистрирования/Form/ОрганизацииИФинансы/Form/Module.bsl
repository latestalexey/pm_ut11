
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьНачальныеЗначенияРеквизитов();
	
	УстановитьВидимостьДоступностьЗависимыхЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ТребуетсяОбновлениеИнтерфейса Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИспользоватьНесколькоОрганизацийПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаУправленческогоУчетаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(НаборКонстант.ВалютаУправленческогоУчета) Тогда
		Элементы.ВалютаУправленческогоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ВалютаУправленческогоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаРегламентированногоУчетаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(НаборКонстант.ВалютаРегламентированногоУчета) Тогда
		Элементы.ВалютаРегламентированногоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ВалютаРегламентированногоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПланированиеДенежныхСредствПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОплатуПлатежнымиКартамиПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРаздельныйУчетПоНалогообложениюПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУправленческуюОрганизациюПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОбособленныеПодразделенияВыделенныеНаБалансПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПередачиТоваровМеждуОрганизациямиПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролироватьОстаткиТоваровОрганизацийПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьГруппыФинансовогоУчетаПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКалендарьПредприятияПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьСебестоимостьТоваровПоВидамЗапасовПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьВидыЗапасовПоГруппамФинансовогоУчетаПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьВидыЗапасовПоПоставщикамПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьВидыЗапасовПоПодразделениямМенеджерамПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьВидыЗапасовПоСделкамПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойВариантКлассификацииЗадолженностиПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантЗапретитьОформлениеОперацийСИмпортнымиТоварамиБезНомеровГТДПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантЗапретитьПоступлениеТоваровБезНомеровГТДПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДоговорыКредитовИДепозитовПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоВалютПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоКассПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоРасчетныхСчетовПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоКлассификацийЗадолженностиПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУчетПрочихДоходовРасходовПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормироватьФинансовыйРезультатПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОткрытьОрганизации(Команда)
	ОткрытьФорму("Справочник.Организации.ФормаСписка", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОрганизацию(Команда)
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", Новый Структура("Ключ", ОрганизацияПоУмолчанию()));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВалюты(Команда)
	
	ОткрытьФорму("Справочник.Валюты.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВариантыКлассификацииЗадолженности(Команда)
	
	ОткрытьФорму("Справочник.ВариантыКлассификацииЗадолженности.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойтваКлассификацииЗадолженности(Команда)
	
	ОткрытьФорму("Справочник.ВариантыКлассификацииЗадолженности.ФормаОбъекта",
		Новый Структура("Ключ",ПолучитьПервыйВариантКлассификацииЗадолженностиНаСервере()),
		ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВалюты(Команда)
	ОткрытьФорму("Справочник.Валюты.ФормаОбъекта", Новый Структура("Ключ", ВалютаУчета()));
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКассы(Команда)
	
	ОткрытьФорму("Справочник.Кассы.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойстваКассы(Команда)
	
	ОткрытьФорму("Справочник.Кассы.ФормаОбъекта",
		Новый Структура("Ключ",ПолучитьПервуюКассуНаСервере()),
		ЭтаФорма);
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОткрытьБанковскиеСчетаОрганизаций(Команда)
	
	ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.ФормаСписка", , ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСвойствоБанковскогоСчетаОрганизации(Команда)
	
	ОткрытьФорму("Справочник.БанковскиеСчетаОрганизаций.ФормаОбъекта",
		Новый Структура("Ключ",ПолучитьПервыйБанковскийСчетОрганизацииНаСервере()),
		ЭтаФорма);
	
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервереБезКонтекста
Функция ОтображениеПредупреждения(Отображать)
	
	Если Отображать Тогда
		Возврат ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	Возврат ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаУчета()
	
	Возврат ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПервуюКассуНаСервере()
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию()
	
КонецФункции // ПолучитьПервуюКассуНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьПервыйБанковскийСчетОрганизацииНаСервере()

	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию();

КонецФункции // ПолучитьПервыйБанковскийСчетОрганизацииНаСервере()

&НаСервереБезКонтекста
Функция ПолучитьПервыйВариантКлассификацииЗадолженностиНаСервере()

	Возврат ДенежныеСредстваСервер.ПолучитьПервыйВариантКлассификацииЗадолженности();

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление интерфейса

&НаКлиенте 
Процедура ПодключитьОбработчикОжиданияОбновленияИнтерфейса()
	
	ТребуетсяОбновлениеИнтерфейса = Истина;
	
	#Если НЕ ВебКлиент Тогда
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновленияИнтерфейса", 1, Истина);
	#КонецЕсли 
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжиданияОбновленияИнтерфейса()
	
	ОбновитьИнтерфейс();
	
	ТребуетсяОбновлениеИнтерфейса = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение реквизитов

&НаСервере
Процедура ИнициализироватьНачальныеЗначенияРеквизитов()
	
	// Инициализация набора констант
	НаборКонстантОбъект = ДанныеФормыВЗначение(НаборКонстант, Тип("КонстантыНабор"));
	НаборКонстантОбъект.Прочитать();
	ЗначениеВДанныеФормы(НаборКонстантОбъект, НаборКонстант);
	
КонецПроцедуры

&НаСервере 
Процедура СохранитьЗначениеКонстанты(ИмяКонстанты)
	
	УстановитьЗначениеКонстантыПоИмени(ИмяКонстанты);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ВыполнитьМетодыПослеУстановкиЗначенияКонстанты(ИмяКонстанты);
	
КонецПроцедуры

&НаСервере 
Процедура ВыполнитьМетодыПослеУстановкиЗначенияКонстанты(ИмяКонстанты)
	
	Если ИмяКонстанты = "УчитыватьСебестоимостьТоваровПоВидамЗапасов" Тогда
		ЗапасыСервер.ПроведениеДокументовПоРегиструСебестоимостьТоваров();
	КонецЕсли;
	
	ВариантыОтчетовУТПереопределяемый.НастроитьВариантыОтчетовПоФункциональнойОпции(ИмяКонстанты, НаборКонстант[ИмяКонстанты]);
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьЗначениеКонстантыПоИмени(ИмяКонстанты)
	
	Если Константы[ИмяКонстанты].Получить() <> НаборКонстант[ИмяКонстанты] Тогда
		Константы[ИмяКонстанты].Установить(НаборКонстант[ИмяКонстанты]);
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЗависимыхЭлементовФормы(ИмяКонстанты);
	
	УстановитьЗначенияЗависимыхКонстант(ИмяКонстанты);
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьЗначенияЗависимыхКонстант(ИмяРодительскойКонстанты)
	
	Если ИмяРодительскойКонстанты = "ИспользоватьПланированиеДенежныхСредств" Тогда
		
		НаборКонстант.НеИспользоватьПланированиеДенежныхСредств = Не НаборКонстант.ИспользоватьПланированиеДенежныхСредств;
		УстановитьЗначениеКонстантыПоИмени("НеИспользоватьПланированиеДенежныхСредств");
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьОплатуПлатежнымиКартами" Тогда
		
		НаборКонстант.ИспользоватьПодключаемоеОборудованиеИОплатуПлатежнымиКартами = 
			НаборКонстант.ИспользоватьПодключаемоеОборудование И НаборКонстант.ИспользоватьОплатуПлатежнымиКартами;
		УстановитьЗначениеКонстантыПоИмени("ИспользоватьПодключаемоеОборудованиеИОплатуПлатежнымиКартами");
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьГруппыФинансовогоУчета" Тогда
		
		Если Не НаборКонстант.ИспользоватьГруппыФинансовогоУчета Тогда
			НаборКонстант.ФормироватьВидыЗапасовПоГруппамФинансовогоУчета = Ложь;
			УстановитьЗначениеКонстантыПоИмени("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета");
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "УчитыватьСебестоимостьТоваровПоВидамЗапасов" Тогда
		
		Если Не НаборКонстант.УчитыватьСебестоимостьТоваровПоВидамЗапасов Тогда
			НаборКонстант.ФормироватьВидыЗапасовПоГруппамФинансовогоУчета	= Ложь;
			НаборКонстант.ФормироватьВидыЗапасовПоПодразделениямМенеджерам	= Ложь;
			НаборКонстант.ФормироватьВидыЗапасовПоПоставщикам				= Ложь;
			НаборКонстант.ФормироватьВидыЗапасовПоСделкам					= Ложь;
			
			УстановитьЗначениеКонстантыПоИмени("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета");
			УстановитьЗначениеКонстантыПоИмени("ФормироватьВидыЗапасовПоПодразделениямМенеджерам");
			УстановитьЗначениеКонстантыПоИмени("ФормироватьВидыЗапасовПоПоставщикам");
			УстановитьЗначениеКонстантыПоИмени("ФормироватьВидыЗапасовПоСделкам");
			
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьНесколькоВалют" Тогда
		
		Если Не НаборКонстант.ИспользоватьНесколькоВалют Тогда
			НаборКонстант.ВалютаУправленческогоУчета = ВалютаУчета();
			НаборКонстант.ВалютаРегламентированногоУчета = ВалютаУчета();
			УстановитьЗначениеКонстантыПоИмени("ВалютаУправленческогоУчета");
			УстановитьЗначениеКонстантыПоИмени("ВалютаРегламентированногоУчета");
		КонецЕсли;
		
		НаборКонстант.НеИспользоватьНесколькоВалют = Не НаборКонстант.ИспользоватьНесколькоВалют;
		УстановитьЗначениеКонстантыПоИмени("НеИспользоватьНесколькоВалют");
		ВыполнитьМетодыПослеУстановкиЗначенияКонстанты("НеИспользоватьНесколькоВалют");
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьУчетПрочихДоходовРасходов" Тогда
		
		Если Не НаборКонстант.ИспользоватьУчетПрочихДоходовРасходов Тогда
			НаборКонстант.ФормироватьФинансовыйРезультат = Ложь;
			УстановитьЗначениеКонстантыПоИмени("ФормироватьФинансовыйРезультат");
		КонецЕсли;	
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьНесколькоОрганизаций" Тогда
		
		Если НаборКонстант.ИспользоватьНесколькоОрганизаций Тогда
			
			НаборКонстант.ИспользоватьНесколькоКасс				= Истина;
			НаборКонстант.ИспользоватьНесколькоРасчетныхСчетов	= Истина;
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьНесколькоКасс");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьНесколькоРасчетныхСчетов");
			ВыполнитьМетодыПослеУстановкиЗначенияКонстанты("ИспользоватьНесколькоКасс");
			ВыполнитьМетодыПослеУстановкиЗначенияКонстанты("ИспользоватьНесколькоРасчетныхСчетов");
			
		Иначе
			
			НаборКонстант.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс = НаборКонстант.ИспользоватьНесколькоОрганизаций;
			НаборКонстант.ИспользоватьПередачиТоваровМеждуОрганизациями           = НаборКонстант.ИспользоватьНесколькоОрганизаций;
			НаборКонстант.ИспользоватьУправленческуюОрганизацию                   = НаборКонстант.ИспользоватьНесколькоОрганизаций;
			
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьПередачиТоваровМеждуОрганизациями");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьУправленческуюОрганизацию");
			
		КонецЕсли;
		
		НаборКонстант.НеИспользоватьНесколькоОрганизаций = Не НаборКонстант.ИспользоватьНесколькоОрганизаций;
		УстановитьЗначениеКонстантыПоИмени("НеИспользоватьНесколькоОрганизаций");
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьПередачиТоваровМеждуОрганизациями" Тогда
		
		Если Не НаборКонстант.ИспользоватьПередачиТоваровМеждуОрганизациями Тогда
			НаборКонстант.ПеремещатьТоварыДругихОрганизаций = Ложь;
			УстановитьЗначениеКонстантыПоИмени("ПеремещатьТоварыДругихОрганизаций");
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ФормироватьФинансовыйРезультат" Тогда
		
		НаборКонстант.НеФормироватьФинансовыйРезультат = Не НаборКонстант.ФормироватьФинансовыйРезультат;
		УстановитьЗначениеКонстантыПоИмени("НеФормироватьФинансовыйРезультат");
		ВыполнитьМетодыПослеУстановкиЗначенияКонстанты("НеФормироватьФинансовыйРезультат");
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьНесколькоКасс"
		ИЛИ ИмяРодительскойКонстанты = "ИспользоватьНесколькоРасчетныхСчетов" Тогда
		
		НаборКонстант.ИспользоватьНесколькоРасчетныхСчетовКасс = НаборКонстант.ИспользоватьНесколькоКасс Или НаборКонстант.ИспользоватьНесколькоРасчетныхСчетов;
		УстановитьЗначениеКонстантыПоИмени("ИспользоватьНесколькоРасчетныхСчетовКасс");
		ВыполнитьМетодыПослеУстановкиЗначенияКонстанты("ИспользоватьНесколькоРасчетныхСчетовКасс");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЗависимыхЭлементовФормы(ИмяКонстанты = Неопределено)
	
	// Настройки, выполняемые однократно, только при создании формы
	Если ИмяКонстанты = Неопределено Тогда
		
		Элементы.ВалютаУправленческогоУчета.ОтображениеПредупрежденияПриРедактировании 	   = ОтображениеПредупреждения(ЗначениеЗаполнено(НаборКонстант.ВалютаУправленческогоУчета));
		Элементы.ВалютаРегламентированногоУчета.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения(ЗначениеЗаполнено(НаборКонстант.ВалютаРегламентированногоУчета));
		
	КонецЕсли;
	
	// Настройки, выполняемые при создании формы и при изменении соответствующего элемента формы
	Если ИмяКонстанты = "ИспользоватьГруппыФинансовогоУчета" Или ИмяКонстанты = Неопределено Тогда
		Элементы.ФормироватьВидыЗапасовПоГруппамФинансовогоУчета.Доступность = НаборКонстант.ИспользоватьГруппыФинансовогоУчета И НаборКонстант.УчитыватьСебестоимостьТоваровПоВидамЗапасов;
	КонецЕсли;
		
	Если ИмяКонстанты = "УчитыватьСебестоимостьТоваровПоВидамЗапасов" Или ИмяКонстанты = Неопределено Тогда
		Элементы.ФормироватьВидыЗапасовПоГруппамФинансовогоУчета.Доступность 	= НаборКонстант.УчитыватьСебестоимостьТоваровПоВидамЗапасов И НаборКонстант.ИспользоватьГруппыФинансовогоУчета;
		Элементы.ФормироватьВидыЗапасовПоПодразделениямМенеджерам.Доступность 	= НаборКонстант.УчитыватьСебестоимостьТоваровПоВидамЗапасов;
		Элементы.ФормироватьВидыЗапасовПоПоставщикам.Доступность 				= НаборКонстант.УчитыватьСебестоимостьТоваровПоВидамЗапасов;
		Элементы.ФормироватьВидыЗапасовПоСделкам.Доступность 					= НаборКонстант.УчитыватьСебестоимостьТоваровПоВидамЗапасов; // И НаборКонстант.ИспользоватьСделкиСКлиентами; //Петр
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьНесколькоВалют" ИЛИ ИмяКонстанты = Неопределено Тогда
		
		Если НаборКонстант.ИспользоватьНесколькоВалют Тогда
			Элементы.ГруппаСтраницыВалюты.ТекущаяСтраница = Элементы.ГруппаСтраницыВалюты.ПодчиненныеЭлементы.ГруппаОткрытьВалюты;
		Иначе
			Элементы.ГруппаСтраницыВалюты.ТекущаяСтраница = Элементы.ГруппаСтраницыВалюты.ПодчиненныеЭлементы.ГруппаПараметрыВалюты;
		КонецЕсли;
		
		Элементы.ВалютаУправленческогоУчета.Доступность = НаборКонстант.ИспользоватьНесколькоВалют;
		Элементы.ВалютаРегламентированногоУчета.Доступность = НаборКонстант.ИспользоватьНесколькоВалют;
		
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьУчетПрочихДоходовРасходов" ИЛИ ИмяКонстанты = Неопределено Тогда
		Элементы.ФормироватьФинансовыйРезультат.Доступность = НаборКонстант.ИспользоватьУчетПрочихДоходовРасходов;
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьНесколькоКасс" ИЛИ ИмяКонстанты = Неопределено Тогда
		
		Элементы.ГруппаУправленияКассамиНесколькоКасс.Видимость		= НаборКонстант.ИспользоватьНесколькоКасс;
		Элементы.ГруппаУправленияКассамиЕдинственнаяКасса.Видимость	= Не НаборКонстант.ИспользоватьНесколькоКасс;
		
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьНесколькоРасчетныхСчетов" ИЛИ ИмяКонстанты = Неопределено Тогда
		
		Элементы.ГруппаУправленияНесколькоСчетов.Видимость	= НаборКонстант.ИспользоватьНесколькоРасчетныхСчетов;
		Элементы.ГруппаУправленияЕдинственныйСчет.Видимость	= Не НаборКонстант.ИспользоватьНесколькоРасчетныхСчетов;
		
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьНесколькоКлассификацийЗадолженности" ИЛИ ИмяКонстанты = Неопределено Тогда
		
		Элементы.ГруппаГруппаКлассификацияЗадолженностей1.Видимость				= НаборКонстант.ИспользоватьНесколькоКлассификацийЗадолженности;
		Элементы.ГруппаГруппаКлассификацияЗадолженностейЕдинственная.Видимость	= НЕ НаборКонстант.ИспользоватьНесколькоКлассификацийЗадолженности;
		Элементы.ОсновнойВариантКлассификацииЗадолженности.Доступность			= НаборКонстант.ИспользоватьНесколькоКлассификацийЗадолженности;
		
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьНесколькоОрганизаций" ИЛИ ИмяКонстанты = Неопределено Тогда
		
		Если Не НаборКонстант.ИспользоватьНесколькоОрганизаций Тогда
			Элементы.ГруппаСтраницыОрганизации.ТекущаяСтраница = Элементы.ГруппаСтраницыОрганизации.ПодчиненныеЭлементы.ГруппаПараметрыОрганизации;
		Иначе
			Элементы.ГруппаСтраницыОрганизации.ТекущаяСтраница = Элементы.ГруппаСтраницыОрганизации.ПодчиненныеЭлементы.ГруппаОрганизации;
		КонецЕсли;
		
		Элементы.ИспользоватьНесколькоКасс.Доступность = НЕ НаборКонстант.ИспользоватьНесколькоОрганизаций;
		Элементы.ИспользоватьНесколькоРасчетныхСчетов.Доступность = НЕ НаборКонстант.ИспользоватьНесколькоОрганизаций;
		Элементы.ИспользоватьПередачиТоваровМеждуОрганизациями.Доступность = НаборКонстант.ИспользоватьНесколькоОрганизаций;
		Элементы.ИспользоватьУправленческуюОрганизацию.Доступность = НаборКонстант.ИспользоватьНесколькоОрганизаций;
		Элементы.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс.Доступность = НаборКонстант.ИспользоватьНесколькоОрганизаций;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОрганизацияПоУмолчанию()
	Возврат Справочники.Организации.ПолучитьОрганизациюПоУмолчанию();
КонецФункции
