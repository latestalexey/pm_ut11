
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализироватьНачальныеЗначенияРеквизитов();
	
	УстановитьВидимостьДоступностьЗависимыхЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ТребуетсяОбновлениеИнтерфейса Тогда
		ОбновитьИнтерфейс();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ИспользоватьОрдерныеСкладыПриИзменении(Элемент)
	
	Если Не НаборКонстант.ИспользоватьОрдерныеСклады Тогда
		Элементы.ИспользоватьОрдерныеСклады.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ИспользоватьОрдерныеСклады.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
		Элементы.ИспользоватьРаспоряженияНаИнвентаризацию.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьРаспоряженияНаИнвентаризациюПриИзменении(Элемент)
	
	Если Не НаборКонстант.ИспользоватьРаспоряженияНаИнвентаризацию Тогда
		Элементы.ИспользоватьРаспоряженияНаИнвентаризацию.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	Иначе
		Элементы.ИспользоватьРаспоряженияНаИнвентаризацию.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьУправлениеДоставкойПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьАдресаДоставкиТолькоВДиалогеПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаДоставкиТолькоРоссийскиеПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиДляДоставкиПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ШаблонЭтикеткиДляДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	Отбор = Новый Структура();
	Отбор.Вставить("Назначение", ПредопределенноеЗначение("Перечисление.НазначенияШаблоновЭтикетокИЦенников.ЭтикеткаДляДоставки"));
	ПараметрыФормы.Вставить("Отбор",Отбор);
	ШаблонЭтикетки = ОткрытьФормуМодально("Справочник.ШаблоныЭтикетокИЦенников.ФормаВыбора",ПараметрыФормы);
	Если ШаблонЭтикетки=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборКонстант.ШаблонЭтикеткиДляДоставки =  ШаблонЭтикетки;
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьНесколькоСкладовПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещениеТоваровПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаказыНаПеремещениеПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПеремещениеПоНесколькимЗаказамПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтатусыПеремещенийТоваровПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтатусыЗаказовНаПеремещениеПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
	ПодключитьОбработчикОжиданияОбновленияИнтерфейса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеремещатьТоварыДругихОрганизацийПриИзменении(Элемент)
	
	СохранитьЗначениеКонстанты(Элемент.Имя);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОМАНДЫ

&НаКлиенте
Процедура ОткрытьСклады(Команда)
	
	ОткрытьФорму("Справочник.Склады.ФормаСписка", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСкладскогоУчета(Команда)
	
	ОткрытьФорму("Справочник.Склады.ФормаОбъекта", Новый Структура("Ключ", Склад()));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервереБезКонтекста
Функция ОтображениеПредупреждения(Отображать)
	
	Если Отображать Тогда
		Возврат ОтображениеПредупрежденияПриРедактировании.Отображать;
	КонецЕсли;
	
	Возврат ОтображениеПредупрежденияПриРедактировании.НеОтображать;
	
КонецФункции

&НаСервереБезКонтекста
Функция Склад()
	
	Возврат Справочники.Склады.СкладПоУмолчанию();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление интерфейса

&НаКлиенте 
Процедура ПодключитьОбработчикОжиданияОбновленияИнтерфейса()
	
	ТребуетсяОбновлениеИнтерфейса = Истина;
	
	#Если НЕ ВебКлиент Тогда
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОбновленияИнтерфейса", 1, Истина);
	#КонецЕсли 
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработчикОжиданияОбновленияИнтерфейса()
	
	ОбновитьИнтерфейс();
	
	ТребуетсяОбновлениеИнтерфейса = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Изменение реквизитов

&НаСервере
Процедура ИнициализироватьНачальныеЗначенияРеквизитов()
	
	// Инициализация набора констант
	НаборКонстантОбъект = ДанныеФормыВЗначение(НаборКонстант, Тип("КонстантыНабор"));
	НаборКонстантОбъект.Прочитать();
	ЗначениеВДанныеФормы(НаборКонстантОбъект, НаборКонстант);
	
КонецПроцедуры

&НаСервере 
Процедура СохранитьЗначениеКонстанты(ИмяКонстанты)
	
	УстановитьЗначениеКонстантыПоИмени(ИмяКонстанты);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ВыполнитьМетодыПослеУстановкиЗначенияКонстанты(ИмяКонстанты);
	
КонецПроцедуры

&НаСервере 
Процедура ВыполнитьМетодыПослеУстановкиЗначенияКонстанты(ИмяКонстанты)
	
	ВариантыОтчетовУТПереопределяемый.НастроитьВариантыОтчетовПоФункциональнойОпции(ИмяКонстанты, НаборКонстант[ИмяКонстанты]);
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьЗначениеКонстантыПоИмени(ИмяКонстанты)
	
	Если Константы[ИмяКонстанты].Получить() <> НаборКонстант[ИмяКонстанты] Тогда
		Константы[ИмяКонстанты].Установить(НаборКонстант[ИмяКонстанты]);
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЗависимыхЭлементовФормы(ИмяКонстанты);
	
	УстановитьЗначенияЗависимыхКонстант(ИмяКонстанты);
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьЗначенияЗависимыхКонстант(ИмяРодительскойКонстанты)
	
	Если ИмяРодительскойКонстанты = "ИспользоватьОрдерныеСклады" Тогда
		Если НаборКонстант.ИспользоватьОрдерныеСклады Тогда
			НаборКонстант.ИспользоватьРаспоряженияНаИнвентаризацию = Истина;
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьРаспоряженияНаИнвентаризацию");
		КонецЕсли;
	
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьРаспоряженияНаИнвентаризацию" Тогда
		НаборКонстант.НеИспользоватьРаспоряженияНаИнвентаризацию = НЕ НаборКонстант.ИспользоватьРаспоряженияНаИнвентаризацию;
		УстановитьЗначениеКонстантыПоИмени("НеИспользоватьРаспоряженияНаИнвентаризацию");
	
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьНесколькоСкладов" Тогда
		
		Если Не НаборКонстант.ИспользоватьНесколькоСкладов Тогда
			НаборКонстант.ИспользоватьСкладыВТабличнойЧастиДокументовПродажи = НаборКонстант.ИспользоватьНесколькоСкладов;
			НаборКонстант.ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки = НаборКонстант.ИспользоватьНесколькоСкладов;
			НаборКонстант.ИспользоватьПеремещениеТоваров                     = НаборКонстант.ИспользоватьНесколькоСкладов;
			
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьСкладыВТабличнойЧастиДокументовПродажи");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьСкладыВТабличнойЧастиДокументовЗакупки");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьПеремещениеТоваров");
		КонецЕсли;
		
		НаборКонстант.НеИспользоватьНесколькоСкладов = Не НаборКонстант.ИспользоватьНесколькоСкладов;
		УстановитьЗначениеКонстантыПоИмени("НеИспользоватьНесколькоСкладов");
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьПеремещениеТоваров" Тогда
		
		Если Не НаборКонстант.ИспользоватьПеремещениеТоваров Тогда
			НаборКонстант.ИспользоватьЗаказыНаПеремещение            = Ложь;
			НаборКонстант.ИспользоватьПеремещениеПоНесколькимЗаказам = Ложь;
			НаборКонстант.ИспользоватьСтатусыПеремещенийТоваров      = Ложь;
			НаборКонстант.ПеремещатьТоварыДругихОрганизаций = Ложь;
			
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьЗаказыНаПеремещение");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьПеремещениеПоНесколькимЗаказам");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьСтатусыПеремещенийТоваров");
			УстановитьЗначениеКонстантыПоИмени("ПеремещатьТоварыДругихОрганизаций");
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьЗаказыНаПеремещение" Тогда
		
		Если Не НаборКонстант.ИспользоватьЗаказыНаПеремещение Тогда
			НаборКонстант.ИспользоватьПеремещениеПоНесколькимЗаказам = Ложь;
			НаборКонстант.ИспользоватьСтатусыЗаказовНаПеремещение = Ложь;
			
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьПеремещениеПоНесколькимЗаказам");
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьСтатусыЗаказовНаПеремещение");
		КонецЕсли;
		
	ИначеЕсли ИмяРодительскойКонстанты = "ИспользоватьПеремещениеПоНесколькимЗаказам" Тогда
		
		Если Не НаборКонстант.ИспользоватьПеремещениеПоНесколькимЗаказам Тогда
			НаборКонстант.ИспользоватьСтатусыПеремещенийТоваров = Ложь;
			
			УстановитьЗначениеКонстантыПоИмени("ИспользоватьСтатусыПеремещенийТоваров");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЗависимыхЭлементовФормы(ИмяКонстанты = Неопределено)
	
	// Настройки, выполняемые однократно, только при создании формы
	Если ИмяКонстанты = Неопределено Тогда
		Элементы.ИспользоватьОрдерныеСклады.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения(НаборКонстант.ИспользоватьОрдерныеСклады);
		Элементы.ИспользоватьРаспоряженияНаИнвентаризацию.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупреждения(НаборКонстант.ИспользоватьРаспоряженияНаИнвентаризацию);
	КонецЕсли;
	
	// Настройки, выполняемые при создании формы и при изменении соответствующего элемента формы
	
	Если ИмяКонстанты = "ИспользоватьОрдерныеСклады" ИЛИ ИмяКонстанты = Неопределено Тогда
		Элементы.ИспользоватьРаспоряженияНаИнвентаризацию.Доступность	= НЕ НаборКонстант.ИспользоватьОрдерныеСклады;
	КонецЕсли;
		
	Если ИмяКонстанты = "ИспользоватьУправлениеДоставкой" ИЛИ ИмяКонстанты = Неопределено Тогда
		Элементы.РедактироватьАдресаДоставкиТолькоВДиалоге.Доступность		= НаборКонстант.ИспользоватьУправлениеДоставкой;
		Элементы.ШаблонЭтикеткиДляДоставки.Доступность 						= НаборКонстант.ИспользоватьУправлениеДоставкой;
		Элементы.АдресаДоставкиТолькоРоссийские.Доступность 				= НаборКонстант.ИспользоватьУправлениеДоставкой;
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьНесколькоСкладов" ИЛИ ИмяКонстанты = Неопределено Тогда
		
		Если НаборКонстант.ИспользоватьНесколькоСкладов Тогда
			Элементы.ГруппаСтраницыСклады.ТекущаяСтраница = Элементы.ГруппаСтраницыСклады.ПодчиненныеЭлементы.ГруппаОткрытьСклады;
		Иначе
			Элементы.ГруппаСтраницыСклады.ТекущаяСтраница = Элементы.ГруппаСтраницыСклады.ПодчиненныеЭлементы.ГруппаПараметрыСклада;
			//Элементы.ИспользоватьЗаказыНаПеремещение.Доступность                    = НаборКонстант.ИспользоватьНесколькоСкладов;
			//Элементы.ИспользоватьПеремещениеПоНесколькимЗаказам.Доступность         = НаборКонстант.ИспользоватьНесколькоСкладов;
			//Элементы.ИспользоватьСтатусыЗаказовНаПеремещение.Доступность            = НаборКонстант.ИспользоватьНесколькоСкладов;
			//Элементы.ИспользоватьСтатусыПеремещенийТоваров.Доступность              = НаборКонстант.ИспользоватьНесколькоСкладов;
		КонецЕсли;
		
		Элементы.ИспользоватьПеремещениеТоваров.Доступность                     = НаборКонстант.ИспользоватьНесколькоСкладов;
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьПеремещениеТоваров" Или ИмяКонстанты = Неопределено Тогда
		Элементы.ИспользоватьЗаказыНаПеремещение.Доступность 			= НаборКонстант.ИспользоватьПеремещениеТоваров;
		Элементы.ИспользоватьСтатусыПеремещенийТоваров.Доступность 		= НаборКонстант.ИспользоватьПеремещениеТоваров;
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьЗаказыНаПеремещение" Или ИмяКонстанты = Неопределено Тогда
		Элементы.ИспользоватьПеремещениеПоНесколькимЗаказам.Доступность = НаборКонстант.ИспользоватьЗаказыНаПеремещение;
		Элементы.ИспользоватьСтатусыЗаказовНаПеремещение.Доступность    = НаборКонстант.ИспользоватьЗаказыНаПеремещение;
	КонецЕсли;
	
	Если ИмяКонстанты = "ПеремещатьТоварыДругихОрганизаций" Или ИмяКонстанты = Неопределено Тогда
		Элементы.ПеремещатьТоварыДругихОрганизаций.Доступность = НаборКонстант.ИспользоватьПеремещениеТоваров
			И НаборКонстант.ИспользоватьПередачиТоваровМеждуОрганизациями;
		Элементы.ГруппаКомментарийПеремещатьТоварыДругихОрганизаций.Видимость =
			Не НаборКонстант.ИспользоватьПередачиТоваровМеждуОрганизациями;
	КонецЕсли;
		
КонецПроцедуры
