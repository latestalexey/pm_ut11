
////////////////////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗаполнитьПроектыДеревоЗаОднуИтерациюЦикла();
КонецПроцедуры

&НаКлиенте
Процедура ПроектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	ИмяКолонки=СтрЗаменить(Элементы.Проекты.ТекущийЭлемент.Имя,"Проекты","");
	
	Если ИмяКолонки = "Проект" Тогда
		ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.Проект);
	ИначеЕсли ИмяКолонки = "Посредник" Тогда
		ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.КПСсылка);
	ИначеЕсли ИмяКолонки = "КП" Тогда
		ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.КПСсылка);		
	ИначеЕсли ИмяКолонки = "ДоговорДата" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.Договор);
		ОткрытьФайл(Элемент.ТекущиеДанные.Договор);
	ИначеЕсли ИмяКолонки = "СчетДата" Тогда	
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.Счет);
		ОткрытьФайл(Элемент.ТекущиеДанные.Счет);
	ИначеЕсли ИмяКолонки = "СпецификацияДата" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.Спецификация);	
		//ОткрытьПрисоединенныйФайл(Элемент.ТекущиеДанные.Спецификация.ссылка)
		ОткрытьФайл(Элемент.ТекущиеДанные.Спецификация);
		
	ИначеЕсли ИмяКолонки = "ПредОплата" Тогда	
		ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗКСсылка);
	ИначеЕсли ИмяКолонки = "ЗаказКлиентаДата" Тогда		
		ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗКСсылка); 	
		
	ИначеЕсли ИмяКолонки = "ЗаказПоставщикуДатаСумма" Тогда		
		ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗПСсылка); 
	ИначеЕсли ИмяКолонки = "ЗаказНаДоставкуДата" Тогда		
		ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗаказНаДоставкуСсылка); 
	ИначеЕсли ИмяКолонки = "ЗаказНаМонтажДата" Тогда		
		ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗаказНаМонтажСсылка); 	  
	ИначеЕсли ИмяКолонки = "Оплата" Тогда		
		ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗКСсылка); 
		
		// ПОКА ИХ ЕЩЕ НЕТ 21 01 2014 
		//	ИначеЕсли ИмяКолонки = "ОрдерПриходСклад1" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗКСсылка); 
		//  ИначеЕсли ИмяКолонки = "ОрдерРасходСклад1" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗКСсылка); 
		//  ИначеЕсли ИмяКолонки = "ОрдерПриходСклад2" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗКСсылка); 
		//  ИначеЕсли ИмяКолонки = "ОрдерРасходСклад2" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ЗКСсылка); 
		
	ИначеЕсли ИмяКолонки = "ТТНДата" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ТТН);
		ОткрытьФайл(Элемент.ТекущиеДанные.ТТН);
	ИначеЕсли ИмяКолонки = "Торг12Дата" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.Торг12);
		ОткрытьФайл(Элемент.ТекущиеДанные.Торг12);
	ИначеЕсли ИмяКолонки = "МонтажныйЛистДата" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.МонтажныйЛист);
		ОткрытьФайл(Элемент.ТекущиеДанные.МонтажныйЛист);
	ИначеЕсли ИмяКолонки = "ОбратнаяСвязьДата" Тогда		
		//ОткрытьЗначение(Элементы.Проекты.ТекущиеДанные.ОбратнаяСвязь);
		ОткрытьФайл(Элемент.ТекущиеДанные.ОбратнаяСвязь);
		
	КонецЕсли;
	
	//Элемент.текущиеДанные	
	//Поле.имя
	// ОткрытьПрисоединенныйФайл(Элемент.ТекущиеДанные.Договор);
	
	// Элемент.ТекущиеДанные.Договор
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////
// Команды формы


&НаКлиенте
Процедура УстановитьОтбор(Команда)
	
	Имя=СтрЗаменить(Элементы.Проекты.ТекущийЭлемент.Имя,"Проекты","");
	Значение =   Элементы.Проекты.ТекущиеДанные[имя];
	
	Отбор   = Новый ФиксированнаяСтруктура(Имя,Значение);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтбор(Команда)
	Отбор   = Новый ФиксированнаяСтруктура();
	Элементы.Проекты.ОтборСтрок=Отбор;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////////////////////
// Основные процедуры и функции


&НаСервере
Процедура ЗаполнитьПроектыДеревоЗаОднуИтерациюЦикла()
	
	
	// Проекты
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СделкиСКлиентами.Ссылка КАК Проект,
	|	СделкиСКлиентами.ДатаНачала
	|ИЗ
	|	Справочник.СделкиСКлиентами КАК СделкиСКлиентами
	|ГДЕ
	|	СделкиСКлиентами.ПометкаУдаления = ЛОЖЬ
	|	И СделкиСКлиентами.Закрыта = ЛОЖЬ
	|	И СделкиСКлиентами.ДатаНачала >= &ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КоммерческоеПредложениеКлиенту.Ссылка,
	|	КоммерческоеПредложениеКлиенту.Организация КАК Посредник,
	|	КоммерческоеПредложениеКлиенту.Сделка КАК Сделка,
	|	КоммерческоеПредложениеКлиенту.СуммаДокумента КАК КП
	|ИЗ
	|	Документ.КоммерческоеПредложениеКлиенту КАК КоммерческоеПредложениеКлиенту
	|ГДЕ
	|	КоммерческоеПредложениеКлиенту.ПометкаУдаления = ЛОЖЬ
	|	И КоммерческоеПредложениеКлиенту.Проведен = ИСТИНА
	|	И КоммерческоеПредложениеКлиенту.Статус = &Статус
	|
	|УПОРЯДОЧИТЬ ПО
	|	КоммерческоеПредложениеКлиенту.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыКлиентов.ЗаказКлиента,
	|	ЗаказыКлиентов.ЗаказКлиента.ДокументОснование КАК КПСсылка,
	|	СУММА(ЗаказыКлиентов.Сумма) КАК Сумма,
	|	ЗаказыКлиентов.ЗаказКлиента.Дата,
	|	ЗаказыКлиентов.ЗаказКлиента.Номер КАК Номер
	|ИЗ
	|	РегистрНакопления.ЗаказыКлиентов КАК ЗаказыКлиентов
	|ГДЕ
	|	ЗаказыКлиентов.ЗаказКлиента.ДокументОснование <> &ДокументОснование
	|	И ЗаказыКлиентов.ЗаказКлиента.ДокументОснование <> &НетДокументаОснования
	|	И ЗаказыКлиентов.ЗаказКлиента.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыКлиентов.ЗаказКлиента,
	|	ЗаказыКлиентов.ЗаказКлиента.ДокументОснование,
	|	ЗаказыКлиентов.ЗаказКлиента.Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказыКлиентов.ЗаказКлиента.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыПоставщикам.ЗаказПоставщику КАК ЗаказПоставщику,
	|	СУММА(ЗаказыПоставщикам.ЗаказПоставщику.СуммаДокумента) КАК Сумма,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ДокументОснование КАК ЗКСсылка
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
	|ГДЕ
	|	ЗаказыПоставщикам.ЗаказПоставщику.ДокументОснование <> &ДокументОснованиеЗП
	|	И ЗаказыПоставщикам.ЗаказПоставщику.ДокументОснование <> &НетДокументОснованиеЗП
	|	И ЗаказыПоставщикам.ЗаказПоставщику.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикам.ЗаказПоставщику,
	|	ЗаказыПоставщикам.ЗаказПоставщику.Дата,
	|	ЗаказыПоставщикам.ЗаказПоставщику.ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказыПоставщикам.ЗаказПоставщику.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Ссылка КАК ЗаказНаДоставку,
	|	ЗаказПоставщикуТовары.Ссылка.Дата КАК ЗаказНаДоставкуДата,
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказКлиента КАК ЗКСсылка,
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказПоставщика КАК ЗПСсылка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.ДополнительныеУслуги КАК ЗаказПоставщикуДополнительныеУслуги
	|		ПО ЗаказПоставщикуТовары.Ссылка = ЗаказПоставщикуДополнительныеУслуги.Ссылка
	|ГДЕ
	|	ЗаказПоставщикуТовары.Номенклатура = &Доставка
	|	И ЗаказПоставщикуТовары.Ссылка.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказКлиента,
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказПоставщика,
	|	ЗаказПоставщикуТовары.Ссылка.Дата,
	|	ЗаказПоставщикуТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщикуТовары.Ссылка.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Ссылка КАК ЗаказНаМонтаж,
	|	ЗаказПоставщикуТовары.Ссылка.Дата КАК ЗаказНаМонтажДата,
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказКлиента КАК ЗКСсылка,
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказПоставщика КАК ЗПСсылка
	|ИЗ
	|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.ДополнительныеУслуги КАК ЗаказПоставщикуДополнительныеУслуги
	|		ПО ЗаказПоставщикуТовары.Ссылка = ЗаказПоставщикуДополнительныеУслуги.Ссылка
	|ГДЕ
	|	ЗаказПоставщикуТовары.Номенклатура = &Монтаж
	|	И ЗаказПоставщикуТовары.Ссылка.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказКлиента,
	|	ЗаказПоставщикуДополнительныеУслуги.ЗаказПоставщика,
	|	ЗаказПоставщикуТовары.Ссылка.Дата,
	|	ЗаказПоставщикуТовары.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказПоставщикуТовары.Ссылка.Номер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаЭтапыГрафикаОплаты.Ссылка КАК ЗКСсылка,
	|	ЗаказКлиентаЭтапыГрафикаОплаты.ВариантОплаты,
	|	ЗаказКлиентаЭтапыГрафикаОплаты.ДатаПлатежа,
	|	ЗаказКлиентаЭтапыГрафикаОплаты.ПроцентПлатежа,
	|	ЗаказКлиентаЭтапыГрафикаОплаты.СуммаПлатежа
	|ИЗ
	|	Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЗаказКлиентаЭтапыГрафикаОплаты
	|ГДЕ
	|	ЗаказКлиентаЭтапыГрафикаОплаты.ВариантОплаты = &ВариантОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументЗаказКлиента.Ссылка КАК ЗКСсылка,
	|	ВЫБОР
	|		КОГДА ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|				И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|				И ДокументЗаказКлиента.Проведен
	|				И ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|				И ДокументЗаказКлиента.СуммаДокумента > 0
	|			ТОГДА ВЫРАЗИТЬ(ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОплаты,
	|	ВЫБОР
	|		КОГДА ДокументЗаказКлиента.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию)
	|				И ДокументЗаказКлиента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоЗаказамНакладным)
	|				И ДокументЗаказКлиента.Проведен
	|				И ДокументЗаказКлиента.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.НеСогласован)
	|				И ДокументЗаказКлиента.СуммаДокумента > 0
	|			ТОГДА ВЫРАЗИТЬ((ДокументЗаказКлиента.СуммаДокумента - ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0)) * 100 / ДокументЗаказКлиента.СуммаДокумента КАК ЧИСЛО(15, 0))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПроцентОплаты
	|ПОМЕСТИТЬ ВТ_ОПЛАТА
	|ИЗ
	|	Документ.ЗаказКлиента КАК ДокументЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияЭД КАК СостоянияЭД
	|		ПО (СостоянияЭД.СсылкаНаОбъект = ДокументЗаказКлиента.Ссылка)
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки КАК РасчетыСКлиентамиОстатки
	|		ПО ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстатки.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКлиентами.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК РасчетыСКлиентамиОстаткиНаДатуАктуальности
	|		ПО ДокументЗаказКлиента.Ссылка = РасчетыСКлиентамиОстаткиНаДатуАктуальности.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки КАК ЗаказыКлиентовОстатки
	|		ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстатки.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыКлиентов.Остатки(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК ЗаказыКлиентовОстаткиНаДатуАктуальности
	|		ПО ДокументЗаказКлиента.Ссылка = ЗаказыКлиентовОстаткиНаДатуАктуальности.ЗаказКлиента}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОПЛАТА.ЗКСсылка,
	|	ВТ_ОПЛАТА.СуммаОплаты,
	|	ВТ_ОПЛАТА.ПроцентОплаты
	|ИЗ
	|	ВТ_ОПЛАТА КАК ВТ_ОПЛАТА
	|ГДЕ
	|	ВТ_ОПЛАТА.ПроцентОплаты <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказКлиентаПрисоединенныеФайлы.Ссылка КАК ПрисоединенныйФайл,
	|	ЗаказКлиентаПрисоединенныеФайлы.ДатаСоздания КАК Дата,
	|	ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла КАК ЗКСсылка
	|ИЗ
	|	Справочник.ЗаказКлиентаПрисоединенныеФайлы КАК ЗаказКлиентаПрисоединенныеФайлы
	|ГДЕ
	|	ЗаказКлиентаПрисоединенныеФайлы.ПометкаУдаления = ЛОЖЬ
	|	И ЗаказКлиентаПрисоединенныеФайлы.ВладелецФайла.Проведен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриходныйОрдерНаТовары.Ссылка КАК ПриходныйОрдер1,
	|	ПриходныйОрдерНаТовары.Номер,
	|	ПриходныйОрдерНаТовары.Дата,
	|	ПриходныйОрдерНаТовары.Склад,
	|	ПриходныйОрдерНаТовары.Распоряжение.Ссылка КАК ЗПСсылка
	|ИЗ
	|	Документ.ПриходныйОрдерНаТовары КАК ПриходныйОрдерНаТовары
	|ГДЕ
	|	ПриходныйОрдерНаТовары.Проведен = ИСТИНА
	|	И ПриходныйОрдерНаТовары.Склад = &СкладТоварыВПути
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка,
	|	РасходныйОрдерНаТовары.Номер КАК Номер,
	|	РасходныйОрдерНаТовары.Дата КАК Дата,
	|	РасходныйОрдерНаТовары.Склад КАК Склад,
	|	РасходныйОрдерНаТовары.Распоряжение.Ссылка,
	|	РасходныйОрдерНаТовары.Распоряжение.ЗаказКлиента КАК ЗКСсылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Проведен = ИСТИНА
	|	И РасходныйОрдерНаТовары.Склад = &СкладТоварыВПути";
	
	
	ЗапросДанных = новый  запрос;
	
	ЗапросДанных.Текст = ТекстЗапроса;
	
	ЗапросДанных.УстановитьПараметр("ДатаНачала",'20140101000000');    // для КП
	
	ЗапросДанных.УстановитьПараметр("Статус",Перечисления.СтатусыКоммерческихПредложенийКлиентам.Действует);    // для КП
	ЗапросДанных.УстановитьПараметр("ДокументОснование",Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка()); //для ЗК
	ЗапросДанных.УстановитьПараметр("НетДокументаОснования",Неопределено);   //для ЗК
	ЗапросДанных.УстановитьПараметр("ДокументОснованиеЗП",Документы.ЗаказКлиента.ПустаяСсылка()); //для ЗП
	ЗапросДанных.УстановитьПараметр("НетДокументОснованиеЗП",Неопределено);        //для ЗП
	ЗапросДанных.УстановитьПараметр("Доставка",Справочники.Номенклатура.АК_Доставка);  // для заказов на доставку
	ЗапросДанных.УстановитьПараметр("Монтаж",Справочники.Номенклатура.АК_Монтаж);  // для заказов на монтаж
	ЗапросДанных.УстановитьПараметр("ВариантОплаты",Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки); 
	ЗапросДанных.УстановитьПараметр("ДатаАктуальности",ТекущаяДата()); 
	ЗапросДанных.УстановитьПараметр("СкладТоварыВПути",Справочники.склады.НайтиПоНаименованию("ТоварВПути")); // для призодных ордеров склад 1                                                                                                               
	
	
	ДеревоТаблицей =  новый ДеревоЗначений;
	ДеревоТаблицей.Колонки.Добавить("Проект");
	ДеревоТаблицей.Колонки.Добавить("Посредник");
	ДеревоТаблицей.Колонки.Добавить("КПСсылка");  // Ссылка на коммерческое предложение
	ДеревоТаблицей.Колонки.Добавить("КП");
	
	ДеревоТаблицей.Колонки.Добавить("Договор");
	ДеревоТаблицей.Колонки.Добавить("Счет");
	ДеревоТаблицей.Колонки.Добавить("Спецификация");
	
	ДеревоТаблицей.Колонки.Добавить("ДоговорДата");
	ДеревоТаблицей.Колонки.Добавить("СчетДата");
	ДеревоТаблицей.Колонки.Добавить("СпецификацияДата");
	
	ДеревоТаблицей.Колонки.Добавить("Предоплата");
	ДеревоТаблицей.Колонки.Добавить("ЗКСсылка");   // Ссылка на Заказ клиента
	ДеревоТаблицей.Колонки.Добавить("ЗаказКлиентаДата");
	ДеревоТаблицей.Колонки.Добавить("ЗПСсылка");    // Ссылка на Заказ поставщику
	ДеревоТаблицей.Колонки.Добавить("ЗаказПоставщикуДатаСумма");
	ДеревоТаблицей.Колонки.Добавить("ЗаказНаДоставкуСсылка"); //  Ссылка на Заказ на Доставку
	ДеревоТаблицей.Колонки.Добавить("ЗаказНаДоставкуДата");
	ДеревоТаблицей.Колонки.Добавить("ЗаказНаМонтажСсылка"); //  Ссылка на Заказ на Монтаж
	ДеревоТаблицей.Колонки.Добавить("ЗаказНаМонтажДата");
	ДеревоТаблицей.Колонки.Добавить("Оплата");
	
	ДеревоТаблицей.Колонки.Добавить("ОрдерПриходСклад1");
	ДеревоТаблицей.Колонки.Добавить("ОрдерРасходСклад1");
	ДеревоТаблицей.Колонки.Добавить("ОрдерПриходСклад2");
	ДеревоТаблицей.Колонки.Добавить("ОрдерРасходСклад2");
	
	ДеревоТаблицей.Колонки.Добавить("ТТН");
	ДеревоТаблицей.Колонки.Добавить("Торг12");
	ДеревоТаблицей.Колонки.Добавить("МонтажныйЛист");
	ДеревоТаблицей.Колонки.Добавить("ОбратнаяСвязь");
	
	ДеревоТаблицей.Колонки.Добавить("ТТНДата");
	ДеревоТаблицей.Колонки.Добавить("Торг12Дата");
	ДеревоТаблицей.Колонки.Добавить("МонтажныйЛистДата");
	ДеревоТаблицей.Колонки.Добавить("ОбратнаяСвязьДата");
	
	
	ДеревоТаблицей.Колонки.Добавить("ОплатаПослеОтгрузки");
	ДеревоТаблицей.Колонки.Добавить("МАРЖА");
	
	
	ТаблицаПроекты = ЗапросДанных.ВыполнитьПакет().Получить(0).выгрузить(); 
	ТаблицаКП = ЗапросДанных.ВыполнитьПакет().Получить(1).выгрузить();
	ТаблицаЗК = ЗапросДанных.ВыполнитьПакет().Получить(2).выгрузить();
	ТаблицаЗП = ЗапросДанных.ВыполнитьПакет().Получить(3).выгрузить();
	ТаблицаЗаказовНаДоставку = ЗапросДанных.ВыполнитьПакет().Получить(4).выгрузить(); 
	ТаблицаЗаказовНаМонтаж = ЗапросДанных.ВыполнитьПакет().Получить(5).выгрузить(); 
	ТаблицаПредОплатыЗаказаКлиента = ЗапросДанных.ВыполнитьПакет().Получить(6).выгрузить();
	ТаблицаОплата = ЗапросДанных.ВыполнитьПакет().Получить(8).выгрузить();
	ТаблицаПрисоединенныеФайлы = ЗапросДанных.ВыполнитьПакет().Получить(9).выгрузить();
	ТаблицаПриходныеОрдера_ТоварыВПути = ЗапросДанных.ВыполнитьПакет().Получить(10).выгрузить();
	ТаблицаРасходныеОрдера_ТоварыВПути = ЗапросДанных.ВыполнитьПакет().Получить(11).выгрузить();
	
	
	Для каждого СтрокаПроекты из  ТаблицаПроекты Цикл
		НоваяСтрокаПроект = ДеревоТаблицей.Строки.Добавить();
		НоваяСтрокаПроект.Проект = СтрокаПроекты.Проект;	
		//далее подтягиваем КП
		ОтборПроектов = новый Структура("Сделка",СтрокаПроекты.Проект);
		Для каждого СтрокаКП из  ТаблицаКП.НайтиСтроки(ОтборПроектов)   Цикл
			Если ТаблицаКП.НайтиСтроки(ОтборПроектов).количество() = 1 Тогда
				НоваяСтрокаПроект.Посредник = СтрокаКП.Посредник;
				НоваяСтрокаПроект.КПСсылка = СтрокаКП.ссылка; 
				НоваяСтрокаПроект.КП = СтрокаКП.КП;			  
				КонечнаяСтрокаКП = НоваяСтрокаПроект;
			Иначе				  
				НоваяСтрокаКП = НоваяСтрокаПроект.Строки.Добавить();
				НоваяСтрокаКП.КПСсылка = СтрокаКП.ссылка; 
				НоваяСтрокаКП.Посредник = СтрокаКП.Посредник;
				НоваяСтрокаКП.КП = СтрокаКП.КП;
				КонечнаяСтрокаКП =  НоваяСтрокаКП;
			КонецЕсли;
			//далее подтягиваем ЗК
			ОтборКП = новый Структура;
			ОтборКП.Вставить("КПСсылка",СтрокаКП.ссылка);				  
			Для каждого СтрокаЗК из ТаблицаЗК.НайтиСтроки(ОтборКП) Цикл
				Если ТаблицаЗК.НайтиСтроки(ОтборКП).количество() = 1 Тогда
					КонечнаяСтрокаКП.ЗКСсылка = СтрокаЗК.ЗаказКлиента;
					КонечнаяСтрокаКП.ЗаказКлиентаДата = СТрока(СтрокаЗК.Номер) + " / "+ Строка(  формат(СтрокаЗК.ЗаказКлиентаДата,"ДФ=""дд.ММ.гггг""")) + " / " +Строка(СтрокаЗК.Сумма);
					КонечнаяСтрокаЗК = КонечнаяСтрокаКП;
				Иначе				   					   
					НоваяСтрокаЗК = КонечнаяСтрокаКП.Строки.Добавить();
					НоваяСтрокаЗК.ЗКСсылка = СтрокаЗК.ЗаказКлиента;
					НоваяСтрокаЗК.ЗаказКлиентаДата =СТрока(СтрокаЗК.НОмер) + " / "+ Строка(  формат(СтрокаЗК.ЗаказКлиентаДата,"ДФ=""дд.ММ.гггг""")) + " / " +Строка(СтрокаЗК.Сумма);
					КонечнаяСтрокаЗК = НоваяСтрокаЗК;
				КонецЕсли;
				ОтборЗК = новый Структура;
				ОтборЗК.Вставить("ЗКСсылка",СтрокаЗК.ЗаказКлиента);
				ДанныеЗаказа = ПолучитьДанныеТабЧасти(СтрокаЗК.ЗаказКлиента);					  
				Если ТаблицаПрисоединенныеФайлы.найтиСтроки(ОтборЗК).количество()>0 тогда						  
					Для каждого Файл из ТаблицаПрисоединенныеФайлы.найтиСтроки(ОтборЗК) цикл
						
						Если Найти(НРег(Строка(Файл.ПрисоединенныйФайл)),"договор")>0 тогда								  
							КонечнаяСтрокаЗК.ДоговорДата =файл.ЗКСсылка.СуммаДокумента;  
							КонечнаяСтрокаЗК.Договор = файл.ПрисоединенныйФайл;  
							
						ИначеЕсли  Найти(НРег(Строка(Файл.ПрисоединенныйФайл)),"чет")>0
							ИЛИ Найти(НРег(Строка(Файл.ПрисоединенныйФайл)),"чёт")>0 тогда															  
							КонечнаяСтрокаЗК.счетДата =ДанныеЗаказа.получить(0).Сумма;  //без НДС
							КонечнаяСтрокаЗК.счет = Файл.ПрисоединенныйФайл; 
							
						ИначеЕсли  Найти(НРег(Строка(Файл.ПрисоединенныйФайл)),"спецификация")>0	тогда								  
							КонечнаяСтрокаЗК.спецификацияДата  = ДанныеЗаказа.получить(0).Сумма; //без НДС								  
							КонечнаяСтрокаЗК.спецификация  =  Файл.ПрисоединенныйФайл;
							//Документы которых пока в базе нет: ТТН, ТОРГ12, монтажный лист И Обратная связь
							
						ИначеЕсли  Найти(НРег(Строка(Файл.ПрисоединенныйФайл)),"ттн")>0	тогда								  
							КонечнаяСтрокаЗК.ТТНДата  = формат(Файл.дата,"ДФ=""дд.ММ.гггг"""); 
							КонечнаяСтрокаЗК.ТТН  =  Файл.ПрисоединенныйФайл;
							
						ИначеЕсли  Найти(НРег(Строка(Файл.ПрисоединенныйФайл)),"торг12")>0	тогда								  
							КонечнаяСтрокаЗК.Торг12Дата  =формат(Файл.дата,"ДФ=""дд.ММ.гггг"""); 
							КонечнаяСтрокаЗК.Торг12  =  Файл.ПрисоединенныйФайл;
							
						ИначеЕсли  Найти(НРег(Строка(Файл.ПрисоединенныйФайл)),"лист")>0	тогда								  
							КонечнаяСтрокаЗК.МонтажныйЛистДата  = формат(Файл.дата,"ДФ=""дд.ММ.гггг"""); 
							КонечнаяСтрокаЗК.МонтажныйЛист  =  Файл.ПрисоединенныйФайл;
							
						ИначеЕсли  Найти(НРег(Строка(Файл.ПрисоединенныйФайл)),"связь")>0	тогда								  
							КонечнаяСтрокаЗК.ОбратнаяСвязьДата  = формат(Файл.дата,"ДФ=""дд.ММ.гггг""");  
							КонечнаяСтрокаЗК.ОбратнаяСвязь  =  Файл.ПрисоединенныйФайл;
							
						КонецЕсли; 
					КонецЦикла;						  
				КонецЕсли;
				
				
				Если ТаблицаПредОплатыЗаказаКлиента.найтиСтроки(ОтборЗК).количество()>0 тогда
					Для каждого СтрокаПредОплата из ТаблицаПредОплатыЗаказаКлиента.найтиСтроки(ОтборЗК) цикл
						КонечнаяСтрокаЗК.Предоплата = Строка(СтрокаПредОплата.ПроцентПлатежа) + "%";		
					КонецЦикла;
				Иначе
					КонечнаяСтрокаЗК.Предоплата = "0%";												 
				КонецЕсли;
				
				Если ТаблицаОплата.найтиСтроки(ОтборЗК).количество()>0 тогда
					Для каждого СтрокаОплата из ТаблицаОплата.найтиСтроки(ОтборЗК) цикл
						КонечнаяСтрокаЗК.Оплата= Строка(СтрокаОплата.ПроцентОплаты) + "%";		
					КонецЦикла;
				Иначе
					КонечнаяСтрокаЗК.Оплата = "0%";
				КонецЕсли;
				
				
				//далее подтягиваем Заказы на доставку
				Для каждого СтрокаЗаказНаДоставку из ТаблицаЗаказовНаДоставку.НайтиСтроки(ОтборЗК) Цикл
					Если  ТаблицаЗаказовНаДоставку.НайтиСтроки(ОтборЗК).количество() = 1 Тогда
						КонечнаяСтрокаЗК.ЗаказНаДоставкуСсылка =  СтрокаЗаказНаДоставку.ЗаказНаДоставку;
						КонечнаяСтрокаЗК.ЗаказНаДоставкуДата =формат(СтрокаЗаказНаДоставку.ЗаказНаДоставкуДата,"ДФ=""дд.ММ.гггг"""); 			   							  
					Иначе  
						НоваяСтрокаЗП = КонечнаяСтрокаЗК.Строки.Добавить();
						НоваяСтрокаЗП.ЗаказНаДоставкуСсылка =  СтрокаЗаказНаДоставку.ЗаказНаДоставку;
						НоваяСтрокаЗП.ЗаказНаДоставкуДата =формат(СтрокаЗаказНаДоставку.ЗаказНаДоставкуДата,"ДФ=""дд.ММ.гггг"""); 			   							  
					КонецЕсли;	  
				КонецЦикла;
				
				//далее подтягиваем Заказы на монтаж
				Для каждого СтрокаЗаказНаМонтаж из ТаблицаЗаказовНаМонтаж.НайтиСтроки(ОтборЗК) Цикл
					Если  ТаблицаЗаказовНаМонтаж.НайтиСтроки(ОтборЗК).количество() = 1 Тогда
						КонечнаяСтрокаЗК.ЗаказНаМонтажСсылка =  СтрокаЗаказНаМонтаж.ЗаказНаМонтаж;
						КонечнаяСтрокаЗК.ЗаказНаМонтажДата =формат(СтрокаЗаказНаМонтаж.ЗаказНаМонтажДата,"ДФ=""дд.ММ.гггг"""); 			   						  
					Иначе
						НоваяСтрокаЗП = КонечнаяСтрокаЗК.Строки.Добавить();
						НоваяСтрокаЗП.ЗаказНаМонтажСсылка =  СтрокаЗаказНаМонтаж.ЗаказНаМонтаж;
						НоваяСтрокаЗП.ЗаказНаМонтажДата =формат(СтрокаЗаказНаМонтаж.ЗаказНаМонтажДата,"ДФ=""дд.ММ.гггг"""); 			   							  
					КонецЕсли;
				КонецЦикла;
				
				
				Для каждого СтрокаРасходныйОрдер1 из ТаблицаРасходныеОрдера_ТоварыВПути.НайтиСтроки(ОтборЗК) Цикл
					Если  ТаблицаЗаказовНаМонтаж.НайтиСтроки(ОтборЗК).количество() = 1 Тогда
						//КонечнаяСтрокаЗК.ЗПСсылка =  СтрокаРасходныйОрдер1.ЗаказПоставщику;
						КонечнаяСтрокаЗК.ОрдерРасходСклад1 =Строка(формат(СтрокаРасходныйОрдер1.дата,"ДФ=""дд.ММ.гггг""")); ; 			   						  
					Иначе
						НовыйРасходныйОрдер1 = КонечнаяСтрокаЗК.Строки.Добавить();
						//НовайПриодныйОрдер1.ЗПСсылка =  СтрокаРасходныйОрдер1.ЗаказПоставщику;
						НовыйРасходныйОрдер1.ОрдерРасходСклад1 =Строка(формат(СтрокаРасходныйОрдер1.дата,"ДФ=""дд.ММ.гггг""")); 			   							  
					КонецЕсли; 			   
				КонецЦикла;
				
				
				//далее подятгиваем ЗП
				Для каждого СтрокаЗП из ТаблицаЗП.НайтиСтроки(ОтборЗК) Цикл
					Если  ТаблицаЗП.НайтиСтроки(ОтборЗК).количество() = 1 Тогда
						
						КонечнаяСтрокаЗК.ЗПСсылка =  СтрокаЗП.ЗаказПоставщику;
						КонечнаяСтрокаЗК.ЗаказПоставщикуДатаСумма =Строка(формат(СтрокаЗП.ЗаказПоставщикуДата,"ДФ=""дд.ММ.гггг""")+ "/" + Строка(СтрокаЗП.Сумма));
						КонечнаяСтрокаЗП = КонечнаяСтрокаЗК;
					иначе
						НоваяСтрокаЗП = КонечнаяСтрокаЗК.Строки.Добавить();
						НоваяСтрокаЗП.ЗПСсылка =  СтрокаЗП.ЗаказПоставщику;
						НоваяСтрокаЗП.ЗаказПоставщикуДатаСумма =Строка(формат(СтрокаЗП.ЗаказПоставщикуДата,"ДФ=""дд.ММ.гггг""")+ "/" + Строка(СтрокаЗП.Сумма));
						КонечнаяСтрокаЗП = НоваяСтрокаЗП
					КонецЕсли;
					
					//далее подятгиваем ОРДЕРА
					ОтборЗП = новый Структура;
					ОтборЗП.Вставить("ЗПСсылка",СтрокаЗП.ЗаказПоставщику);
					Для каждого СтрокаПриходныйОрдер1 из ТаблицаПриходныеОрдера_ТоварыВПути.НайтиСтроки(ОтборЗП) Цикл
						Если  ТаблицаПриходныеОрдера_ТоварыВПути.НайтиСтроки(ОтборЗК).количество() = 1 Тогда
							//	КонечнаяСтрокаЗП.ЗПСсылка =  СтрокаПриходныйОрдер1.ЗаказПоставщику;
							КонечнаяСтрокаЗП.ОрдерПриходСклад1 =Строка(формат(СтрокаПриходныйОрдер1.дата,"ДФ=""дд.ММ.гггг""")); 		
						Иначе
							НовыйПриходныйОрдер1 = КонечнаяСтрокаЗП.Строки.Добавить();
							//НовайПриодныйОрдер1.ЗПСсылка =  СтрокаПриходныйОрдер1.ЗаказПоставщику;
							НовыйПриходныйОрдер1.ОрдерПриходСклад1 =Строка(формат(СтрокаПриходныйОрдер1.дата,"ДФ=""дд.ММ.гггг""")); 		
						КонецЕсли;
						
					КонецЦикла;
				КонецЦикла;					  					  
			КонецЦикла;				  
		КонецЦикла;
	КонецЦикла;		  
	ЗначениеВДанныеФормы(ДеревоТаблицей, Объект.Проекты);  		  
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеТабЧасти(Ссылка)
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Товары.Ссылка.ЦенаВключаетНДС
	|			ТОГДА Товары.Сумма
	|		ИНАЧЕ Товары.Сумма + Товары.СуммаНДС
	|	КОНЕЦ КАК Сумма,
	|	Товары.СуммаНДС
	|ИЗ
	|	Документ.ЗаказКлиента.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;						   
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить().выгрузить();
	
	Результат.Свернуть(,"Сумма,СуммаНДС");
	
	Возврат Результат;		  
КонецФункции

&НаКлиенте
Процедура ОткрытьФайл(ФайлДляОткрытия)	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлДляОткрытия, УникальныйИдентификатор);	
	ПрисоединенныеФайлыКлиент.ОткрытьФайл(ДанныеФайла,ЛОЖЬ);	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
	Знач ИдентификаторФормы = Неопределено,
	Знач ПолучатьСсылкуНаДвоичныеДанные = Истина)
	
	Возврат ПрисоединенныеФайлы.ПолучитьДанныеФайла(
	ПрисоединенныйФайл, ИдентификаторФормы, ПолучатьСсылкуНаДвоичныеДанные);
	
КонецФункции
