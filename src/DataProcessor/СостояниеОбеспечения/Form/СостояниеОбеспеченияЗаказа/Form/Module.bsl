////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
	
		Возврат;
	
	КонецЕсли;
	
	ПолноеИмя = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	ОтборПоСостояниюНаличия = Перечисления.СостоянияНаличия.Любое;
	ЖелаемаяДатаОтгрузки = Параметры.ЖелаемаяДатаОтгрузки;
	
	Элементы.ЖелаемаяДатаОтгрузки.Видимость = ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки);
	Элементы.НеОтгружатьЧастями.Видимость = Параметры.НеОтгружатьЧастями;
	
	Если ТипЗнч(Параметры.Заказ) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		
		Элементы.ЖелаемаяДатаОтгрузки.Заголовок = НСтр("ru = 'Желаемая дата начала перемещения'");
		
	ИначеЕсли ТипЗнч(Параметры.Заказ) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
		
		Элементы.ЖелаемаяДатаОтгрузки.Заголовок = НСтр("ru = 'Желаемая дата начала сборки/разборки'");
		
	КонецЕсли;
	
	Элементы.ФормаПеренестиИзмененияВДокумент.Доступность = НЕ Параметры.ТолькоПросмотр;
	Элементы.ТоварыРассчитатьДляПолнойОтгрузки.Доступность = НЕ Параметры.ТолькоПросмотр;
	Элементы.ТоварыРассчитатьДляЧастичнойОтгрузки.Доступность = НЕ Параметры.ТолькоПросмотр;
	
	Элементы.Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаСоответствуетОтбору", Истина);
	Элементы.ТоварыОтменитьПредыдущийРасчет.Доступность = Ложь;
	
	ОбновитьСостояниеОбеспеченияНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборПоСостояниюНаличияПриИзменении(Элемент)
	
	ОтборПоСостояниюНаличияНаСервере();
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаСоответствуетОтбору", Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСостояниюНаличияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ПараметрыФормы = Новый Структура("Заказ, АдресВХранилище, НомерСтрокиПоПорядку", Параметры.Заказ, ПоместитьТоварыВХранилищеПоОтборуНаСервере(ВыбраннаяСтрока), ТекущиеДанные.НомерСтрокиПоПорядку);
	
	ОткрытьФормуМодально(ПолноеИмя + ".Форма.РезервыПоЗаказам", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОтменитьПредыдущийРасчет(Команда)
	
	ВосстановитьПредыдущееСостояниеРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИзмененияВДокумент(Команда)
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресТовары) Тогда
		
		ОповеститьОВыборе(Новый Структура("ВыполняемаяОперация, АдресВХранилище", "СостояниеОбеспеченияЗаказа", ПоместитьТоварыВХранилищеНаСервере()));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перечитать(Команда)
	
	Ответ = КодВозвратаДиалога.Да;
	
	Если ЭтаФорма.Модифицированность Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Данные изменены. Перечитать данные?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ОбновитьСостояниеОбеспеченияНаСервере();
		ЭтаФорма.Модифицированность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДляПолнойОтгрузки(Команда)
	
	Если НЕ РассчитатьДляПолнойОтгрузкиНаСервере() Тогда
		
		Предупреждение(НСтр("ru = 'Не выбраны строки для расчета даты отгрузки!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьДляЧастичнойОтгрузки(Команда)
	
	Если НЕ РассчитатьДляЧастичнойОтгрузкиНаСервере() Тогда
		
		Предупреждение(НСтр("ru = 'Не выбраны строки для расчета даты отгрузки!'"));
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	СнятьФлажкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьФлажкиНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ОтборПоСостояниюНаличияНаСервере()
	
	Для каждого СтрокаТовары из Объект.Товары Цикл
	
		СтрокаТовары.СтрокаСоответствуетОтбору = СтрокаСоответствуетОтбору(СтрокаТовары, ОтборПоСостояниюНаличия);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее
 
&НаСервере
Процедура ОбновитьСостояниеОбеспеченияНаСервере()
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", Параметры.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Параметры.Заказ);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Параметры.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", ОтборПоСостояниюНаличия);
	ПараметрыСостоянияОбеспечения.Вставить("РассчитатьБезЗаказа",  Параметры.РассчитатьБезЗаказа);
	
	СостояниеОбеспеченияОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыВидимости = Новый Структура("ЕстьТовары, ЕстьРаботы, ЕстьНазначение, ЕстьВариантОбеспечения", Ложь, Ложь, Ложь, Ложь);
	Если СостояниеОбеспеченияОбъект.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения, ПараметрыВидимости) Тогда
		
		ЗначениеВРеквизитФормы(СостояниеОбеспеченияОбъект.Товары, "Объект.Товары");
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаТовары;
		Элементы.ФормаПеренестиИзмененияВДокумент.Доступность = НЕ Параметры.ТолькоПросмотр;
		
		Элементы.ТоварыСкладИлиПодразделение.Видимость = ПараметрыВидимости.ЕстьРаботы И ПараметрыВидимости.ЕстьТовары;
		Элементы.ТоварыСклад.Видимость = НЕ ПараметрыВидимости.ЕстьРаботы И ПараметрыВидимости.ЕстьТовары;
		Элементы.ТоварыПодразделение.Видимость = ПараметрыВидимости.ЕстьРаботы И Не ПараметрыВидимости.ЕстьТовары;
		Элементы.ТоварыНазначение.Видимость = ПараметрыВидимости.ЕстьНазначение;
		
	Иначе
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНетПотребностей;
		Элементы.ФормаПеренестиИзмененияВДокумент.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлажкиНаСервере()
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("СтрокаСоответствуетОтбору", Истина));
	
	Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		НайденнаяСтрока.Выбран = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СнятьФлажкиНаСервере()
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("СтрокаСоответствуетОтбору", Истина));
	
	Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		НайденнаяСтрока.Выбран = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РассчитатьДляПолнойОтгрузкиНаСервере()
	
	СохранитьПредыдущееСостояниеРасчета();
	
	СостояниеОбеспеченияОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", Параметры.ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", Параметры.НеОтгружатьЧастями);
	
	Если СостояниеОбеспеченияОбъект.РассчитатьДляПолнойОтгрузки(ПараметрыСостоянияОбеспечения) Тогда
		
		ЗначениеВРеквизитФормы(СостояниеОбеспеченияОбъект.Товары, "Объект.Товары");
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция РассчитатьДляЧастичнойОтгрузкиНаСервере()
	
	СохранитьПредыдущееСостояниеРасчета();
	
	СостояниеОбеспеченияОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", Параметры.ЖелаемаяДатаОтгрузки);
	
	Если СостояниеОбеспеченияОбъект.РассчитатьДляЧастичнойОтгрузки(ПараметрыСостоянияОбеспечения) Тогда
		
		ЗначениеВРеквизитФормы(СостояниеОбеспеченияОбъект.Товары, "Объект.Товары");
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПоместитьТоварыВХранилищеПоОтборуНаСервере(Идентификатор)
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(Идентификатор);
	ПараметрыОтбора = Новый Структура("Номенклатура, Характеристика, Склад", ТекущиеДанные.Номенклатура, ТекущиеДанные.Характеристика, ТекущиеДанные.Склад);
	ВыгружаемыеКолонки = "НомерСтрокиПоПорядку, Номенклатура, Характеристика, КоличествоУпаковок, УпаковкаКоэффициент, Упаковка,
						|ДатаОтгрузки, Склад, ПринятКОбеспечению, СрокПоставки, ЭтоУслуга, УказыватьСерии, СтатусУказанияСерий";
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(ПараметрыОтбора, ВыгружаемыеКолонки), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьТоварыВХранилищеНаСервере()
	
	АдресВХранилище = Неопределено;
	
	СостояниеОбеспеченияОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Параметры.Заказ);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", Параметры.АдресТовары);
	ПараметрыСостоянияОбеспечения.Вставить("РассчитатьБезЗаказа", Параметры.РассчитатьБезЗаказа);
	
	РезультатРасчета = СостояниеОбеспеченияОбъект.ПолучитьРезультатРасчета(ПараметрыСостоянияОбеспечения);
	
	Если РезультатРасчета <> Неопределено Тогда
		
		АдресВХранилище = ПоместитьВоВременноеХранилище(РезультатРасчета, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Возврат АдресВХранилище;

КонецФункции

&НаСервереБезКонтекста
Функция СтрокаСоответствуетОтбору(ПроверяемаяСтрока, ЗначениеОтбора)
	
	Возврат ЗначениеОтбора = Перечисления.СостоянияНаличия.ПолностьюИлиЧастичноВНаличии
		И ПроверяемаяСтрока.ПолностьюИлиЧастичноВНаличии
		ИЛИ ЗначениеОтбора = Перечисления.СостоянияНаличия.ЧастичноИлиНетВНаличии
		И ПроверяемаяСтрока.ЧастичноИлиНетВНаличии
		ИЛИ ЗначениеОтбора = Перечисления.СостоянияНаличия.Любое
		ИЛИ ПроверяемаяСтрока.СостояниеНаличия = ЗначениеОтбора;

КонецФункции

&НаСервере
Процедура СохранитьПредыдущееСостояниеРасчета()
	
	ТоварыПредыдущееСостояние.Очистить();
	
	Для каждого СтрокаТовары из Объект.Товары Цикл
		
		НоваяСтрокаТоварыПредыдущееСостояние = ТоварыПредыдущееСостояние.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТоварыПредыдущееСостояние, СтрокаТовары);
		
	КонецЦикла;
	
	Элементы.ТоварыОтменитьПредыдущийРасчет.Доступность = Истина;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьПредыдущееСостояниеРасчета()
	
	Объект.Товары.Очистить();
	
	Для каждого СтрокаТоварыПредыдущееСостояние из ТоварыПредыдущееСостояние Цикл
		
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТоварыПредыдущееСостояние);
		НоваяСтрокаТовары.СтрокаСоответствуетОтбору = СтрокаСоответствуетОтбору(НоваяСтрокаТовары, ОтборПоСостояниюНаличия);
		
	КонецЦикла;
	
	Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаСоответствуетОтбору", Истина);
	Элементы.ТоварыОтменитьПредыдущийРасчет.Доступность = Ложь;
	
КонецПроцедуры
