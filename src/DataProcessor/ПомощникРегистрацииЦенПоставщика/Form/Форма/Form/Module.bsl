&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПохожиеПозиции = НСтр("ru = 'Похожие позиции'");
	Объект.ДатаНачалаДействияЦен = ТекущаяДата();
	ОбновлятьСтарыеЦены = Истина;
	ИспользоватьНоменклатуруПоставщиков = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПоставщиков");
	ВыбратьСозданиеСоглашения = 1;
	
	ТипДанныхЗаполнения = ТипЗнч(Параметры.Основание);

	Если ТипДанныхЗаполнения = Тип("СправочникСсылка.Партнеры") Тогда
		Объект.Партнер = Параметры.Основание;
		ЗаполнитьСоглашениеПоУмолчанию();
	ИначеЕсли ТипДанныхЗаполнения = Тип("СправочникСсылка.СоглашенияСПоставщиками") Тогда
		Объект.Соглашение = Параметры.Основание;
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Параметры.Основание, "Партнер,РегистрироватьЦеныПоУсловиям");
		Объект.Партнер = ЗначенияРеквизитов.Партнер;
		РегистрироватьЦеныПоУсловиям = ЗначенияРеквизитов.РегистрироватьЦеныПоУсловиям;
	ИначеЕсли ТипДанныхЗаполнения = Тип("ДокументСсылка.ЗаказПоставщику") Или
		ТипДанныхЗаполнения = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		Документы.РегистрацияЦенНоменклатурыПоставщика.ЗаполнитьРегистрациюЦенПоДокументуЗакупки(Параметры.Основание, Объект);
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			ТекСтрока.НоваяЦена = ТекСтрока.Цена;
			ТекСтрока.Цена = 0;
		КонецЦикла;
		РегистрироватьЦеныПоУсловиям = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "РегистрироватьЦеныПоУсловиям");
		Элементы.Шаг1_Страницы.ТекущаяСтраница = Элементы.Шаг1_Страница2;
		Если НЕ ЗначениеЗаполнено(Объект.Соглашение) Тогда
			СоздатьНовоеСоглашение = Истина;
			ВалютаНовогоСоглашения =ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "Валюта");
			НаименованиеНовогоСоглашения = НСтр("ru='Условия закупок с '") + Объект.Партнер;
			ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ЦенаВключаетНДС");
			НалогообложениеНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "НалогообложениеНДС");
			ХозяйственнаяОперацияНовогоСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументОснование, "ХозяйственнаяОперация");
			Если ХозяйственнаяОперацияНовогоСоглашения = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту") Тогда
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДС", "Видимость", Ложь);
			КонецЕсли;
			
			Элементы.Шаг1_Группа41.Видимость = Ложь;
			Элементы.Шаг1_Группа42.Видимость = Истина;
			Элементы.Шаг1_Группа4.Заголовок  = НСтр("ru='Для регистрации цен будут использованы данные документа закупки и будет создано новое соглашение'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.СпособРегистрацииЦен.СписокВыбора.Очистить();
	Элементы.СпособРегистрацииЦен.СписокВыбора.Добавить(0, НСтр("ru = 'Ввести новые цены вручную'"));
	Элементы.СпособРегистрацииЦен.СписокВыбора.Добавить(1, НСтр("ru = 'Просмотреть и изменить действующие цены'"));
	
	Если ИспользоватьНоменклатуруПоставщиков Тогда
		Элементы.СпособРегистрацииЦен.СписокВыбора.Добавить(2, НСтр("ru = 'Скопировать цены из внешнего файла'"));
	Иначе
		Элементы.СпособУказанияУсловийЦен.Видимость = Ложь;
		Элементы.УсловиеЦенПоставщика.Видимость = Ложь;
	КонецЕсли;
	
	ЗаголовокЦена = НСтр("ru='Цена (%Валюта%)'");
	Если СоздатьНовоеСоглашение Тогда
		ЗаголовокЦена = СтрЗаменить(ЗаголовокЦена, "%Валюта%", ВалютаНовогоСоглашения);
	Иначе
		ЗаголовокЦена = СтрЗаменить(ЗаголовокЦена, "%Валюта%", Объект.Соглашение.Валюта);
	КонецЕсли;
	Элементы.ТоварыНоваяЦена.Заголовок = ЗаголовокЦена;
	
	УстановитьДоступностьСпособаУказанияУсловийЦен();
	
	УстановитьВидимостьОпераций();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не Готово И Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		ОтветНаВопрос = Вопрос(НСтр("ru = 'Работа помощника будет завершена, все введенные данные будут потеряны. Закрыть помощник?'"), СписокКнопок);
		
		Если ОтветНаВопрос = "НеЗакрывать" Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		ЗаполнитьТоварыПоПодборуИзВременногоХранилищаСервер(ВыбранноеЗначение.АдресТоваровВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика = Настройки.Получить("НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика");
	
	Если НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика Тогда
		Элементы.ФормаНеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Объект.Партнер,
		Объект.Соглашение,
		Объект.ДатаНачалаДействияЦен
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		РегистрироватьЦеныПоУсловиям = Ложь;
		УсловиеЦенПоставщика = ПредопределенноеЗначение("Справочник.УсловияЦенПоставщиков.ПустаяСсылка");
		УстановитьДоступностьСпособаУказанияУсловийЦен();
	Иначе
		ЗаполнитьСоглашениеПоУмолчанию();
		СопоставлятьСправочники = Истина;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовПоПартнеру();
	
	ЗаполнитьПараметрыСоглашения();
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	ПриИзмененииСоглашенияСервер();
	СопоставлятьСправочники = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияЦенПриИзменении(Элемент)
	
	ОбновлятьСтарыеЦены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзменении(Элемент)
	
	СопоставлятьСправочники = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УточнениеНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "УточнениеНоменклатурыКоличествоНоменклатурыДляВыбора" Или
		Поле.Имя = "УточнениеНоменклатурыНоменклатураПоставщика" Тогда
		
		ТекущиеДанные = Элементы.УточнениеНоменклатуры.ТекущиеДанные;
		
		Если ТекущиеДанные.КоличествоНоменклатурыДляВыбора = 0 Тогда
			Возврат;
		КонецЕсли;
		
		МассивНоменклатурыПоставщика = Новый Массив();
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Артикул) Тогда
			
			НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(Новый Структура("АртикулПоиск", ВРег(СтрЗаменить(ТекущиеДанные.Артикул, " ", ""))));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.НоменклатураНаименование) Тогда
			НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(Новый Структура("Наименование", ВРег(СтрЗаменить(ТекущиеДанные.НоменклатураНаименование, " ", ""))));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если МассивНоменклатурыПоставщика.Найти(НайденнаяСтрока) = Неопределено Тогда
					МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если МассивНоменклатурыПоставщика.Количество() > 0 Тогда
			
			ДанныеВыбора = Новый СписокЗначений();
			Для Каждого ТекЭлемент Из МассивНоменклатурыПоставщика Цикл
				ДанныеВыбора.Добавить(ТекЭлемент.Ссылка, ТекЭлемент.Наименование + " ( " + ТекЭлемент.Артикул + ")");
			КонецЦикла;
			
			ВыбраннаяНоменклатура = ВыбратьИзСписка(ДанныеВыбора, Элементы.УточнениеНоменклатурыНоменклатураПоставщика, ДанныеВыбора.НайтиПоЗначению(ТекущиеДанные.НоменклатураПоставщика));
			
			Если ВыбраннаяНоменклатура <> Неопределено Тогда
				ТекущиеДанные.НоменклатураПоставщика = ВыбраннаяНоменклатура.Значение;
				НайденныйЭлемент = МассивНоменклатурыПоставщика.Найти(ТекущиеДанные.НоменклатураПоставщика);
				Если НайденныйЭлемент <> Неопределено Тогда
					Если МассивНоменклатурыПоставщика[НайденныйЭлемент].Артикул <> ТекущиеДанные.Артикул Тогда
						ТекущиеДанные.АртикулОтличается = Истина;
					КонецЕсли;
					Если МассивНоменклатурыПоставщика[НайденныйЭлемент].Наименование <> ТекущиеДанные.НоменклатураНаименование Тогда
						ТекущиеДанные.НоменклатураНаименованиеОтличается = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "УточнениеНоменклатурыКоличествоУсловийЦенДляВыбора" Или
		Поле.Имя = "УточнениеНоменклатурыУсловиеЦеныПоставщика" Тогда

		ТекущиеДанные = Элементы.УточнениеНоменклатуры.ТекущиеДанные;
		
		Если ТекущиеДанные.КоличествоУсловийЦеныДляВыбора = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.УсловиеЦеныНаименование) Тогда
			
			НайденныеСтроки = УсловияЦенПоставщика.НайтиСтроки(Новый Структура("НаименованиеПоиск", ВРег(СтрЗаменить(ТекущиеДанные.УсловиеЦеныНаименование, " ", ""))));
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				ДанныеВыбора = Новый СписокЗначений();
				Для Каждого ТекЭлемент Из НайденныеСтроки Цикл
					ДанныеВыбора.Добавить(ТекЭлемент.Ссылка, ТекЭлемент.Наименование);
				КонецЦикла;
				
			КонецЕсли;
			
			ВыбранноеУсловиеЦены = ВыбратьИзСписка(ДанныеВыбора, Элементы.УточнениеНоменклатурыУсловиеЦеныПоставщика, ДанныеВыбора.НайтиПоЗначению(ТекущиеДанные.УсловиеЦеныПоставщика));
			
			Если ВыбранноеУсловиеЦены <> Неопределено Тогда
				ТекущиеДанные.УсловиеЦеныПоставщика = ВыбранноеУсловиеЦены.Значение;
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					Если ТекСтрока.Ссылка = ТекущиеДанные.УсловиеЦеныПоставщика Тогда
						Если ТекСтрока.Наименование <> ТекущиеДанные.УсловиеЦеныНаименование Тогда
							ТекущиеДанные.УсловиеЦеныНаименованиеОтличается = Истина;
						КонецЕсли;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияНоменклатурыПриИзменении(Элемент)
	
	УстановитьОтборПоТоварам();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияЦенПриИзменении(Элемент)
	
	УстановитьОтборПоТоварам();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРегистрацииЦенПриИзменении(Элемент)
	
	Если СпособРегистрацииЦен <> 2 Тогда
		СпособУказанияУсловийЦен = 0;
		УсловиеЦенПоставщика = ПредопределенноеЗначение("Справочник.УсловияЦенПоставщиков.ПустаяСсылка");
	КонецЕсли;
	УстановитьДоступностьСпособаУказанияУсловийЦен();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособУказанияУсловийЦенПриИзменении(Элемент)
	
	Если СпособУказанияУсловийЦен <> 2 Тогда
		УсловиеЦенПоставщика = ПредопределенноеЗначение("Справочник.УсловияЦенПоставщиков.ПустаяСсылка");
	КонецЕсли;
	Элементы.УсловиеЦенПоставщика.Доступность = (СпособУказанияУсловийЦен = 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПриИзменении(Элемент)
	
	ЗакупкаПоИмпорту = (ХозяйственнаяОперацияНовогоСоглашения = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту"));
	
	Если ЗакупкаПоИмпорту Тогда
		НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "НалогообложениеНДС", "Видимость", Не ЗакупкаПоИмпорту);
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоглашенийПриИзменении(Элемент)
	ВыбратьСозданиеСоглашения = 1;
	УстановитьДоступностьЭлементовСоглашений();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСозданиеСоглашенияПриИзменении(Элемент)
	ВыбратьСоглашение = 1;
	УстановитьДоступностьЭлементовСоглашений();
КонецПроцедуры

&НаКлиенте
Процедура ПартнерОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Партнер                        = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
	Объект.Соглашение                     = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
	ХозяйственнаяОперацияНовогоСоглашения = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПустаяСсылка");
	НалогообложениеНДС                    = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка");
	НаименованиеНовогоСоглашения          = "";
	
	УстановитьДоступностьЭлементовПоПартнеру();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
		ТекущаяСтрока.ИндексКартинки = 8;
		ТекущаяСтрока.ЦенаИзменилась = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ПриВыбореНоменклатурыПоставщика(
		Новый Структура("Ссылка,Партнер",ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"), Объект.Партнер),
		Поле,
		"ТоварыНоменклатураПоставщика",
		НСтр("ru = 'Поставщик'")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗакупкиКлиент.ЗаполнитьСписокВыбораНоменклатурыПоставщика(Объект.Партнер, Элементы.Товары.ТекущиеДанные, Элементы.ТоварыНоменклатураПоставщика.СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу" , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ());
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура("Ссылка,Партнер",ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"), Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика)
		);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьПризнакИзмененияЦены(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ());
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура("Ссылка,Партнер",ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"), Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика)
		);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьПризнакИзмененияЦены(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоставщикаПоНоменклатуре", Объект.Партнер);
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ());
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура("Ссылка,Партнер",ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"), Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика)
		);
		
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьПризнакИзмененияЦены(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьНоменклатуруПоНоменклатуреПоставщика");
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ());
	СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
		ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
			Новый Структура("Ссылка,Партнер",ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"), Объект.Партнер),
			НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика)
		);

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьПризнакИзмененияЦены(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУсловиеЦеныПоставщикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ());
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ОбновитьПризнакИзмененияЦены(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоваяЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	ОбновитьПризнакИзмененияЦены(ТекущаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			СоздатьНовоеСоглашение = ВыбратьСозданиеСоглашения<1;
		КонецЕсли;
		
		УстановитьЗаголовокКолонкиЦены();
		
		Если Не ЗначениеЗаполнено(Объект.Партнер) Или
			(Не ЗначениеЗаполнено(Объект.Соглашение) И НЕ СоздатьНовоеСоглашение) Или
			Не ЗначениеЗаполнено(Объект.ДатаНачалаДействияЦен) Или
			(СпособУказанияУсловийЦен = 2 И Не ЗначениеЗаполнено(УсловиеЦенПоставщика)) 
			Или (СоздатьНовоеСоглашение И (Не ЗначениеЗаполнено(ХозяйственнаяОперацияНовогоСоглашения)
											ИЛИ Не ЗначениеЗаполнено(ВалютаНовогоСоглашения)
											ИЛИ Не ЗначениеЗаполнено(НаименованиеНовогоСоглашения)
											ИЛИ (Не ЗначениеЗаполнено(НалогообложениеНДС) И Элементы.НалогообложениеНДС.Видимость))) Тогда
		
			ОчиститьСообщения();
		
			Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Поставщик"" не заполнено'"),, "Объект.Партнер");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.Партнер) И Не ЗначениеЗаполнено(Объект.Соглашение) И НЕ СоздатьНовоеСоглашение Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Соглашение"" не заполнено'"),, "Объект.Соглашение");
			КонецЕсли;
			
			Если СоздатьНовоеСоглашение Тогда
				
				Если Не ЗначениеЗаполнено(НаименованиеНовогоСоглашения) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Наименование"" не заполнено'"),, "НаименованиеНовогоСоглашения");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ХозяйственнаяОперацияНовогоСоглашения) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Операция"" не заполнено'"),, "ХозяйственнаяОперацияНовогоСоглашения");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НалогообложениеНДС) И Элементы.НалогообложениеНДС.Видимость Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Налогообложение НДС"" не заполнено'"),, "НалогообложениеНДС");
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВалютаНовогоСоглашения) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Валюта"" не заполнено'"),, "ВалютаНовогоСоглашения");
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат;
			
		Иначе
			
			ОбновлятьСтарыеЦены = Ложь;
			
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				
				Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4;
				Элементы.Шаг4Страницы.ТекущаяСтраница = Элементы.Шаг4Страница1;
				ЗаполнитьСтарыеЦены();
			Иначе
				Элементы.Шаги.ТекущаяСтраница  = Элементы.Шаг1_2;
				
			КонецЕсли;
			
			Если СоздатьНовоеСоглашение Тогда
				СоздатьСоглашениеНаСервере();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1_2 Тогда
		Если Не ЗначениеЗаполнено(Объект.ДатаНачалаДействияЦен) Или
			(СпособУказанияУсловийЦен = 2 И Не ЗначениеЗаполнено(УсловиеЦенПоставщика)) Тогда
			
			Если Не ЗначениеЗаполнено(Объект.ДатаНачалаДействияЦен) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Дата начала действия цен"" не заполнено'"),, "Объект.ДатаНачалаДействияЦен");
			КонецЕсли;
			
			Если СпособУказанияУсловийЦен = 2 И Не ЗначениеЗаполнено(УсловиеЦенПоставщика) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Условие цен поставщика"" не заполнено'"),, "УсловиеЦенПоставщика");
			КонецЕсли;  
		Иначе
			Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			
				Если СпособРегистрацииЦен = 0 Тогда
					Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4;
					Элементы.Шаг4Страницы.ТекущаяСтраница = Элементы.Шаг4Страница1;
				ИначеЕсли СпособРегистрацииЦен = 1 Тогда
					Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4;
					Элементы.Шаг4Страницы.ТекущаяСтраница = Элементы.Шаг4Страница2;
					ЗаполнитьТоварыПоСтарымЦенам();
				ИначеЕсли СпособРегистрацииЦен = 2 Тогда
					Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
					Элементы.Шаг4Страницы.ТекущаяСтраница = Элементы.Шаг4Страница3;
					ИнициализироватьТабличныйДокумент();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		
		Попытка
			ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C1").Текст) Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R2C2").Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если Не ЗаполненаНоменклатураАртикул Тогда
			Предупреждение(НСтр("ru = 'Необходимо скопировать колонки в таблицу из внешнего файла.'"));
			Возврат;
		КонецЕсли;
		
		Если СопоставлятьСправочники Тогда
			ОчиститьСообщения();
			Состояние(НСтр("ru = 'Осуществляется сопоставление введенных данных с данными информационной базы. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
			ПоказыватьУточнениеНоменклатуры = Не СопоставитьДанныеТабличногоДокументаСНоменклатуройПоставщика();
		КонецЕсли;
		
		Если ПоказыватьУточнениеНоменклатуры Тогда
			Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
		Иначе
			Если ЗаполнитьТоварыПоУточненнымТоварам() Тогда
				Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		
		ОчиститьСообщения();
		Если ЗаполнитьТоварыПоУточненнымТоварам() Тогда
			Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4;
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4 Тогда
		
		ОчиститьСообщения();
		Если ПроверитьЗаполнение() Тогда
			Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг5;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1_2 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
	
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1_2;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4 Тогда
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1;
		ИначеЕсли СпособРегистрацииЦен = 0 Тогда
			Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1_2;
		ИначеЕсли СпособРегистрацииЦен = 1 Тогда
			Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1_2;
		ИначеЕсли СпособРегистрацииЦен = 2 Тогда
			Если ПоказыватьУточнениеНоменклатуры Тогда
				Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг3;
			Иначе
				Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг2;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг5 Тогда
		
		Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг4;
		
	КонецЕсли;
	
	УстановитьТекущуюСтраницуПанелиНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура Справка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ЗавершитьРаботуПомощника();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУсловиеЦеныВыделенныхСтрок(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		Предупреждение(НСтр("ru = 'Необходимо выбрать соглашение'"));
		
	ИначеЕсли Объект.Товары.Количество() = 0 Тогда
		
		Предупреждение(НСтр("ru = 'Отсутствуют строки в списке Товары'"));
		
	ИначеЕсли Элементы.Товары.ВыделенныеСтроки.Количество() = 0 Тогда
		
		Предупреждение(НСтр("ru = 'Необходимо выделить строки в списке Товары для заполнения'"));
		
	Иначе
	
		СтруктураОтбор = Новый Структура("Владелец", Объект.Соглашение);
		УсловиеЦеныПоставщика = ОткрытьФормуМодально("Справочник.УсловияЦенПоставщиков.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбор));
		
		Если ЗначениеЗаполнено(УсловиеЦеныПоставщика) Тогда
			
			ЗаполнитьЦеныВыделенныхСтрокПоУсловиюЦеныСервер(УсловиеЦеныПоставщика);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Условие цены заполнено'"),
				,
				СтрЗаменить(НСтр("ru='Условие цены ""%УсловиеЦеныПоставщика%"" заполнены'"), "%УсловиеЦеныПоставщика%", УсловиеЦеныПоставщика),
				БиблиотекаКартинок.Информация32
			);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

 &НаКлиенте
Процедура ДобавитьТоварыПоОтбору(Команда)
	
	ПараметрыФормы = Новый Структура("УникальныйИдентификатор", УникальныйИдентификатор);
	АдресВоВременномХранилище = ОткрытьФормуМодально("Обработка.ПодборТоваровПоОтбору.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	Если ЗначениеЗаполнено(АдресВоВременномХранилище) Тогда
		ЗаполнитьТоварыПоПодборуИзВременногоХранилищаСервер(АдресВоВременномХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНоменклатуруПоставщика(Команда)
	
	ЗакупкиКлиент.ПоказатьНоменклатуруПоставщика(Объект.Партнер, ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"), Элементы.Товары.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТовары(Команда)

	ПараметрыФормы = Новый Структура;

	ПараметрыФормы.Вставить("Документ",                                Заголовок);
	ПараметрыФормы.Вставить("Партнер",                                 Объект.Партнер);
	ПараметрыФормы.Вставить("Соглашение",                              Объект.Соглашение);
	ПараметрыФормы.Вставить("Валюта",                                  Валюта);
	ПараметрыФормы.Вставить("Дата",                                    Объект.ДатаНачалаДействияЦен);
	ПараметрыФормы.Вставить("РегистрироватьЦеныПоУсловиям",            РегистрироватьЦеныПоУсловиям);
	ПараметрыФормы.Вставить("РежимПодбораБезКоличественныхПараметров", Истина);
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",       Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуОстаткиНаСкладах",         Истина);
	ПараметрыФормы.Вставить("СкрыватьКнопкуЗапрашиватьКоличество",     Истина);
	
	ОткрытьФорму("Обработка.ПодборТоваровВДокументЗакупки.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДинамикеЦен(Команда)
	
	ЗакупкиКлиент.ОткрытьОтчетПоДинамикеЦенПоставщика(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНоменклатуруПоНоменклатуреПоставщика(Команда)
	
	Если Не РаботаСДиалогамиКлиент.ПроверитьНаличиеСтрокВСписке(Объект.Товары, "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресТоваровВХранилище = ПоместитьТоварыВоВременноеХранилищеСервер();
	РезультатВыбора = ЗакупкиКлиент.ОткрытьФормуЗаполненияНоменклатурыПоставщика(АдресТоваровВХранилище, ЭтаФорма);
	Если РезультатВыбора <> Неопределено Тогда
		ЗаполнитьТоварыИзВременногоХранилищаСервер(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Функция ПриИзмененииСоглашенияСервер()
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Соглашение, "ХозяйственнаяОперация,Валюта,РегистрироватьЦеныПоУсловиям");
	РегистрироватьЦеныПоУсловиям = РеквизитыСоглашения.РегистрироватьЦеныПоУсловиям;
	Если Не РегистрироватьЦеныПоУсловиям Тогда
		СпособУказанияУсловийЦен = 0;
		УсловиеЦенПоставщика = Справочники.УсловияЦенПоставщиков.ПустаяСсылка();
	КонецЕсли;
	ХозяйственнаяОперация = РеквизитыСоглашения.ХозяйственнаяОперация;
	Валюта = РеквизитыСоглашения.Валюта;
	
	Элементы.ТоварыЗаполнитьУсловиеЦеныВыделенныхСтрок.Видимость = РегистрироватьЦеныПоУсловиям;
	УстановитьДоступностьСпособаУказанияУсловийЦен();
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(ХозяйственнаяОперация, Элементы.ТоварыНоменклатураПоставщика);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Функция ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ()
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
	СтруктураЗаполненияЦены.Вставить("Партнер",    Объект.Партнер);
	СтруктураЗаполненияЦены.Вставить("Дата",       Объект.ДатаНачалаДействияЦен);
	СтруктураЗаполненияЦены.Вставить("Валюта",     ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "Валюта"));
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПризнакИзмененияЦены(ТекущаяСтрока)
	
	Если ТекущаяСтрока.Цена = 0 И ТекущаяСтрока.НоваяЦена <> 0 Тогда
		ТекущаяСтрока.ИндексКартинки = 8;
		ТекущаяСтрока.ЦенаИзменилась = Истина;
	ИначеЕсли ТекущаяСтрока.Цена <> 0 И ТекущаяСтрока.Цена = ТекущаяСтрока.НоваяЦена Тогда
		ТекущаяСтрока.ИндексКартинки = 6;
		ТекущаяСтрока.ЦенаИзменилась = Ложь;
	ИначеЕсли ТекущаяСтрока.НоваяЦена < ТекущаяСтрока.Цена Тогда
		ТекущаяСтрока.ИндексКартинки = 3;
		ТекущаяСтрока.ЦенаИзменилась = Истина;
	ИначеЕсли ТекущаяСтрока.НоваяЦена > ТекущаяСтрока.Цена Тогда
		ТекущаяСтрока.ИндексКартинки = 1;
		ТекущаяСтрока.ЦенаИзменилась = Истина;
	Иначе
		ТекущаяСтрока.ИндексКартинки = 8;
		ТекущаяСтрока.ЦенаИзменилась = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварыПоПодборуИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	Товары = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	МассивСтрокТабличнойЧасти = Новый Массив();
	Для Каждого ТекСтрока Из Товары Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		МассивСтрокТабличнойЧасти.Добавить(НоваяСтрока);
	КонецЦикла;
	ЗаполнитьСтарыеЦеныВыделенныхСтрок(МассивСтрокТабличнойЧасти);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
		)
	);
	
КонецПроцедуры

&НаСервере
Функция СопоставитьДанныеТабличногоДокументаСНоменклатуройПоставщика()
	
	УточнениеНоменклатуры.Очистить();
	
	// Подготовка таблицы товаров для сопоставления
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	НоменклатураПоставщиков.Артикул      КАК Артикул,
		|	НоменклатураПоставщиков.Артикул      КАК АртикулПоиск,
		|	НоменклатураПоставщиков.Наименование КАК Наименование,
		|	НоменклатураПоставщиков.Наименование КАК НаименованиеПоиск,
		|	НоменклатураПоставщиков.Ссылка       КАК Ссылка
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Владелец = &Партнер
		|	И НЕ НоменклатураПоставщиков.ЭтоГруппа
		|	И НЕ НоменклатураПоставщиков.ПометкаУдаления
		|");
		
	Запрос.УстановитьПараметр("Партнер", Объект.Партнер);
	НоменклатураПоставщика.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого ТекСтрока Из НоменклатураПоставщика Цикл
		
		ТекСтрока.АртикулПоиск = ВРег(СтрЗаменить(ТекСтрока.Артикул, " ", ""));
		ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.Наименование, " ", ""));
		
	КонецЦикла;
	
	// Подготовка таблицы условий цен поставщика для сопоставления
	
	Если РегистрироватьЦеныПоУсловиям И ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		Запрос = Новый Запрос("
			|ВЫБРАТЬ
			|	УсловияЦенПоставщиков.Наименование КАК Наименование,
			|	УсловияЦенПоставщиков.Наименование КАК НаименованиеПоиск,
			|	УсловияЦенПоставщиков.Ссылка       КАК Ссылка
			|ИЗ
			|	Справочник.УсловияЦенПоставщиков КАК УсловияЦенПоставщиков
			|ГДЕ
			|	УсловияЦенПоставщиков.Владелец = &Соглашение
			|	И НЕ УсловияЦенПоставщиков.ПометкаУдаления
			|");
			
		Запрос.УстановитьПараметр("Соглашение", Объект.Соглашение);
		УсловияЦенПоставщика.Загрузить(Запрос.Выполнить().Выгрузить());
		
		Для Каждого ТекСтрока Из УсловияЦенПоставщика Цикл
			ТекСтрока.НаименованиеПоиск = ВРег(СтрЗаменить(ТекСтрока.Наименование, " ", ""));
		КонецЦикла;
		
	КонецЕсли;
	
	// Сопоставление данных прайс-листа с данными информационной базы
	
	КолонкаАртикул      = "C1";
	КолонкаНоменклатура = "C2";
	КолонкаУсловиеЦены  = "C3";
	Если СпособУказанияУсловийЦен = 1 Тогда
		КолонкаЦена = "C4";
	Иначе
		КолонкаЦена = "C3";
	КонецЕсли;
	
	НомерСтроки = 2;
	СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
	ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаАртикул).Текст) Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + Формат(НомерСтроки, "ЧН=0; ЧГ=0") + КолонкаНоменклатура).Текст);
	ЕстьОшибкиРаспознавания = Ложь;
	
	Пока ЗаполненаНоменклатураАртикул Цикл
		
		НоваяСтрока = УточнениеНоменклатуры.Добавить();
		
		Попытка
			НоваяСтрока.Артикул = ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаАртикул).Текст;
			НоваяСтрока.НоменклатураНаименование = ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаНоменклатура).Текст;
			ЦенаНоменклатуры = ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаЦена).Текст;
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ЦенаНоменклатуры) Тогда
			НоваяСтрока.Цена = ЦенаНоменклатуры;
			Если Не ЗначениеЗаполнено(НоваяСтрока.Цена) Тогда
				НоваяСтрока.ЦенаНеРаспознана = Истина;
				ЕстьОшибкиРаспознавания = Истина;
			КонецЕсли;
		КонецЕсли;
		
		МассивНоменклатурыПоставщика = Новый Массив();
		
		Если ЗначениеЗаполнено(НоваяСтрока.Артикул) И ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(Новый Структура("АртикулПоиск, НаименованиеПоиск", ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", "")), ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""))));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Артикул) И НЕ ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) Тогда
			
			НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(Новый Структура("АртикулПоиск", ВРег(СтрЗаменить(НоваяСтрока.Артикул, " ", ""))));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.НоменклатураНаименование) И НЕ ЗначениеЗаполнено(НоваяСтрока.Артикул) Тогда
			НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(Новый Структура("НаименованиеПоиск", ВРег(СтрЗаменить(НоваяСтрока.НоменклатураНаименование, " ", ""))));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если МассивНоменклатурыПоставщика.Найти(НайденнаяСтрока) = Неопределено Тогда
					МассивНоменклатурыПоставщика.Добавить(НайденнаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если МассивНоменклатурыПоставщика.Количество() = 1 Тогда
			
			НоваяСтрока.НоменклатураПоставщика = МассивНоменклатурыПоставщика[0].Ссылка;
			НоваяСтрока.НоменклатураСопоставленаАвтоматически = Истина;
			
			Если НоваяСтрока.НоменклатураНаименование <> МассивНоменклатурыПоставщика[0].Наименование Тогда
				НоваяСтрока.НоменклатураНаименованиеОтличается = Истина;
				ЕстьОшибкиРаспознавания = Истина;
			КонецЕсли;
			
			Если НоваяСтрока.Артикул <> МассивНоменклатурыПоставщика[0].Артикул Тогда
				НоваяСтрока.АртикулОтличается = Истина;
				ЕстьОшибкиРаспознавания = Истина;
			КонецЕсли;
			
		ИначеЕсли МассивНоменклатурыПоставщика.Количество() > 1 Тогда
			
			ЕстьОшибкиРаспознавания = Истина;
			НоваяСтрока.КоличествоНоменклатурыДляВыбора = МассивНоменклатурыПоставщика.Количество();
			
			Для Каждого ТекЭлемент Из МассивНоменклатурыПоставщика Цикл
				
				ПараметрыОтбора = Новый Структура();
				ПараметрыОтбора.Вставить("АртикулПоиск", ТекЭлемент.Артикул);
				ПараметрыОтбора.Вставить("НаименованиеПоиск", ТекЭлемент.Наименование);
				ПараметрыОтбора.Вставить("Артикул", НоваяСтрока.Артикул);
				ПараметрыОтбора.Вставить("Наименование", НоваяСтрока.НоменклатураНаименование);
				ПараметрыОтбора.Вставить("Ссылка", ТекЭлемент.Ссылка);
				
				НайденныеСтроки = НоменклатураПоставщика.НайтиСтроки(ПараметрыОтбора);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					НоваяНоменклатураПоставщика = НоменклатураПоставщика.Добавить();
					НоваяНоменклатураПоставщика.НаименованиеПоиск = ТекЭлемент.Наименование;
					НоваяНоменклатураПоставщика.АртикулПоиск = ТекЭлемент.Артикул;
					НоваяНоменклатураПоставщика.Наименование = НоваяСтрока.НоменклатураНаименование;
					НоваяНоменклатураПоставщика.Артикул = НоваяСтрока.Артикул;
					НоваяНоменклатураПоставщика.Ссылка = ТекЭлемент.Ссылка;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			ЕстьОшибкиРаспознавания = Истина;
		КонецЕсли;
		
		Если СпособУказанияУсловийЦен = 1 Тогда
		
			Попытка
				ТекУсловиеЦены = ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаУсловиеЦены).Текст;
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			Если ЗначениеЗаполнено(ТекУсловиеЦены) Тогда
			
				НоваяСтрока.УсловиеЦеныНаименование = ТекУсловиеЦены;
				НайденныеСтрокиСовпадений = УсловияЦенПоставщика.НайтиСтроки(Новый Структура("НаименованиеПоиск", ВРег(СтрЗаменить(ТекУсловиеЦены, " ", ""))));
				
				Если НайденныеСтрокиСовпадений.Количество() = 1 Тогда
					
					НоваяСтрока.УсловиеЦеныПоставщика = НайденныеСтрокиСовпадений[0].Ссылка;
					НоваяСтрока.УсловиеЦеныСопоставленоАвтоматически = Истина;
					
					Если НоваяСтрока.УсловиеЦеныНаименование <> НайденныеСтрокиСовпадений[0].Наименование Тогда
						НоваяСтрока.УсловиеЦеныНаименованиеОтличается = Истина;
						ЕстьОшибкиРаспознавания = Истина;
					КонецЕсли;
					
				ИначеЕсли НайденныеСтрокиСовпадений.Количество() > 1 Тогда
					
					ЕстьОшибкиРаспознавания = Истина;
					НоваяСтрока.КоличествоУсловийЦеныДляВыбора = НайденныеСтрокиСовпадений.Количество();
					
					Для Каждого ТекЭлемент Из НайденныеСтрокиСовпадений Цикл
						
						ПараметрыОтбора = Новый Структура();
						ПараметрыОтбора.Вставить("НаименованиеПоиск", ТекЭлемент.Наименование);
						ПараметрыОтбора.Вставить("Наименование", НоваяСтрока.УсловиеЦеныНаименование);
						ПараметрыОтбора.Вставить("Ссылка", ТекЭлемент.Ссылка);
						
						НайденныеСтроки = УсловияЦенПоставщика.НайтиСтроки(ПараметрыОтбора);
						
						Если НайденныеСтроки.Количество() = 0 Тогда
							
							НовоеУсловиеЦен = УсловияЦенПоставщика.Добавить();
							НовоеУсловиеЦен.НаименованиеПоиск = ТекЭлемент.Наименование;
							НовоеУсловиеЦен.Наименование = НоваяСтрока.УсловиеЦеныНаименование;
							НовоеУсловиеЦен.Ссылка = ТекЭлемент.Ссылка;
							
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					ЕстьОшибкиРаспознавания = Истина;
				КонецЕсли;
			Иначе
				НоваяСтрока.УсловиеЦеныСопоставленоАвтоматически = Истина;
			КонецЕсли;
		Иначе
			НоваяСтрока.УсловиеЦеныСопоставленоАвтоматически = Истина;
		КонецЕсли;
		
		Если НоваяСтрока.НоменклатураСопоставленаАвтоматически И
			НоваяСтрока.УсловиеЦеныСопоставленоАвтоматически И
			Не НоваяСтрока.ЦенаНеРаспознана И
			Не НоваяСтрока.АртикулОтличается И
			Не НоваяСтрока.УсловиеЦеныНаименованиеОтличается И
			Не НоваяСтрока.НоменклатураНаименованиеОтличается Тогда
			
			НоваяСтрока.СтрокаСопоставлена = Истина;
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		СтроковыйНомер = Формат(НомерСтроки, "ЧН=0; ЧГ=0");
		
		Попытка
			ЗаполненаНоменклатураАртикул = ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаАртикул).Текст) Или ЗначениеЗаполнено(ТабличныйДокумент.Область("R" + СтроковыйНомер + КолонкаНоменклатура).Текст);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	Элементы.УточнениеНоменклатуры.ОтборСтрок = Новый ФиксированнаяСтруктура("СтрокаСопоставлена", Ложь);
	
	СопоставлятьСправочники = Ложь;
	Возврат Не ЕстьОшибкиРаспознавания;
	
КонецФункции

&НаСервере
Функция ЗаполнитьТоварыПоУточненнымТоварам()
	
	МассивУсловийЦен = Новый Массив();
	Отказ = Ложь;
	
	Если ДействиеСНесопоставленнымиСправочниками = 0 Тогда
		
		Для Каждого ТекСтрока Из УточнениеНоменклатуры Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И Не ЗначениеЗаполнено(ТекСтрока.НоменклатураНаименование) Тогда
				
				ТекстОшибки = НСтр("ru='Не заполнено наименование номенклатуры в строке %НомерСтроки%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НомерСтроки%", УточнениеНоменклатуры.Индекс(ТекСтрока) + 1);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("УточнениеНоменклатуры", УточнениеНоменклатуры.Индекс(ТекСтрока)+1, "НоменклатураНаименование"),
					,
					Отказ
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из УточнениеНоменклатуры Цикл
		
		Если ДействиеСНесопоставленнымиСправочниками = 0 Тогда
			
			Если Не ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) Тогда
				
				НоваяНоменклатураПоставщика = Справочники.НоменклатураПоставщиков.СоздатьЭлемент();
				НоваяНоменклатураПоставщика.Владелец = Объект.Партнер;
				НоваяНоменклатураПоставщика.Наименование = ТекСтрока.НоменклатураНаименование;
				НоваяНоменклатураПоставщика.Артикул = ТекСтрока.Артикул;
				НоваяНоменклатураПоставщика.УстановитьНовыйКод();
				
				Попытка
					НоваяНоменклатураПоставщика.Записать();
					ТекСтрока.НоменклатураПоставщика = НоваяНоменклатураПоставщика.Ссылка;
					ТекСтрока.НоменклатураСопоставленаАвтоматически = Истина;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			Иначе
				
				ТекСтрока.НоменклатураСопоставленаАвтоматически = Истина;
				
			КонецЕсли;
		
			Если СпособУказанияУсловийЦен = 1 И ЗначениеЗаполнено(ТекСтрока.УсловиеЦеныНаименование)
				И Не ТекСтрока.УсловиеЦеныСопоставленоАвтоматически Тогда
				
				УсловиеЦен = МассивУсловийЦен.Найти(ТекСтрока.УсловиеЦеныНаименование);
				
				Если УсловиеЦен = Неопределено Тогда
				
					УсловиеЦеныПоставщика = Справочники.УсловияЦенПоставщиков.СоздатьЭлемент();
					УсловиеЦеныПоставщика.Владелец = Объект.Соглашение;
					УсловиеЦеныПоставщика.Наименование = ТекСтрока.УсловиеЦеныНаименование;
					
					Попытка
						УсловиеЦеныПоставщика.Записать();
						ТекСтрока.УсловиеЦеныПоставщика = УсловиеЦеныПоставщика.Ссылка;
						МассивУсловийЦен.Добавить(УсловиеЦеныПоставщика.Наименование);
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					
				КонецЕсли;
				
				ТекСтрока.УсловиеЦеныСопоставленоАвтоматически = Истина;
				
			Иначе
				Если СпособУказанияУсловийЦен = 2 Тогда
					ТекСтрока.УсловиеЦеныПоставщика = УсловиеЦенПоставщика;
				КонецЕсли;
				ТекСтрока.УсловиеЦеныСопоставленоАвтоматически = Истина;
			КонецЕсли;
			
			Если ТекСтрока.НоменклатураСопоставленаАвтоматически И ТекСтрока.УсловиеЦеныСопоставленоАвтоматически Тогда
				ТекСтрока.СтрокаСопоставлена = Истина;
			КонецЕсли;
			
		Иначе
			
			Если СпособУказанияУсловийЦен = 2 Тогда
				ТекСтрока.УсловиеЦеныПоставщика = УсловиеЦенПоставщика;
			КонецЕсли;
			ТекСтрока.УсловиеЦеныСопоставленоАвтоматически = Истина;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) И
			(ЗначениеЗаполнено(ТекСтрока.УсловиеЦеныПоставщика) И ЗначениеЗаполнено(ТекСтрока.УсловиеЦеныНаименование) Или
			Не ЗначениеЗаполнено(ТекСтрока.УсловиеЦеныНаименование)) Тогда
			
			ТекСтрока.СтрокаСопоставлена = Истина;
		КонецЕсли;
		
		Если ОбновлятьРеквизитыСправочников Тогда
			
			Если (ТекСтрока.НоменклатураНаименованиеОтличается Или ТекСтрока.АртикулОтличается)
				И ЗначениеЗаполнено(ТекСтрока.НоменклатураПоставщика) Тогда
				
				Попытка
					ЗаблокироватьДанныеДляРедактирования(ТекСтрока.НоменклатураПоставщика);
					НоменклатураПоставщикаОбъект = ТекСтрока.НоменклатураПоставщика.ПолучитьОбъект();
					НоменклатураПоставщикаОбъект.Наименование = ТекСтрока.НоменклатураНаименование;
					НоменклатураПоставщикаОбъект.Артикул = ТекСтрока.Артикул;
					НоменклатураПоставщикаОбъект.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЕсли;
			
			Если ТекСтрока.УсловиеЦеныНаименованиеОтличается И
				ЗначениеЗаполнено(ТекСтрока.УсловиеЦеныПоставщика) Тогда
				
				Попытка
					ЗаблокироватьДанныеДляРедактирования(ТекСтрока.УсловиеЦеныПоставщика);
					УсловиеЦеныПоставщикаОбъект = ТекСтрока.УсловиеЦеныПоставщика.ПолучитьОбъект();
					УсловиеЦеныПоставщикаОбъект.Наименование = ТекСтрока.УсловиеЦеныНаименование;
					УсловиеЦеныПоставщикаОбъект.Записать();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	СопоставленныеТовары.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	СопоставленныеТовары.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика,
		|	СопоставленныеТовары.Цена                   КАК Цена
		|ПОМЕСТИТЬ
		|	СопоставленныеТовары
		|ИЗ
		|	&СопоставленныеТовары КАК СопоставленныеТовары
		|;
		|ВЫБРАТЬ
		|	Товары.НоменклатураПоставщика                КАК НоменклатураПоставщика,
		|	Товары.НоменклатураПоставщика.Номенклатура   КАК Номенклатура,
		|	Товары.НоменклатураПоставщика.Характеристика КАК Характеристика,
		|	Товары.УсловиеЦеныПоставщика                 КАК УсловиеЦеныПоставщика,
		|	ВЫБОР
		|		КОГДА
		|			Товары.НоменклатураПоставщика.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Товары.НоменклатураПоставщика.Упаковка.Коэффициент
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	Товары.Цена КАК Цена
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	СопоставленныеТовары КАК Товары
		|;
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыПоставщиков.Номенклатура          КАК Номенклатура,
		|	ЦеныНоменклатурыПоставщиков.Характеристика        КАК Характеристика,
		|	ЦеныНоменклатурыПоставщиков.Цена                  КАК Цена,
		|	ЦеныНоменклатурыПоставщиков.УсловиеЦеныПоставщика КАК УсловиеЦеныПоставщика,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиков.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			ЦеныНоменклатурыПоставщиков.Упаковка.Коэффициент
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ КАК КоэффициентУпаковкиЦены
		|ПОМЕСТИТЬ
		|	ЦеныНоменклатурыПоставщиков
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаНачалаДействияЦен,
		|		Соглашение = &Соглашение И
		|		(Номенклатура,Характеристика,УсловиеЦеныПоставщика) В (
		|			ВЫБРАТЬ
		|				Товары.Номенклатура          КАК Номенклатура,
		|				Товары.Характеристика        КАК Характеристика,
		|				Товары.УсловиеЦеныПоставщика КАК УсловиеЦеныПоставщика
		|			ИЗ
		|				Товары КАК Товары
		|		)
		|	) КАК ЦеныНоменклатурыПоставщиков
		|;
		|ВЫБРАТЬ
		|	Товары.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	Товары.Номенклатура           КАК Номенклатура,
		|	Товары.Характеристика         КАК Характеристика,
		|	Товары.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика,
		|	ВЫРАЗИТЬ (ЦеныНоменклатурыПоставщиков.Цена / ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены * Товары.КоэффициентУпаковки КАК Число(15,2)) КАК Цена,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ Товары.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиков.Цена ЕСТЬ NULL
		|		ТОГДА
		|			8
		|		КОГДА
		|			Товары.Цена = ВЫРАЗИТЬ (ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены,1) * Товары.КоэффициентУпаковки КАК Число(15,2))
		|		ТОГДА
		|			6
		|		КОГДА
		|			Товары.Цена < ВЫРАЗИТЬ (ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены,1) * Товары.КоэффициентУпаковки КАК Число(15,2))
		|		ТОГДА
		|			3
		|		КОГДА
		|			Товары.Цена > ВЫРАЗИТЬ (ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены,1) * Товары.КоэффициентУпаковки КАК Число(15,2))
		|		ТОГДА
		|			1
		|		ИНАЧЕ
		|			8
		|	КОНЕЦ КАК ИндексКартинки,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиков.Цена ЕСТЬ NULL ИЛИ ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) = 0
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			Товары.Цена = ВЫРАЗИТЬ (ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены,1) * Товары.КоэффициентУпаковки КАК Число(15,2))
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЦенаИзменилась
		|ИЗ
		|	Товары КАК Товары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ЦеныНоменклатурыПоставщиков КАК ЦеныНоменклатурыПоставщиков
		|ПО
		|	Товары.Номенклатура = ЦеныНоменклатурыПоставщиков.Номенклатура
		|	И Товары.Характеристика = ЦеныНоменклатурыПоставщиков.Характеристика
		|	И Товары.УсловиеЦеныПоставщика = ЦеныНоменклатурыПоставщиков.УсловиеЦеныПоставщика
		|");
		
	СопоставленныеТовары = УточнениеНоменклатуры.Выгрузить(УточнениеНоменклатуры.НайтиСтроки(Новый Структура("СтрокаСопоставлена", Истина)),"НоменклатураПоставщика,УсловиеЦеныПоставщика,Цена");
	Запрос.УстановитьПараметр("СопоставленныеТовары",  СопоставленныеТовары);
	Запрос.УстановитьПараметр("Соглашение",            Объект.Соглашение);
	Запрос.УстановитьПараметр("ДатаНачалаДействияЦен", ПолучитьДатуСрезаСтарыхЦен());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Объект.Товары.Очистить();
	
	Для Каждого ТекСтрока Из СопоставленныеТовары Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.НоваяЦена = ТекСтрока.Цена;
		НоваяСтрока.Цена = 0;
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Новый Структура("НоменклатураПоставщика,УсловиеЦеныПоставщика", НоваяСтрока.НоменклатураПоставщика, НоваяСтрока.УсловиеЦеныПоставщика)) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьОтборПоТоварам();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыПоСтарымЦенам()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ЦеныНоменклатурыПоставщиков.НоменклатураПоставщика КАК НоменклатураПоставщика,
	|	ЦеныНоменклатурыПоставщиков.Номенклатура           КАК Номенклатура,
	|	ЦеныНоменклатурыПоставщиков.Характеристика         КАК Характеристика,
	|	ЦеныНоменклатурыПоставщиков.Упаковка               КАК Упаковка,
	|	ЦеныНоменклатурыПоставщиков.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика,
	|	ЦеныНоменклатурыПоставщиков.Цена                   КАК НоваяЦена,
	|	ЦеныНоменклатурыПоставщиков.Цена                   КАК Цена,
	|	6                                                  КАК ИндексКартинки,
	|	ЛОЖЬ                                               КАК ЦенаИзменилась,
	|	ВЫБОР
	|		КОГДА ЦеныНоменклатурыПоставщиков.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|				ИЛИ ЦеныНоменклатурыПоставщиков.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаНачалаДействияЦен, Соглашение = &Соглашение) КАК ЦеныНоменклатурыПоставщиков
	|");
	
	Запрос.УстановитьПараметр("Соглашение",            Объект.Соглашение);
	Запрос.УстановитьПараметр("ДатаНачалаДействияЦен", КонецДня(?(ЗначениеЗаполнено(Объект.ДатаНачалаДействияЦен), Объект.ДатаНачалаДействияЦен, ТекущаяДата())));
	Объект.Товары.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросПоСтарымЦенам()
	
	Возврат "ВЫБРАТЬ
		|	Товары.НомерСтроки            КАК НомерСтроки,
		|	Товары.Номенклатура           КАК Номенклатура,
		|	Товары.Характеристика         КАК Характеристика,
		|	Товары.Упаковка               КАК Упаковка,
		|	Товары.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика,
		|	Товары.НоваяЦена              КАК Цена
		|ПОМЕСТИТЬ
		|	втТовары
		|ИЗ
		|	&Товары КАК Товары
		|;
		|ВЫБРАТЬ
		|	Товары.НомерСтроки            КАК НомерСтроки,
		|	Товары.Номенклатура           КАК Номенклатура,
		|	Товары.Характеристика         КАК Характеристика,
		|	Товары.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика,
		|	ВЫБОР
		|		КОГДА
		|			Товары.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			Товары.Упаковка.Коэффициент
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ КАК КоэффициентУпаковки,
		|	Товары.Цена КАК Цена
		|ПОМЕСТИТЬ
		|	Товары
		|ИЗ
		|	втТовары КАК Товары
		|;
		|ВЫБРАТЬ
		|	ЦеныНоменклатурыПоставщиков.Номенклатура          КАК Номенклатура,
		|	ЦеныНоменклатурыПоставщиков.Характеристика        КАК Характеристика,
		|	ЦеныНоменклатурыПоставщиков.Упаковка              КАК Упаковка,
		|	ЦеныНоменклатурыПоставщиков.Цена                  КАК Цена,
		|	ЦеныНоменклатурыПоставщиков.УсловиеЦеныПоставщика КАК УсловиеЦеныПоставщика,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиков.Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|		ТОГДА
		|			ЦеныНоменклатурыПоставщиков.Упаковка.Коэффициент
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ КАК КоэффициентУпаковкиЦены
		|ПОМЕСТИТЬ
		|	ЦеныНоменклатурыПоставщиков
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(&ДатаНачалаДействияЦен,
		|		Соглашение = &Соглашение И
		|		(Номенклатура,Характеристика,УсловиеЦеныПоставщика) В (
		|			ВЫБРАТЬ
		|				Товары.Номенклатура          КАК Номенклатура,
		|				Товары.Характеристика        КАК Характеристика,
		|				Товары.УсловиеЦеныПоставщика КАК УсловиеЦеныПоставщика
		|			ИЗ
		|				Товары КАК Товары
		|		)
		|	) КАК ЦеныНоменклатурыПоставщиков
		|;
		|ВЫБРАТЬ
		|	Товары.НомерСтроки КАК НомерСтроки,
		|	ВЫРАЗИТЬ (ЦеныНоменклатурыПоставщиков.Цена / ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены * Товары.КоэффициентУпаковки КАК Число(15,2)) КАК Цена,
		|	ВЫБОР
		|		КОГДА Товары.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ Товары.Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиков.Цена ЕСТЬ NULL ИЛИ ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) = 0
		|		ТОГДА
		|			8
		|		КОГДА
		|			Товары.Цена = ВЫРАЗИТЬ (ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены,1) * Товары.КоэффициентУпаковки КАК Число(15,2))
		|		ТОГДА
		|			6
		|		КОГДА
		|			Товары.Цена < ВЫРАЗИТЬ (ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены,1) * Товары.КоэффициентУпаковки КАК Число(15,2))
		|		ТОГДА
		|			3
		|		КОГДА
		|			Товары.Цена > ВЫРАЗИТЬ (ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены,1) * Товары.КоэффициентУпаковки КАК Число(15,2))
		|		ТОГДА
		|			1
		|		ИНАЧЕ
		|			8
		|	КОНЕЦ КАК ИндексКартинки,
		|	ВЫБОР
		|		КОГДА
		|			ЦеныНоменклатурыПоставщиков.Цена ЕСТЬ NULL ИЛИ ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) = 0
		|		ТОГДА
		|			ИСТИНА
		|		КОГДА
		|			Товары.Цена = ВЫРАЗИТЬ (ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена,0) / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.КоэффициентУпаковкиЦены,1) * Товары.КоэффициентУпаковки КАК Число(15,2))
		|		ТОГДА
		|			ЛОЖЬ
		|		ИНАЧЕ
		|			ИСТИНА
		|	КОНЕЦ КАК ЦенаИзменилась
		|ИЗ
		|	Товары КАК Товары
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	ЦеныНоменклатурыПоставщиков КАК ЦеныНоменклатурыПоставщиков
		|ПО
		|	Товары.Номенклатура = ЦеныНоменклатурыПоставщиков.Номенклатура
		|	И Товары.Характеристика = ЦеныНоменклатурыПоставщиков.Характеристика
		|	И Товары.УсловиеЦеныПоставщика = ЦеныНоменклатурыПоставщиков.УсловиеЦеныПоставщика
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|";
	
КонецФункции

&НаСервере
Функция ПолучитьДатуСрезаСтарыхЦен()
	
	Возврат КонецДня(?(ЗначениеЗаполнено(Объект.ДатаНачалаДействияЦен), Объект.ДатаНачалаДействияЦен, ТекущаяДата()));
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтарыеЦены()
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросПоСтарымЦенам());
	Запрос.УстановитьПараметр("Товары",                Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("Соглашение",            Объект.Соглашение);
	Запрос.УстановитьПараметр("ДатаНачалаДействияЦен", ПолучитьДатуСрезаСтарыхЦен());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки)) Тогда
			ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтарыеЦеныВыделенныхСтрок(МассивСтрокТабличнойЧасти)
	
	Запрос = Новый Запрос(ПолучитьТекстЗапросПоСтарымЦенам());
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить(МассивСтрокТабличнойЧасти));
	Запрос.УстановитьПараметр("Соглашение",            Объект.Соглашение);
	Запрос.УстановитьПараметр("ДатаНачалаДействияЦен", ПолучитьДатуСрезаСтарыхЦен());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого ТекСтрока Из МассивСтрокТабличнойЧасти Цикл
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки)) Тогда
			ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТабличныйДокумент()
	
	МакетЗаполненияПоВнешнемуИсточнику = Документы.РегистрацияЦенНоменклатурыПоставщика.ПолучитьМакет("МакетЗагрузкиЦен");
	ТабличныйДокумент.Очистить();
	ОбластьТовары = МакетЗаполненияПоВнешнемуИсточнику.ПолучитьОбласть(?(СпособУказанияУсловийЦен = 1, "ТоварыСУсловиямиЦен", "ТоварыБезУсловийЦен"));
	ТабличныйДокумент.Присоединить(ОбластьТовары);
	ТабличныйДокумент.ФиксацияСверху = 1;
	
	Если СпособУказанияУсловийЦен = 1 Тогда
		Элементы.СтраницыУточнениеНоменклатурыИнформация.ТекущаяСтраница = Элементы.СтраницаУточнениеНоменклатурыИнформацияСУсловиямиЦен;
		Элементы.СтраницыДействиеСНесопоставленнойНоменклатуройПоставщика.ТекущаяСтраница = Элементы.СтраницаДействиеСНесопоставленнойНоменклатуройПоставщикаСУсловиямиЦен;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УточнениеНоменклатурыГруппаУсловиеЦены", "Видимость", Истина);
	Иначе
		Элементы.СтраницыУточнениеНоменклатурыИнформация.ТекущаяСтраница = Элементы.СтраницаУточнениеНоменклатурыИнформацияБезУсловийЦен;
		Элементы.СтраницыДействиеСНесопоставленнойНоменклатуройПоставщика.ТекущаяСтраница = Элементы.СтраницаДействиеСНесопоставленнойНоменклатуройПоставщикаБезУсловийЦен;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "УточнениеНоменклатурыГруппаУсловиеЦены", "Видимость", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоТоварам()
	
	Элементы.Товары.ОтборСтрок = Неопределено;
	
	Если ВариантОтображенияНоменклатуры = 1 И ВариантОтображенияЦен = 1 Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Номенклатура,ЦенаИзменилась", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"), Истина);
	ИначеЕсли ВариантОтображенияНоменклатуры = 1 Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("Номенклатура", ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"));
	ИначеЕсли ВариантОтображенияЦен = 1 Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЦенаИзменилась", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокКолонкиЦены()
	
	ВалютаЦены = ?(СоздатьНовоеСоглашение, ВалютаНовогоСоглашения, Валюта);
	
	ЗаголовокЦена = НСтр("ru='Старая цена (%Валюта%)'");
	ЗаголовокЦена = СтрЗаменить(ЗаголовокЦена, "%Валюта%", ВалютаЦены);
	
	ЗаголовокНоваяЦена = НСтр("ru='Цена (%Валюта%)'");
	ЗаголовокНоваяЦена = СтрЗаменить(ЗаголовокНоваяЦена, "%Валюта%", ВалютаЦены);
	
	Элементы.ТоварыЦена.Заголовок = ЗаголовокЦена;
	Элементы.ТоварыНоваяЦена.Заголовок = ЗаголовокНоваяЦена;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоглашениеПоУмолчанию()

	УсловияЗакупокПоУмолчанию = ЗакупкиСервер.ПолучитьУсловияЗакупокПоУмолчанию(
		Объект.Партнер,
		Новый Структура("ТолькоДляЗакупки,ТолькоДействующее", Ложь, Ложь)
	);
	
	Если УсловияЗакупокПоУмолчанию <> Неопределено Тогда
		
		Если Объект.Соглашение <> УсловияЗакупокПоУмолчанию.Соглашение
			И ЗначениеЗаполнено(УсловияЗакупокПоУмолчанию.Соглашение) Тогда
				
			Объект.Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
			Валюта = УсловияЗакупокПоУмолчанию.Валюта;
			РегистрироватьЦеныПоУсловиям = УсловияЗакупокПоУмолчанию.РегистрироватьЦеныПоУсловиям;
			
		Иначе
			Объект.Соглашение = УсловияЗакупокПоУмолчанию.Соглашение;
		КонецЕсли;
			
	Иначе
		Объект.Соглашение = Неопределено;
		РегистрироватьЦеныПоУсловиям = Ложь;
		Валюта = Справочники.Валюты.ПустаяСсылка();
	КонецЕсли;
	
	УсловиеЦенПоставщика = Справочники.УсловияЦенПоставщиков.ПустаяСсылка();
	
	Если Не РегистрироватьЦеныПоУсловиям Тогда
		СпособУказанияУсловийЦен = 0;
	КонецЕсли;
	
	Элементы.ТоварыЗаполнитьУсловиеЦеныВыделенныхСтрок.Видимость = РегистрироватьЦеныПоУсловиям;
	УстановитьДоступностьСпособаУказанияУсловийЦен();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьСпособаУказанияУсловийЦен()
	
	Если СпособРегистрацииЦен = 2 И РегистрироватьЦеныПоУсловиям И ИспользоватьНоменклатуруПоставщиков Тогда
		Элементы.Шаг1_Группа6.Доступность = Истина;
	Иначе
		Элементы.Шаг1_Группа6.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилищеСервер()
	
	Возврат ЗакупкиСервер.ПоместитьТоварыВоВременноеХранилище(Объект.Товары);
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТоварыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	МассивСтрокТабличнойЧасти = Новый Массив();
	
	Для каждого ТекСтрока Из ТаблицаТоваров Цикл
		
		МассивСтрокКоллекции = Объект.Товары.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
		Если МассивСтрокКоллекции.Количество() <> 1 Тогда
			Продолжить;
		Иначе
			СтрокаКоллекции = МассивСтрокКоллекции[0];
			МассивСтрокТабличнойЧасти.Добавить(СтрокаКоллекции);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКоллекции, ТекСтрока, "Номенклатура, Характеристика, Упаковка");
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПроверитьСопоставленнуюНоменклатуруПоставщика",
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПроверкиСопоставленнойНоменклатурыПоставщикаВСтрокеТЧ(
				Новый Структура("Ссылка,Партнер",ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"), Объект.Партнер),
				НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика)
			);
			
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрокаКоллекции, СтруктураДействий, КэшированныеЗначения);
		
	КонецЦикла;
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	Если МассивСтрокТабличнойЧасти.Количество() > 0 Тогда
		ЗаполнитьСтарыеЦеныВыделенныхСтрок(МассивСтрокТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦеныВыделенныхСтрокПоУсловиюЦеныСервер(УсловиеЦеныПоставщика)

	МассивСтрокТабличнойЧасти = Новый Массив();
	
	Для Каждого ТекущаяСтрока Из Элементы.Товары.ВыделенныеСтроки Цикл
		
		СтрокаТаблицы = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.УсловиеЦеныПоставщика = УсловиеЦеныПоставщика;
		МассивСтрокТабличнойЧасти.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	ЗаполнитьСтарыеЦеныВыделенныхСтрок(МассивСтрокТабличнойЧасти);
	
КонецПроцедуры

&НаСервере
Функция СоздатьДокументРегистрацииЦенНоменклатурыПоставщика()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ДокументРегистрацииЦен = ОбработкаОбъект.СоздатьДокументРегистрацииЦенНоменклатурыПоставщика(РегистрироватьИзмененныеЦены);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	Возврат ДокументРегистрацииЦен;
	
КонецФункции

&НаСервере
Процедура СвязатьНоменклатуруСНоменклатуройПоставщикаСервер(Отказ)
	
	ЗакупкиСервер.СвязатьНоменклатуруСНоменклатуройПоставщика(Объект.Товары, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуПомощника()
	
	Состояние(НСтр("ru = 'Осуществляется создание документа регистрации цен поставщика. Пожалуйста подождите...'"),,,БиблиотекаКартинок.Информация32);
	
	ДокументОбъект = Новый Структура();
	ДокументОбъект.Вставить("Партнер", Объект.Партнер);
	ДокументОбъект.Вставить("Ссылка",  ПредопределенноеЗначение("Документ.РегистрацияЦенНоменклатурыПоставщика.ПустаяСсылка"));
	ДокументОбъект.Вставить("Товары",  Объект.Товары);
	Отказ = Ложь;
	
	ЗакупкиКлиент.ПроверитьСопоставленнуюНоменклатуруПоставщика(ДокументОбъект, Отказ, НеВыполнятьПроверкуСопоставленнойНоменклатурыПоставщика);
	
	Если Не Отказ Тогда
		СвязатьНоменклатуруСНоменклатуройПоставщикаСервер(Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДокументРегистрацииЦен = СоздатьДокументРегистрацииЦенНоменклатурыПоставщика();
		Если ДокументРегистрацииЦен <> Неопределено Тогда
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ДокументРегистрацииЦен);
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Создан документ'"),
				НавигационнаяСсылка,
				ДокументРегистрацииЦен,
				БиблиотекаКартинок.Информация32
			);
			Оповестить("Запись_РегистрацияЦенНоменклатурыПоставщика",, ДокументРегистрацииЦен);
			Готово = Истина;
			Закрыть();
		Иначе
			ЗаполнитьСтарыеЦены();
			Предупреждение(НСтр("ru = 'Не удалось создать документ регистрации цен поставщика'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущуюСтраницуПанелиНавигации()
	
	Если Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг1 Тогда
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияНачало;
		Элементы.НачалоДалее.КнопкаПоУмолчанию = Истина;
	ИначеЕсли Элементы.Шаги.ТекущаяСтраница = Элементы.Шаг5 Тогда
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияОкончание;
		Элементы.ОкончаниеГотово.КнопкаПоУмолчанию = Истина;
	Иначе
		Элементы.Навигация.ТекущаяСтраница = Элементы.НавигацияПродолжение;
		Элементы.ПродолжениеДалее.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьОпераций()
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		ЭлементСписка = Элементы.Операция.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ПриемНаКомиссию);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.Операция.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ИспользоватьИмпортныеЗакупки") Тогда
		
		ЭлементСписка = Элементы.Операция.СписокВыбора.НайтиПоЗначению(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
		Если ЭлементСписка <> Неопределено Тогда
			Элементы.Операция.СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСоглашениеНаСервере()
	
	ПараметрыСоглашения = Новый Структура;
	ПараметрыСоглашения.Вставить("Партнер",               Объект.Партнер);
	ПараметрыСоглашения.Вставить("ХозяйственнаяОперация", ХозяйственнаяОперацияНовогоСоглашения);
	ПараметрыСоглашения.Вставить("Валюта",                ВалютаНовогоСоглашения);
	ПараметрыСоглашения.Вставить("ЦенаВключаетНДС",       ЦенаВключаетНДС);
	ПараметрыСоглашения.Вставить("НалогообложениеНДС",    НалогообложениеНДС);
	ПараметрыСоглашения.Вставить("Менеджер",              Пользователи.ТекущийПользователь());
	ПараметрыСоглашения.Вставить("ВариантПриемкиТоваров", Перечисления.ВариантыПриемкиТоваров.НеРазделенаПоЗаказамИНакладным);
	ПараметрыСоглашения.Вставить("Наименование",          НаименованиеНовогоСоглашения);
	
	ПартнерЯвляетсяПоставщиком = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Партнер, "Поставщик");
	ПартнерЯвляетсяКонкурентом = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Партнер, "Конкурент");
	ПараметрыСоглашения.Вставить("ДоступноДляЗакупки",         ПартнерЯвляетсяПоставщиком);
	ПараметрыСоглашения.Вставить("ДоступноДляПродажиКлиентам", ПартнерЯвляетсяКонкурентом);
	
	Если ХозяйственнаяОперацияНовогоСоглашения = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту Тогда
		ПараметрыСоглашения.Вставить("ПорядокОплаты", Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВВалютеОплатаВВалюте);
	Иначе
		ПараметрыСоглашения.Вставить("ПорядокОплаты", Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях);
	КонецЕсли;
	
	Объект.Соглашение = Справочники.СоглашенияСПоставщиками.СоздатьСоглашениеПоУмолчанию(ПараметрыСоглашения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСоглашения()
	
	ХозяйственнаяОперацияНовогоСоглашения = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	ВалютаНовогоСоглашения                = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Валюта);
	НалогообложениеНДС                    = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	НаименованиеНовогоСоглашения          = НСтр("ru='Условия закупок с '") + Объект.Партнер;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовСоглашений()
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Шаг1Группа32", "Доступность", ВыбратьСоглашение > 0);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Соглашение",   "Доступность", ВыбратьСоглашение = 0);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьЭлементовПоПартнеру()
	
	КоличествоСоглашенийСПоставшиком  = ЗакупкиВызовСервера.ПолучитьКоличествоСоглашенийСПоставщиком(Объект.Партнер);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыборСоглашений", "Видимость", КоличествоСоглашенийСПоставшиком > 0);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыборСоглашений", "Доступность", КоличествоСоглашенийСПоставшиком > 0);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьСозданиеСоглашения", "Видимость", КоличествоСоглашенийСПоставшиком > 0);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ВыбратьСозданиеСоглашения", "Доступность", КоличествоСоглашенийСПоставшиком > 0);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Шаг1Группа2", "Видимость", КоличествоСоглашенийСПоставшиком > 0);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Шаг1Группа311", "Видимость", КоличествоСоглашенийСПоставшиком = 0);
	
	Если КоличествоСоглашенийСПоставшиком>0 Тогда
		ВыбратьСозданиеСоглашения = 1;
		ВыбратьСоглашение         = 0;
		УстановитьДоступностьЭлементовСоглашений();
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Шаг1Группа32", "Доступность", КоличествоСоглашенийСПоставшиком = 0);
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Декорация4", "Видимость", КоличествоСоглашенийСПоставшиком > 0);
		СоздатьНовоеСоглашение    = (КоличествоСоглашенийСПоставшиком = 0);
		ВыбратьСозданиеСоглашения = 0;
		ВыбратьСоглашение         = 1;
		УстановитьДоступностьЭлементовСоглашений();
	КонецЕсли;
	
КонецПроцедуры
