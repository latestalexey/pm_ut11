
&НаКлиенте
Перем ТекущиеРаспоряжения; //используется для передачи параметров в обработчик ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ЗаполнитьСкладПоУмолчанию();
	
	ДатаОтгрузки = ТекущаяДатаСеанса();
	
	УстановитьЗаголовкиКолонокВесОбъем();
	
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("Склад", Справочники.Склады.ПустаяСсылка()); 
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ДатаОтгрузки", '00010101');
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ЗаданиеНаПеревозку", Документы.ЗаданиеНаПеревозку.ПустаяСсылка()); 
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ОтображениеРаспоряжений", Ложь); 
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ОтображениеДеталей", Ложь); 
	
	ПулНоменклатурыОтгрузка.Параметры.УстановитьЗначениеПараметра("Распоряжение", Неопределено); 
	ПулНоменклатурыОтбор.Параметры.УстановитьЗначениеПараметра("Распоряжение", Неопределено); 
	
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Склад", Склад) Тогда
			РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора.Свойство("ЗонаПриемки", ЗонаОтгрузки) Тогда
			ПулНоменклатурыОтбор.Параметры.УстановитьЗначениеПараметра("ЗонаОтгрузки", ЗонаОтгрузки);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьОтборыВОсновныхСписках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПодключитьОбработчикОжидания("ОбновитьСостоянияРаспоряженийНаОтборКлиент",120);
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_РасходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_ОрдерНаПеремещениеТоваров" 
		Или ИмяСобытия = "Запись_ОтборРазмещениеТоваров" 
		Или ИмяСобытия = "Запись_ВозвратТоваровПоставщику" 
		Или ИмяСобытия = "Запись_ПеремещениеТоваров" 
		Или ИмяСобытия = "Запись_РеализацияТоваровУслуг" 
		Или ИмяСобытия = "Запись_СборкаТоваров" 
		Или ИмяСобытия = "Запись_ВнутреннееПотреблениеТоваров" Тогда 
		ОбработкаОповещенияСервер(ИмяСобытия,ТекущиеРаспоряжения());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ПолучатьСкладИзНастроек =
		Склад = Настройки.Получить("Склад")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если ПолучатьСкладИзНастроек Тогда
		Если СтруктураБыстрогоОтбора = Неопределено Тогда
			Склад 		  = Настройки.Получить("Склад");
			Помещение 	  = Настройки.Получить("Помещение");
			ЗонаОтгрузки  = Настройки.Получить("ЗонаОтгрузки");
		Иначе
			
			Если Не СтруктураБыстрогоОтбора.Свойство("Склад") Тогда
				Склад = Настройки.Получить("Склад");
			КонецЕсли;
			
			Если Не СтруктураБыстрогоОтбора.Свойство("Помещение") Тогда
				Помещение = Настройки.Получить("Помещение");
			КонецЕсли;
			
			Если Не СтруктураБыстрогоОтбора.Свойство("ЗонаОтгрузки") Тогда
				ЗонаОтгрузки = Настройки.Получить("ЗонаОтгрузки");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ФильтрЗаданий = Настройки.Получить("ФильтрЗаданий");
	ФильтрОрдеров = Настройки.Получить("ФильтрОрдеров");
	
	// Эти настройки мы уже загрузили
	Настройки.Удалить("Склад");
	Настройки.Удалить("Помещение");
	Настройки.Удалить("ЗонаОтгрузки");
	Настройки.Удалить("ФильтрЗаданий");
	Настройки.Удалить("ФильтрОрдеров");
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		СтруктураУстанавливаемыхПараметров = Новый Структура;
		СтруктураУстанавливаемыхПараметров.Вставить("Склад",	 Склад);
		СтруктураУстанавливаемыхПараметров.Вставить("Помещение", Помещение);
		
		ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Склад, Помещение);
		
		УстановитьПараметрыФункциональныхОпцийФормы(СтруктураУстанавливаемыхПараметров);
		Элементы.ОрдераВРаботеСтатус.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров", Новый Структура("Склад", Склад));	
		
		Если ИспользоватьАдресноеХранение Тогда
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
			Если Не ЗначениеЗаполнено(ЗонаОтгрузки) Тогда		
				ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Склад, Помещение);
			КонецЕсли;
		Иначе
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
		
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;	
	
	СкладПомещениеПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	УстановитьОтборыВОсновныхСписках();
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьСостоянияРаспоряженийНаОтборКлиент();	
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОрдеровПриИзменении(Элемент)
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗаданийПриИзменении(Элемент)
	ФильтрОрдеровПриИзменении(ТекущиеРаспоряжения());
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСПОРЯЖЕНИЯ НА ОТГРУЗКУ

&НаКлиенте
Процедура РаспоряженияНаОтгрузкуПриАктивизацииСтроки(Элемент)
	ТекущиеРаспоряжения = ТекущиеРаспоряжения();
	
	ПодключитьОбработчикОжидания("ОсновнойСписокПриАктивацииСтрокиКлиент",0.2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаОтгрузкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.ТекущиеДанные.Распоряжение) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
		Если Поле = Элементы.РаспоряженияНаОтгрузкуРаспоряжениеНомер
		 И Не ОтображениеДеталейОтгрузка Тогда
			ОткрытьЗначение(Элемент.ТекущиеДанные.Распоряжение);
		Иначе
			ТекущееЗаданиеНаПеревозкуОтгрузка = Элемент.ТекущиеДанные.Распоряжение;
			ОтображениеДеталейОтгрузка 		  = Не ОтображениеДеталейОтгрузка;
			
			УстановитьОтборыВОсновныхСписках();
			УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
		КонецЕсли;
	Иначе
		ОткрытьЗначение(Элемент.ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаОтгрузкуРаспоряжениеНомерНажатие(Элемент, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Распоряжение);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСПОРЯЖЕНИЯ НА ОТБОР

&НаКлиенте
Процедура РаспоряженияНаОтборПриАктивизацииСтроки(Элемент)
	ТекущиеРаспоряжения = ТекущиеРаспоряжения();
	
	ПодключитьОбработчикОжидания("ОсновнойСписокПриАктивацииСтрокиКлиент",0.2,Истина);
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(Элемент.ТекущиеДанные.Распоряжение) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
		ТекущееЗаданиеНаПеревозкуОтбор = Элемент.ТекущиеДанные.Распоряжение;
		ОтображениеДеталейОтбор = Не ОтображениеДеталейОтбор;
		ОбновитьСостоянияРаспоряженийНаОтбор();
	Иначе
		ОткрытьЗначение(Элемент.ТекущиеДанные.Распоряжение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаОтборНомерНажатие(Элемент, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Распоряжение);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ПУЛ НОМЕНКЛАТУРЫ ОТГРУЗКА

&НаКлиенте
Процедура ПулНоменклатурыОтгрузкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПулНоменклатурыОтгрузка.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ПУЛ НОМЕНКЛАТУРЫ ПУЛ НОМЕНКЛАТУРЫ ОТБОР

&НаКлиенте
Процедура ПулНоменклатурыОтборВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПулНоменклатурыОтбор.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьЗаданияНаОтбор(Команда)
	СоздатьЗаданияНаКлиенте();	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияНаПереупаковку(Команда)
	СоздатьЗаданияНаКлиенте(Истина);	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдера(Команда)
	ОчиститьСообщения();
	Отказ = Ложь;
	
	ПроверитьСкладПомещение(Отказ, Ложь);
	
	Если ЗначениеЗаполнено(Помещение) Тогда
		ТекстСообщения = НСтр("ru='Установлен отбор по помещению, поэтому при формировании расходных ордеров
		|будут учитываться товары, лежащие только в этом помещении. Продолжить?'");
		Ответ = Вопрос(ТекстСообщения,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если Не Отказ Тогда
		МассивДокументов = Новый Массив;
		
		Для каждого СтрМас из Элементы.РаспоряженияНаОтгрузку.ВыделенныеСтроки Цикл
			МассивДокументов.Добавить(Элементы.РаспоряженияНаОтгрузку.ДанныеСтроки(СтрМас).Распоряжение);	
		КонецЦикла;
		
		
		Если ИспользоватьАдресноеХранение Тогда
			НазначитьЗонуОтгрузки = Истина;
			ФормаПараметры = Новый Структура("Операция, Склад, Помещение","ФормированиеОрдеровАдресныйСклад",Склад, Помещение);
		Иначе
			ФормаПараметры = Новый Структура("Операция, Склад, Помещение","ФормированиеОрдеров",Склад, Помещение);
			НазначитьЗонуОтгрузки = Ложь;
		КонецЕсли;
		
		Ответ = ОткрытьФормуМодально("Обработка.УправлениеОтгрузкой.Форма.ФормаНастроек",ФормаПараметры,ЭтаФорма);
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			СоздатьОрдераСервер(МассивДокументов);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазначитьЗонуОтгрузки(Команда)
	ОчиститьСообщения();
	Отказ = Ложь;
	
	ПроверитьСкладПомещение(Отказ, Ложь);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МассивДокументов = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОрдераВРаботе);
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ФормаПараметры = Новый Структура("Операция, Склад, Помещение","ВыборЗоныОтгрузки",Склад, Помещение);
	Ответ = ОткрытьФормуМодально("Обработка.УправлениеОтгрузкой.Форма.ФормаНастроек",ФормаПараметры,ЭтаФорма);
	
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
		
	МасссивИзмененныхДокументов = УстановитьЗоныОтгрузкиСервер(МассивДокументов);
	
	
	Если МасссивИзмененныхДокументов.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке ордеров на отгрузку товаров назначена зона отгрузки ""ЗонаОтгрузки""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", МасссивИзмененныхДокументов.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        МассивДокументов.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗонаОтгрузки%",           ЗонаОтгрузки);
		
		ТекстЗаголовка = НСтр("ru='Зона отгрузки ""%ЗонаОтгрузки%"" назначена'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ЗонаОтгрузки%", ЗонаОтгрузки);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Зона отгрузки ""%ЗонаОтгрузки%"" не назначена ни для одного ордере на отгрузку товаров'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗонаОтгрузки%",                 ЗонаОтгрузки);
		
		ТекстЗаголовка = НСтр("ru='Зона отгрузки ""%ЗонаОтгрузки%"" не назначена'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ЗонаОтгрузки%", ЗонаОтгрузки);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьПриоритетОтгрузки(Команда)
	ОчиститьСообщения();
		
	МассивДокументов = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОрдераВРаботе);
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
			
	ФормаПараметры = Новый Структура;
	ФормаПараметры.Вставить("Заголовок", НСтр("ru = 'Выберите приоритет отгрузки'"));
	
	Приоритет = ОткрытьФормуМодально("Перечисление.Приоритеты.ФормаВыбора",ФормаПараметры,ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(Приоритет) Тогда
		Возврат;
	КонецЕсли;
		
	МасссивИзмененныхДокументов = НазначитьПриоритетОтгрузкиСервер(МассивДокументов, Приоритет);
	
	Если МасссивИзмененныхДокументов.Количество() > 0 Тогда
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке ордеров на отгрузку товаров назначен приоритет отгрузки ""Приоритет""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", МасссивИзмененныхДокументов.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        МассивДокументов.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Приоритет%",              Приоритет);
		
		ТекстЗаголовка = НСтр("ru='Приоритет отгрузки ""%Приоритет%"" назначен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Приоритет%", Приоритет);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Приоритет отгрузки ""%Приоритет%"" не назначен ни для одного ордера на отгрузку товаров'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Приоритет%", Приоритет);
		
		ТекстЗаголовка = НСтр("ru='Приоритет ""%Приоритет%"" не назначена'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Приоритет%", Приоритет);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОрдераОтгрузить(Команда)
	ОчиститьСообщения();
		
	МассивДокументов = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОрдераВРаботе);
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МасссивИзмененныхДокументов = ОрдераИзменитьСтатусСервер(МассивДокументов,"Отгружен");
	
	ОповеститьПользователяОбУстановкеСтатусаОрдеров(МасссивИзмененныхДокументов.Количество(), МассивДокументов.Количество(),
													ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.Отгружен"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрдераКОтгрузке(Команда)
	ОчиститьСообщения();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОтгрузка Тогда
		МассивДокументов = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОрдераВРаботе);
	Иначе
		МассивСтрок = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.РаспоряженияНаОтбор);
		МассивДокументов = Новый Массив;
		Для каждого СтрМас из МассивСтрок Цикл
			МассивДокументов.Добавить(Элементы.РаспоряженияНаОтбор.ДанныеСтроки(СтрМас).Распоряжение);	
		КонецЦикла;
	КонецЕсли;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МасссивИзмененныхДокументов = ОрдераИзменитьСтатусСервер(МассивДокументов,"КОтгрузке");
	
	Если МасссивИзмененныхДокументов.Количество() > 0 Тогда
		УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
	КонецЕсли;
	
	ОповеститьПользователяОбУстановкеСтатусаОрдеров(МасссивИзмененныхДокументов.Количество(), МассивДокументов.Количество(),
													ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КОтгрузке"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОрдераКПроверке(Команда)
	ОчиститьСообщения();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОтгрузка Тогда
		МассивДокументов = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ОрдераВРаботе);
	Иначе
		МассивСтрок = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.РаспоряженияНаОтбор);
		МассивДокументов = Новый Массив;
		Для каждого СтрМас из МассивСтрок Цикл
			МассивДокументов.Добавить(Элементы.РаспоряженияНаОтбор.ДанныеСтроки(СтрМас).Распоряжение);	
		КонецЦикла;
	КонецЕсли;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МасссивИзмененныхДокументов = ОрдераИзменитьСтатусСервер(МассивДокументов,"КПроверке");
	
	Если МасссивИзмененныхДокументов.Количество() > 0 Тогда
    	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
	КонецЕсли;
	
	ОповеститьПользователяОбУстановкеСтатусаОрдеров(МасссивИзмененныхДокументов.Количество(), МассивДокументов.Количество(),
													ПредопределенноеЗначение("Перечисление.СтатусыРасходныхОрдеров.КПроверке"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВзятьЗаданияВРаботу(Команда)
	
	Если СкладыКлиент.ВзятьЗаданияВРаботу(ЭтаФорма, Элементы.ЗаданияВРаботе , "УправлениеОтгрузкой") Тогда
		УстановитьОтборыВОсновныхСписках();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадания(Команда)
	
	Если СкладыКлиент.ОтметитьВыполненениеЗаданийБезОшибок(ЭтаФорма, Элементы.ЗаданияВРаботе, "УправлениеОтгрузкой") Тогда
		УстановитьОтборыВОсновныхСписках();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиОтбора(Команда)
	УстановитьОтборыВОсновныхСписках();
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиОтгрузки(Команда)
	УстановитьОтборыВОсновныхСписках();
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоСостояниюСборки(Команда)
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии",
					Новый Структура("Склад", Склад),
					"СборкаКонтекст",
					"СборкаКонтекст",
					Истина);
	
	ОткрытьФорму("Отчет.ТоварыКОтгрузке.Форма",
				ПараметрыФормы,
				ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдерНаПеремещение(Команда)
	
	Основание = Новый Структура;
	Основание.Вставить("Склад", Склад);
	Основание.Вставить("ПомещениеОтправитель", Помещение);
	
	ОткрытьФорму("Документ.ОрдерНаперемещениеТоваров.Форма.ФормаДокумента",Новый Структура("Основание",Основание));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличество(Команда)
	Если Элементы.ОрдераВРаботе.ТекущиеДанные <> Неопределено Тогда
		
		Если Не Элементы.ОрдераВРаботе.ТекущиеДанные.Свойство("Ссылка") Тогда
			ТекстСообщения = НСтр("ru = 'Действие недоступно для строки группировки списка!'");
			                        			
			Предупреждение(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ПараметрЗаголовок = НСтр("ru = 'Проверка количества в документе %Документ%'");
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Элементы.ОрдераВРаботе.ТекущиеДанные.Ссылка);
		
		ТекущиеДанные = Элементы.ОрдераВРаботе.ТекущиеДанные;
		
		Помещение = ?(ТекущиеДанные.Свойство("ПомещениеОтправитель"), ТекущиеДанные.ПомещениеОтправитель, Неопределено);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
		ПараметрыФормы.Вставить("Ордер", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("Склад", Склад);
		ПараметрыФормы.Вставить("Помещение", Помещение);
		
		ОткрытьФорму("Обработка.ПроверкаКоличестваТоваровВДокументе.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьКоличество(Команда)
	Если Элементы.ОрдераВРаботе.ТекущиеДанные <> Неопределено Тогда
		
		Если Не Элементы.ОрдераВРаботе.ТекущиеДанные.Свойство("Ссылка") Тогда
			ТекстСообщения = НСтр("ru = 'Действие недоступно для строки группировки списка!'");
			
			Предупреждение(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		ПараметрЗаголовок = НСтр("ru = 'Исправление количества в документе %Документ%'");
		
		ПараметрЗаголовок = СтрЗаменить(ПараметрЗаголовок, "%Документ%", Элементы.ОрдераВРаботе.ТекущиеДанные.Ссылка);
		
		ТекущиеДанные = Элементы.ОрдераВРаботе.ТекущиеДанные;
		
		Помещение = ?(ТекущиеДанные.Свойство("ПомещениеОтправитель"), ТекущиеДанные.ПомещениеОтправитель, Неопределено);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", ПараметрЗаголовок);
		ПараметрыФормы.Вставить("Ордер", ТекущиеДанные.Ссылка);
		ПараметрыФормы.Вставить("Склад", Склад);
		ПараметрыФормы.Вставить("Помещение", Помещение);
		ПараметрыФормы.Вставить("РежимИсправления", Истина);
		
		ОткрытьФорму("Обработка.ПроверкаКоличестваТоваровВДокументе.Форма.Форма", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьОрдераОтобраннымиТоварами(Команда)
	ОчиститьСообщения();
	
	МассивСтрок = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.РаспоряженияНаОтбор);
	МассивДокументов = Новый Массив;
	Для каждого СтрМас из МассивСтрок Цикл
		МассивДокументов.Добавить(Элементы.РаспоряженияНаОтбор.ДанныеСтроки(СтрМас).Распоряжение);	
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МасссивИзмененныхДокументов = ЗаполнитьОрдераОтобраннымиТоварамиСервер(МассивДокументов);
	
	Если МасссивИзмененныхДокументов.Количество() > 0 Тогда
		УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения());
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке распоряжений на отбор количество заполнено в соотвестии с количеством отбобранных товаров'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", МасссивИзмененныхДокументов.Количество());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        МассивДокументов.Количество());
		
		ТекстЗаголовка = НСтр("ru='Заполнение ордеров от отобранным товарам'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Количество товаров не перезаполнялось ни в одном распоряжения на отбор товаров'");
		
		ТекстЗаголовка = НСтр("ru='Заполнение ордеров от отобранным товарам'");
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПараметрыФормы = Новый Структура("ВариантЗаполнения, СкладОтгрузки, ДатаОтгрузки", "ПоРаспоряжениямНаОтгрузку", Склад, ДатаОтгрузки);
	ОткрытьФорму("Обработка.ВыгрузкаБазыТоваровВТСД.Форма", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение и инициализация

&НаСервере
Процедура ЗаполнитьСкладПоУмолчанию()
	
	СтруктураЗаполнения = Новый Структура("Склад");
	ОбщегоНазначенияУТ.ОбработкаЗаполнения(СтруктураЗаполнения, Неопределено, Неопределено);
	Склад = СтруктураЗаполнения.Склад;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОтборРазмещениеТоваров.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.ЗаданияВРаботе.ТекущаяСтрока = Ссылка;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОтбор;
		ОткрытьЗначение(Ссылка);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс

&НаКлиенте
Процедура ОсновнойСписокПриАктивацииСтрокиКлиент()
	
	Если ТекущееРаспоряжениеНаОтбор <> ТекущиеРаспоряжения.РаспоряжениеНаОтбор
	 Или ТекущееРаспоряжениеНаОтгрузку <> ТекущиеРаспоряжения.РаспоряжениеНаОтгрузку Тогда
		
		// Кэшируем выделенные строки
		ВыделенныеСтрокиНаОтгрузку = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Элементы.РаспоряженияНаОтгрузку.ВыделенныеСтроки);
		ВыделенныеСтрокиНаОтбор    = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(Элементы.РаспоряженияНаОтбор.ВыделенныеСтроки);
		
		РаспоряженияНаОтгрузкуПриАктивизацииСтрокиСервер(ТекущиеРаспоряжения);
		
		// Восстанавливаем выделенные строки
		Элементы.РаспоряженияНаОтгрузку.ВыделенныеСтроки.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Элементы.РаспоряженияНаОтгрузку.ВыделенныеСтроки, ВыделенныеСтрокиНаОтгрузку);
		
		Элементы.РаспоряженияНаОтбор.ВыделенныеСтроки.Очистить();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Элементы.РаспоряженияНаОтбор.ВыделенныеСтроки, ВыделенныеСтрокиНаОтбор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспоряженияНаОтгрузкуПриАктивизацииСтрокиСервер(ТекущиеРаспоряжения)
	УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения);
КонецПроцедуры

&НаКлиенте
Функция ТекущиеРаспоряжения()
	
	СтруктураВозврата = Новый Структура("РаспоряжениеНаОтбор, РаспоряжениеНаОтгрузку");
	
	Если Элементы.РаспоряженияНаОтгрузку.ТекущиеДанные <> Неопределено Тогда
		СтруктураВозврата.РаспоряжениеНаОтгрузку = Элементы.РаспоряженияНаОтгрузку.ТекущиеДанные.Распоряжение;
	КонецЕсли;
	
	Если Элементы.РаспоряженияНаОтбор.ТекущиеДанные <> Неопределено Тогда
		СтруктураВозврата.РаспоряжениеНаОтбор = Элементы.РаспоряженияНаОтбор.ТекущиеДанные.Распоряжение;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	
	СтруктураУстанавливаемыхПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		СтруктураУстанавливаемыхПараметров.Вставить("Склад",Склад);
		СтруктураУстанавливаемыхПараметров.Вставить("Помещение",Помещение);
		
		ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Склад, Помещение);
		
		Если ИспользоватьАдресноеХранение Тогда
			ЗонаОтгрузки = Справочники.СкладскиеЯчейки.ЗонаОтгрузкиПоУмолчанию(Склад, Помещение);
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Иначе
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
		
	Иначе
		СтруктураУстанавливаемыхПараметров.Вставить("Склад",Неопределено);
		СтруктураУстанавливаемыхПараметров.Вставить("Помещение",Неопределено);
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		ИспользоватьАдресноеХранение = Ложь;
	КонецЕсли;	
	
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураУстанавливаемыхПараметров);
	Элементы.ОрдераВРаботеСтатус.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРасходныхОрдеров", 
																			Новый Структура("Склад", Склад));	
	
	РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
	НазначитьЗонуОтгрузки   = Ложь;
	
	ПоказыватьГиперссылки = СкладыСервер.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку(Склад);
	Элементы.РаспоряженияНаОтгрузкуРаспоряжениеНомер.ГиперссылкаЯчейки = ПоказыватьГиперссылки;
	Элементы.РаспоряженияНаОтборНомер.ГиперссылкаЯчейки 			   = ПоказыватьГиперссылки;
	
	УстановитьОтборыВОсновныхСписках();
	
	ЗаполнитьСписокВыбораФильтраОрдеров();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокВесОбъем()
	ЕдиницаИзмеренияОбъема 	= Строка(Константы.ЕдиницаИзмеренияОбъема.Получить());
	ЕдиницаИзмеренияВеса 	= Строка(Константы.ЕдиницаИзмеренияВеса.Получить());
	
	Элементы.ЗаданияВРаботе.ПодчиненныеЭлементы.ПеремещенияВРаботеОбъемОтбор.Заголовок = НСтр("ru='Объем, '") + ЕдиницаИзмеренияОбъема;
	Элементы.ЗаданияВРаботе.ПодчиненныеЭлементы.ПеремещенияВРаботеВесОтбор.Заголовок   = НСтр("ru='Вес (брутто), '") + ЕдиницаИзмеренияВеса;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПулНоменклатуры(СтруктураРаспоряжений)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаОтбор Тогда
		
		ПулНоменклатурыОтбор.Параметры.УстановитьЗначениеПараметра("Распоряжение", СтруктураРаспоряжений.РаспоряжениеНаОтбор); 
		
	Иначе
		
		ПулНоменклатурыОтгрузка.Параметры.УстановитьЗначениеПараметра("Распоряжение", СтруктураРаспоряжений.РаспоряжениеНаОтгрузку); 
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыВОсновныхСписках()
	
	//РаспоряженияНаОтгрузку
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("Склад", Склад); 
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ДатаОтгрузки", КонецДня(ДатаОтгрузки));
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ЗаданиеНаПеревозку", ТекущееЗаданиеНаПеревозкуОтгрузка);
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ОтображениеРаспоряжений", Не ОтображениеДеталейОтгрузка);
	РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ОтображениеДеталей", ОтображениеДеталейОтгрузка);
	
	//Прочее
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтбор Тогда
		ОбновитьСостоянияРаспоряженийНаОтбор();
		Элементы.ПулНоменклатурыОтбор.Обновить();
		Элементы.ЗаданияВРаботе.Обновить();
	Иначе
		Элементы.ПулНоменклатурыОтгрузка.Обновить();
		Элементы.ОрдераВРаботе.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыВЗависимыхСписках(ТекущиеРаспоряжения)
	
	Если ТекущиеРаспоряжения = Неопределено Тогда
		ТекущееРаспоряжениеНаОтбор = Неопределено;
		ТекущееРаспоряжениеНаОтгрузку = Неопределено;
	Иначе
		ТекущееРаспоряжениеНаОтбор    = ТекущиеРаспоряжения.РаспоряжениеНаОтбор;
		ТекущееРаспоряжениеНаОтгрузку = ТекущиеРаспоряжения.РаспоряжениеНаОтгрузку;
	КонецЕсли;
	
	//ЗаданияВРаботе
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Склад", Склад, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Помещение", Помещение, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
	Если ФильтрЗаданий = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Статус", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Распоряжение", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "ЗаданиеНаПеревозку", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Проведен", Истина,,,Ложь);
	ИначеЕсли ФильтрЗаданий = "ВсеНевыполненные" Тогда
		
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе);
		СписокСтатусов.Добавить(Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Статус", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Распоряжение", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "ЗаданиеНаПеревозку", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Проведен", Истина,,,Истина);
		
	ИначеЕсли ФильтрЗаданий = "ПоТекущемуРаспоряжению" Тогда
		
		Если Не ТекущиеРаспоряжения = Неопределено
			И ТекущиеРаспоряжения.РаспоряжениеНаОтбор <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Статус", Неопределено,,,Ложь);
			
			Если ТипЗнч(ТекущиеРаспоряжения.РаспоряжениеНаОтбор) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Распоряжение", Неопределено,,,Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "ЗаданиеНаПеревозку", ТекущиеРаспоряжения.РаспоряжениеНаОтбор,,,Истина);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Распоряжение", ТекущиеРаспоряжения.РаспоряжениеНаОтбор,,,Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "ЗаданиеНаПеревозку", Неопределено,,,Ложь);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Проведен", Истина,,,Ложь);
			
		КонецЕсли;	
		
	КонецЕсли;	
	
	//ОрдераВРаботе
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.РасходныйОрдерНаТовары"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров"));

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Тип", СписокТипов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Склад", Склад, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "ПомещениеОтправитель", Помещение,
														ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Помещение));
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "ДатаОтгрузки", КонецДня(ДатаОтгрузки),
														ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,,ЗначениеЗаполнено(ДатаОтгрузки));
	Если ЗначениеЗаполнено(ДатаОтгрузки) Тогда
		РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ДатаОтгрузки", КонецДня(ДатаОтгрузки));
	Иначе
		РаспоряженияНаОтгрузку.Параметры.УстановитьЗначениеПараметра("ДатаОтгрузки", ДатаОтгрузки);
	КонецЕсли;
	
	Если ФильтрОрдеров = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Статус", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Распоряжение", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "ЗаданиеНаПеревозку", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Проведен", Истина,,,Ложь);
	ИначеЕсли ФильтрОрдеров = "ВсеНеотгруженные" Тогда
		
		СписокСтатусов = Новый СписокЗначений;
		СписокСтатусов.Добавить(Перечисления.СтатусыРасходныхОрдеров.КУказаниюСерий);
		СписокСтатусов.Добавить(Перечисления.СтатусыРасходныхОрдеров.КОтбору);
		СписокСтатусов.Добавить(Перечисления.СтатусыРасходныхОрдеров.КПроверке);
		СписокСтатусов.Добавить(Перечисления.СтатусыРасходныхОрдеров.КОтгрузке);
		СписокСтатусов.Добавить(Перечисления.СтатусыОрдеровНаПеремещение.КОтбору);
		СписокСтатусов.Добавить(Перечисления.СтатусыОрдеровНаПеремещение.КПроверке);
		СписокСтатусов.Добавить(Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Статус", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Распоряжение", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "ЗаданиеНаПеревозку", Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Проведен", Истина,,,Истина);
		
	ИначеЕсли ФильтрОрдеров = "ПоТекущемуРаспоряжению" Тогда
		
		Если Не ТекущиеРаспоряжения = Неопределено
		 И ТекущиеРаспоряжения.РаспоряжениеНаОтгрузку <> Неопределено Тогда
			
			Если ТипЗнч(ТекущиеРаспоряжения.РаспоряжениеНаОтгрузку) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Распоряжение", Неопределено,,,Ложь);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "ЗаданиеНаПеревозку", ТекущиеРаспоряжения.РаспоряжениеНаОтгрузку,,,Истина);
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Распоряжение", ТекущиеРаспоряжения.РаспоряжениеНаОтгрузку,,,Истина);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "ЗаданиеНаПеревозку", Неопределено,,,Ложь);
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Распоряжение", 		Неопределено,,,Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "ЗаданиеНаПеревозку", Неопределено,,,Истина);
		КонецЕсли;	
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Статус",   Неопределено,,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Проведен", Истина,,,Ложь);
		
	КонецЕсли;	
	
	//Прочее
	ОбновитьПулНоменклатуры(ТекущиеРаспоряжения);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияСервер(ИмяСобытия,СтруктураРаспоряжений)
	Если ИмяСобытия = "Запись_РасходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_ОрдерНаПеремещениеТоваров" Тогда
		Элементы.РаспоряженияНаОтгрузку.Обновить();
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтбор Тогда
			ОбновитьСостоянияРаспоряженийНаОтбор();
		КонецЕсли;
		ОбновитьСостоянияРаспоряженийНаОтбор();
		Элементы.ОрдераВРаботе.Обновить();
	ИначеЕсли ИмяСобытия = "Запись_ОтборРазмещениеТоваров" Тогда
		ОбновитьСостоянияРаспоряженийНаОтбор();
	КонецЕсли;
	
	ОбновитьПулНоменклатуры(СтруктураРаспоряжений);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостоянияРаспоряженийНаОтборКлиент()
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОтбор Тогда
		ОбновитьСостоянияРаспоряженийНаОтбор();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостоянияРаспоряженийНаОтбор()	
	Перем ТекущееРаспоряжение;
	
	// Запомним текущую строку
	Идентификатор = Элементы.РаспоряженияНаОтбор.ТекущаяСтрока;
	Если Идентификатор <> Неопределено Тогда
		ЭлементКоллекции = РаспоряженияНаОтбор.НайтиПоИдентификатору(Идентификатор);
		Если ЭлементКоллекции <> Неопределено Тогда
			ЭлементКоллекции.Свойство("Распоряжение", ТекущееРаспоряжение);
		КонецЕсли;
	КонецЕсли;
	
	СкладыСервер.РассчитатьСостоянийРаспоряженийНаОтбор(
		Склад,
	 	Помещение,
		РаспоряженияНаОтбор,
		ОтображениеДеталейОтбор,
		ТекущееЗаданиеНаПеревозкуОтбор);
	
	// Восстановим текущую строку
	Если ЗначениеЗаполнено(ТекущееРаспоряжение) Тогда
		Строки = РаспоряженияНаОтбор.НайтиСтроки(Новый Структура("Распоряжение", ТекущееРаспоряжение));
		Если Строки.Количество() > 0 Тогда
			Элементы.РаспоряженияНаОтбор.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораФильтраОрдеров()
	
	// Добавим или удалим из списка выбора поля ФильтрОрдеров элемент "ВсеНеотгруженные"
	// в зависимости от использования статусов ордеров на выбранном складе
	
	СписокВыбора  = Элементы.ФильтрОрдеров.СписокВыбора;
	ЭлементСписка = СписокВыбора.НайтиПоЗначению("ВсеНеотгруженные");
	
	Если СкладыСервер.ИспользоватьСтатусыОрдеров(Склад, Ложь, Истина) Тогда
		Если ЭлементСписка = Неопределено Тогда
			ЭлементСписка = СписокВыбора.Вставить(1, "ВсеНеотгруженные");
		КонецЕсли;
		ЭлементСписка.Представление = "Все неотгруженные";
	Иначе
		Если ЭлементСписка <> Неопределено Тогда
			Если ФильтрОрдеров = "ВсеНеотгруженные" Тогда
				ФильтрОрдеров = СписокВыбора[0].Значение; // новый отбор установится позднее, при вызове УстановитьОтборыВЗависимыхСписках
			КонецЕсли;
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработки ордеров

&НаСервере
Процедура СоздатьОрдераСервер(Знач МассивРаспоряжений)
	
	Индекс = МассивРаспоряжений.Количество();
	
	ТипВсеСсылки = Документы.ТипВсеСсылки();
	
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		СтрМас = МассивРаспоряжений[Индекс];
		Если Не ТипВсеСсылки.СодержитТип(ТипЗнч(СтрМас)) Тогда
			МассивРаспоряжений.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивРаспоряжений.Количество() = 0
		И ПоВсемРаспоряжениям <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет выделенных распоряжений на отгрузку.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТоварыКОтгрузкеОстатки.ДокументОтгрузки,
	|	ТоварыКОтгрузкеОстатки.Номенклатура,
	|	ТоварыКОтгрузкеОстатки.Характеристика,
	|	ТоварыКОтгрузкеОстатки.Серия,
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.СобираетсяОстаток - ТоварыКОтгрузкеОстатки.СобраноОстаток КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
	|ИЗ
	|	РегистрНакопления.ТоварыКОтгрузке.Остатки(
	|			,
	|			Склад = &Склад
	|					И (&ПоВсемРаспоряжениям
	|						ИЛИ ДокументОтгрузки В (&МассивРаспоряжений))
	|				ИЛИ ДокументОтгрузки В
	|					(ВЫБРАТЬ
	|						ЗаданиеНаПеревозкуРаспоряжения.Распоряжение
	|					ИЗ
	|						Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуРаспоряжения
	|					ГДЕ
	|						ЗаданиеНаПеревозкуРаспоряжения.Ссылка В (&МассивРаспоряжений))) КАК ТоварыКОтгрузкеОстатки
	|ГДЕ
	|	ТоварыКОтгрузкеОстатки.КОтгрузкеОстаток - ТоварыКОтгрузкеОстатки.СобираетсяОстаток - ТоварыКОтгрузкеОстатки.СобраноОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыДляЗапроса.Номенклатура,
	|	ТаблицаНоменклатурыДляЗапроса.Характеристика,
	|	ТаблицаНоменклатурыДляЗапроса.Серия,
	|	СУММА(ТаблицаНоменклатурыДляЗапроса.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ТаблицаНоменклатурыДляЗапроса КАК ТаблицаНоменклатурыДляЗапроса
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатурыДляЗапроса.Характеристика,
	|	ТаблицаНоменклатурыДляЗапроса.Номенклатура,
	|	ТаблицаНоменклатурыДляЗапроса.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки КАК Распоряжение,
	|	ТаблицаНоменклатурыДляЗапроса.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатурыДляЗапроса.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатурыДляЗапроса.Серия КАК Серия,
	|	ТаблицаНоменклатурыДляЗапроса.Количество КАК Количество
	|ИЗ
	|	ТаблицаНоменклатурыДляЗапроса КАК ТаблицаНоменклатурыДляЗапроса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаНоменклатурыДляЗапроса.Номенклатура.Наименование,
	|	ТаблицаНоменклатурыДляЗапроса.Характеристика.Наименование,
	|	ТаблицаНоменклатурыДляЗапроса.ДокументОтгрузки.Дата
	|ИТОГИ ПО
	|	Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика,
	|	ТаблицаНоменклатуры.Серия КАК Серия,
	|	ТоварыНаСкладахОстатки.Помещение КАК Помещение,
	|	СУММА(0) КАК РейтингПомещения,
	|	СУММА(0) КАК КоличествоВсего,
	|	СУММА(0) КАК КоличествоВБазовыхИзрасходовано,
	|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) КАК СвободныйОстатокВБазовых
	|ИЗ
	|	РегистрНакопления.ТоварыНаСкладах.Остатки(
	|			,
	|			(Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						ТаблицаНоменклатуры.Номенклатура,
	|						ТаблицаНоменклатуры.Характеристика
	|					ИЗ
	|						ТаблицаНоменклатуры КАК ТаблицаНоменклатуры)
	|				И Склад = &Склад
	|				И (&ПоВсемПомещениям
	|					ИЛИ Помещение = &Помещение)) КАК ТоварыНаСкладахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ПО ТоварыНаСкладахОстатки.Номенклатура = ТаблицаНоменклатуры.Номенклатура
	|			И ТоварыНаСкладахОстатки.Характеристика = ТаблицаНоменклатуры.Характеристика
	|			И (ВЫБОР
	|				КОГДА ТаблицаНоменклатуры.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаНоменклатуры.Серия = ТоварыНаСкладахОстатки.Серия
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыНаСкладахОстатки.Помещение,
	|	ТаблицаНоменклатуры.Серия,
	|	ТоварыНаСкладахОстатки.Характеристика,
	|	ТоварыНаСкладахОстатки.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыНаСкладахОстатки.ВНаличииОстаток - ТоварыНаСкладахОстатки.КОтгрузкеОстаток) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыНаСкладахОстатки.Номенклатура.Наименование,
	|	ТоварыНаСкладахОстатки.Характеристика.Наименование
	|ИТОГИ
	|	СУММА(РейтингПомещения),
	|	СУММА(КоличествоВсего)
	|ПО
	|	Помещение";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.УстановитьПараметр("ПоВсемПомещениям", Не ЗначениеЗаполнено(Помещение));
	Запрос.УстановитьПараметр("ПоВсемРаспоряжениям", ПоВсемРаспоряжениям = 0);
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ДеревоПоРаспоряжениям = МассивРезультатов[2].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоПоПомещениям = МассивРезультатов[3].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПомещениеЗонаОтгрузки = Новый Соответствие;
	
	ОрдерСоздан = Ложь;
	
	Для Каждого Распоряжение из ДеревоПоРаспоряжениям.Строки Цикл
		
		//Если нет остатков вообще по помещениям
		Если ДеревоПоПомещениям.Строки.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		МассивЛучшихПомещений = Новый Массив;
		
		ТаблицаНоменклатуры = Распоряжение.Строки;
		
		//1. Проводим ранжирование помещений по сумме степени собранности каждой позиции
		//2. По лучшему помещению создаем документ
		//3. Из количества к отгрузке вычитаем уже попавшее в документ количество
		//4. Для всех помещений, кроме лучшего, проводим ранжирование (т.к. количество в каждой позиции могло уменьшится,
		//		рейтинг помещения мог поменяться)
		
		Пока ТаблицаНоменклатуры.Количество() > 0 Цикл
			
			КоличествоВсего = ТаблицаНоменклатуры.Итог("Количество");
			ПомещенияОрдера = Новый Соответствие;
			
			Для каждого СтрТабл из ТаблицаНоменклатуры Цикл
				
				Для каждого СтрПомещение Из ДеревоПоПомещениям.Строки  Цикл	
					
					СтрПомещение.КоличествоВсего 	= 0;
					СтрПомещение.РейтингПомещения	= 0;
					
					Если МассивЛучшихПомещений.Найти(СтрПомещение.Помещение) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ДокументОбъект = ПомещенияОрдера.Получить(СтрПомещение.Помещение);
					
					Если ДокументОбъект = Неопределено Тогда
						ДокументОбъект = НовыйОбъектОрдер(Распоряжение.Распоряжение,СтрПомещение.Помещение);
						ПомещенияОрдера.Вставить(СтрПомещение.Помещение,ДокументОбъект);
					КонецЕсли;
					
					СтруктураОтбора = Новый Структура("Номенклатура,Характеристика,Серия");
					ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрТабл);
					
					МассивСтрок = СтрПомещение.Строки.НайтиСтроки(СтруктураОтбора);
					
					Если МассивСтрок.Количество() = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Номенклатура = МассивСтрок[0]; 
					
					КоличествоВДокумент = Мин(Номенклатура.СвободныйОстатокВБазовых, СтрТабл.Количество);
					
					НоваяСтрокаТовара = ДокументОбъект.Товары.Добавить();
					НоваяСтрокаТовара.Номенклатура 		= СтрТабл.Номенклатура;
					НоваяСтрокаТовара.Характеристика 		= СтрТабл.Характеристика;
					НоваяСтрокаТовара.Количество			= КоличествоВДокумент;
					НоваяСтрокаТовара.КоличествоУпаковок	= КоличествоВДокумент;
					
					Если ЗначениеЗаполнено(СтрТабл.Серия) Тогда
						НоваяСтрокаТовара.СтатусУказанияСерий = 10;
						
						НоваяСтрокаСерии = ДокументОбъект.Серии.Добавить();
						НоваяСтрокаСерии.Номенклатура 		= СтрТабл.Номенклатура;
						НоваяСтрокаСерии.Характеристика 	= СтрТабл.Характеристика;
						НоваяСтрокаСерии.Серия       		= СтрТабл.Серия;
						НоваяСтрокаСерии.Количество			= КоличествоВДокумент;
						НоваяСтрокаСерии.КоличествоУпаковок	= КоличествоВДокумент;
					КонецЕсли;	
					
					//сразу не уменьшаем свободный остаток, т.к. если помещение не будет лучшим, брать из него не будем
					Номенклатура.КоличествоВБазовыхИзрасходовано = КоличествоВДокумент;
					
					СтрПомещение.КоличествоВсего = СтрПомещение.КоличествоВсего + КоличествоВДокумент; 
					
					
					//СтрТабл.Количество не равно нулю: проверяется в запросе и при уменьшении количества в таблице ТаблицаНоменклатуры
					СтрПомещение.РейтингПомещения = СтрПомещение.РейтингПомещения + КоличествоВДокумент/СтрТабл.Количество;				
					
				КонецЦикла;
				
			КонецЦикла;
			
			ДеревоПоПомещениям.Строки.Сортировать("РейтингПомещения УБЫВ, КоличествоВсего УБЫВ");
			
			ЛучшееПомещение = ДеревоПоПомещениям.Строки[0];
			
			//Если в помещениях нет остатка для этого распоряжения
			Если ЛучшееПомещение.РейтингПомещения = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ДокументОбъект = ПомещенияОрдера[ЛучшееПомещение.Помещение]; 
			
			Если ДокументОбъект.Товары.Количество() > 0 Тогда		
				ЗаписатьОбъектОрдер(ДокументОбъект);
				ОрдерСоздан = Истина;
			КонецЕсли;
			
			
			//Если не последнее распоряжение, то в лучшем помещении надо уменьшить свободный остаток
			Если ДеревоПоРаспоряжениям.Строки.Количество() - 1 > ДеревоПоРаспоряжениям.Строки.Индекс(Распоряжение) Тогда
				
				//Помещение выбрано - можно уменьшать свободный остаток
				
				Для Каждого СтрТовары Из ДокументОбъект.Товары Цикл 
					
					Если СтрТовары.СтатусУказанияСерий <> 10 Тогда 
						
						СтрокаНоменклатуры = ЛучшееПомещение.Строки.НайтиСтроки(Новый Структура("Номенклатура,Характеристика",
						СтрТовары.Номенклатура, СтрТовары.Характеристика));
						Если СтрокаНоменклатуры.Количество() > 0 Тогда
							Номенклатура = СтрокаНоменклатуры[0];
							Номенклатура.СвободныйОстатокВБазовых = Номенклатура.СвободныйОстатокВБазовых - Номенклатура.КоличествоВБазовыхИзрасходовано;
							
							//Чтобы в дальнейшем быстрее искалось, удалим пустую строку
							Если Номенклатура.СвободныйОстатокВБазовых = 0 Тогда 
								ЛучшееПомещение.Строки.Удалить(Номенклатура);
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Для Каждого СтрСерии Из ДокументОбъект.Серии Цикл 
					
					СтрокаНоменклатуры = ЛучшееПомещение.Строки.НайтиСтроки(Новый Структура("Номенклатура,Характеристика,Серия",
					СтрСерии.Номенклатура, СтрСерии.Характеристика,СтрСерии.Серия));
					Если СтрокаНоменклатуры.Количество() > 0 Тогда
						Номенклатура = СтрокаНоменклатуры[0];
						Номенклатура.СвободныйОстатокВБазовых = Номенклатура.СвободныйОстатокВБазовых - Номенклатура.КоличествоВБазовыхИзрасходовано;
						
						//Чтобы в дальнейшем быстрее искалось, удалим пустую строку
						Если Номенклатура.СвободныйОстатокВБазовых = 0 Тогда 
							ЛучшееПомещение.Строки.Удалить(Номенклатура);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				
			КонецЕсли;
			
			
			Если ЛучшееПомещение.КоличествоВсего = КоличествоВсего
				Или ЛучшееПомещение.КоличествоВсего = 0
				Или МассивЛучшихПомещений.Количество() = ДеревоПоПомещениям.Строки.Количество() Тогда
				//Если собрали полностью,
				//или не собрали вообще прерываем цикл по строкам распоряжения
				//или перебрали все помещения
				ЛучшееПомещение.КоличествоВсего		= 0;
				ЛучшееПомещение.РейтингПомещения	= 0;
				Прервать;
				
			Иначе
				ЛучшееПомещение.КоличествоВсего		= 0;
				ЛучшееПомещение.РейтингПомещения	= 0;
				
				ОбъектТоварыТаблица = ДокументОбъект.Товары.Выгрузить();
				ОбъектТоварыТаблица.Свернуть("Номенклатура, Характеристика,СтатусУказанияСерий" , "Количество");
				
				ОбъектСерииТаблица = ДокументОбъект.Серии.Выгрузить();
				ОбъектСерииТаблица.Свернуть("Номенклатура, Характеристика,Серия" , "Количество");
				
				Для каждого СтрТабл из ОбъектТоварыТаблица Цикл
					
					Если СтрТабл.СтатусУказанияСерий <> 10 Тогда 
						СтруктураОтбора = Новый Структура("Номенклатура,Характеристика");
						ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрТабл);
						
						СтрокаТаблицыНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(СтруктураОтбора)[0];
						
						СтрокаТаблицыНоменклатуры.Количество = СтрокаТаблицыНоменклатуры.Количество - СтрТабл.Количество;
						
						Если СтрокаТаблицыНоменклатуры.Количество = 0 Тогда
							ТаблицаНоменклатуры.Удалить(СтрокаТаблицыНоменклатуры);
						КонецЕсли;
					Иначе
						СтруктураОтбора = Новый Структура("Номенклатура,Характеристика");
						ЗаполнитьЗначенияСвойств(СтруктураОтбора,СтрТабл);
						
						СтрокиСерий = ОбъектСерииТаблица.НайтиСтроки(СтруктураОтбора);
						
						Для Каждого СтрСерии из СтрокиСерий Цикл
							
							СтрокаТаблицыНоменклатуры = ТаблицаНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, Характеристика,Серия",
							СтрСерии.Номенклатура,СтрСерии.Характеристика,СтрСерии.Серия))[0];
							
							СтрокаТаблицыНоменклатуры.Количество = СтрокаТаблицыНоменклатуры.Количество - СтрСерии.Количество;
							
							Если СтрокаТаблицыНоменклатуры.Количество = 0 Тогда
								ТаблицаНоменклатуры.Удалить(СтрокаТаблицыНоменклатуры);
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
					
			КонецЕсли;
			
			МассивЛучшихПомещений.Добавить(ЛучшееПомещение.Помещение);
			
			//Если в помещении нет товаров, его можно удалить из дерева помещений
			Если ЛучшееПомещение.Строки.Количество() = 0 Тогда
				ДеревоПоПомещениям.Строки.Удалить(ЛучшееПомещение);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если Не ОрдерСоздан Тогда
		Если  ПоВсемРаспоряжениям = 0 Тогда
			ТекстСообщения = НСтр("ru='Расходные ордера по распоряжениям на отгрузку не созданы. Возможно товаров нет на складе или все товары уже собираются (собраны).'");
		Иначе
			ТекстСообщения = НСтр("ru='Расходные ордера по выделенным распоряжениям на отгрузку не созданы. Возможно товаров нет на складе или все товары уже собираются (собраны).'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

&НаСервере
Функция НовыйОбъектОрдер(Распоряжение, Помещение)
	
	ДокументОбъект = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
	
	ДокументОбъект.Дата 				= ТекущаяДатаСеанса();
	ДокументОбъект.Распоряжение 		= Распоряжение;
	ДокументОбъект.ДатаОтгрузки 		= ДатаОтгрузки;
	ДокументОбъект.Склад 				= Склад;
	ДокументОбъект.Помещение 			= Помещение;
	Если НазначитьЗонуОтгрузки Тогда
		ДокументОбъект.ЗонаОтгрузки = ЗонаОтгрузки;
	КонецЕсли;
	
	ДокументОбъект.Заполнить("ЗаполнениеИзОбработки");
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Процедура ЗаписатьОбъектОрдер(ДокументОбъект)
	Попытка
		
		Если Не СкладыСервер.ИспользоватьАдресноеХранение(ДокументОбъект.Склад, ДокументОбъект.Помещение)
			И ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			ДокументОбъект.РазбитьПоУпаковкамСправочно();
			
		КонецЕсли;
		
		ДокументОбъект.СкладскаяОперация = Документы.РасходныйОрдерНаТовары.СкладскаяОперацияПоРаспоряжению(ДокументОбъект.Распоряжение);
		ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РасходныйОрдерНаТовары);
		
		Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда 
			
			ДокументОбъект.Товары.Свернуть("Номенклатура,Характеристика,Упаковка,СтатусУказанияСерий", "Количество,КоличествоУпаковок");
			
			НоменклатураСервер.ЗаполнитьСерииПоFEFO(ДокументОбъект,ПараметрыУказанияСерий, Ложь);
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект,ПараметрыУказанияСерий);
			
			Отказ = Ложь;
			НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект,ПараметрыУказанияСерий,Отказ,,Ложь);
			
			Если Отказ Тогда
				ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров.КУказаниюСерий;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция УстановитьЗоныОтгрузкиСервер(Знач МассивДокументов)

	МассивИзмененныхДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.ЗонаОтгрузки <> &ЗонаОтгрузки
	|	И РасходныйОрдерНаТовары.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	ОрдерНаПеремещениеТоваров.ЗонаОтгрузки <> &ЗонаОтгрузки
	|	И ОрдерНаПеремещениеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ЗонаОтгрузки", ЗонаОтгрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.Заблокировать();
			
			ДокументОбъект.ЗонаОтгрузки = ЗонаОтгрузки;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			МассивИзмененныхДокументов.Добавить(Выборка.Ссылка);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	Элементы.ОрдераВРаботе.Обновить();
	
	Возврат МассивИзмененныхДокументов;
	
КонецФункции

&НаСервере
Функция НазначитьПриоритетОтгрузкиСервер(Знач МассивДокументов, Приоритет)
	МассивИзмененныхДокументов = Новый Массив;
	
    Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Приоритет <> &Приоритет
	|	И РасходныйОрдерНаТовары.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	ОрдерНаПеремещениеТоваров.Приоритет <> &Приоритет
	|	И ОрдерНаПеремещениеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("Приоритет", Приоритет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Попытка
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.Заблокировать();
			
			ДокументОбъект.Приоритет = Приоритет;
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			МассивИзмененныхДокументов.Добавить(Выборка.Ссылка);
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Элементы.ОрдераВРаботе.Обновить();
	
	Возврат МассивИзмененныхДокументов;
КонецФункции

&НаСервере
Функция ОрдераИзменитьСтатусСервер(МассивДокументов, СтатусДокумента)
	МассивИзмененныхДокументов = Новый Массив;
	
	ЗаменитьЗаданияНаПеревозкуСсылкамиНаРасходныеОрдераВМассиве(МассивДокументов);
	
	Индекс = МассивДокументов.Количество();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка,
	|	РасходныйОрдерНаТовары.Проведен КАК Проведен,
	|	РасходныйОрдерНаТовары.Статус КАК Статус
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка,
	|	ОрдерНаПеремещениеТоваров.Проведен,
	|	ОрдерНаПеремещениеТоваров.Статус
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	ОрдерНаПеремещениеТоваров.Ссылка В (&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	ТаблицаДанныхДокументов = Запрос.Выполнить().Выгрузить();
	                                            
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		СтрМас = МассивДокументов[Индекс];
		
		РеквизитыДокумента = ТаблицаДанныхДокументов.Найти(СтрМас,"Ссылка");
		
		Если Не РеквизитыДокумента.Проведен Тогда
			ТекстСообщения = НСтр("ru = 'Статус документа %Документ% не изменен: групповой обработкой можно изменять статусы только для проведенных документов.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СтрМас);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			МассивДокументов.Удалить(Индекс);
		ИначеЕсли СтатусДокумента = "Отгружен"
			И ТипЗнч(СтрМас) <> Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ТекстСообщения = НСтр("ru = 'Статус документа %Документ% не изменен: статус %Отгружен% может быть установлен только для расходных ордеров.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СтрМас);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Отгружен%", Перечисления.СтатусыРасходныхОрдеров.Отгружен);
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			МассивДокументов.Удалить(Индекс);
		Иначе
			Если ТипЗнч(СтрМас) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
				СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров[СтатусДокумента];
			Иначе
				СтатусЗначениеПеречисления = Перечисления.СтатусыОрдеровНаПеремещение[СтатусДокумента];
			КонецЕсли;
			
			Если РеквизитыДокумента.Статус = СтатусЗначениеПеречисления Тогда
				
				ТекстСообщения = НСтр("ru = 'Статус документа %Документ% не изменен, т.к. документ уже находится в статусе %Статус%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СтрМас);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", СтатусЗначениеПеречисления);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				МассивДокументов.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		Возврат МассивИзмененныхДокументов;
	КонецЕсли;
	
	Если Не ИспользоватьАдресноеХранение Тогда
		МассивИзмененныхДокументов = ОрдераИзменитьСтатусСерверНаНеАдресномСкладе(МассивДокументов, СтатусДокумента);
		УстановитьОтборыВОсновныхСписках();
		Возврат МассивИзмененныхДокументов;
	КонецЕсли;
		
	Индекс = МассивДокументов.Количество();
	
	Пока Индекс > 0 Цикл
		
		Индекс = Индекс - 1;
		СтрТабл = МассивДокументов[Индекс];
		
		МожноИзменитьСтатусБезПерезаполнения = Ложь;
		
		РеквизитыДокумента = ТаблицаДанныхДокументов.Найти(СтрМас,"Ссылка");
		
		Если ТипЗнч(СтрТабл) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров[СтатусДокумента];
			
			Если (РеквизитыДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.КПроверке
				Или РеквизитыДокумента.Статус = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке) 
				И (СтатусЗначениеПеречисления = Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
				Или СтатусЗначениеПеречисления= Перечисления.СтатусыРасходныхОрдеров.Отгружен) Тогда
				
				МожноИзменитьСтатусБезПерезаполнения = Истина;
			КонецЕсли;
		Иначе
			СтатусЗначениеПеречисления = Перечисления.СтатусыОрдеровНаПеремещение[СтатусДокумента];
			Если РеквизитыДокумента.Статус = Перечисления.СтатусыОрдеровНаПеремещение.КПроверке
				И СтатусЗначениеПеречисления = Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке Тогда
				
				МожноИзменитьСтатусБезПерезаполнения = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если МожноИзменитьСтатусБезПерезаполнения Тогда
			Попытка
				ДокументОбъект = СтрТабл.ПолучитьОбъект();
				ДокументОбъект.Заблокировать();
			Исключение
				МассивДокументов.Удалить(Индекс);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;	
			КонецПопытки;
			
			ДокументОбъект.Статус = СтатусЗначениеПеречисления;
			
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				МассивИзмененныхДокументов.Добавить(СтрТабл);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
			МассивДокументов.Удалить(Индекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДокументов.Количество() = 0 Тогда
		УстановитьОтборыВОсновныхСписках();
		Возврат МассивИзмененныхДокументов;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Распоряжение КАК Распоряжение,
	|	КОЛИЧЕСТВО(ТоварыКОтборуОстатки.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(ТоварыКОтборуОстатки.Характеристика) КАК Характеристика,
	|	СУММА(ТоварыКОтборуОстатки.ОтбираетсяОстаток) КАК Отбирается,
	|	СУММА(ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток) КАК Отобрать,
	|	ТИПЗНАЧЕНИЯ(ТоварыКОтборуОстатки.Распоряжение) КАК ТипДокумента
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Остатки(, Распоряжение В (&МассивДокументов)) КАК ТоварыКОтборуОстатки
	|ГДЕ
	|	(ТоварыКОтборуОстатки.ОтбираетсяОстаток <> 0
	|			ИЛИ ТоварыКОтборуОстатки.КОтборуОстаток - ТоварыКОтборуОстатки.ОтобраноОстаток <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтборуОстатки.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтбору.Распоряжение КАК Распоряжение,
	|	ТоварыКОтбору.Номенклатура КАК Номенклатура,
	|	ТоварыКОтбору.Характеристика КАК Характеристика,
	|	ТоварыКОтбору.Упаковка КАК Упаковка,
	|	ТоварыКОтбору.Серия КАК Серия,
	|	СУММА(ТоварыКОтбору.Отобрано) КАК Количество,
	|	СУММА(ТоварыКОтбору.ОтобраноУпаковок) КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору КАК ТоварыКОтбору
	|ГДЕ
	|	ТоварыКОтбору.Распоряжение В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтбору.Распоряжение,
	|	ТоварыКОтбору.Характеристика,
	|	ТоварыКОтбору.Номенклатура,
	|	ТоварыКОтбору.Серия,
	|	ТоварыКОтбору.Упаковка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОтбору.ОтобраноУпаковок) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Распоряжение,
	|	ТоварыКОтбору.Номенклатура.Наименование,
	|	ТоварыКОтбору.Характеристика.Наименование
	|ИТОГИ
	|	СУММА(Количество),
	|	СУММА(КоличествоУпаковок)
	|ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка";
	
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаОшибок = РезультатыЗапроса[0].Выбрать();
	
	Пока ВыборкаОшибок.Следующий() Цикл
		
		Если ВыборкаОшибок.Отбирается > 0 Тогда
			ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" есть невыполненные задания на отбор, поэтому его нельзя перевести в статус ""%Статус%""'");
		Иначе
			ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" отобраны не все товары, поэтому его нельзя перевести в статус ""%Статус%""'");
		КонецЕсли;
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Распоряжение%",ВыборкаОшибок.Распоряжение);
		
		Если ВыборкаОшибок.ТипДокумента = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",Перечисления.СтатусыРасходныхОрдеров[СтатусДокумента]);
		Иначе
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",Перечисления.СтатусыОрдеровНаПеремещение[СтатусДокумента]);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		МассивДокументов.Удалить(МассивДокументов.Найти(ВыборкаОшибок.Распоряжение));
		
	КонецЦикла;
	
	Индекс = МассивДокументов.Количество();
	
	Если Индекс > 0 Тогда
		ВыборкаИсправлений = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	Для Каждого СтрТабл ИЗ  МассивДокументов Цикл
		
		ВыборкаИсправлений.Сбросить();
		
		Если Не ВыборкаИсправлений.НайтиСледующий(Новый Структура("Распоряжение", СтрТабл)) Тогда
			ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" нет отобранных товаров, поэтому его нельзя перевести в статус ""%Статус%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Распоряжение%", СтрТабл);
			
			Если ТипЗнч(СтрТабл) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",Перечисления.СтатусыРасходныхОрдеров[СтатусДокумента]);
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",Перечисления.СтатусыОрдеровНаПеремещение[СтатусДокумента]);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоНоменклатуре = ВыборкаИсправлений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаПоНоменклатуре.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" нет отобранных товаров, поэтому его нельзя перевести в статус ""%Статус%""'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Распоряжение%",СтрТабл);
			
			Если ТипЗнч(СтрТабл) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",Перечисления.СтатусыРасходныхОрдеров[СтатусДокумента]);
			Иначе
				ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Статус%",Перечисления.СтатусыОрдеровНаПеремещение[СтатусДокумента]);
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДокументОбъект = СтрТабл.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(СтрТабл) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров[СтатусДокумента];
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РасходныйОрдерНаТовары);
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыОрдеровНаПеремещение[СтатусДокумента];
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ОрдерНаПеремещениеТоваров);
		КонецЕсли;
		
		ДокументОбъект.Товары.Очистить();
		ДокументОбъект.Серии.Очистить();
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			
			ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл
				
				ВыборкаПоУпаковкам = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоУпаковкам.Следующий() Цикл
					
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоУпаковкам);
					
					Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
						ВыборкаПоСериям = ВыборкаПоУпаковкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаПоСериям.Следующий() Цикл
							
							Если ЗначениеЗаполнено(ВыборкаПоСериям.Серия) Тогда
								НоваяСтрока = ДокументОбъект.Серии.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСериям);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Попытка
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			МассивИзмененныхДокументов.Добавить(СтрТабл);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьОтборыВОсновныхСписках();
	
	Возврат МассивИзмененныхДокументов;
КонецФункции

&НаСервере
Функция ОрдераИзменитьСтатусСерверНаНеАдресномСкладе(МассивДокументов, СтатусДокумента)
	МассивИзмененныхДокументов = Новый Массив;
	Для Каждого СтрТабл Из  МассивДокументов Цикл
		Попытка
			ДокументОбъект = СтрТабл.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(СтрТабл) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыРасходныхОрдеров[СтатусДокумента];
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РасходныйОрдерНаТовары);
		Иначе
			ДокументОбъект.Статус = Перечисления.СтатусыОрдеровНаПеремещение[СтатусДокумента];
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ОрдерНаПеремещениеТоваров);
		КонецЕсли;
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект,ПараметрыУказанияСерий);
		Отказ = Ложь;
		НоменклатураСервер.ПроверитьЗаполнениеСерий(ДокументОбъект,ПараметрыУказанияСерий, Отказ,,Ложь);
		
		Если Не Отказ Тогда;
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				МассивИзмененныхДокументов.Добавить(СтрТабл);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		Иначе
			ТекстСообщения = НСтр("ru = 'Статус документа %Документ% не изменен.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Документ%",ДокументОбъект.Ссылка);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивИзмененныхДокументов;
КонецФункции

&НаСервере
Процедура ЗаменитьЗаданияНаПеревозкуСсылкамиНаРасходныеОрдераВМассиве(МассивДокументов)
	
	Если Не СкладыСервер.НачинатьОтгрузкуПослеФормированияЗаданияНаПеревозку(Склад) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыРасходныхОрдеров.КОтбору)
	|	И РасходныйОрдерНаТовары.Проведен
	|	И РасходныйОрдерНаТовары.ЗаданиеНаПеревозку В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	РасходныйОрдерНаТовары.Ссылка
	|ИЗ
	|	Документ.РасходныйОрдерНаТовары КАК РасходныйОрдерНаТовары
	|ГДЕ
	|	РасходныйОрдерНаТовары.Ссылка В(&МассивДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОрдерНаПеремещениеТоваров.Ссылка
	|ИЗ
	|	Документ.ОрдерНаПеремещениеТоваров КАК ОрдерНаПеремещениеТоваров
	|ГДЕ
	|	ОрдерНаПеремещениеТоваров.Ссылка В(&МассивДокументов)";
	
	Запрос.УстановитьПараметр("МассивДокументов",МассивДокументов);
	
	МассивДокументов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатусаОрдеров(КоличествоОбработанных, КоличествоВсего, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке ордеров на отгрузку товаров установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного ордера на отгрузку'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьОрдераОтобраннымиТоварамиСервер(МассивДокументов)
	МассивИзмененныхДокументов = Новый Массив;
	
	ЗаменитьЗаданияНаПеревозкуСсылкамиНаРасходныеОрдераВМассиве(МассивДокументов);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКОтборуОстатки.Распоряжение КАК Распоряжение,
	|	КОЛИЧЕСТВО(ТоварыКОтборуОстатки.Номенклатура) КАК Номенклатура,
	|	КОЛИЧЕСТВО(ТоварыКОтборуОстатки.Характеристика) КАК Характеристика,
	|	СУММА(ТоварыКОтборуОстатки.ОтбираетсяОстаток) КАК Отбирается,
	|	ТИПЗНАЧЕНИЯ(ТоварыКОтборуОстатки.Распоряжение) КАК ТипДокумента
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Остатки(, Распоряжение В (&МассивДокументов)) КАК ТоварыКОтборуОстатки
	|ГДЕ
	|	ТоварыКОтборуОстатки.ОтбираетсяОстаток <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтборуОстатки.Распоряжение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыКОтбору.Распоряжение КАК Распоряжение,
	|	ТоварыКОтбору.Номенклатура КАК Номенклатура,
	|	ТоварыКОтбору.Характеристика КАК Характеристика,
	|	ТоварыКОтбору.Упаковка КАК Упаковка,
	|	ТоварыКОтбору.СерияОтобрана КАК Серия,
	|	СУММА(ТоварыКОтбору.Отобрано) КАК Количество,
	|	СУММА(ТоварыКОтбору.ОтобраноУпаковок) КАК КоличествоУпаковок
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору КАК ТоварыКОтбору
	|ГДЕ
	|	ТоварыКОтбору.Распоряжение В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыКОтбору.Распоряжение,
	|	ТоварыКОтбору.Характеристика,
	|	ТоварыКОтбору.Номенклатура,
	|	ТоварыКОтбору.СерияОтобрана,
	|	ТоварыКОтбору.Упаковка
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТоварыКОтбору.ОтобраноУпаковок) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Распоряжение,
	|	ТоварыКОтбору.Номенклатура.Наименование,
	|	ТоварыКОтбору.Характеристика.Наименование
	|ИТОГИ ПО
	|	Распоряжение,
	|	Номенклатура,
	|	Характеристика,
	|	Упаковка";
		
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаОшибок = РезультатыЗапроса[0].Выбрать();
	
	Пока ВыборкаОшибок.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" есть невыполненные задания на отбор'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Распоряжение%",ВыборкаОшибок.Распоряжение);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		МассивДокументов.Удалить(МассивДокументов.Найти(ВыборкаОшибок.Распоряжение));
		
	КонецЦикла;
	
	Индекс = МассивДокументов.Количество();
	
	Если Индекс > 0 Тогда
		ВыборкаИсправлений = РезультатыЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	Для Каждого СтрТабл ИЗ  МассивДокументов Цикл
		
		ВыборкаИсправлений.Сбросить();
		
		Если Не ВыборкаИсправлений.НайтиСледующий(Новый Структура("Распоряжение", СтрТабл)) Тогда
			ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" нет отобранных товаров'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Распоряжение%",СтрТабл);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоНоменклатуре = ВыборкаИсправлений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Если ВыборкаПоНоменклатуре.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru='По распоряжению ""%Распоряжение%"" нет отобранных товаров'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Распоряжение%",СтрТабл);
	
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			
			Продолжить;
		КонецЕсли;
		
		Попытка
			ДокументОбъект = СтрТабл.ПолучитьОбъект();
			ДокументОбъект.Заблокировать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;
		
		Если ТипЗнч(СтрТабл) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РасходныйОрдерНаТовары);
		Иначе
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ОрдерНаПеремещениеТоваров);
		КонецЕсли;
		
		ДокументОбъект.Товары.Очистить();
		ДокументОбъект.Серии.Очистить();
		
		Пока ВыборкаПоНоменклатуре.Следующий() Цикл
			
			ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоХарактеристикам.Следующий() Цикл
				
				ВыборкаПоУпаковкам = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоУпаковкам.Следующий() Цикл
					
					НоваяСтрока = ДокументОбъект.Товары.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоУпаковкам);
					
					Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
						ВыборкаПоСериям = ВыборкаПоУпаковкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаПоСериям.Следующий() Цикл
							
							Если ЗначениеЗаполнено(ВыборкаПоСериям.Серия) Тогда
								НоваяСтрока = ДокументОбъект.Серии.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоСериям);
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Попытка
			ДокументОбъект.Серии.Свернуть("Серия,Номенклатура,Характеристика","Количество");
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			МассивИзмененныхДокументов.Добавить(СтрТабл);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;
	
	УстановитьОтборыВОсновныхСписках();
	
	Возврат МассивИзмененныхДокументов;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработки заданий

&НаСервере
Процедура ПодготовитьНоменклатуруДляЗаданийСервер(Знач МассивРаспоряжений, Переупаковка = Ложь)
	
	Индекс = МассивРаспоряжений.Количество();
	
	ТипВсеСсылки = Документы.ТипВсеСсылки();
	
	Пока Индекс > 0 Цикл
		Индекс = Индекс - 1;
		СтрМас = МассивРаспоряжений[Индекс];
		Если Не ТипВсеСсылки.СодержитТип(ТипЗнч(СтрМас)) Тогда
			МассивРаспоряжений.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивРаспоряжений.Количество() = 0
		И ПоВсемРаспоряжениям <> 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет выделенных распоряжений на отбор.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ПоВсемРаспоряжениям = 0 Тогда 	
		 МассивРаспоряжений = РаспоряженияНаОтбор.Выгрузить().ВыгрузитьКолонку("Распоряжение");
	КонецЕсли;	
		
	Менеджер = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.УстановитьПараметр("МассивРаспоряжений", МассивРаспоряжений);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Помещение", Помещение);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыКОтбору.Номенклатура КАК Номенклатура,
	|	ТоварыКОтбору.Характеристика КАК Характеристика,
	|	ТоварыКОтбору.Серия КАК Серия,
	|	ТоварыКОтбору.Распоряжение КАК Распоряжение,
	|	ТоварыКОтбору.Распоряжение.ДатаОтгрузки КАК ДатаОтгрузки,
	|	ТоварыКОтбору.Распоряжение.Приоритет.Порядок КАК Приоритет,
	|	ТоварыКОтбору.КОтборуОстаток - ТоварыКОтбору.ОтбираетсяОстаток - ТоварыКОтбору.ОтобраноОстаток КАК Количество,
	|	ТоварыКОтбору.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыКОтбору.Остатки(
	|			,
	|			Распоряжение В (&МассивРаспоряжений)
	|				ИЛИ Распоряжение.ЗаданиеНаПеревозку В (&МассивРаспоряжений)) КАК ТоварыКОтбору
	|ГДЕ
	|	ТоварыКОтбору.КОтборуОстаток - ТоварыКОтбору.ОтбираетсяОстаток - ТоварыКОтбору.ОтобраноОстаток > 0";
	
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	//Получим таблицу с разбиением номенклатуры из всех распоряжений по ячейкам хранения,
	//а затем разобьем по заданиям, учитывая максимальный объем и вес
	
	СтруктураВозврата = СкладыСервер.ОтобратьТоварИзЯчеек(Менеджер, Склад, Помещение);
	
	ЕстьНеОтобранныйТовар = ?(СтруктураВозврата.ТаблицаОшибок.Количество() > 0, Истина, Ложь);
	
	Если Переупаковка Тогда
		Если ЕстьНеОтобранныйТовар Тогда
			ПараметрыФормированияЗаданий = ПараметрыФормированияЗаданийНаПодпитку();
			ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = НастройкаФормированияПоРабочимУчасткам;
			ПараметрыФормированияЗаданий.РабочийУчасток = РабочийУчасток;
			ПараметрыФормированияЗаданий.ОграничениеПоВесу = ОграничениеПоВесу;
			ПараметрыФормированияЗаданий.ОграничениеПоОбъему = ОграничениеПоОбъему;
			ПараметрыФормированияЗаданий.ОграничиватьПоОбъему = ОграничиватьПоОбъему;
			ПараметрыФормированияЗаданий.ОграничиватьПоВесу = ОграничиватьПоВесу;			
			ПараметрыФормированияЗаданий.Исполнитель = Исполнитель;
			
			ПараметрыФормированияЗаданий.ПоРаспоряжениямНаОтбор = МассивРаспоряжений;			
			
			ТекстСообщения = СкладыСервер.ВыполнитьПодпиткуЗБОНаСервере(Склад, Помещение, ПараметрыФормированияЗаданий);
			
			Если Не ПустаяСтрока(ТекстСообщения) Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				
			КонецЕсли;
			
		Иначе
			ТекстСообщения = НСтр("ru='Переупаковка не требуется'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;	
	Иначе 
		
		Если ЗаданияНаПереупаковку = 0 Тогда
			СоздатьЗаданияНаОтборСервер(СтруктураВозврата);
		ИначеЕсли ЗаданияНаПереупаковку = 1 Тогда 
			СоздатьЗаданияНаОтборСервер(СтруктураВозврата);
			Если СтруктураВозврата.ТаблицаОшибок.Количество() > 0 Тогда
				СтруктураВозврата.ТаблицаРезультатов.Очистить();
				ПараметрыФормированияЗаданий = ПараметрыФормированияЗаданийНаПодпитку();
				ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = НастройкаФормированияПоРабочимУчасткам;
				ПараметрыФормированияЗаданий.РабочийУчасток = РабочийУчасток;
				ПараметрыФормированияЗаданий.ОграничениеПоВесу = ОграничениеПоВесу;
				ПараметрыФормированияЗаданий.ОграничениеПоОбъему = ОграничениеПоОбъему;
				ПараметрыФормированияЗаданий.ОграничиватьПоОбъему = ОграничиватьПоОбъему;
				ПараметрыФормированияЗаданий.ОграничиватьПоВесу = ОграничиватьПоВесу;			
				ПараметрыФормированияЗаданий.Исполнитель = Исполнитель;
				
				ПараметрыФормированияЗаданий.ПоРаспоряжениямНаОтбор = МассивРаспоряжений;
				
				
				ТекстСообщения = СкладыСервер.ВыполнитьПодпиткуЗБОНаСервере(Склад, Помещение, ПараметрыФормированияЗаданий);
				
				Если Не ПустаяСтрока(ТекстСообщения) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЗаданияНаПереупаковку = 2 Тогда
			Если СтруктураВозврата.ТаблицаОшибок.Количество() > 0 Тогда
				ПараметрыФормированияЗаданий = ПараметрыФормированияЗаданийНаПодпитку();
				ПараметрыФормированияЗаданий.НастройкаФормированияПоРабочимУчасткам = НастройкаФормированияПоРабочимУчасткам;
				ПараметрыФормированияЗаданий.РабочийУчасток = РабочийУчасток;
				ПараметрыФормированияЗаданий.ОграничениеПоВесу = ОграничениеПоВесу;
				ПараметрыФормированияЗаданий.ОграничениеПоОбъему = ОграничениеПоОбъему;
				ПараметрыФормированияЗаданий.ОграничиватьПоОбъему = ОграничиватьПоОбъему;
				ПараметрыФормированияЗаданий.ОграничиватьПоВесу = ОграничиватьПоВесу;			
				ПараметрыФормированияЗаданий.Исполнитель = Исполнитель;
				
				ПараметрыФормированияЗаданий.ПоРаспоряжениямНаОтбор = МассивРаспоряжений;
				
				ТекстСообщения = СкладыСервер.ВыполнитьПодпиткуЗБОНаСервере(Склад, Помещение, ПараметрыФормированияЗаданий);
				
				Если Не ПустаяСтрока(ТекстСообщения) Тогда
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					
				КонецЕсли;
				
			Иначе
				СоздатьЗаданияНаОтборСервер(СтруктураВозврата);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
	Менеджер.Закрыть();
	УстановитьОтборыВОсновныхСписках();
	Возврат;
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаданияНаОтборСервер(СтруктураДанных)
	
	РаспоряженияЗадания = Новый Соответствие;
	
	Если СтруктураДанных.ТаблицаРезультатов.Количество() > 0 Тогда
		
		Если НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда
			
			ЗапросУчастки = Новый Запрос;
			ЗапросУчастки.Текст = "ВЫБРАТЬ
			|	РабочиеУчастки.Ссылка КАК РабочийУчасток,
			|	РабочиеУчастки.ОграничиватьПоВесу КАК ОграничиватьПоВесу,
			|	РабочиеУчастки.ОграничениеПоВесу КАК ОграничениеПоВесу,
			|	РабочиеУчастки.ОграничиватьПоОбъему КАК ОграничиватьПоОбъему,
			|	РабочиеУчастки.ОграничениеПоОбъему КАК ОграничениеПоОбъему
			|ИЗ
			|	Справочник.РабочиеУчастки КАК РабочиеУчастки
			|ГДЕ
			|	РабочиеУчастки.Владелец = &Склад
			|	И РабочиеУчастки.Помещение = &Помещение";
			
			ЗапросУчастки.УстановитьПараметр("Склад",Склад);
			ЗапросУчастки.УстановитьПараметр("Помещение",Помещение);
			
			ТаблицаРабочихУчастков = ЗапросУчастки.Выполнить().Выгрузить();
			
			НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
			НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
			НоваяСтрока.ОграничиватьПоОбъему = Ложь;
			НоваяСтрока.ОграничиватьПоВесу = Ложь;
			
		Иначе	
			ТаблицаРабочихУчастков = Новый ТаблицаЗначений;
			ТаблицаРабочихУчастков.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки"));
			НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
			Если НастройкаФормированияПоРабочимУчасткам = "БезРазбиенияПоРабочимУчасткам" Тогда
				НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
			Иначе
				НоваяСтрока.РабочийУчасток = РабочийУчасток;
			КонецЕсли;

		КонецЕсли;
		
		НевозможныйНабор = 9999999999;
		
		Для Каждого СтрокаРабочийУчасток Из ТаблицаРабочихУчастков Цикл
			
			Если НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда						
				МаксимальныйОбъем = ?(СтрокаРабочийУчасток.ОграничиватьПоОбъему, СтрокаРабочийУчасток.ОграничениеПоОбъему, НевозможныйНабор);
				МаксимальныйВес = ?(СтрокаРабочийУчасток.ОграничиватьПоВесу, СтрокаРабочийУчасток.ОграничениеПоВесу, НевозможныйНабор);						
			Иначе
				МаксимальныйОбъем = ?(ОграничиватьПоОбъему, ОграничениеПоОбъему, НевозможныйНабор);
				МаксимальныйВес = ?(ОграничиватьПоВесу, ОграничениеПоВесу, НевозможныйНабор);						
			КонецЕсли;
			
			Если НастройкаФормированияПоРабочимУчасткам <> "БезРазбиенияПоРабочимУчасткам" Тогда			
				ТаблицаРезультата = СтруктураДанных.ТаблицаРезультатов.НайтиСтроки(Новый Структура("РабочийУчасток",СтрокаРабочийУчасток.РабочийУчасток));			
			Иначе			
				ТаблицаРезультата = СтруктураДанных.ТаблицаРезультатов;		
			КонецЕсли;			
			
			//Разбиение по весу и объему. Соглашения:
			//  - если вес (объем) одной строки больше, чем ограничения - создается отдельный документ,
			//		вес (объем) которого будет больше, чем максимальный
			//	- разбиение по весу (объему) не оптимально, т.к. более приоритетно сохранение порядка обхода
			//			(лучше пусть будет больше заданий, но каждое можно быстрее обойти)
			
			ТекущееРаспоряжение 	  = Неопределено;
			ФормироватьПоРаспоряжению = Истина;
			
			//Идем сначала результату, т.к. в нем строки упорядочены по обходу
			Для Каждого СтрТабл Из ТаблицаРезультата Цикл
				
				Если ТекущееРаспоряжение <> СтрТабл.Распоряжение Тогда
					
					ТекущееРаспоряжение = СтрТабл.Распоряжение;
					ФормироватьПоРаспоряжению = Истина;
					
					Если НазначитьЗонуОтгрузки Тогда
						ОбъектРаспоряжения = ТекущееРаспоряжение.ПолучитьОбъект();
						ОбъектРаспоряжения.ЗонаОтгрузки = ЗонаОтгрузки;
						ОбъектРаспоряжения.Записать(РежимЗаписиДокумента.Запись);
					ИначеЕсли Не ЗначениеЗаполнено(ТекущееРаспоряжение.ЗонаОтгрузки	) Тогда
						
						ФормироватьПоРаспоряжению = Ложь;
						
						ТекстСообщения = НСтр("ru='В распоряжении %Распоряжении% не указана зона отгрузки.
						|Необходимо указать зону отгрузки при настройке формирования заданий на отбор товаров.'");
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Распоряжении%",ТекущееРаспоряжение);
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
						
					КонецЕсли;
					
					Если ФормироватьПоРаспоряжению Тогда
						
						СтруктураДокумента = РаспоряженияЗадания[ТекущееРаспоряжение];
						
						Если СтруктураДокумента = Неопределено Тогда
							
							СтруктураДокумента = Новый Структура;
							СтруктураДокумента.Вставить("ДокументОбъект", НовыйОбъектЗадание(ТекущееРаспоряжение,СтрокаРабочийУчасток.РабочийУчасток));
							СтруктураДокумента.Вставить("Объем", 0);
							СтруктураДокумента.Вставить("Вес", 0);
							
							РаспоряженияЗадания.Вставить(ТекущееРаспоряжение,СтруктураДокумента);
							
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ФормироватьПоРаспоряжению Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйОбъем
					Или  СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйВес Тогда
					
					ДокументОбъект = НовыйОбъектЗадание(СтрТабл.Распоряжение,СтрокаРабочийУчасток.РабочийУчасток);
					
					НоваяСтрока = ДокументОбъект.ТоварыОтбор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
					
					ЗаписатьОбъектЗадание(ДокументОбъект);
					
				Иначе
					
					Если (РаспоряженияЗадания[СтрТабл.Распоряжение].Объем + СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйОбъем
						Или (РаспоряженияЗадания[СтрТабл.Распоряжение].Вес + СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйВес Тогда
						
						ЗаписатьОбъектЗадание(РаспоряженияЗадания[СтрТабл.Распоряжение].ДокументОбъект);
						//
						РаспоряженияЗадания[СтрТабл.Распоряжение].Объем    = 0;
						РаспоряженияЗадания[СтрТабл.Распоряжение].Вес	  = 0;
						РаспоряженияЗадания[СтрТабл.Распоряжение].ДокументОбъект = НовыйОбъектЗадание(СтрТабл.Распоряжение,СтрокаРабочийУчасток.РабочийУчасток);
						
					КонецЕсли;
					
					НоваяСтрока = РаспоряженияЗадания[СтрТабл.Распоряжение].ДокументОбъект.ТоварыОтбор.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
					
					РаспоряженияЗадания[СтрТабл.Распоряжение].Объем = РаспоряженияЗадания[СтрТабл.Распоряжение].Объем
																		+ СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок;
					РаспоряженияЗадания[СтрТабл.Распоряжение].Вес	= РаспоряженияЗадания[СтрТабл.Распоряжение].Вес 
																		+ СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого СтрДок из РаспоряженияЗадания Цикл
				
				Если СтрДок.Значение.ДокументОбъект.ТоварыОтбор.Количество() > 0 Тогда
					
					ЗаписатьОбъектЗадание(СтрДок.Значение.ДокументОбъект)
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;		
	Иначе
		ТекстСообщения = НСтр("ru='Не удалось сформировать задания на отбор товаров согласно правилам отбора.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		
	КонецЕсли;	
	
	Элементы.ПулНоменклатурыОтбор.Обновить();
	Элементы.ЗаданияВРаботе.Обновить();
КонецПроцедуры

&НаСервере
Функция НовыйОбъектЗадание(Распоряжение,РабочийУчасток)
	
	ДокументОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ДокументОбъект.Дата 				= ТекущаяДатаСеанса();
	ДокументОбъект.Статус 				= Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокументОбъект.Склад 				= Склад;
	ДокументОбъект.Помещение 			= Помещение;
	
	Если Распоряжение = Неопределено Тогда
		ДокументОбъект.ВидОперации 			= Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение;
	Иначе 
		ДокументОбъект.ВидОперации 			= Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Отбор;
		ДокументОбъект.ЗонаОтгрузки		 	= Распоряжение.ЗонаОтгрузки;
		ДокументОбъект.Распоряжение			= Распоряжение;
	КонецЕсли;
	
	ДокументОбъект.Ответственный 	= Пользователи.ТекущийПользователь();
	Если НазначитьИсполнителя Тогда
		ДокументОбъект.Исполнитель 	= Исполнитель;
	КонецЕсли;
	
	ДокументОбъект.РабочийУчасток 	= РабочийУчасток;
		
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Процедура ЗаписатьОбъектЗадание(ДокументОбъект)
	Попытка
		
		Если ДокументОбъект.ПроверитьЗаполнение() Тогда
			ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ОтборРазмещениеТоваров);
			ПараметрыУказанияСерий.ИмяТЧТовары = "ТоварыОтбор";
			ПараметрыУказанияСерий.ИмяТЧСерии  = "ТоварыОтбор";
			НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
			Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Перемещение Тогда
				ПараметрыУказанияСерий.ИмяТЧТовары = "ТоварыРазмещение";
				ПараметрыУказанияСерий.ИмяТЧСерии  = "ТоварыРазмещение";
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерий);
			КонецЕсли;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаданияНаКлиенте(ЗаданияНаПереупаковку = Ложь)
	
	ОчиститьСообщения();
	Отказ = Ложь;
	
	ПроверитьСкладПомещение(Отказ, Ложь);
	
	Если Не Отказ Тогда
		МассивДокументов = Новый Массив;
		Для каждого СтрМас из Элементы.РаспоряженияНаОтбор.ВыделенныеСтроки Цикл
			МассивДокументов.Добавить(Элементы.РаспоряженияНаОтбор.ДанныеСтроки(СтрМас).Распоряжение);	
		КонецЦикла;
		
		Если МассивДокументов.Количество() > 0 Тогда
			
			СтруктураОперации = Новый Структура;
			СтруктураОперации.Вставить("Помещение",Помещение);
			СтруктураОперации.Вставить("Склад",Склад);
			
			ФормаПараметры = Новый Структура("Заголовок, Операция, ПараметрОбъект");
			ФормаПараметры.Вставить("Заголовок", "УправлениеОтгрузкой");
			ФормаПараметры.Вставить("Операция", ?(ЗаданияНаПереупаковку, "ЗаданияНаПереупаковку", "ФормированиеЗаданий"));
			ФормаПараметры.Вставить("ПараметрОбъект", СтруктураОперации);
			
			Ответ = ОткрытьФормуМодально("Документ.ОтборРазмещениеТоваров.Форма.ФормаНастроек",ФормаПараметры,ЭтаФорма);
			   
			Если Ответ = КодВозвратаДиалога.ОК Тогда
				ПодготовитьНоменклатуруДляЗаданийСервер(МассивДокументов, ЗаданияНаПереупаковку);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормированияЗаданийНаПодпитку()
	
	ПараметрыФормированияЗаданий = Новый Структура;
	ПараметрыФормированияЗаданий.Вставить("НастройкаФормированияПоРабочимУчасткам");
	ПараметрыФормированияЗаданий.Вставить("РабочийУчасток");
	ПараметрыФормированияЗаданий.Вставить("ОграничиватьПоВесу");
    ПараметрыФормированияЗаданий.Вставить("ОграничиватьПоОбъему");
	ПараметрыФормированияЗаданий.Вставить("ОграничениеПоВесу");
	ПараметрыФормированияЗаданий.Вставить("ОграничениеПоОбъему"); 
	ПараметрыФормированияЗаданий.Вставить("Исполнитель");
	ПараметрыФормированияЗаданий.Вставить("ПоРаспоряжениямНаОтбор");

	ПараметрыФормированияЗаданий.Вставить("ОбязательныеПараметры",
										"СРазбиениемПоРабочимУчастникам,ИспользоватьОграниченияРабочегоУчастка,РабочийУчасток,ПределВес,ПределОбъем,Исполнитель");
	Возврат ПараметрыФормированияЗаданий;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ПроверитьСкладПомещение(Отказ, ПроверятьПомещение = Ложь)
	Если Не ЗначениеЗаполнено(Склад) Тогда
		ТекстСообщения = НСтр("ru='Перед выполнением операции необходимо выбрать склад.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
	Если ПроверятьПомещение
		И Не ЗначениеЗаполнено(Помещение)
		И ПолучитьФункциональнуюОпциюФормы("ИспользоватьСкладскиеПомещения") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры
