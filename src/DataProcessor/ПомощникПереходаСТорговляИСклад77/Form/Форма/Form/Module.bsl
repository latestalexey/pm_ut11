&НаКлиенте
Перем ЗакрытьФормуБезусловно; // флаг вызова подтверждения закрытия формы

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем текущую таблицу переходов
	ТаблицаПереходовПоСценарию1();
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НСтрока = НСтр("ru = 'Закрыть помощник?'");
	
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаОжидания Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияКомандаДалее", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияКомандаДалее()
	
	КомандаДалее(Неопределено);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Раздел обработчиков событий перехода

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "Страница1"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_Страница1_ПриПереходеДалее(Отказ)
	
	ОчиститьСообщения();
	
	// Проверка файла данных
	
	ТекстСообщения = "";
	Если НЕ ЗначениеЗаполнено(Объект.ИмяФайлаОбмена) Тогда
		ТекстСообщения = "Не указан путь к файлу с данными.";
	Иначе
		
		ФайлОбмена = Новый Файл(Объект.ИмяФайлаОбмена);
		Если НЕ ФайлОбмена.Существует() Тогда
			ТекстСообщения = "По указанному пути файл с данными не найден.";
		Иначе
			
			Попытка
				Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайлаОбмена, Объект.ИмяФайлаОбмена, , Ложь, УникальныйИдентификатор) Тогда
					Отказ = Истина;
				КонецЕсли;
			Исключение
				ТекстСообщения = "Ошибка передачи файла на сервер.";
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстСообщения <> "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = '" + ТекстСообщения + "'"),,"ИмяФайлаОбмена", "ИмяФайлаОбмена", Отказ);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "Страница2"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_Страница2_ПриПереходеДалее(Отказ)
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выполняется обработчик ПриПереходеДалее'"));
	
	Возврат Неопределено;
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "Страница2"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_Страница2_ПриПереходеНазад(Отказ)
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выполняется обработчик ПриПереходеНазад'"));
	
	Возврат Неопределено;
КонецФункции

// Обработчик выполняется при открытии страницы помощника "Страница2"
//
// Параметры:
//
//  Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_Страница2_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Элементы.ИндикаторЗагрузки.Картинка = ?(ЗагрузкаВыполненаУспешно, БиблиотекаКартинок.СостояниеОбменаДаннымиУспех, БиблиотекаКартинок.СостояниеОбменаДаннымиОшибка);
	Элементы.НадписьИндикатораЗагрузки.Заголовок = ?(ЗагрузкаВыполненаУспешно, "Загрузка данных выполнена успешно", "Ошибка при загрузке данных");
	
	ЗаполнитьИтоговуюИнформацию();
	
	Возврат Неопределено;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаОжидания"
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПриПереходеДалее(Отказ)
	
	Состояние(НСтр("ru = 'Загрузка данных...'"),, НСтр("ru = 'Выполняется загрузка данных из ТиС'"));
	ЗагрузкаВыполненаУспешно = ЗагрузитьНаСервере();
	
	Возврат Неопределено;
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаОжидания"
//
// Параметры:
//
//  Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад)
//
//  ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад)
//
//  ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад.
//
// Логика данного обработчика пропускает отображение
// страницы помощника "СтраницаОжидания", если выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	Если Не ЭтоПереходДалее Тогда
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Раздел инициализации переходов помощника

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока()
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию1()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "Страница1", "СтраницаНавигацииНачало", "СтраницаДекорацииНачало",, "Страница1_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаОжидания", "СтраницаНавигацииОжидание", "СтраницаДекорацииПродолжение", "СтраницаОжидания_ПриОткрытии", "СтраницаОжидания_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(3, "Страница2", "СтраницаНавигацииОкончание", "СтраницаДекорацииОкончание", "Страница2_ПриОткрытии");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			ИмяФункции = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяФункции = СтрЗаменить(ИмяФункции, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяФункции);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			ИмяФункции = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяФункции = СтрЗаменить(ИмяФункции, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяФункции);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяФункции = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяФункции = СтрЗаменить(ИмяФункции, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяФункции);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка отображения текущей страницы
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) – Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) – Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//  ИмяСтраницыНавигации (обязательный) – Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//  ИмяСтраницыДекорации (необязательный) – Строка. Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) – Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) – Строка. Имя функции-обработчика события перехода на следующую страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) – Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника
// 
&НаКлиенте
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = ""
									)
	//
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЗагрузитьНаСервере()
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайлаОбмена);
	// получаем имя временного файла в локальной ФС на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	// получаем файл правил для зачитки
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	Обработка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Обработка.ИмяФайлаОбмена                        = ИмяВременногоФайла;
	Обработка.РежимОбмена                           = "Загрузка";
	Обработка.ЗапоминатьЗагруженныеОбъекты          = Ложь;
	
	Обработка.ЗагружатьДанныеВРежимеОбмена              			= Истина;
	Обработка.ОбъектыПоСсылкеЗагружатьБезПометкиУдаления			= Истина;
	Обработка.ОптимизированнаяЗаписьОбъектов            			= Истина;
	Обработка.ЗапоминатьЗагруженныеОбъекты               			= Истина;
	Обработка.НеВыводитьНикакихИнформационныхСообщенийПользователю	= Истина;
	
	ДатаНачалаЗагрузки = ТекущаяДата();
	
	УстановитьПривилегированныйРежим(Истина);
	Обработка.ВыполнитьЗагрузку();
	ЗагрузкаВыполнена = НЕ Обработка.ФлагОшибки;
	УстановитьПривилегированныйРежим(Ложь);
	
	ДатаОкончанияЗагрузки = ТекущаяДата();
	КоличествоЗагруженныхОбъектов = Обработка.КоличествоОбработанныхОбъектовДляОбновленияСтатуса;
	
	ЗагруженыНастройки = Ложь;
	Если ЗагрузкаВыполнена
		И ТипЗнч(Обработка.Параметры) = Тип("Структура")
		И Обработка.Параметры.Свойство("ЗагруженыНастройки") Тогда
		ЗагруженыНастройки = Истина;
	КонецЕсли;
	
	Возврат ЗагрузкаВыполнена;
	
КонецФункции

&НаКлиенте
Процедура ИмяФайлаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		ДиалогОткрытияФайла.Фильтр             = "Файл выгрузки (*.xml)|*.xml";
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите путь к файлу выгрузки данных из ТиС'");
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Объект.ИмяФайлаОбмена = ДиалогОткрытияФайла.ПолноеИмяФайла;
		КонецЕсли;
	Иначе
		Предупреждение(НСтр("ru = 'Для выбора каталога необходимо установить расширение для работы с файлами в Веб-клиенте.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ИмяМакета = ?(ЗагруженыНастройки, "МакетИтоговойИнформацииНастройки", "МакетИтоговойИнформации");
	ИтоговаяИнформация = Обработки.ПомощникПереходаСТорговляИСклад77.ПолучитьМакет(ИмяМакета).ПолучитьТекст();
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаНачалаЗагрузки#", ДатаНачалаЗагрузки);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаОкончанияЗагрузки#", ДатаОкончанияЗагрузки);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоличествоЗагруженныхОбъектов#", КоличествоЗагруженныхОбъектов);
	
	Если ЗагруженыНастройки Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Константы.ВалютаРегламентированногоУчета,
		|	Константы.ВалютаУправленческогоУчета,
		|	Константы.ДополнительнаяКолонкаПечатныхФормДокументов,
		|	Константы.ИспользоватьЗаказыКлиентов,
		|	Константы.ИспользоватьЗаказыПоставщикам,
		|	Константы.ИспользоватьКомиссиюПриЗакупках,
		|	Константы.ИспользоватьКомиссиюПриПродажах,
		|	Константы.ИспользоватьДоверенностиНаПолучениеТоваров,
		|	Константы.ИспользоватьКоммерческиеПредложенияКлиентам,
		|	Константы.ИспользоватьРозничныеПродажи,
		|	Константы.ИспользоватьУпаковкиНоменклатуры,
		|	Константы.ИспользоватьДополнительныеРеквизитыИСведения,
		|	Константы.ИспользоватьАвтоматическиеСкидкиВПродажах,
		|	Константы.КонтролироватьОстаткиТоваровОрганизаций,
		|	Константы.ИспользоватьИмпортныеЗакупки,
		|	Константы.ИспользоватьПеремещениеТоваров,
		|	Константы.ИспользоватьСборкуРазборку,
		|	Константы.ИспользоватьСделкиСКлиентами,
		|	Константы.ИспользованиеСоглашенийСКлиентами
		|ИЗ
		|	Константы КАК Константы");
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Колонка Из Результат.Колонки Цикл
			
			Значение = Результат[0][Колонка.Имя];
			Значение = ?(ТипЗнч(Значение) = Тип("Булево"), Формат(Значение, "БЛ=Выключено; БИ=Включено"), Строка(Значение));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#" + Колонка.Имя + "#", Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры