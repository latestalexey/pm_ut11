////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьНастройкиОтбораПоУмолчанию();

	Элементы.Вариант.СписокВыбора.Добавить("ПоДвижениям",                       "По движениям за период");
	Элементы.Вариант.СписокВыбора.Добавить("ПоТоварамПересчета",                "По товарам пересчета");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАдресноеХранение", Новый Структура) Тогда
		Элементы.Вариант.СписокВыбора.Добавить("ПоРаспоряжениямНаПриемкуИОтгрузку", "По распоряжениям на приемку и отгрузку");
		Элементы.Вариант.СписокВыбора.Добавить("ПоРаспоряжениямНаОтгрузку",         "По распоряжениям на отгрузку");
		Элементы.Вариант.СписокВыбора.Добавить("ПоРаспоряжениямНаПриемку",          "По распоряжениям на приемку");
	КонецЕсли;
	Элементы.Вариант.СписокВыбора.Добавить("ПоОтбору",                          "По отбору");
	
	Если ЗначениеЗаполнено(Параметры.ВариантЗаполнения) Тогда
		ВариантЗаполнения = Параметры.ВариантЗаполнения;
		
		ДатаОтгрузки = Параметры.ДатаОтгрузки;
		ДатаПриемки = Параметры.ДатаПриемки;
		
		СкладОтгрузки = Параметры.СкладОтгрузки;
		СкладПриемки = Параметры.СкладПриемки;
		
		Пересчет = Параметры.Пересчет;
		
		ЗаполнитьНаСервере();
		
	Иначе
		ВариантЗаполнения = "ПоОтбору";
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[ВариантЗаполнения];
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ВариантЗаполнения = Настройки["ВариантЗаполнения"];
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[ВариантЗаполнения];
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыгрузитьВыполнить(Команда)
	
	ОчиститьСообщения();
	
	РезультатПроверки = ВыполнитьПроверку();
	Если Не РезультатПроверки.ТоварыВыбраны Тогда
		Предупреждение(НСтр("ru = 'Не выбрано ни одного товара'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";

	Если МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента() Тогда
		// Получение базы товаров
		ТаблицаТСД = МассивБазыТоваров();

		// Выбор устройства
		ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		                             НСтр("ru='Выберите терминал сбора данных'"),
		                             НСтр("ru='Терминал сбора данных не подключен'"));

		Если ИдентификаторУстройства <> Неопределено Тогда
			// Подключение устройства
			Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                              ИдентификаторУстройства,
			                                                                              ОписаниеОшибки);

			Если Результат Тогда
				// выгружаем в ТСД
				ВходныеПараметры  = Новый Массив();
				ВыходныеПараметры = Неопределено;

				ВходныеПараметры.Добавить("Items");
				ВходныеПараметры.Добавить(ТаблицаТСД);

				Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				                                                        "UploadDirectory",
				                                                        ВходныеПараметры,
				                                                        ВыходныеПараметры);
				Если Не Результат Тогда
					ОписаниеОшибки = НСтр("ru='При выгрузке данных в терминал сбора данных произошла ошибка.
					|%ОписаниеОшибки%
					|Данные в терминал сбора данных не выгружены или выгружены не полностью.'");
					ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ОписаниеОшибки%", ВыходныеПараметры[1]);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки);
				КонецЕсли;

				МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор, ИдентификаторУстройства);
			Иначе
				ТекстСообщения = НСтр("ru = 'При подключении терминала сбора данных произошла ошибка:
				|""%ОписаниеОшибки%"".
				|Данные не были выгружены.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Предварительно необходимо выбрать рабочее место внешнего оборудования текущего сеанса.'");

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если ВариантЗаполнения = "ПоТоварамПересчета"
		И Не ЗначениеЗаполнено(Пересчет) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Пересчет товаров""'"),
			,
			"Пересчет",
			,
			Отказ
		);
			
		Возврат;
		
	ИначеЕсли ВариантЗаполнения = "ПоРаспоряжениямНаПриемкуИОтгрузку"
		И Не ЗначениеЗаполнено(СкладОтгрузки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Склад""'"),
			,
			"СкладОтгрузки",
			,
			Отказ
		);
		
	ИначеЕсли ВариантЗаполнения = "ПоРаспоряжениямНаОтгрузку"
		И Не ЗначениеЗаполнено(СкладОтгрузки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Склад""'"),
			,
			"СкладОтгрузки",
			,
			Отказ
		);
		
	ИначеЕсли ВариантЗаполнения = "ПоРаспоряжениямНаПриемку"
		И Не ЗначениеЗаполнено(СкладПриемки) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не заполнено поле ""Склад""'"),
			,
			"СкладПриемки",
			,
			Отказ
		);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСтроки(Команда)
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьСтроки(Команда)

	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Выбран = Ложь
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьВыделенныеСтроки(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		СтрокаТЧ.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйШтрихкодEAN13(Команда)
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Если МассивСтрок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'В списке отсутствуют выделенные строки'"));
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Результат = УстановитьНовыеШтрихкодыEAN13НаСервере(ОписаниеОшибки);
	
	Если Результат = 0 И ЗначениеЗаполнено(ОписаниеОшибки) Тогда
		Предупреждение(ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ШАПКИ

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	Элементы.Страницы.ТекущаяСтраница = Элементы[ВариантЗаполнения];
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Функция МассивБазыТоваров()

	МассивВыгрузки = Новый Массив();

	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтруктураСтроки = Новый СписокЗначений;
		СтруктураСтроки.Добавить(СтрокаТЧ.Штрихкод);
		СтруктураСтроки.Добавить(СтрокаТЧ.Номенклатура);
		СтруктураСтроки.Добавить(СтрокаТЧ.Упаковка);
		СтруктураСтроки.Добавить(СтрокаТЧ.Характеристика);
		СтруктураСтроки.Добавить("");
		СтруктураСтроки.Добавить("");
		СтруктураСтроки.Добавить("");
		СтруктураСтроки.Добавить(0);

		МассивВыгрузки.Добавить(СтруктураСтроки);
	КонецЦикла;

	Возврат МассивВыгрузки;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоОтборуНаСервере()
	
	Объект.Товары.Очистить();
	
	// Поля необходимые для вывода в таблицу товаров на форме.
	СтруктураНастроек = Обработки.ВыгрузкаБазыТоваровВТСД.СтруктураНастроек();
	
	СтруктураНастроек.ОбязательныеПоля.Добавить("Цена");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Штрихкод");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Количество");
	СтруктураНастроек.ОбязательныеПоля.Добавить("Номенклатура");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Характеристика");
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
		СтруктураНастроек.ОбязательныеПоля.Добавить("Упаковка");
	КонецЕсли;
	СтруктураНастроек.ОбязательныеПоля.Добавить("Весовой");
	СтруктураНастроек.ОбязательныеПоля.Добавить("ОстатокНаСкладе");
	
	// Шаблоны этикеток и ценников.
	СтруктураНастроек.КомпоновщикНастроек = КомпоновщикНастроек;
	
	СтруктураНастроек.ИмяМакетаСхемыКомпоновкиДанных = "ПоляШаблонаБДТовары";
	
	Объект.Товары.Очистить();
	
	// Загрузка сформированного списка товаров.
	Таблица = Обработки.ВыгрузкаБазыТоваровВТСД.ПодготовитьСтруктуруДанных(СтруктураНастроек);
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = СтрокаТЧ.Номенклатура;
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НоваяСтрока.Характеристика       = СтрокаТЧ.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НоваяСтрока.Упаковка             = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		НоваяСтрока.Штрихкод             = СтрокаТЧ.Штрихкод;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоТоварамПересчетаНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПересчетТоваровТовары.Номенклатура,
	|	ПересчетТоваровТовары.Упаковка,
	|	ПересчетТоваровТовары.Характеристика,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	Документ.ПересчетТоваров.Товары КАК ПересчетТоваровТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|		ПО ПересчетТоваровТовары.Номенклатура = ШтрихкодыНоменклатуры.Номенклатура
	|			И ПересчетТоваровТовары.Характеристика = ШтрихкодыНоменклатуры.Характеристика
	|			И ПересчетТоваровТовары.Упаковка = ШтрихкодыНоменклатуры.Упаковка
	|ГДЕ
	|	ПересчетТоваровТовары.Ссылка = &ПересчетТоваров");
	
	Запрос.УстановитьПараметр("ПересчетТоваров", Пересчет);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = Выборка.Номенклатура;
		НоваяСтрока.Характеристика       = Выборка.Характеристика;
		НоваяСтрока.Упаковка             = Выборка.Упаковка;
		НоваяСтрока.Штрихкод             = Выборка.Штрихкод;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДвижениямНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	(ШтрихкодыНоменклатуры.Номенклатура, ШтрихкодыНоменклатуры.Характеристика) В
	|			(ВЫБРАТЬ
	|				ДвижениеТоваровОбороты.Номенклатура,
	|				ДвижениеТоваровОбороты.Характеристика
	|			ИЗ
	|				РегистрНакопления.ДвижениеТоваров.Обороты(&НачалоПериода, &КонецПериода, Авто, ) КАК ДвижениеТоваровОбороты)");
	
	Запрос.УстановитьПараметр("НачалоПериода", СтандартныйПериод.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", СтандартныйПериод.ДатаОкончания);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = Выборка.Номенклатура;
		НоваяСтрока.Характеристика       = Выборка.Характеристика;
		НоваяСтрока.Упаковка             = Выборка.Упаковка;
		НоваяСтрока.Штрихкод             = Выборка.Штрихкод;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРаспоряжениямНаПриемкуИОтгрузкуНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	(ШтрихкодыНоменклатуры.Номенклатура, ШтрихкодыНоменклатуры.Характеристика) В
	|			(
	|			ВЫБРАТЬ
	|				РегистрНакопленияТоварыКОтгрузкеОстатки.Номенклатура,
	|				РегистрНакопленияТоварыКОтгрузкеОстатки.Характеристика
	|			ИЗ
	|				РегистрНакопления.ТоварыКОтгрузке.Остатки(&Дата, Склад = &Склад) КАК РегистрНакопленияТоварыКОтгрузкеОстатки)
	|	ИЛИ (ШтрихкодыНоменклатуры.Номенклатура, ШтрихкодыНоменклатуры.Характеристика) В
	|			(
	|			ВЫБРАТЬ
	|				ТоварыКПоступлениюОстаткиНаДату.Номенклатура,
	|				ТоварыКПоступлениюОстаткиНаДату.Характеристика
	|			ИЗ
	|				РегистрНакопления.ТоварыКПоступлению.Остатки(&Дата, Склад = &Склад) КАК ТоварыКПоступлениюОстаткиНаДату
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад) КАК ТоварыКПоступлениюОстаткиТекущие
	|					ПО ТоварыКПоступлениюОстаткиНаДату.ДокументПоступления = ТоварыКПоступлениюОстаткиТекущие.ДокументПоступления
	|						И ТоварыКПоступлениюОстаткиНаДату.Номенклатура = ТоварыКПоступлениюОстаткиТекущие.Номенклатура
	|						И ТоварыКПоступлениюОстаткиНаДату.Характеристика = ТоварыКПоступлениюОстаткиТекущие.Характеристика
	|						И ТоварыКПоступлениюОстаткиНаДату.Склад = ТоварыКПоступлениюОстаткиТекущие.Склад
	|)");
	
	Запрос.УстановитьПараметр("Склад", СкладОтгрузки);
	Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(ДатаОтгрузки), КонецДня(ДатаОтгрузки), ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = Выборка.Номенклатура;
		НоваяСтрока.Характеристика       = Выборка.Характеристика;
		НоваяСтрока.Упаковка             = Выборка.Упаковка;
		НоваяСтрока.Штрихкод             = Выборка.Штрихкод;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРаспоряжениямНаОтгрузкуНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	(ШтрихкодыНоменклатуры.Номенклатура, ШтрихкодыНоменклатуры.Характеристика) В
	|			(
	|			ВЫБРАТЬ
	|				РегистрНакопленияТоварыКОтгрузкеОстатки.Номенклатура,
	|				РегистрНакопленияТоварыКОтгрузкеОстатки.Характеристика
	|			ИЗ
	|				РегистрНакопления.ТоварыКОтгрузке.Остатки(&ДатаОтгрузки, Склад = &Склад) КАК РегистрНакопленияТоварыКОтгрузкеОстатки
	|)");
	
	Запрос.УстановитьПараметр("Склад", СкладОтгрузки);
	Запрос.УстановитьПараметр("ДатаОтгрузки", ?(ЗначениеЗаполнено(ДатаОтгрузки), КонецДня(ДатаОтгрузки), ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = Выборка.Номенклатура;
		НоваяСтрока.Характеристика       = Выборка.Характеристика;
		НоваяСтрока.Упаковка             = Выборка.Упаковка;
		НоваяСтрока.Штрихкод             = Выборка.Штрихкод;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоРаспоряжениямНаПриемкуНаСервере()
	
	Объект.Товары.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ШтрихкодыНоменклатуры.Номенклатура,
	|	ШтрихкодыНоменклатуры.Характеристика,
	|	ШтрихкодыНоменклатуры.Упаковка,
	|	ШтрихкодыНоменклатуры.Штрихкод
	|ИЗ
	|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
	|ГДЕ
	|	(ШтрихкодыНоменклатуры.Номенклатура, ШтрихкодыНоменклатуры.Характеристика) В
	|			(
	|			ВЫБРАТЬ
	|				ТоварыКПоступлениюОстаткиНаДату.Номенклатура,
	|				ТоварыКПоступлениюОстаткиНаДату.Характеристика
	|			ИЗ
	|				РегистрНакопления.ТоварыКПоступлению.Остатки(&ДатаПоступления, Склад = &Склад) КАК ТоварыКПоступлениюОстаткиНаДату
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыКПоступлению.Остатки(, Склад = &Склад) КАК ТоварыКПоступлениюОстаткиТекущие
	|					ПО ТоварыКПоступлениюОстаткиНаДату.ДокументПоступления = ТоварыКПоступлениюОстаткиТекущие.ДокументПоступления
	|						И ТоварыКПоступлениюОстаткиНаДату.Номенклатура = ТоварыКПоступлениюОстаткиТекущие.Номенклатура
	|						И ТоварыКПоступлениюОстаткиНаДату.Характеристика = ТоварыКПоступлениюОстаткиТекущие.Характеристика
	|						И ТоварыКПоступлениюОстаткиНаДату.Склад = ТоварыКПоступлениюОстаткиТекущие.Склад
	|)");
	
	Запрос.УстановитьПараметр("Склад", СкладПриемки);
	Запрос.УстановитьПараметр("ДатаПоступления", ?(ЗначениеЗаполнено(ДатаПриемки), КонецДня(ДатаПриемки), ТекущаяДата()));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Товары.Добавить();
		НоваяСтрока.Номенклатура         = Выборка.Номенклатура;
		НоваяСтрока.Характеристика       = Выборка.Характеристика;
		НоваяСтрока.Упаковка             = Выборка.Упаковка;
		НоваяСтрока.Штрихкод             = Выборка.Штрихкод;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ВариантЗаполнения = "ПоОтбору" Тогда
		ЗаполнитьПоОтборуНаСервере();
	ИначеЕсли ВариантЗаполнения = "ПоТоварамПересчета" Тогда
		ЗаполнитьПоТоварамПересчетаНаСервере();
	ИначеЕсли ВариантЗаполнения = "ПоДвижениям" Тогда
		ЗаполнитьПоДвижениямНаСервере();
	ИначеЕсли ВариантЗаполнения = "ПоРаспоряжениямНаПриемкуИОтгрузку" Тогда
		ЗаполнитьПоРаспоряжениямНаПриемкуИОтгрузкуНаСервере();
	ИначеЕсли ВариантЗаполнения = "ПоРаспоряжениямНаОтгрузку" Тогда
		ЗаполнитьПоРаспоряжениямНаОтгрузкуНаСервере();
	ИначеЕсли ВариантЗаполнения = "ПоРаспоряжениямНаПриемку" Тогда
		ЗаполнитьПоРаспоряжениямНаПриемкуНаСервере();
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		СтрокаТЧ.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОтбораПоУмолчанию()
	
	СхемаКомпоновкиДанных = Обработки.ВыгрузкаБазыТоваровВТСД.ПолучитьМакет("ПоляШаблонаБДТовары");
	КомпоновщикНастроек.Инициализировать(
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, ЭтаФорма.УникальныйИдентификатор))
	);
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
КонецПроцедуры

&НаСервере
Функция УстановитьНовыеШтрихкодыEAN13НаСервере(ОписаниеОшибки = "")
	
	Количество = 0;
	
	МассивСтрок = Элементы.Товары.ВыделенныеСтроки;
	
	Штрихкоды = Новый Соответствие;
	
	ПрефиксШтучногоТовара = РегистрыСведений.ШтрихкодыНоменклатуры.ПрефиксШтучногоТовара();
	
	НачатьТранзакцию();
	
	Попытка
	
	МаксимальныйКод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьМаксимальноеЗначениеКодаШтрихкодаЧислом();
	
	Для Каждого НомерСтроки Из МассивСтрок Цикл
		СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(НомерСтроки);
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
			Количество = Количество + 1;
		Иначе
			Продолжить;
		КонецЕсли;
		
		НовыйШтрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.СоздатьМенеджерЗаписи();
		НовыйШтрихкод.Номенклатура = СтрокаТЧ.Номенклатура; 
		Если ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры") Тогда
			НовыйШтрихкод.Характеристика = СтрокаТЧ.Характеристика;
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры") Тогда
			НовыйШтрихкод.Упаковка       = СтрокаТЧ.Упаковка;
		КонецЕсли;
		
		НовыйШтрихкод.Штрихкод = РегистрыСведений.ШтрихкодыНоменклатуры.ПолучитьШтрихкодПоКоду(Мин(МаксимальныйКод + 1, 99999999), ПрефиксШтучногоТовара);
		НовыйШтрихкод.Записать();
		
		Штрихкоды.Вставить(СтрокаТЧ, НовыйШтрихкод.Штрихкод);
		МаксимальныйКод = МаксимальныйКод + 1;
		
	КонецЦикла;
	
	Исключение
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'При записи штрихкодов произошла ошибка.
		                      |Запись штрихкодов не выполнена.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);
		
		Возврат 0;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Для Каждого КлючИЗначение Из Штрихкоды Цикл
		КлючИЗначение.Ключ.Штрихкод = КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

&НаСервере
Функция ВыполнитьПроверку()
	
	ЕстьОшибки = Ложь;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если НЕ СтрокаТЧ.Выбран Тогда
			Продолжить;
		КонецЕсли;
		
		НомерСтроки = СтрокаТЧ.НомерСтроки - 1;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Штрихкод) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле ""Штрихкод"" в строке %1'"),
					НомерСтроки+1
				),
				,
				"Объект.Товары["+НомерСтроки+"].Штрихкод",
				,
				ЕстьОшибки
			);
			
		КонецЕсли;
	
	КонецЦикла;

	Возврат Новый Структура("ТоварыВыбраны, ПроверкаВыполнена", Объект.Товары.НайтиСтроки(Новый Структура("Выбран", Истина)).Количество() > 0, Не ЕстьОшибки);
	
КонецФункции

&НаКлиенте
Процедура ВариантОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры
