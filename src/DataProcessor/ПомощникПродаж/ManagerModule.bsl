#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС


//Имена реквизитов, от значений которых зависят параметры указания серий
//
//	Возвращаемое значение:
//		Строка - имена реквизитов, перечисленные через запятую
//
Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	ИменаРеквизитов = "Склад,ВариантОформленияДокументов,ЕстьСтрокиЗаказКлиентаРеализацияТоваровУслуг,ХозяйственнаяОперация,СтатусЗаказаКлиента,СтатусРеализацииТоваровУслуг";
	
	Возврат ИменаРеквизитов;
КонецФункции

//Возвращает параметры указания серий для товаров, указанных в документе
//
//	Параметры
//			Объект - Структура - структура значений реквизитов объекта, необходимых для заполнения параметров указания серий
//	Возвращаемое значение
//			Тип Структура
//				Состав полей задается в функции ОбработкаТабличнойЧастиКлиентСервер.ПараметрыУказанияСерий
//
Функция ПараметрыУказанияСерий(Объект) Экспорт
	ИспользованиеСерийСклад = Ложь;
	ГруппаСкладов = Справочники.Склады.ЭтоГруппа(Объект.Склад);
	Если ГруппаСкладов <> Неопределено Тогда
		Если ГруппаСкладов Тогда
			ИспользованиеСерийСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатуры");
		Иначе
			ИспользованиеСерийСклад = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура("Склад", Объект.Склад));
		КонецЕсли;
	КонецЕсли;
	
	Заказ = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
		
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
		И Объект.ЕстьСтрокиЗаказКлиентаРеализацияТоваровУслуг Тогда
		
		Заказ.ИспользоватьСерииНоменклатуры = ИспользованиеСерийСклад
											И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение
											И (Объект.СтатусЗаказаКлиента = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению
												Или Объект.СтатусЗаказаКлиента = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке
												Или Объект.СтатусЗаказаКлиента = Перечисления.СтатусыЗаказовКлиентов.Закрыт);
	Иначе
		Заказ.ИспользоватьСерииНоменклатуры = ИспользованиеСерийСклад
											И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	КонецЕсли;
	
	Заказ.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);

	Заказ.ПоляСвязи.Добавить("УказыватьСерии");
	Заказ.ПоляСвязи.Добавить("Склад");
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
		Заказ.ПоляСвязи.Добавить("ВариантОформления");
	КонецЕсли;
	
	Заказ.ЭтоЗаказ = Истина;
	Заказ.ПланированиеОтгрузки = Истина;
		
	
	Реализация = НоменклатураКлиентСервер.ПараметрыУказанияСерий();
	Реализация.ИспользоватьСерииНоменклатуры = ИспользованиеСерийСклад
												И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет;
	
	Реализация.СкладскиеОперации.Добавить(Перечисления.СкладскиеОперации.ОтгрузкаКлиенту);
	Реализация.ПоляСвязи.Добавить("УказыватьСерии");
	Реализация.ПоляСвязи.Добавить("Склад");
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
		Реализация.ПоляСвязи.Добавить("ВариантОформления");
	КонецЕсли;
		
	Реализация.ЭтоНакладная = Истина;
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
		СтатусРеализации = Объект.СтатусРеализацииТоваровУслуг;
	Иначе
		СтатусРеализации = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	КонецЕсли;
		
	Реализация.ПланированиеОтгрузки = СтатусРеализации = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате
								  Или СтатусРеализации = Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке;
	Реализация.ПланированиеОтбора = СтатусРеализации = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате
								  Или СтатусРеализации = Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке;
	Реализация.ФактОтбора = СтатусРеализации = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
		
	ПараметрыУказанияСерий = Новый Структура;
	ПараметрыУказанияСерий.Вставить("Реализация", Реализация);
	ПараметрыУказанияСерий.Вставить("Заказ", Заказ);	
	
	Возврат ПараметрыУказанияСерий;
	
КонецФункции

// Возвращает списк выбора значений по-умолчанию для реквизита "Основание"
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ВозвратТоваровПоставщику - Объект документа, по которму необходимо получить список выбора
//
// Возвращаемое значение:
//	СписокЗначений - Список вариантов текстов основания
//
Функция ПолучитьСписокВыбораОснованияДляПечати(Объект) Экспорт
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	Список = Новый СписокЗначений;
	ТекстОснования = ПолучитьТекстОснования(Объект, Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов);
	Если ЗначениеЗаполнено(ТекстОснования) Тогда
		Список.Добавить(ТекстОснования + ?(ЭтоПередачаНаКомиссию, ", " + НСтр("ru='передача на комиссию'"), ""));
	КонецЕсли;
	
	Если ЭтоПередачаНаКомиссию И Список.Количество()=0 Тогда
		Список.Добавить(НСтр("ru='Передача на комиссию'"));
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции

// Возвращает текст основания по данными документа
//
// Параметры:
//	Объект - ДанныеФормыСтруктура, ДокументОбъект.ПомощникПродаж - Объект, по которму необходимо получить текст основания
//
// Возвращаемое значение:
//	Строка - Строка с текстом основания
//
Функция ПолучитьТекстОснования(Объект, ПорядокРасчетов) Экспорт
	
	ТекстОснования = "";
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		И ЗначениеЗаполнено(Объект.Договор) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДоговорыКонтрагентов.НаименованиеДляПечати
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Ссылка = &Ссылка"
		);
		Запрос.УстановитьПараметр("Ссылка", Объект.Договор);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекстОснования = СокрЛП(Выборка.НаименованиеДляПечати);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОснования; // Возврат значения по-умолчанию
	
КонецФункции

#КонецЕсли