&НаКлиенте
Перем КэшированныеЗначения; //текущая номенклатура для передачи в обработчики ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	КодФормы = "Обработка_ПомощникПродаж_Форма";
	
	ПервоеОткрытиеФормы = ПодборТоваровСервер.ПервоеОткрытиеФормы(КодФормы);
	
	Если ПервоеОткрытиеФормы Тогда
		ПодборТоваровСервер.УстановитьПараметрыДереваОтбораКачествоНовый(ЭтаФорма);
	КонецЕсли;
	
	ИспользоватьНесколькоКасс = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоКасс");
	Если Не ИспользоватьНесколькоКасс Тогда
		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию();
	КонецЕсли;
	
	ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	ИспользоватьАвтоматическиеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическиеСкидкиВПродажах");
	ИспользоватьКоммерческиеПредложенияКлиентам = ПолучитьФункциональнуюОпцию("ИспользоватьКоммерческиеПредложенияКлиентам");
	ИспользоватьЗаказыКлиентов = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыКлиентов");
	ИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ИспользоватьУпаковкиНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользоватьУпаковкиНоменклатуры");
	ИспользоватьТиповыеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	
	ПодборТоваровСервер.ПриСозданииФормыПодбораНаСервере(ЭтаФорма);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ЦеноваяГруппа", Справочники.ЦеновыеГруппы.ПустаяСсылка());
	
	ВариантКлассификацииЗадолженности = Константы.ОсновнойВариантКлассификацииЗадолженности.Получить();
	РассчитатьПараметрыСерий();
	ПродажиСервер.УстановитьРежимВыбораГруппЭлементовСклада(Элементы.Склад);
	
	ИспользоватьТиповыеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьТиповыеСоглашенияСКлиентами");
	ИспользоватьИндивидуальныеСоглашенияСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьИндивидуальныеСоглашенияСКлиентами");
	
	ТолькоТиповые = ИспользоватьТиповыеСоглашенияСКлиентами И НЕ ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	ТолькоИндивидуальные = НЕ ИспользоватьТиповыеСоглашенияСКлиентами И ИспользоватьИндивидуальныеСоглашенияСКлиентами;
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(ЭтаФорма, "ИспользоватьПолнотекстовыйПоискПриПодбореТоваров");
	
	СкрытьНедоступныеДополнительныеРеквизиты();
	
	ПроверитьДоступностьПечатиПКО();
	
	ИнициализироватьПомощникПродаж();
	
	ИнициализироватьВариантыОформленияДокументовПродажи();
	
	Элементы.РазворачиватьГруппировкиДосье.Пометка = РазворачиватьГруппировкиДосье;
	
	// Установить свойства настройки "Отображать остатки".
	Если ПервоеОткрытиеФормы Тогда
		ОтображатьОстатки = Истина;
	КонецЕсли;
	
	Элементы.ОстаткиТоваров.Видимость = ОтображатьОстатки;
	
	ОтображатьОстаткиНадпись = ?(ОтображатьОстатки, НСтр("ru = 'Подробная информация об остатках (скрыть)'"), НСтр("ru = 'Подробная информация об остатках (показать)'"));
	
	Элементы.ТоварыИндексСовместноПродаваемыеТовары.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруПродаваемуюСовместно");
	
	ВидНоменклатурыДоИзменения = ВидНоменклатуры;
	
	// Установить свойства настройки "Запрашивать количество и цену".
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = ЗапрашиватьКоличество;
	
	ИспользоватьУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	
	Если ИспользоватьУправлениеДоставкой Тогда
		
		РедактироватьАдресаДоставкиТолькоВДиалоге = ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
		АдресаДоставкиТолькоРоссийские = ПолучитьФункциональнуюОпцию("АдресаДоставкиТолькоРоссийские");
		Объект.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
		Если Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
			Элементы.АдресДоставкиСамовывоз.Видимость = Ложь;
			Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика") Тогда
				Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаКоммерческоеПредложениеСиламиПеревозчика;
			ИначеЕсли Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу") Тогда
				Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаКоммерческоеПредложениеСиламиПеревозчикаПоАдресу;
			Иначе
				Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаСамовывоз;
			КонецЕсли;
		Иначе
			ДоставкаТоваров.ПриЧтенииСозданииРаспоряженийНаСервере(Элементы,Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	ИспользоватьРучныеСкидкиВПродажах = ПолучитьФункциональнуюОпцию("ИспользоватьРучныеСкидкиВПродажах");
	
	Если ИспользоватьРучныеСкидкиВПродажах Тогда
		ПодборТоваровСервер.УстановитьМаксимальныйПроцентРучнойСкидки(ЭтаФорма);
	КонецЕсли;
	
	ЕстьПравоСозданияНоменклатуры   = ПравоДоступа("Добавление", Метаданные.Справочники.Номенклатура);
	ЕстьПравоСозданияХарактеристики = ПравоДоступа("Добавление", Метаданные.Справочники.ХарактеристикиНоменклатуры);
	
	Элементы.СтраницаСоздатьНоменклатуру.Видимость   = ЕстьПравоСозданияНоменклатуры;
	Элементы.СтраницаСоздатьХарактеристику.Видимость = ЕстьПравоСозданияХарактеристики;	
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ИнициализироватьВариантыОформленияДокументовПродажи();
	УстановитьВариантОформленияДокументовПродажиПоУмолчанию();
	Элементы.РазворачиватьГруппировкиДосье.Пометка = РазворачиватьГруппировкиДосье;
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		ОтветНаВопрос = Вопрос(НСтр("ru = 'Работа помощника будет завершена, все введенные данные будут потеряны. Закрыть помощник?'"), СписокКнопок);
		
		Если ОтветНаВопрос = "НеЗакрывать" Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкиФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "СчитанаКартаЛояльности"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		СчитанаКартаЛояльности(Параметр.КартаЛояльности);
	КонецЕсли;
	
	Если ИмяСобытия = "ПолученыСообщения"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		ПолученыСообщения(Параметр.Сообщения);
	КонецЕсли;
	
	Если ИмяСобытия = "ВыборПартнераНайдено" Тогда
		Объект.Партнер =  Параметр.Партнер;
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Номенклатура" Тогда
			
		Если ЗначениеЗаполнено(Источник) Тогда
			
			НоваяНоменклатураСсылка = Источник;
			Элементы.Список.ТекущаяСтрока = Источник;
			
			ЗаписьНового = Истина;
			
		КонецЕсли;
		
	КонецЕсли;

	Если ИмяСобытия = "Закрытие_ПомощникНового_Номенклатура" И ЗаписьНового Тогда
		
		ЗаписьНового = Ложь;
				
			Если Параметр.ХарактеристикиИспользуются И Параметр.ПерейтиКСпискуХарактеристик Тогда
				ПерейтиКСпискуХарактеристикНаСервере();
			ИначеЕсли Не Параметр.ХарактеристикиИспользуются Тогда
				
				Параметр.Номенклатура = НоваяНоменклатураСсылка;
				
				Если Параметр.ЭтоТовар И Склады.Количество() = 1 Тогда
					Параметр.Склад = Склады.Получить(0).Значение;
				КонецЕсли;
				
				ДобавитьВКорзину(Параметр);
				
			КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ХарактеристикиНоменклатуры" Тогда
		
		Если ЗначениеЗаполнено(Источник) Тогда
			
			Элементы.ПодборТаблицаХарактеристики.ТекущаяСтрока = Источник;
			
			ЗаписьНового = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "Закрытие_ПомощникНового_Характеристика" И ЗаписьНового Тогда
		
		ЗаписьНового = Ложь;
		
		СтрокаТаблицыХарактеристик = Элементы.ТекущиеДанные;
		Если СтрокаТаблицыХарактеристик = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицыНоменклатуры = Элементы.ПодборТаблицаХарактеристики.ТекущиеДанные;
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
		
		Если СтрокаТаблицыНоменклатуры.ЭтоТовар И Склады.Количество() = 1 Тогда
			ПараметрыТовара.Склад = Склады.Получить(0).Значение;
		КонецЕсли;
		
		ПараметрыТовара.ДатаОтгрузки = ДатаОтгрузки;
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		ДобавитьВКорзину(ПараметрыТовара);
		
	КонецЕсли;
	
	СобытиеЗаписи = (Лев(ИмяСобытия,7) = "Запись_");
	
	Если СобытиеЗаписи Тогда
		
		ОбновитьСостояниеДокумента(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ПроверяемыеРеквизиты.Очистить();
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверки реквизитов шапки
	
	Если Не ЗначениеЗаполнено(Объект.Партнер) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Клиент"" не заполнено'"),
			,
			"Объект.Партнер",
			,
			Отказ
		);
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Соглашение) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Соглашение"" не заполнено'"),
			,
			"Объект.Соглашение",
			,
			Отказ
		);
	
	КонецЕсли;
	
	ЕстьТовары = Объект.Товары.НайтиСтроки(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар)).Количество() > 0;
	ЕстьТара   = Объект.Товары.НайтиСтроки(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.МногооборотнаяТара)).Количество() > 0;
		
	Если (ЕстьТовары ИЛИ ЕстьТара) И Не СкладГруппа И Не ЗначениеЗаполнено(Объект.Склад) И 
		Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Склад"" не заполнено'"),
			,
			"Объект.Склад",
			,
			Отказ
		);
		
	ИначеЕсли (ЕстьТовары ИЛИ ЕстьТара) И СкладГруппа И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		ЗначениеЗаполнено(Объект.Склад) Тогда
		
		ВыборГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ВыборГруппы");
		
		Если (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Или
			Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) И
			ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Необходимо указать группу складов, разрешенную для выбора в заказах'"),
				,
				"Объект.Склад",
				,
				Отказ
			);
			
		ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг И
			(ВыборГруппы = Перечисления.ВыборГруппыСкладов.Запретить Или 
			ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказах) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Необходимо указать группу складов, разрешенную для выбора в реализациях'"),
				,
				"Объект.Склад",
				,
				Отказ
			);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверки табличной части Товары
	
	ЕстьОшибкиТовары = Ложь;
	
	Если Объект.Товары.Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не введено ни одной строки в список ""Товары""'"),
			,
			"Объект.Товары",
			,
			ЕстьОшибкиТовары
		);
		
	КонецЕсли;
	
	ПараметрыОтбораПродажа = Новый Структура("ВариантОформления", ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг"));
	СтрокиПродажи = Объект.Товары.НайтиСтроки(ПараметрыОтбораПродажа);
	
	Для ТекИндекс = 0 По Объект.Товары.Количество()-1 Цикл
		
		АдресОшибки = НСтр("ru=' в строке %НомерСтроки% списка ""Товары""'");
		АдресОшибки = СтрЗаменить(АдресОшибки, "%НомерСтроки%", Объект.Товары[ТекИндекс].НомерСтроки);
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Номенклатура) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Номенклатура""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Номенклатура"),
				,
				ЕстьОшибкиТовары
			);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].КоличествоУпаковок) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Количество""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "КоличествоУпаковок"),
				,
				ЕстьОшибкиТовары
			);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Цена) 
			И ?(Объект.ВернутьМногооборотнуюТару, Объект.Товары[ТекИндекс].ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара, Истина) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Цена""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Цена"),
				,
				ЕстьОшибкиТовары
			);
			
		КонецЕсли;
		
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Сумма) 
			И ?(Объект.ВернутьМногооборотнуюТару, Объект.Товары[ТекИндекс].ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара, Истина) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Сумма""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Сумма"),
				,
				ЕстьОшибкиТовары
			);
			
		КонецЕсли;
		
		
		Если Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].СтавкаНДС) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Ставка НДС""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "СтавкаНДС"),
				,
				ЕстьОшибкиТовары
			);
			
		КонецЕсли;
		
		Если Объект.Товары[ТекИндекс].ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар И
			Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].Склад) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Не заполнена колонка ""Склад""'") + АдресОшибки,
				,
				"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "Склад"),
				,
				ЕстьОшибкиТовары
			);
			
		КонецЕсли;
		
		Если ((Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента
				Или Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) И
				(Объект.СтатусЗаказаКлиента = Перечисления.СтатусыЗаказовКлиентов.КОбеспечению Или
				Объект.СтатусЗаказаКлиента = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке Или
				Объект.СтатусЗаказаКлиента = Перечисления.СтатусыЗаказовКлиентов.Закрыт)) Или
			(Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг И
				СтрокиПродажи.Количество() > 0) Тогда
				
			Если Не Объект.НеОтгружатьЧастями И Не ЗначениеЗаполнено(Объект.Товары[ТекИндекс].ДатаОтгрузки) Тогда
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Не заполнена колонка ""Дата отгрузки""'") + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
					,
					ЕстьОшибкиТовары
				);
				
			КонецЕсли;
			
			// Дата отгрузки в тч Товары должна быть не меньше даты документа
			Если НЕ Объект.НеОтгружатьЧастями 
				И ЗначениеЗаполнено(Объект.Товары[ТекИндекс].ДатаОтгрузки) 
				И Объект.Товары[ТекИндекс].ДатаОтгрузки < НачалоДня(Объект.Дата) Тогда
			
				ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты продажи ""%Дата%""'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки,"%Дата%", Формат(Объект.Дата, "ДЛФ=DD"));
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки + АдресОшибки,
					,
					"Объект." + ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Объект.Товары[ТекИндекс].НомерСтроки, "ДатаОтгрузки"),
					,
					Отказ
				);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ОбработкаОбъект, МассивНепроверяемыхРеквизитов,ЕстьОшибкиТовары);
	
	ПараметрыУказанияСерий = НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПомощникПродаж);
	
	Если ЭтоРеализация(Объект.ВариантОформленияДокументов) Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(Объект, ПараметрыУказанияСерий.Реализация, ЕстьОшибкиТовары);
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		
		НоменклатураСервер.ПроверитьЗаполнениеСерий(Объект, ПараметрыУказанияСерий.Заказ, ЕстьОшибкиТовары);
		
	КонецЕсли;
		
	Если Объект.НеОтгружатьЧастями И Не ЗначениеЗаполнено(Объект.ДатаОтгрузки) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Дата отгрузки"" не заполнено'"),
			,
			"Объект.ДатаОтгрузки",
			,
			ЕстьОшибкиТовары
		);
	
	КонецЕсли;
	
	НоменклатураСервер.ПроверитьЗаполнениеСодержания(ОбработкаОбъект, ЕстьОшибкиТовары, "Товары");
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверки реквизитов оплаты и отгрузки и табличной части ЭтапыОплаты
	
	ЕстьОшибкиОплатаОтгрузка = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Организация"" не заполнено'"),
			,
			"Объект.Организация",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
	
	КонецЕсли;

	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Контрагент"" не заполнено'"),
			,
			"Объект.Контрагент",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
	
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		Не ЗначениеЗаполнено(Объект.Договор) И ЗначениеЗаполнено(Объект.Соглашение) И
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ИспользуютсяДоговорыКонтрагентов") Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Договор"" не заполнено'"),
			,
			"Объект.Договор",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Менеджер) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Менеджер"" не заполнено'"),
			,
			"Объект.Менеджер",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
	
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Подразделение"" не заполнено'"),
			,
			"Объект.Подразделение",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Валюта"" не заполнено'"),
			,
			"Объект.Валюта",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Операция"" не заполнено'"),
			,
			"Объект.ХозяйственнаяОперация",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
	
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.НалогообложениеНДС) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Налогообложение НДС"" не заполнено'"),
			,
			"Объект.НалогообложениеНДС",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
	
	КонецЕсли;
	
	// Желаемая дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ОбработкаОбъект.ЖелаемаяДатаОтгрузки) И ОбработкаОбъект.ЖелаемаяДатаОтгрузки < НачалоДня(ОбработкаОбъект.Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Желаемая дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ОбработкаОбъект.Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ЖелаемаяДатаОтгрузки",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
		
	КонецЕсли;
	
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если Объект.НеОтгружатьЧастями И ЗначениеЗаполнено(ОбработкаОбъект.ДатаОтгрузки) И ОбработкаОбъект.ДатаОтгрузки < НачалоДня(ОбработкаОбъект.Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(ОбработкаОбъект.Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			"Объект.ДатаОтгрузки",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
		
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная И
		Объект.СоздаватьПриходныйКассовыйОрдер И
		Не ЗначениеЗаполнено(Объект.Касса) Тогда
	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Касса"" не заполнено'"),
			,
			"Объект.Касса",
			,
			ЕстьОшибкиОплатаОтгрузка
		);
	
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг И
		ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
		Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		
		ПродажиСервер.ПроверитьКорректностьЭтаповГрафикаОплаты(Объект, Объект.Товары.Итог("СуммаСНДС"), Истина, ЕстьОшибкиОплатаОтгрузка, Истина);
		
	КонецЕсли;
	
	// Проверка реквизитов доставки
	ЕстьОшибкиДоставки = Ложь;
	Если ИспользоватьУправлениеДоставкой
			И (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
				ИЛИ Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) Тогда
		Если Объект.СпособДоставки <> Перечисления.СпособыДоставки.Самовывоз Тогда
			Если НЕ ЗначениеЗаполнено(Объект.АдресДоставки) Тогда
				Если Объект.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента Тогда
					ТекстОшибки = НСтр("ru = 'Поле ""Адрес доставки"" не заполнено'")
				Иначе
					ТекстОшибки = НСтр("ru = 'Поле ""Адрес доставки до получателя"" не заполнено'")
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					"Объект.АдресДоставки",
					,
					ЕстьОшибкиДоставки
				);
			КонецЕсли;
			Если (Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчика
				ИЛИ Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу)
				И НЕ ЗначениеЗаполнено(Объект.ПеревозчикПартнер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""Перевозчик"" не заполнено'"),
					,
					"Объект.ПеревозчикПартнер",
					,
					ЕстьОшибкиДоставки
				);
			КонецЕсли;
			Если Объект.СпособДоставки = Перечисления.СпособыДоставки.СиламиПеревозчикаПоАдресу
				И НЕ ЗначениеЗаполнено(Объект.АдресДоставкиПеревозчика) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Поле ""Адрес доставки до перевозчика"" не заполнено'"),
					,
					"Объект.АдресДоставкиПеревозчика",
					,
					ЕстьОшибкиДоставки
				);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОшибкиТовары Тогда
		
		СброситьПометкиКомандШапки(Элементы);
		Элементы.ПерейтиКорзина.Пометка = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКорзина;
		
	ИначеЕсли ЕстьОшибкиОплатаОтгрузка Тогда
		
		СброситьПометкиКомандШапки(Элементы);
		Элементы.ПерейтиОтгрузкаОплата.Пометка = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОплатаОтгрузка;
		
	ИначеЕсли ЕстьОшибкиДоставки Тогда
		
		СброситьПометкиКомандШапки(Элементы);
		Элементы.ПерейтиДоставка.Пометка = Истина;
		Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоставка;
		
	КонецЕсли;
	
	Отказ = Отказ Или ЕстьОшибкиТовары Или ЕстьОшибкиОплатаОтгрузка ИЛИ ЕстьОшибкиДоставки;
	
	Если Не Отказ Тогда
		ПродажиСервер.ПроверитьКорректностьЗаполненияДокументаПродажи(РеквизитФормыВЗначение("Объект"), Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Перем ВыполняемаяОперация;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПродаж.Форма.Настройка" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			ОбработатьИзменениеПараметровСервер(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "ОбщаяФорма.РеквизитыПечатиРеализации" Или
		ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПродаж.Форма.РеквизитыПечатиАкта" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
			Объект.БанковскийСчет = ВыбранноеЗначение.БанковскийСчетОрганизации;
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты" Тогда
		Если ВыбранноеЗначение <> Неопределено Тогда
			ЗагрузитьДополнительныеРеквизитыИзХранилищаСервер(ВыбранноеЗначение);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВыполняемаяОперация", ВыполняемаяОперация) Тогда
		
		Если ВРег(ВыполняемаяОперация) = ВРег("СостояниеОбеспеченияЗаказа") Тогда
			
			ОбработкаВыбораСостояниеОбеспеченияЗаказаНаСервере(ВыбранноеЗначение.АдресВХранилище);
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
		
		КонецЕсли;
			
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборМногооборотнойТары.Форма.Форма" Тогда
		
		ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(ВыбранноеЗначение.АдресМногооборотнойТарыВХранилище);
		МногооборотнаяТараКлиент.ОповеститьПользователяОЗаполненииМногооборотнойТарой();
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораСостояниеОбеспеченияЗаказаНаСервере(АдресТоваровВХранилище)
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
	
	КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	
	Объект.Товары.Загрузить(ПолучитьИзВременногоХранилища(АдресТоваровВХранилище));
	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьВариантОформленияВТабличнойЧастиСервер();
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДополнительныеРеквизитыИзХранилищаСервер(ВыбранноеЗначение);
	
	Если ВыбранноеЗначение.ТипДокумента = "ДокументОбъект.КоммерческоеПредложениеКлиенту" Тогда
		ИмяТаблицы = "ДополнительныеРеквизитыКоммерческогоПредложения";
	ИначеЕсли ВыбранноеЗначение.ТипДокумента = "ДокументОбъект.ЗаказКлиента" Тогда
		ИмяТаблицы = "ДополнительныеРеквизитыЗаказа";
	ИначеЕсли ВыбранноеЗначение.ТипДокумента = "ДокументОбъект.РеализацияТоваровУслуг" Тогда
		ИмяТаблицы = "ДополнительныеРеквизитыРеализации";
	ИначеЕсли ВыбранноеЗначение.ТипДокумента = "ДокументОбъект.АктВыполненныхРабот" Тогда
		ИмяТаблицы = "ДополнительныеРеквизитыАкта";
	КонецЕсли;
	
	Объект[ИмяТаблицы].Загрузить(ПолучитьИзВременногоХранилища(ВыбранноеЗначение.ДополнительныеРеквизиты));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВариантНавигацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидНоменклатурыПриИзменении(Элемент)
	
	ВидНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформационнаяНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиКорзина.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКорзина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаДоПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЦенаОтПриИзменении(Элемент)
	
	ПриИзмененииДиапазонаЦенНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СегментПриИзменении(Элемент)
	
	СегментНоменклатурыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СпискиВыбораКлиентСервер.АвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоТочномуСоответствиюПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВНаличииПриИзменении(Элемент)
	
	ТолькоВНаличииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаОтгрузкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	МаксДатаАванса = ПродажиКлиент.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
	
	Если ЗначениеЗаполнено(МаксДатаАванса) Тогда
		
		ПредставлениеМаксДатаАванса = НСтр("ru='%МаксДатаАванса%'");
		ПредставлениеМаксДатаАванса = СтрЗаменить(ПредставлениеМаксДатаАванса, "%МаксДатаАванса%", Формат(МаксДатаАванса,"ДЛФ=DD"));
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(МаксДатаАванса, ПредставлениеМаксДатаАванса);
		
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			Объект.ЖелаемаяДатаОтгрузки = ВыбранноеЗначение.Значение;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Объект.Партнер) ИЛИ ТолькоИндивидуальные Тогда
		ПродажиКлиент.НачалоВыбораСоглашенияСКлиентом(Элемент, СтандартнаяОбработка, Объект.Партнер, Объект.Соглашение, Объект.Дата);
	Иначе
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму (
			"Справочник.СоглашенияСКлиентами.ФормаВыбора",
			Новый Структура("ДатаДокумента,ТолькоТиповые,ТекущаяСтрока", Объект.Дата, Истина, Объект.Соглашение),
			Элемент
		);
			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено (Объект.Соглашение) Тогда
		Возврат;
	КонецЕсли;

	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ПриИзмененииСоглашенияСервер();
	ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродаж();

КонецПроцедуры

&НаКлиенте
Процедура ПартнерПриИзменении(Элемент)
	
	ПриИзмененииПартнераСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОформленияДокументовПриИзменении(Элемент)
	
	ВариантОформленияДокументовПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	ПриИзмененииСкладаСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииСервер();
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПриИзменении(Элемент)
	
	ОснованиеИзменено = ОснованиеИзменено И ЗначениеЗаполнено(Объект.Основание);
	ДоговорПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		
		ПриИзмененииВалютыСервер(
			Объект.Валюта,
			ЦенообразованиеКлиент.НеобходимПересчетВВалюту(Объект,ВалютаДокумента)
		);
		ЦенообразованиеКлиент.ОповеститьОбОкончанииПересчетаСуммВВалюту(ВалютаДокумента, Объект.Валюта);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
	ВалютаДокумента = Объект.Валюта;
	
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура ХозяйственнаяОперацияПриИзменении(Элемент)
	
	ПриИзмененииХозяйственнойОперацииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	
	НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВключаетНДСПриИзменении(Элемент)
	
	ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьЭтапыОплатыНажатие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если Не ДокументыСформированы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("СуммаДокумента",            Объект.Товары.Итог("СуммаСНДС"));
	ПараметрыФормы.Вставить("ГрафикОплаты",              Объект.ГрафикОплаты);
	ПараметрыФормы.Вставить("Соглашение",                Объект.Соглашение);
	ПараметрыФормы.Вставить("Дата",                      Объект.Дата);
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки",      Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("Валюта",                    Объект.Валюта);
	ПараметрыФормы.Вставить("УчитыватьВариантОплаты",    Истина);
	ПараметрыФормы.Вставить("УникальныйИдентификатор",   УникальныйИдентификатор);
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", ПоместитьВоВременноеХранилищеНаСервере());
	ПараметрыФормы.Вставить("Ключ",                      Объект.Ссылка);
	ПараметрыФормы.Вставить("ФормаОплаты",               Объект.ФормаОплаты);
	
	ПараметрыОплаты = ОткрытьФормуМодально("ОбщаяФорма.ЭтапыОплатыКлиентом", ПараметрыФормы, ЭтаФорма);
	
	Если ПараметрыОплаты <> Неопределено Тогда
		Объект.ЭтапыГрафикаОплаты.Очистить();
		Если ЗначениеЗаполнено(ПараметрыОплаты.АдресВоВременномХранилище) Тогда
			ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(ПараметрыОплаты.АдресВоВременномХранилище);
		КонецЕсли;
		НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	КонецЕсли;
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикОплатыПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ГрафикОплаты) Тогда
		ПриИзмененииГрафикаОплатыСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	ПриИзмененииФормыОплатыСервер();
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПродажиКлиент.ОбработкаВыбораДоговораКонтрагента(ВыбранноеЗначение, Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиТОРГ12(Элемент)
	
	ОткрытьРеквизитыПечатиРеализации(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатиТТН(Элемент)
	
	ОткрытьРеквизитыПечатиРеализации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыПечатьАкта(Элемент)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Контрагент",                    Объект.Контрагент);
	СтруктураПараметров.Вставить("ДополнительнаяИнформация",      Объект.ДополнительнаяИнформация);
	СтруктураПараметров.Вставить("ДополнительнаяИнформацияШапки", Объект.ДополнительнаяИнформацияШапки);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",     Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                ДокументыСформированы И Не Модифицированность);
	
	ОткрытьФормуМодально("Обработка.ПомощникПродаж.Форма.РеквизитыПечатиАкта", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	
	ИспользоватьФильтрыПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСформированныеДокументыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКДокументам();
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтгружатьЧастямиПриИзменении(Элемент)
	
	НеОтгружатьЧастямиПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОтгрузкиПриИзменении(Элемент)
	
	ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОстатокДопустимогоКредитаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеПоСуммеПродажи = Новый Структура("СуммаВзаиморасчетов", ЦенообразованиеКлиентСервер.ПолучитьСуммуДокумента(Объект.Товары, Объект.ЦенаВключаетНДС));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", Объект.Ссылка);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",     Истина);
	ПараметрыФормы.Вставить("Отбор",                       Новый Структура("Договор", Объект.Договор));
	ПараметрыФормы.Вставить("Договор",                     Объект.Договор);
	ПараметрыФормы.Вставить("ДанныеПоСуммеПродажи",        ДанныеПоСуммеПродажи);
	
	ОткрытьФорму("Отчет.ПричиныЗапретаОтгрузки.Форма",
		ПараметрыФормы,
		,
		"Договор=" + Объект.Договор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОстаткиНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПодборТоваровКлиент.ПриИзмененииОтображенияОстатковПоСкладамДокумента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураИсходногоКачестваПриИзменении(Элемент)
	
	НоменклатураИсходногоКачестваПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьМногооборотнуюТаруПриИзменении(Элемент)
	
	 ВернутьМногооборотнуюТаруПриИзмененииСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ДЕРЕВО ОТБОРОВ

&НаКлиенте
Процедура ДеревоОтборовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПодборТоваровКлиент.ДеревоОтборовВыбор(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОтборовОтборПриИзменении(Элемент)
	
	ПодборТоваровКлиент.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	ДеревоОтборовОтборПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ИЕРАРХИЯ НОМЕНКЛАТУРЫ

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ОСТАТКИ ТОВАРОВ

&НаКлиенте
Процедура ОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыОстатков = ОстаткиТоваров.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если СтрокаТаблицыОстатков = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаТаблицыОстатков.СкладДоступенДляВыбора Тогда
		
		Предупреждение(НСтр("ru = 'Данный склад не был выбран в редактируемом документе.'"));
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются 
		И НЕ НавигацияПоХарактеристикам Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Не выбрана характеристика. Перейти к выбору характеристик?'"), РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ПерейтиКСпискуХарактеристикНаСервере();
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	Если НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Элементы.ПодборТаблицаХарактеристики.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	Иначе
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ЭтоТовар Тогда
		ПараметрыТовара.Склад = СтрокаТаблицыОстатков.Склад;
	КонецЕсли;
	
	ПараметрыТовара.ДатаОтгрузки       = СтрокаТаблицыОстатков.Период;
	ПараметрыТовара.КоличествоУпаковок = 1;
	ПараметрыТовара.СрокПоставки       = СрокПоставки;
	
	ДобавитьВКорзину(ПараметрыТовара);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ПОДБОР ТАБЛИЦА ХАРАКТЕРИСТИКИ

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку характеристик.
	Отказ = Неопределено;
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыХарактеристик(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументыСформированы И Не Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыХарактеристик = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатуры = Элементы.Список.ТекущиеДанные;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыХарактеристик);
	
	Если СтрокаТаблицыНоменклатуры.ЭтоТовар И Склады.Количество() = 1 Тогда
		ПараметрыТовара.Склад = Склады.Получить(0).Значение;
	КонецЕсли;
	
	ПараметрыТовара.ДатаОтгрузки = ДатаОтгрузки;
	ПараметрыТовара.КоличествоУпаковок = 1;
	
	ДобавитьВКорзину(ПараметрыТовара);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаХарактеристикиПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыХарактеристик(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СПИСОК

&НаКлиенте
Процедура ПодборТаблицаНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Проверить выбранную строку номенклатуры.
	Отказ = Неопределено;
	ПодборТоваровКлиент.ПриВыбореСтрокиТаблицыНоменклатуры(ЭтаФорма, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатуры = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатуры.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыНоменклатуры.ХарактеристикиИспользуются Тогда
		ПерейтиКСпискуХарактеристикНаСервере();
	Иначе
		
		Если ДокументыСформированы И Не Модифицированность Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатуры);
		
		Если СтрокаТаблицыНоменклатуры.ЭтоТовар И Склады.Количество() = 1 Тогда
			ПараметрыТовара.Склад = Склады.Получить(0).Значение;
		КонецЕсли;
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		ДобавитьВКорзину(ПараметрыТовара);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаНоменклатураПриАктивизацииСтроки(Элемент)
	
	ПодборТоваровКлиент.ПриАктивизацииСтрокиТаблицыНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ТОВАРЫ

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	
	ПриИзмененииКорзиныНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ТоварыПроцентАвтоматическойСкидки
		Или Элемент.ТекущийЭлемент = Элементы.ТоварыСуммаАвтоматическойСкидки Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не Объект.СкидкиРассчитаны Тогда
			Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
			Если Результат = КодВозвратаДиалога.Нет Тогда
				Возврат;
			Иначе
				
				СтруктураПараметры = Новый Структура;
				СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
				СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
				СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
				СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
				
				СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
				Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
					ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
			РассчитатьСкидкиБезПримененияКОбъекту();
		КонецЕсли;
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	ИначеЕсли Поле = Элементы.ТоварыСтатусУказанияСерий Тогда
		
		Если Элементы.ТоварыУказатьСерии.Доступность
			И НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма, ОпределитьПараметрыСерий(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор())) Тогда
			
			ЭтоРеализация = ЭтоРеализация(Элементы.Товары.ТекущиеДанные.ВариантОформленияПродажи);
			
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ЭтоРеализация);
		
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ЭтоРеализация);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТоварыЦена Тогда
		
		ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидЦены) Тогда
			ОчиститьСообщения();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru='Для редактирования цены необходимо выбрать вид цены ""<произвольная>""'"),
				,
				ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", ТекущиеДанные.НомерСтроки, "ВидЦены"),
			);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	Если Не Отказ Тогда
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ОпределитьПараметрыСерий(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,
		ПараметрыУказанияСерий.Реализация
	);
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,КэшированныеЗначения,
		ПараметрыУказанияСерий.Заказ
	);
	
	ОбновитьЗависимыеРеквизитыФормы();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций,  Объект.Товары.Количество());
	ЗаполнитьСтатусыУказанияСерий();
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	Если Копирование Тогда
		Элементы.Товары.ТекущиеДанные.УказыватьСерии = Ложь;
		ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций,  Объект.Товары.Количество());
	КонецЕсли;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
		Элемент,
		КэшированныеЗначения,
		ОпределитьПараметрыСерий(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()),
		Копирование
	);
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(Элементы.Товары.ТекущиеДанные, Объект.ВариантОформленияДокументов);
		КонецЕсли;
		ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
			Элемент,КэшированныеЗначения, ОпределитьПараметрыСерий(ТекущиеДанные.ПолучитьИдентификатор())) Тогда
			
			ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
			
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
			НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ОпределитьПараметрыСерий(ТекущаяСтрокаИдентификатор));
			
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыСодержаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияМногострочногоТекста(
		Элемент.ТекстРедактирования,
		Элементы.Товары.ТекущиеДанные.Содержание,
		Модифицированность,
		НСтр("ru='Содержание услуги'")
	);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу", ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыХарактеристикаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);

	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	Если ТекущаяСтрока.Количество > 0 Тогда
		СтруктураДействий.Вставить("ПересчитатьЦенуЗаУпаковку", ТекущаяСтрока.Количество);
	ИначеЕсли ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока.ВидЦены) Тогда
		СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);	
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВидЦеныПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаРучнойСкидкиПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьПроцентРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьЦенуСкидкуПоСуммеВПродажах", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаЦеныСкидкиВПродажахВТЧ(Объект, Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию")));
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладПриИзменении(Элемент)
	
	ОбновитьЗависимыеРеквизитыФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура(
		"ГруппаСкладов, ТекущийЭлемент, Номенклатура, Характеристика, ВыборВЗаказ",
		Объект.Склад,
		ТекущиеДанные.Склад,
		ТекущиеДанные.Номенклатура,
		ТекущиеДанные.Характеристика,
		Истина
	);
	ВыбранноеЗначение = ОткрытьФормуМодально(
		"Справочник.Склады.Форма.ФормаВыбораПоОстаткам",
		СтруктураПараметров,
		Элемент
	);
	Если ВыбранноеЗначение <> Неопределено Тогда
		ТекущиеДанные.Склад = ВыбранноеЗначение.Склад;
		ТекущиеДанные.ДатаОтгрузки = ВыбранноеЗначение.ДатаОтгрузки;
		ОбновитьЗависимыеРеквизитыФормы();
		Модифицированность = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВариантОформленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	Иначе
		ЗаполнитьСтатусыУказанияСерий();
		УстановитьВидимостьЭлементовСерий();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ ОФОРМЛЕННЫЕ ДОКУМЕНТЫ

&НаКлиенте
Процедура ОформленныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент = Элементы.ОформленныеДокументыДокумент Тогда
		СтандартнаяОбработка = Ложь;
		Если Элементы.ОформленныеДокументы.ТекущиеДанные <> Неопределено Тогда
			ОткрытьЗначение(Элементы.ОформленныеДокументы.ТекущиеДанные.Документ);
		КонецЕсли;
	ИначеЕсли Элемент.ТекущийЭлемент = Элементы.ОформленныеДокументыПечать Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Элементы.ОформленныеДокументы.ТекущиеДанные <> Неопределено Тогда
			
			Если Не ДоступнаПечатьКомплекта(Элементы.ОформленныеДокументы.ТекущиеДанные.Документ) Тогда
				
				Предупреждение(НСтр("ru = 'Для выбранного документа печать недоступна'"));
				
			Иначе
			
				МассивОбъектов = Новый Массив();
				МассивОбъектов.Добавить(Элементы.ОформленныеДокументы.ТекущиеДанные.Документ);
				
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("ТипОбъекта", ПолноеИмяДокумента(Элементы.ОформленныеДокументы.ТекущиеДанные.Документ));
				ПараметрыФормы.Вставить("Объекты",    МассивОбъектов);
				
				ОткрытьФорму("РегистрСведений.НастройкиПечатиОбъектов.Форма.НастройкаПечатиКомплекта", ПараметрыФормы);
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступнаПечатьКомплекта(Документ)
	
	ПараметрыОбъекта = РегистрыСведений.НастройкиПечатиОбъектов.ПараметрыОбъектаДляПечатиКомплектно(Документ.Метаданные().ПолноеИмя());
	Возврат ПараметрыОбъекта.ДоступнаПечатьКомплекта;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОЙ ЧАСТИ СПИСОК КАЧЕСТВА

&НаКлиенте
Процедура СписокКачестваПометкаПриИзменении(Элемент)
	
	СписокКачестваПометкаПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ИзменитьЗапрашиватьКоличество(Команда)
	
	ЗапрашиватьКоличество = НЕ ЗапрашиватьКоличество;
	Элементы.ЗапрашиватьКоличествоЦену.Пометка = ЗапрашиватьКоличество;
	
КонецПроцедуры

&НаКлиенте
Процедура Поиск(Команда)
	
	ТекущееСообщениеПользователю = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПерейтиКСпискуНоменклатуры(Команда)
	
	ПерейтиКСпискуНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементНоменклатура(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПодбор.Пометка = Истина;
	Если Элементы.СтраницыСписокНоменклатуры.ТекущаяСтраница = Элементы.СтраницыСписокНоменклатуры.ПодчиненныеЭлементы.ГруппаНоменклатура Тогда
		ТекущийЭлемент = Элементы.Список;
	Иначе
		ТекущийЭлемент = Элементы.ПодборТаблицаХарактеристики;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементСтрокаПоиска(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПодбор.Пометка = Истина;
	Если ТекущийЭлемент = Элементы.СтрокаПоиска Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементНавигация(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПодбор.Пометка = Истина;
	ПодборТоваровКлиент.УстановитьТекущийЭлементНавигация(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦеныНоменклатуры(Команда)
	
	ПодборТоваровКлиент.ЦеныНоменклатуры(Этаформа);
	
КонецПроцедуры

&НаКлиенте
Процедура НоваяПродажа(Команда)

	текВариантНавигации = ВариантНавигации;
	
	Если Модифицированность Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Начать", НСтр("ru = 'Начать новую продажу'"));
		СписокКнопок.Добавить("НеНачинать", НСтр("ru = 'Завершить текущую продажу'"));
		
		ОтветНаВопрос = Вопрос(НСтр("ru = 'Все несохраненные данные будут потеряны. Начать новую продажу?'"), СписокКнопок);
		
		Если ОтветНаВопрос = "НеНачинать" Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПодбор.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодбор;
	
	ИнициализироватьПомощникПродаж();
	
	// Отменить отбор по номенклатуре продаваемой совместно.
	ТаблицаНоменклатураПродаваемаяСовместно.Очистить();
	ТаблицаНоменклатураПродаваемаяСовместноПредпосылка.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияУсловийПродажПоУмолчанию();
	КонецЕсли;
	
	ПриИзмененииКорзиныНаСервере();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ПриИзмененииСкладаСервер();
	ПерейтиКСпискуНоменклатурыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПартнер(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПартнер.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПартнер;
	Если Не ДосьеПартнераОбновлено Тогда
		ОбновитьДосьеПартнера();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиПодбор(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиПодбор.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПодбор;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКорзина(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиКорзина.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаКорзина;
	ЗаполнитьСтатусыУказанияСерий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиОтгрузкаОплата(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиОтгрузкаОплата.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаОплатаОтгрузка;
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
	
	Если (ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен) И Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
		ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДокументы(Команда)
	
	ПерейтиКДокументам();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКДокументам()
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиДокументы.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДокументы;
	ЗаполнитьСтатусыУказанияСерий();
	
	Если Модифицированность Тогда
		СоздатьДокументыКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Настройка(Команда)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПечататьАктВыполненныхРабот",              Объект.ПечататьАктВыполненныхРабот);
	СтруктураПараметров.Вставить("ПечататьЗаказКлиента",                     Объект.ПечататьЗаказКлиента);
	СтруктураПараметров.Вставить("ПечататьКоммерческоеПредложение",          Объект.ПечататьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("ПечататьПриходныйКассовыйОрдер",           Объект.ПечататьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("ПечататьРеализациюТоваровУслуг",           Объект.ПечататьРеализациюТоваровУслуг);
	СтруктураПараметров.Вставить("ПечататьСчетНаОплату",                     Объект.ПечататьСчетНаОплату);
	СтруктураПараметров.Вставить("ПечататьСчетФактуру",                      Объект.ПечататьСчетФактуру);
	СтруктураПараметров.Вставить("СоздаватьДокументПродажи",                 Объект.СоздаватьДокументПродажи);
	СтруктураПараметров.Вставить("СоздаватьЗаказКлиента",                    Объект.СоздаватьЗаказКлиента);
	СтруктураПараметров.Вставить("СоздаватьКоммерческоеПредложение",         Объект.СоздаватьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("СоздаватьПриходныйКассовыйОрдер",          Объект.СоздаватьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("СоздаватьСчетНаОплату",                    Объект.СоздаватьСчетНаОплату);
	СтруктураПараметров.Вставить("СтатусЗаказаКлиента",                      Объект.СтатусЗаказаКлиента);
	СтруктураПараметров.Вставить("СтатусКоммерческогоПредложения",           Объект.СтатусКоммерческогоПредложения);
	СтруктураПараметров.Вставить("СтатусРеализацииТоваровУслуг",             Объект.СтатусРеализацииТоваровУслуг);
	
	ОткрытьФормуМодально("Обработка.ПомощникПродаж.Форма.Настройка", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПартнера(Команда)
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		ТекстВопроса = НСтр("ru = 'Текущий клиент %Партнер% будет заменен на нового. Создать нового клиента?'");
		ТекстВопроса = СтрЗаменить(ТекстВопроса, "%Партнер%", Объект.Партнер);
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("СоздатьНовогоКлиента", НСтр("ru = 'Создать нового'"));
		СписокКнопок.Добавить("ОставитьТекущегоКлиента", НСтр("ru = 'Оставить текущего'"));
		
		ОтветНаВопрос = Вопрос(ТекстВопроса, СписокКнопок);
		
		Если ОтветНаВопрос = "ОставитьТекущегоКлиента" Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ПомощникНового",Новый Структура("ЗаголовокФормыВладельца", НСтр("ru='Партнеры (Клиенты)'")), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы);
	
	Если НоваяСтрока <> Неопределено Тогда
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий,Объект);
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	Если Объект.Товары.Количество()>0 Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ЭтоРеализация = ЭтоРеализация(Элементы.Товары.ТекущиеДанные.ВариантОформленияПродажи);
		
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ОпределитьПараметрыСерий(ТекущиеДанныеИдентификатор)) Тогда
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор,ЭтоРеализация);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий,ЭтоРеализация);
			КонецЕсли;
			ЗаполнитьСтатусыУказанияСерий();
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьУказаниеСерий(Команда)
	Если Объект.Товары.Количество()>0 Тогда
		Если НоменклатураКлиент.ПроверитьВозможностьОтменыУказанияСерий(ЭтаФорма,ОпределитьПараметрыСерий(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор())) Тогда
			НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ОпределитьПараметрыСерий(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
			
			ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
			ТекущиеДанные.УказыватьСерии = Ложь;
			
			ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
			
			ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
			НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элементы.Товары, КэшированныеЗначения,ОпределитьПараметрыСерий(Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор()));
			ЗаполнитьСтатусыУказанияСерий();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьКартуЛояльности(Команда)
	
	ОткрытьФорму(
		"Справочник.КартыЛояльности.Форма.СчитываниеКартыЛояльности",
		Новый Структура("Партнер", Объект.Партнер),
		ЭтаФорма,
		ЭтаФорма.УникальныйИдентификатор
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьАвтоматическиеСкидки(Команда)
	
	АдресВХранилище = ВыполнитьПредварительныйРасчетСкидокНаСервере();
	ВозвращенноеЗначение = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияУправляемыхСкидокНаценок(АдресВХранилище);
	Если ВозвращенноеЗначение <> Неопределено Тогда
		УправляемыеСкидки = ВозвращенноеЗначение;
		
		СтруктураПараметры = Новый Структура;
		СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
		СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
		СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
		СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
		
		СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
		Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
			ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Скидки (наценки)'"),
			,
			НСтр("ru = 'Скидки (наценки) рассчитаны'"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидку(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Ложь);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта
	);
	
	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки,, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьРучнуюСкидкуДляВыделенныхСтрок(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможноНазначениеРучнойСкидкиНаценки(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	АдресВоВременномХранилище = АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(Истина);
	
	СуммаРучнойСкидкиНаценки = СкидкиНаценкиКлиент.ОткрытьФормуНазначенияРучныхСкидок(
		АдресВоВременномХранилище,
		Объект.Валюта
	);

	Если СуммаРучнойСкидкиНаценки <> Неопределено Тогда
		
		НазначитьРучнуюСкидкуНаСервере(СуммаРучнойСкидкиНаценки, Элементы.Товары.ВыделенныеСтроки, АдресВоВременномХранилище);
		СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок(СуммаРучнойСкидкиНаценки, Объект.Валюта);
		
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьРучныеСкидки(Команда)
	
	Если Не СкидкиНаценкиКлиент.ВозможнаОтменаРучныхСкидокНаценок(Объект, "Товары", "Товары") Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьРучныеСкидкиНаСервере();
	СкидкиНаценкиКлиент.ОповеститьОбОкончанииНазначенияРучныхСкидокНаценок();
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	Если НЕ Объект.СкидкиРассчитаны Тогда
		Результат = Вопрос(НСтр("ru = 'Скидки (наценки) не рассчитаны, рассчитать?'"), РежимДиалогаВопрос.ДаНет);
		Если Результат = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			
			СтруктураПараметры = Новый Структура;
			СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
			СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
			СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
			СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
			
			СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры);
			Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
				ОткрытьФорму("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма, УникальныйИдентификатор);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(АдресПримененныхСкидокВоВременномХранилище) Тогда
		РассчитатьСкидкиБезПримененияКОбъекту();
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, Объект, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоСоглашению(Команда) Экспорт

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоСоглашению(Объект, "Товары", "Товары") Тогда
		
		ЦеныРассчитаны = ЗаполнитьЦеныПоСоглашениюСервер();
		ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоСоглашению(ЦеныРассчитаны);
		
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
			
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦеныВыделенныхСтрокПоВидуЦен(Команда)

	Если ПродажиКлиент.НеобходимоЗаполнениеЦенПоВидуЦен(Объект, "Товары", "Товары") Тогда
		
		ВидЦен = ПродажиКлиент.ВыбратьВидЦен(Объект.ЦенаВключаетНДС, Истина);
		
		Если ЗначениеЗаполнено(ВидЦен) Тогда
			
			ЦеныРассчитаны = ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияЦенПоВидуЦен(ЦеныРассчитаны, ВидЦен);
			
		КонецЕсли;
			
	КонецЕсли;
	
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСкладВВыделенныхСтроках(Команда)
	
	ВыделенныеСтроки = Элементы.Товары.ВыделенныеСтроки;
	Если СкладыКлиент.ПроверитьВозможностьЗаполненияСкладовВТабличнойЧасти(Объект, Объект.Товары, "Товары", ВыделенныеСтроки) Тогда
		МассивОтбора = Новый Массив();
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказах"));
		МассивОтбора.Добавить(ПредопределенноеЗначение("Перечисление.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных"));
		СтруктураОтбора = Новый Структура("ВыборГруппы, ЭтоГруппа", МассивОтбора, Ложь);
		СтруктураПараметров = Новый Структура("Отбор,ГруппаСкладов", СтруктураОтбора, Объект.Склад);
		ВыбранныйСклад = ОткрытьФормуМодально("Справочник.Склады.ФормаВыбора", СтруктураПараметров, ЭтаФорма);
		Если ЗначениеЗаполнено(ВыбранныйСклад) Тогда
			ЗаполненоСтрок = ЗаполнитьСкладВВыделенныхСтрокахНаСервере(ВыделенныеСтроки, ВыбранныйСклад);
			СкладыКлиент.ПоказатьОповещениеОЗаполненииСкладаВТабличнойЧасти(ВыбранныйСклад, ЗаполненоСтрок, ВыделенныеСтроки.Количество());
			ОбновитьЗависимыеРеквизитыФормы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПартнера(Команда)
	
	ОткрытьФорму("Справочник.Партнеры.Форма.ФормаЭлемента", Новый Структура("Ключ", Объект.Партнер));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	
	Если ДокументыСформированы Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Создать", НСтр("ru = 'Создать'"));
		СписокКнопок.Добавить("НеСоздавать", НСтр("ru = 'Не создавать'"));
		
		ОтветНаВопрос = Вопрос(НСтр("ru = 'Документы уже были созданы. Создать документы заново?'"), СписокКнопок);
		
		Если ОтветНаВопрос = "НеСоздавать" Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	СоздатьДокументыКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ВыделенныеДокументы = ПолучитьВыделенныеДокументы();
	 
	Если ВыделенныеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтветНаВопрос = Вопрос(НСтр("ru='Пометить на удаление выделенные документы?'"), РежимДиалогаВопрос.ДаНет);
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоИзмененныхДокументов = УстановитьПометкуУдаленияСервер(ВыделенныеДокументы);
	
	Если КоличествоИзмененныхДокументов > 0 Тогда
		ПоказатьОповещениеПользователя(
			СтрЗаменить(НСтр("ru = 'Пометка удаления установлена (%КоличествоИзмененныхДокументов%)'"), "%КоличествоИзмененныхДокументов%", КоличествоИзмененныхДокументов),
			,
			,
			БиблиотекаКартинок.Информация32
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Провести(Команда)
	
	ВыделенныеДокументы = ПолучитьВыделенныеДокументы();
	 
	Если ВыделенныеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоИзмененныхДокументов = ПровестиОтменитьПроведениеДокументовСервер(ВыделенныеДокументы, Истина);
	
	Если КоличествоИзмененныхДокументов > 0 Тогда
	
		ПоказатьОповещениеПользователя(
			СтрЗаменить(НСтр("ru = 'Выполнено проведение документов (%КоличествоИзмененныхДокументов%)'"), "%КоличествоИзмененныхДокументов%", КоличествоИзмененныхДокументов),
			,НСтр("ru=''"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПроведения(Команда)
	
	ВыделенныеДокументы = ПолучитьВыделенныеДокументы();
	 
	Если ВыделенныеДокументы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоИзмененныхДокументов = ПровестиОтменитьПроведениеДокументовСервер(ВыделенныеДокументы, Ложь);
	
	Если КоличествоИзмененныхДокументов > 0 Тогда
		
		ПоказатьОповещениеПользователя(
			СтрЗаменить(НСтр("ru = 'Выполнена отмена проведения документов (%КоличествоИзмененныхДокументов%)'"), "%КоличествоИзмененныхДокументов%", КоличествоИзмененныхДокументов),
			,НСтр("ru=''"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСоСхожимиСвойствами(Команда)
	
	ТоварыСоСхожимиСвойствамиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СПодобраннойНоменклатуройСовместноПродается(Команда)
	
	СПодобраннойНоменклатуройСовместноПродаетсяНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РазворачиватьГруппировкиДосье(Команда)
	
	РазворачиватьГруппировкиДосье = Не РазворачиватьГруппировкиДосье;
	Элементы.РазворачиватьГруппировкиДосье.Пометка = РазворачиватьГруппировкиДосье;
	Если РазворачиватьГруппировкиДосье Тогда
		ДосьеПартнера.ПоказатьУровеньГруппировокСтрок(1);
	Иначе
		ДосьеПартнера.ПоказатьУровеньГруппировокСтрок(0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуТовара(Команда)
	
	ПодборТоваровКлиент.ОткрытьКарточкуТовара(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура НапечататьДокументы(Команда)
	
	МассивДокументов = Новый Массив();
	
	Для Каждого ТекСтрока Из Объект.Документы Цикл
		
		Если ТекСтрока.Состояние = 0 Тогда
			
			ТипДокумента = ТипЗнч(ТекСтрока.Документ);
			
			Если ТипДокумента = Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту") И Объект.ПечататьКоммерческоеПредложение Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ЗаказКлиента") И Объект.ПечататьЗаказКлиента Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуКлиенту") И Объект.ПечататьСчетНаОплату Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг") И Объект.ПечататьРеализациюТоваровУслуг Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.АктВыполненныхРабот") И Объект.ПечататьАктВыполненныхРабот Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") И Объект.ПечататьПриходныйКассовыйОрдер Тогда
				МассивДокументов.Добавить(ТекСтрока.Документ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
		"РегистрСведений.НастройкиПечатиОбъектов.Форма.НастройкаПечатиКомплекта",
		"КомплектДокументов",
		МассивДокументов,
		Неопределено
	);
	
	Если МассивДокументов.Количество() > 0 Тогда
	
		ПоказатьОповещениеПользователя(
			СтрЗаменить(НСтр("ru = 'Документы напечатаны (%КоличествоДокументов%)'"), "%КоличествоДокументов%", МассивДокументов.Количество()),
			,НСтр("ru=''"),
			БиблиотекаКартинок.Информация32
		);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиДляВсехСтрок(Команда)

	ЗаполнитьДатуОтгрузки();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузкиДляВыделенныхСтрок(Команда)

	Если Элементы.Товары.ВыделенныеСтроки.Количество() > 0 Тогда
		ЗаполнитьДатуОтгрузки(Элементы.Товары.ВыделенныеСтроки);
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе не выбраны строки для заполнения. Дата отгрузки не будет заполнена.'");
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	СписокКнопок = Новый СписокЗначений();
	СписокКнопок.Добавить("Изменить", НСтр("ru = 'Изменить'"));
	СписокКнопок.Добавить("НеИзменять", НСтр("ru = 'Не изменять'"));
	
	ОтветНаВопрос = Вопрос(НСтр("ru = 'Сформированные документы будут заменены. Изменить реквизиты текущей продажи?'"), СписокКнопок);
	
	Если ОтветНаВопрос = "НеИзменять" Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьТолькоПросмотрЭлементовФормы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СостояниеОбеспечения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заказ", Объект.Ссылка);
	ПараметрыФормы.Вставить("Склад", Объект.Склад);
	ПараметрыФормы.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыФормы.Вставить("АдресТовары", ПоместитьТоварыВоВременноеХранилище());
	ПараметрыФормы.Вставить("ТолькоПросмотр", ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("НеОтгружатьЧастями", Объект.НеОтгружатьЧастями);
	ПараметрыФормы.Вставить("РассчитатьБезЗаказа", Истина);
	
	ОткрытьФорму("Обработка.СостояниеОбеспечения.Форма.СостояниеОбеспеченияЗаказа", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДатуОтгрузки(Команда)
	
	НеОтгружатьЧастямиПриИзмененииСервер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания()
	
	ПолучитьИнформациюОТовареНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыДругогоКачества(Команда)
	
	ТоварыДругогоКачестваНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюНоменклатуру(Команда)
		
	Отказ = Истина;
	
	СтруктураПараметров = Новый Структура("Родитель, ВидНоменклатуры, АдресТаблицыПараметров, АдресТаблицыСопостовления");
	
	Если ИспользоватьФильтры Тогда
		
		Если ВариантНавигации = "ПоСвойствам" Тогда
			
			Если ЗначениеЗаполнено(ВидНоменклатуры) Тогда
				
				СтруктураАдресовТаблиц = АдресТаблицПараметровДереваОтборовНаСервере();
				
				СтруктураПараметров.АдресТаблицыПараметров = СтруктураАдресовТаблиц.АдресТаблицыПараметров;
				СтруктураПараметров.АдресТаблицыСопостовления = СтруктураАдресовТаблиц.АдресТаблицыСопостовления;
				
				СтруктураПараметров.ВидНоменклатуры = ВидНоменклатуры;

			КонецЕсли;
			
		Иначе
			
			СтруктураПараметров.Родитель = ?(ТекущаяИерархияНоменклатуры = Неопределено, ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
			ТекущаяИерархияНоменклатуры);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОткрытьФорму("Справочник.Номенклатура.Форма.ПомощникНового",  СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюХарактеристику(Команда)
	
	ПараметрыФормы = Новый Структура("Владелец, ВидНоменклатуры, АдресТаблицы");
	
	Если ИспользоватьФильтры
		И ЗначениеЗаполнено(ВидНоменклатуры)
		И ДеревоОтборов.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ПараметрыФормы.АдресТаблицы    = АдресТаблицыПараметровДереваОтборовНаСервере();
		ПараметрыФормы.ВидНоменклатуры = ТекущаяСтрокаНоменклатуры.ВидНоменклатуры;
		
	КонецЕсли;
	
	ПараметрыФормы.Владелец = ВладелецХарактеристик();
	
	ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ПомощникНового", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтборыПоСвойствам(Команда)
	
	СброситьОтборыПоСвойствамНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнитьМногооборотнойТарой(Команда)
	
	ИменаПолей = ИменяПолейПодбораМногооборотнойТары(Объект.ВариантОформленияДокументов);
	МногооборотнаяТараКлиент.ПодобратьМногооборотнуюТару(
		ЭтаФорма,
		"Товары",
		ИменаПолей);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Подборы и обработка проверки количества

&НаСервере
Функция ДобавитьВКорзинуНаСервере(СтруктураПараметры, НовыеСтроки)
	
	ТекстОповещенияИтог = "";
	
	Для Каждого НоваяСтрока Из НовыеСтроки Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", СтруктураПараметры.Номенклатура);
		Отбор.Вставить("Характеристика", СтруктураПараметры.Характеристика);
		Отбор.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
		Отбор.Вставить("Упаковка", НоваяСтрока.Упаковка);
		Отбор.Вставить("Цена", НоваяСтрока.Цена);
		Отбор.Вставить("ВидЦены", НоваяСтрока.ВидЦены);
		Отбор.Вставить("Склад", НоваяСтрока.Склад);
		Отбор.Вставить("ДатаОтгрузки", НоваяСтрока.ДатаОтгрузки);
		Отбор.Вставить("СрокПоставки", СтруктураПараметры.СрокПоставки);
		Отбор.Вставить("ПроцентРучнойСкидки",НоваяСтрока.ПроцентРучнойСкидки);
		
		СтруктураДействий = Новый Структура;
		
		РезультатПоиска = Объект.Товары.НайтиСтроки(Отбор);
		
		Если РезультатПоиска.Количество() = 0 Тогда
			
			ТекущаяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Отбор);
			СтруктураДействий.Вставить("ЗаполнитьПризнакНаличияНоменклатурыПродаваемойСовместно", ПредопределенноеЗначение("Перечисление.ВариантыАнализаНоменклатурыПродаваемойСовместно.ОптоваяТорговля"));
			
		Иначе
			
			ТекущаяСтрока = РезультатПоиска[0];
			
		КонецЕсли;
		
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.КоличествоУпаковок + НоваяСтрока.КоличествоУпаковок;
		
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
		
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");	
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
		СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
		СтруктураДействий.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
		СтруктураДействий.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
		
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, Неопределено);
		ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекущаяСтрока, Объект.ВариантОформленияДокументов);
		
		ТекстОповещения = НСтр("ru = 'Товар [Товар] стоимостью [Цена] [Валюта] в количестве [КоличествоУпаковок] [ЕдиницаИзмерения] добавлен в корзину'");
		
		ВставляемыеЗначения = Новый Структура("Товар, Цена, Валюта, ЕдиницаИзмерения, КоличествоУпаковок");
		
		ВставляемыеЗначения.Товар = Строка(ТекущаяСтрока.Номенклатура) + ?(ЗначениеЗаполнено(СтруктураПараметры.Характеристика)," ("+СтруктураПараметры.Характеристика+")","");
		ВставляемыеЗначения.Цена = ТекущаяСтрока.Цена;
		ВставляемыеЗначения.Валюта = Объект.Валюта;
		ВставляемыеЗначения.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(НоваяСтрока.Упаковка),НоваяСтрока.Упаковка,НСтр("ru = 'ед.'"));
		ВставляемыеЗначения.КоличествоУпаковок = НоваяСтрока.КоличествоУпаковок;
		
		ТекстОповещения = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ТекстОповещения, ВставляемыеЗначения);
		
	КонецЦикла;
	
	// Активизируем текущую строку табличной части.
	Если НовыеСтроки.Количество() > 0 Тогда
		Элементы.Товары.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьЗависимыеРеквизитыФормыСервер();
	
	ПриИзмененииКорзиныНаСервере();
	
	Возврат ТекстОповещения;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВКорзину(СтруктураПараметры)
	
	НовыеСтроки = Новый Массив;
	
	Если ЗапрашиватьКоличество Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура", СтруктураПараметры.Номенклатура);
		ПараметрыФормы.Вставить("Характеристика", СтруктураПараметры.Характеристика);
		ПараметрыФормы.Вставить("ВидЦены", СтруктураПараметры.ВидЦены);
		ПараметрыФормы.Вставить("Упаковка", СтруктураПараметры.Упаковка);
		ПараметрыФормы.Вставить("Цена", СтруктураПараметры.Цена);
		ПараметрыФормы.Вставить("Дата", Объект.Дата);
		ПараметрыФормы.Вставить("Валюта", Объект.Валюта);
		ПараметрыФормы.Вставить("СкрытьЦену", Ложь);
		ПараметрыФормы.Вставить("РедактироватьЦену", Истина);
		ПараметрыФормы.Вставить("РедактироватьВидЦены", Истина);
		ПараметрыФормы.Вставить("Склад", СтруктураПараметры.Склад);
		ПараметрыФормы.Вставить("Склады", Склады.ВыгрузитьЗначения());
		ПараметрыФормы.Вставить("ДатаОтгрузки", СтруктураПараметры.ДатаОтгрузки);
		ПараметрыФормы.Вставить("ЭтоУслуга", СтруктураПараметры.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга"));
		ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки", Истина);
		ПараметрыФормы.Вставить("ИспользоватьСкладыВТабличнойЧасти", Истина);
		ПараметрыФормы.Вставить("ЦенаВключаетНДС", Объект.ЦенаВключаетНДС);
		ПараметрыФормы.Вставить("МаксПроцентРучнойСкидки", МаксПроцентРучнойСкидки);
 		ПараметрыФормы.Вставить("СкрыватьРучныеСкидки", Объект.ХозяйственнаяОперация =  ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию"));
		
		МассивСтруктур = ОткрытьФормуМодально("Обработка.ПомощникПродаж.Форма.ЗапросКоличества", ПараметрыФормы, ЭтаФорма);
		
		Если МассивСтруктур <> Неопределено Тогда
			
			Для Каждого ЭлементМассива Из МассивСтруктур Цикл
				
				НоваяСтрока = Новый Структура;
				
				НоваяСтрока.Вставить("Номенклатура", СтруктураПараметры.Номенклатура);
				НоваяСтрока.Вставить("Характеристика", СтруктураПараметры.Характеристика);
				НоваяСтрока.Вставить("ХарактеристикиИспользуются", СтруктураПараметры.ХарактеристикиИспользуются);
				НоваяСтрока.Вставить("Упаковка", ЭлементМассива.Упаковка);
				НоваяСтрока.Вставить("Цена", ЭлементМассива.Цена);
				НоваяСтрока.Вставить("ВидЦены", ЭлементМассива.ВидЦены);
				НоваяСтрока.Вставить("Склад", ЭлементМассива.Склад);
				НоваяСтрока.Вставить("ДатаОтгрузки", ЭлементМассива.ДатаОтгрузки);
				НоваяСтрока.Вставить("КоличествоУпаковок", ЭлементМассива.КоличествоУпаковок);
				НоваяСтрока.Вставить("СрокПоставки", СтруктураПараметры.СрокПоставки);
				НоваяСтрока.Вставить("ПроцентРучнойСкидки", ЭлементМассива.ПроцентРучнойСкидки);
				
				НовыеСтроки.Добавить(НоваяСтрока);
				
			КонецЦикла;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтруктураПараметры);
		Если ПараметрыТовара.Упаковка.Пустая() Тогда 
			ПараметрыТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(ПараметрыТовара.Номенклатура);
		КонецЕсли;
		НовыеСтроки.Добавить(ПараметрыТовара);
		
	КонецЕсли;
	
	ТекстОповещения = ДобавитьВКорзинуНаСервере(СтруктураПараметры, НовыеСтроки);
	СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций,  Объект.Товары.Количество());
	ПоказатьОповещениеПользователя(НСтр("ru = 'Товар добавлен в корзину'"), , ТекстОповещения);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) И Элементы.СтраницыСписокНоменклатуры.ТекущаяСтраница = Элементы.ГруппаНоменклатура Тогда
		ТекущийЭлемент = Элементы.СтрокаПоиска;
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	МногооборотнаяТараКлиент.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ценообразование и скидки

&НаСервере
Функция ЗаполнитьЦеныПоСоглашениюСервер()
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
		),
		СтруктураДействий);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныПоВидуЦенСервер(ВидЦен)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			"Цена, ВидЦены"
		),
		СтруктураДействий);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Функция ЗаполнитьЦеныВыделенныхСтрокПоВидуЦенСервер(ВидЦен)
	
	МассивСтрок = Новый Массив;
	Для Каждого Строка Из Элементы.Товары.ВыделенныеСтроки Цикл
		МассивСтрок.Добавить(Объект.Товары.НайтиПоИдентификатору(Строка));
	КонецЦикла;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействий.Вставить("ОчиститьАвтоматическуюСкидку");
	
	ЦеныРассчитаны = ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		МассивСтрок, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, ВидЦены, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			ВидЦен,
			"Цена, ВидЦены"
		),
		СтруктураДействий
	);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	Возврат ЦеныРассчитаны;
	
КонецФункции

&НаСервере
Процедура РассчитатьСкидкиБезПримененияКОбъекту()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция РассчитатьСкидкиНаценкиНаСервере(СтруктураПараметры, ВзятьИзВременногоХранилища = Ложь)
	
	Если ВзятьИзВременногоХранилища Тогда
		ПримененныеСкидки = ПолучитьИзВременногоХранилища(АдресПримененныхСкидокВоВременномХранилище);
		СкидкиНаценкиСервер.ПрименитьРезультатРасчета(Объект, ПримененныеСкидки);
	Иначе
		ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;

	Объект.СкидкиРассчитаны = Истина;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
	СтруктураСообщений = СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
	Возврат СтруктураСообщений;
	
КонецФункции

&НаСервере
Процедура НазначитьРучнуюСкидкуНаСервере(СуммаСкидкиНаценки, Знач ВыделенныеСтроки = Неопределено, АдресВоВременномХранилище)
	
	Если СуммаСкидкиНаценки <> 0 Тогда
		СкидкиНаценкиСервер.НазначитьРучнуюСкидку(Объект, "Товары", СуммаСкидкиНаценки, Истина, Ложь, Истина,, ВыделенныеСтроки, АдресВоВременномХранилище);
	Иначе
		СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьПредварительныйРасчетСкидокНаСервере()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Истина);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	Возврат ПоместитьВоВременноеХранилище(СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры), УникальныйИдентификатор);
	
КонецФункции

Функция ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект) Экспорт
	
	СтруктураЗаполненияЦены = Новый Структура;
	СтруктураЗаполненияЦены.Вставить("Дата",       Объект.Дата);
	СтруктураЗаполненияЦены.Вставить("Валюта",     Объект.Валюта);
	СтруктураЗаполненияЦены.Вставить("Соглашение", Объект.Соглашение);
	
	Возврат СтруктураЗаполненияЦены;
	
КонецФункции

&НаСервере
Функция АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ТолькоВыделенныеСтроки)
	
	Возврат СкидкиНаценкиСервер.АдресДанныхДляРасчетаРучныхСкидокВоВременномХранилище(ЭтаФорма, "Товары", УникальныйИдентификатор, ТолькоВыделенныеСтроки);
	
КонецФункции

&НаСервере
Процедура ОтменитьРучныеСкидкиНаСервере()
	
	СкидкиНаценкиСервер.ОтменитьРучныеСкидки(Объект, "Товары", Истина, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СчитанаКартаЛояльности(КартаЛояльности)
	
	ДанныеКартыЛояльности = КартыЛояльностиВызовСервера.ПолучитьДанныеКартыЛояльности(КартаЛояльности);
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Ссылка) Тогда
		
		Если Не ДанныеКартыЛояльности.ПартнерДоступен Тогда
			Предупреждение(НСтр("ru = 'Нет доступа к партнеру-владельцу карты лояльности.'"));
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) Тогда // Обезличенная карта
			
			СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
			Модифицированность = Истина;
			Объект.КартаЛояльности   = КартаЛояльности;
			
			Возврат;
			
		ИначеЕсли Объект.Партнер <> ДанныеКартыЛояльности.Партнер Тогда // Партнер в карте отличается от партнера в погмощнике.
			
			Если ЗначениеЗаполнено(Объект.Партнер) Тогда
				Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Карта лояльности принадлежит партнеру ""%1"". Изменить партнера в помощнике?'"), ДанныеКартыЛояльности.Партнер), РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		Иначе // Партнер в документе равен партнеру в карте.
			
			ВопросОбИзмененииКонтрагента = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
				И ЗначениеЗаполнено(Объект.Контрагент) И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент Тогда
				ВопросОбИзмененииКонтрагента = Истина;
			КонецЕсли;
			
			ВопросОбИзмененииСоглашения = Ложь;
			Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
				И ЗначениеЗаполнено(Объект.Соглашение) И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение Тогда
				ВопросОбИзмененииСоглашения = Истина;
			КонецЕсли;
			
			Если ВопросОбИзмененииКонтрагента Или ВопросОбИзмененииСоглашения Тогда
				
				Если ВопросОбИзмененииКонтрагента И ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности заданы контрагент ""%1"" и соглашение ""%2"". Применить карту лояльности и подставить в помощник контрагента ""%1"" и соглашение ""%2""?'");
				ИначеЕсли ВопросОбИзмененииКонтрагента Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задан контрагент ""%1"". Применить карту лояльности и подставить в помощник контрагента ""%1""?'");
				ИначеЕсли ВопросОбИзмененииСоглашения Тогда
					ТекстВопроса = НСтр("ru = 'Для карты лояльности задано соглашение ""%2"". Применить карту лояльности и подставить в помощник соглашение ""%2""?'");
				КонецЕсли;
				
				Ответ = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстВопроса, ДанныеКартыЛояльности.Контрагент, ДанныеКартыЛояльности.Соглашение), РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
		Модифицированность = Истина;
		Объект.КартаЛояльности   = КартаЛояльности;
		СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчитанаКартаЛояльностиНаСервере(ДанныеКартыЛояльности)
	
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Партнер) И ДанныеКартыЛояльности.Партнер <> Объект.Партнер Тогда
		Объект.Партнер = ДанныеКартыЛояльности.Партнер;
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		Объект.Соглашение = Справочники.СоглашенияСКлиентами.ПустаяСсылка();
		ПриИзмененииПартнераСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Соглашение)
		И ДанныеКартыЛояльности.Соглашение <> Объект.Соглашение
		И ДанныеКартыЛояльности.СоглашениеДоступно Тогда
		Объект.Соглашение = ДанныеКартыЛояльности.Соглашение;
		ПриИзмененииСоглашенияСервер();
	КонецЕсли;
	Если ЗначениеЗаполнено(ДанныеКартыЛояльности.Контрагент)
		И ДанныеКартыЛояльности.Контрагент <> Объект.Контрагент
		И ДанныеКартыЛояльности.КонтрагентДоступен Тогда
		Объект.Контрагент = ДанныеКартыЛояльности.Контрагент;
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолученыСообщения(Сообщения)
	
	СкидкиНаценкиСервер.СохранитьОтработанныеСообщения(Объект, Сообщения);
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	
КонецПроцедуры

&НаСервере
Функция СкидкиИзменились()
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Ложь);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Истина);
	СтруктураПараметры.Вставить("УправляемыеСкидки", УправляемыеСкидки);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(Объект, СтруктураПараметры);
	
	СкидкиИзменились = Ложь;
	
	КоличествоСтрок = ПримененныеСкидки.ТаблицаСкидкиНаценки.Количество();
	Если КоличествоСтрок <> Объект.СкидкиНаценки.Количество() Тогда
		СкидкиИзменились = Истина;
	Иначе
		
		Если Объект.Товары.Итог("СуммаАвтоматическойСкидки") <> Объект.СкидкиНаценки.Итог("Сумма") Тогда
			СкидкиИзменились = Истина;
		КонецЕсли;
		
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			Если    Объект.СкидкиНаценки[НомерСтроки-1].Сумма <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].Сумма
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].КлючСвязи <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].КлючСвязи
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].СкидкаНаценка <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].СкидкаНаценка
				ИЛИ Объект.СкидкиНаценки[НомерСтроки-1].НапомнитьПозже <> ПримененныеСкидки.ТаблицаСкидкиНаценки[НомерСтроки-1].НапомнитьПозже Тогда
				СкидкиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СкидкиИзменились Тогда
		АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат СкидкиИзменились;
	
КонецФункции

&НаКлиенте
Процедура ПрименитьИзмененияСкидокНаценокНаКлиенте()
	
	СтруктураСообщений = РассчитатьСкидкиНаценкиНаСервере(Неопределено, Истина);
	Если СтруктураСообщений.Сообщения.Количество() > 0 И СтруктураСообщений.АвтоматическиОткрывать Тогда
		ОткрытьФормуМодально("ОбщаяФорма.СообщенияСкидокНаценок", СтруктураСообщений, ЭтаФорма);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Скидки (наценки)'"),
		,
		НСтр("ru = 'Скидки (наценки) рассчитаны'"),
		БиблиотекаКартинок.Информация32
	);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруСообщений()
	
	Возврат СкидкиНаценкиСервер.ПолучитьСтруктуруСообщений(Объект);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьСообщения(Команда)
	
	СкидкиНаценкиКлиент.ОткрытьФормуСообщений(ПолучитьСтруктуруСообщений(), ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор, ЭтоРеализация)
	ПараметрыУказанияСерий = ?(ЭтоРеализация, ПараметрыУказанияСерий.Реализация, ПараметрыУказанияСерий.Заказ);
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма, РеквизитФормыВЗначение("Объект").Метаданные());
КонецФункции

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ЭтоРеализация)
	ПараметрыУказанияСерийПараметр = ?(ЭтоРеализация, ПараметрыУказанияСерий.Реализация, ПараметрыУказанияСерий.Заказ);
	НоменклатураСервер.ОбработатьУказаниеСерий(Объект,ПараметрыУказанияСерийПараметр,ПараметрыФормыУказанияСерий);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	РазделениеПоВариантамПродажи = Истина;
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект,
				ОпределитьПараметрыСерий(ТекущаяСтрокаИдентификатор), ТекущаяСтрокаИдентификатор, КэшированныеЗначения, РазделениеПоВариантамПродажи);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий()
	СтрокиЗаказа = Объект.Товары.НайтиСтроки(Новый Структура("ВариантОформленияПродажи", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента));
	СтрокиКоммПредложения = Объект.Товары.НайтиСтроки(Новый Структура("ВариантОформленияПродажи", Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение));
	
	Элементы.ТоварыСтатусУказанияСерий.Видимость   = ПараметрыУказанияСерий.Реализация.ИспользоватьСерииНоменклатуры 
		Или ПараметрыУказанияСерий.Заказ.ИспользоватьСерииНоменклатуры
		И СтрокиКоммПредложения.Количество = 0;
	Элементы.ТоварыУказатьСерии.Видимость = ПараметрыУказанияСерий.Реализация.ИспользоватьСерииНоменклатуры
		Или ПараметрыУказанияСерий.Заказ.ИспользоватьСерииНоменклатуры
		И СтрокиКоммПредложения.Количество = 0;
	Элементы.ТоварыОтменитьУказаниеСерий.Видимость = ПараметрыУказанияСерий.Реализация.ИспользоватьСерииНоменклатуры
		Или ПараметрыУказанияСерий.Заказ.ИспользоватьСерииНоменклатуры
		И СтрокиЗаказа.Количество = 0;
	
	Элементы.ТоварыКонтекстноеМенюУказатьСерии.Видимость = ПараметрыУказанияСерий.Реализация.ИспользоватьСерииНоменклатуры
		Или ПараметрыУказанияСерий.Заказ.ИспользоватьСерииНоменклатуры
		И СтрокиКоммПредложения.Количество = 0;
	Элементы.ТоварыКонтекстноеМенюОтменитьУказаниеСерий.Видимость = ПараметрыУказанияСерий.Реализация.ИспользоватьСерииНоменклатуры
		Или ПараметрыУказанияСерий.Заказ.ИспользоватьСерииНоменклатуры
		И СтрокиЗаказа.Количество = 0;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	
	ИзменятьКоличество = Истина;
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", Новый Структура("Номенклатура", "ХарактеристикиИспользуются"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьСодержание", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСодержанияУслугиВСтрокеТЧ(Объект, Ложь));
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками,Объект);
	
	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками,Объект);
	
	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий.Реализация;
	СтруктураДействий.ИзменятьКоличество                     = ИзменятьКоличество;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если ИзменятьКоличество Тогда
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		СкидкиНаценкиКлиент.СброситьФлагСкидкиРассчитаны(ЭтаФорма);
	КонецЕсли;
		
	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание документов

&НаСервере
Функция ЗаписатьКоммерческоеПредложение(МассивНайденныхДокументов, Отказ)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.КоммерческоеПредложениеКлиенту,
		Тип("ДокументСсылка.КоммерческоеПредложениеКлиенту"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы
	);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	
	ДокументОбъект.Статус = Объект.СтатусКоммерческогоПредложения;
	ДокументОбъект.Товары.Загрузить(Объект.Товары.Выгрузить());
	
	Для Каждого ТекСтрока Из ДокументОбъект.Товары Цикл
		ТекСтрока.Активность = Истина;
	КонецЦикла;
		
	СрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Соглашение, "ДатаОкончанияДействия");
	Если СрокДействия >= ДокументОбъект.Дата Тогда
		ДокументОбъект.СрокДействия = СрокДействия;
	КонецЕсли;
	
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыКоммерческогоПредложения.Выгрузить());
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				1
			);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				1
			);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Объект.Документы.Очистить();
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьЗаказ(МассивНайденныхДокументов, Отказ, БезПроведения)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.ЗаказКлиента,
		Тип("ДокументСсылка.ЗаказКлиента"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы
	);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		
		ДокументОбъект.Статус = Объект.СтатусЗаказаКлиента;
		ДокументОбъект.Серии.Загрузить(Объект.Серии.Выгрузить());
		
	Иначе
		
		ПараметрыОтбораПродажа = Новый Структура("ВариантОформления", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг);
		ПараметрыОтбораЗаказ = Новый Структура("ВариантОформления", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента);
		
		СтрокиПродажи = Объект.Товары.НайтиСтроки(ПараметрыОтбораПродажа);
		СтрокиЗаказ = Объект.Товары.НайтиСтроки(ПараметрыОтбораЗаказ);
		
		РеализацияБезПроведения = Объект.СоздаватьПриходныйКассовыйОрдер И
				Объект.СуммаПредоплаты > 0 И
				Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		
		Если СтрокиЗаказ.Количество() = 0 И НЕ ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты") И НЕ РеализацияБезПроведения Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт;
		ИначеЕсли СтрокиПродажи.Количество() > 0 Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.КОтгрузке;
		Иначе
			ДокументОбъект.Статус = Объект.СтатусЗаказаКлиента;
		КонецЕсли;
		
		ДокументОбъект.Серии.Загрузить(Объект.Серии.Выгрузить(Объект.Серии.НайтиСтроки(ПараметрыОтбораЗаказ)));
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ДокументОбъект.Серии Цикл
		ТекСтрока.УказыватьСерии = Истина;
	КонецЦикла;
	
	ДокументОбъект.Приоритет = Перечисления.Приоритеты.Средний;
	
	КодСтроки = 1;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ТекСтрока.КодСтроки = КодСтроки;
		КодСтроки = КодСтроки + 1;
		Если ТекСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента И ТекСтрока.СтатусУказанияСерий > 0 Тогда
			ТекСтрока.УказыватьСерии = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.Товары.Загрузить(Объект.Товары.Выгрузить());
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыЗаказа.Выгрузить());
	
	ПараметрыУказанияСерийЗаказ = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ЗаказКлиента);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерийЗаказ);
	
	Попытка
		Если БезПроведения Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				2
			);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				2
			);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Объект.Документы.Очистить();
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьРеализацию(МассивНайденныхДокументов, Отказ, БезПроведения = Ложь)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.РеализацияТоваровУслуг,
		Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы
	);
	
	ДокументОбъект.РеализацияПоЗаказам = Ложь;
	ДокументОбъект.ЗаказКлиента = Неопределено;
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
	ДокументОбъект.БанковскийСчетОрганизации = Объект.БанковскийСчет;
	
	Если ДокументОбъект.ВернутьМногооборотнуюТару Тогда
		
		ДокументОбъект.ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ДокументОбъект.Дата,
			Объект.СрокВозвратаМногооборотнойТары,
			ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Соглашение, "РассчитыватьДатуВозвратаТарыПоКалендарю"));
			
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
		Если ДокументОбъект.СуммаПредоплаты = 0 И Объект.СтатусРеализацииТоваровУслуг = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке;
		Иначе
			ДокументОбъект.Статус = Объект.СтатусРеализацииТоваровУслуг;
		КонецЕсли;
	Иначе
		ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <>  Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Если ЗначениеЗаполнено(Объект.ЭтапыГрафикаОплаты) Тогда
			ТаблицаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Выгрузить();
			ТаблицаЭтаповОплаты.Сортировать("ДатаПлатежа Убыв");
			ДокументОбъект.ДатаПлатежа = ТаблицаЭтаповОплаты.Получить(0).ДатаПлатежа;
		Иначе
			ДокументОбъект.ДатаПлатежа = ДокументОбъект.Дата;
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(Объект.Товары.Выгрузить());
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.Серии.Загрузить(Объект.Серии.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыРеализации.Выгрузить());
	
	ПараметрыУказанияСерийРеализация = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РеализацияТоваровУслуг);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерийРеализация);
	
	Попытка
		Если БезПроведения Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				3
			);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				3
			);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Объект.Документы.Очистить();
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьРеализациюПоЗаказу(МассивНайденныхДокументов, ОснованиеОбъект, Товары, Склад, Отказ, БезПроведения = Ложь)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.РеализацияТоваровУслуг,
		Тип("ДокументСсылка.РеализацияТоваровУслуг"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы
	);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.Склад = Склад;
	ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
	ДокументОбъект.ЗаказКлиента = ОснованиеОбъект.Ссылка;
	ДокументОбъект.БанковскийСчетОрганизации = Объект.БанковскийСчет;
	
	Если ДокументОбъект.ВернутьМногооборотнуюТару Тогда
		
		ДокументОбъект.ДатаВозвратаМногооборотнойТары = МногооборотнаяТараСервер.РассчитатьДатуВозвратаМногооборотнойТары(
			ДокументОбъект.Дата,
			Объект.СрокВозвратаМногооборотнойТары,
			ОбщегоНазначения.ПолучитьЗначениеРеквизита(Объект.Соглашение, "РассчитыватьДатуВозвратаТарыПоКалендарю"));
			
	КонецЕсли;
	
	Если Товары.Итог("СуммаСНДС") <> Объект.Товары.Итог("СуммаСНДС") И Объект.Товары.Итог("СуммаСНДС") <> 0 Тогда
		ДокументОбъект.СуммаПредоплаты = Объект.СуммаПредоплаты * Товары.Итог("СуммаСНДС") / Объект.Товары.Итог("СуммаСНДС");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг") Тогда
		Если ДокументОбъект.СуммаПредоплаты = 0 И Объект.СтатусРеализацииТоваровУслуг = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате Тогда
			ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке;
		Иначе
			ДокументОбъект.Статус = Объект.СтатусРеализацииТоваровУслуг;
		КонецЕсли;
	Иначе
		ДокументОбъект.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	КонецЕсли;
	ДокументОбъект.РеализацияПоЗаказам = Истина;
	
	Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
		И Объект.ХозяйственнаяОперация <>  Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		ДокументОбъект.ДатаПлатежа = ДокументОбъект.Дата;
		
	КонецЕсли;
	
	ДокументОбъект.Товары.Загрузить(Товары);
	Для Каждого ТекСтрока Из ДокументОбъект.Товары Цикл
		ТекСтрока.ЗаказКлиента = ДокументОбъект.ЗаказКлиента;
		ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.СуммаСНДС;
	КонецЦикла;
	
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	Для Каждого СтрокаСкидкиЗаказа Из Объект.СкидкиНаценки Цикл
		Если ДокументОбъект.Товары.Найти(СтрокаСкидкиЗаказа.КлючСвязи, "КлючСвязи") <> Неопределено Тогда
			СтрокаСкидки = ДокументОбъект.СкидкиНаценки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтбораПродажа = Новый Структура("ВариантОформления", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг);
	ДокументОбъект.Серии.Загрузить(Объект.Серии.Выгрузить(Объект.Серии.НайтиСтроки(ПараметрыОтбораПродажа)));
	
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыРеализации.Выгрузить());
	
	ПараметрыУказанияСерийРеализация = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.РеализацияТоваровУслуг);
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект, ПараметрыУказанияСерийРеализация);
	
	Попытка
		Если БезПроведения Тогда
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				3
			);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				3
			);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Объект.Документы.Очистить();
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьАкт(МассивНайденныхДокументов, Отказ)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.АктВыполненныхРабот,
		Тип("ДокументСсылка.АктВыполненныхРабот"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы
	);
	
	ДокументОбъект.АктПоЗаказам = Ложь;
	ДокументОбъект.ЗаказКлиента = Неопределено;
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
	ДокументОбъект.БанковскийСчетОрганизации = Объект.БанковскийСчет;
	
	Если ЗначениеЗаполнено(Объект.ЭтапыГрафикаОплаты) Тогда
		ТаблицаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Выгрузить();
		ТаблицаЭтаповОплаты.Сортировать("ДатаПлатежа Убыв");
		ДокументОбъект.ДатаПлатежа = ТаблицаЭтаповОплаты.Получить(0).ДатаПлатежа;
	Иначе
		ДокументОбъект.ДатаПлатежа = ДокументОбъект.Дата;
	КонецЕсли;
	
	ДокументОбъект.Услуги.Загрузить(Объект.Товары.Выгрузить());
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыАкта.Выгрузить());
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				4
			);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				4
			);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Объект.Документы.Очистить();
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьАктПоЗаказу(МассивНайденныхДокументов, ОснованиеОбъект, Работы, Отказ)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.АктВыполненныхРабот,
		Тип("ДокументСсылка.АктВыполненныхРабот"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы
	);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.ВалютаВзаиморасчетов = ДокументОбъект.Валюта;
	ДокументОбъект.ЗаказКлиента = ОснованиеОбъект.Ссылка;
	ДокументОбъект.АктПоЗаказам = Истина;
	ДокументОбъект.БанковскийСчетОрганизации = Объект.БанковскийСчет;
	ДокументОбъект.Услуги.Загрузить(Работы);
	
	Для Каждого ТекСтрока Из ДокументОбъект.Услуги Цикл
		ТекСтрока.ЗаказКлиента = ДокументОбъект.ЗаказКлиента;
		ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.СуммаСНДС;
	КонецЦикла;
	
	ДокументОбъект.СкидкиНаценки.Загрузить(Объект.СкидкиНаценки.Выгрузить());
	ДокументОбъект.ДополнительныеРеквизиты.Загрузить(Объект.ДополнительныеРеквизитыАкта.Выгрузить());
	
	Для Каждого СтрокаСкидкиЗаказа Из Объект.СкидкиНаценки Цикл
		Если ДокументОбъект.Услуги.Найти(ТекСтрока.КлючСвязи, "КлючСвязи") <> Неопределено Тогда
			СтрокаСкидки = ДокументОбъект.СкидкиНаценки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСкидки, СтрокаСкидкиЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				4
			);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				4
			);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Объект.Документы.Очистить();
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьСчетНаОплату(МассивНайденныхДокументов, ОснованиеОбъект, Отказ)
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.СчетНаОплатуКлиенту,
		Тип("ДокументСсылка.СчетНаОплатуКлиенту"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы
	);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.ДокументОснование = ОснованиеОбъект.Ссылка;
	ДокументОбъект.ЭтапыГрафикаОплаты.Загрузить(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	ДокументОбъект.НазначениеПлатежа = Документы.СчетНаОплатуКлиенту.СформироватьНазначениеПлатежа(
		ОснованиеОбъект.Номер,
		Неопределено,
		ОснованиеОбъект.Ссылка
	);
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				6
			);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				6
			);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Объект.Документы.Очистить();
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьПриходныйКассовыйОрдер(МассивНайденныхДокументов, ОснованиеОбъект, Отказ)
	
	// Приходный кассовый ордер создается только если
	//  в этапах графика оплаты есть этапы на дату оформления продажи
	//  или если для реализации указана сумма предоплаты
	СуммаПКО = 0;
	Если ТипЗнч(ОснованиеОбъект) = Тип("Массив") Тогда
		Для Каждого ПродажаОбъект Из ОснованиеОбъект Цикл
			СуммаПКО = СуммаПКО + ПродажаОбъект.СуммаПредоплаты;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОснованиеОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		СуммаПКО = ОснованиеОбъект.СуммаПредоплаты;
	Иначе
		НайденныеСтроки = Объект.ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("ДатаПлатежа", НачалоДня(Объект.Дата)));
		Если НайденныеСтроки.Количество() = 0 Тогда
			Возврат Неопределено;
		Иначе
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				СуммаПКО = СуммаПКО + ТекСтрока.СуммаПлатежа;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СуммаПКО = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.ПриходныйКассовыйОрдер,
		Тип("ДокументСсылка.ПриходныйКассовыйОрдер"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы
	);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	Если ТипЗнч(ОснованиеОбъект) <> Тип("Массив") Тогда
		ДокументОбъект.ДокументОснование = ОснованиеОбъект.Ссылка;
	КонецЕсли;
	РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Объект.Контрагент,
		"Наименование,НаименованиеПолное"
	);
	
	Если Не ПустаяСтрока(РеквизитыКонтрагента.НаименованиеПолное) Тогда
		ДокументОбъект.ПринятоОт = РеквизитыКонтрагента.НаименованиеПолное;
	Иначе
		ДокументОбъект.ПринятоОт = РеквизитыКонтрагента.Наименование;
	КонецЕсли;
	
	ДокументОбъект.Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(ДокументОбъект.Касса).Валюта;
	ДокументОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента;
	ДокументОбъект.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПоступлениеОплатыОтКлиента;
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	Если ТипЗнч(ОснованиеОбъект) = Тип("Массив") Тогда
		
		Для Каждого ПродажаОбъект Из ОснованиеОбъект Цикл
			
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			НоваяСтрока.Партнер              = ПродажаОбъект.Партнер;
			НоваяСтрока.Заказ                = ПродажаОбъект.Ссылка;
			НоваяСтрока.ОснованиеПлатежа     = ПродажаОбъект.Ссылка;
			НоваяСтрока.ВалютаВзаиморасчетов = ПродажаОбъект.Валюта;
			НоваяСтрока.СуммаВзаиморасчетов  = ПродажаОбъект.СуммаПредоплаты;
			
		КонецЦикла;
		
	Иначе
		
		НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.Партнер = ОснованиеОбъект.Партнер;
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов Тогда
			НоваяСтрока.Заказ = ОснованиеОбъект.Договор;
		Иначе
			НоваяСтрока.Заказ = ОснованиеОбъект.Ссылка;
		КонецЕсли;
		
		НоваяСтрока.ОснованиеПлатежа     = НоваяСтрока.Заказ;
		НоваяСтрока.ВалютаВзаиморасчетов = ОснованиеОбъект.Валюта;
		НоваяСтрока.СуммаВзаиморасчетов  = СуммаПКО;
		
	КонецЕсли;
	
	Коэффициенты = РаботаСКурсамивалютУТ.ПолучитьКоэффициентыПересчетаВалюты(ДокументОбъект.Валюта, Объект.Валюта, ТекущаяДата());
	НоваяСтрока.Сумма = ?(Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов <> 0, НоваяСтрока.СуммаВзаиморасчетов / Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов, 0);
	
	ДокументОбъект.СуммаДокумента = ДокументОбъект.РасшифровкаПлатежа.Итог("Сумма");
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				7
			);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				ДокументОбъект.СуммаДокумента,
				ДокументОбъект.Валюта,
				7
			);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Объект.Документы.Очистить();
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Функция ЗаписатьСчетФактуру(МассивНайденныхДокументов, ОснованиеОбъект, Отказ)
	
	НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(ОснованиеОбъект.Организация, Неопределено, ОснованиеОбъект.Дата);
	
	Если НалогообложениеНДС  <> Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СозданНовыйДокумент = Ложь;
	СтрокаТаблицы = Неопределено;
	
	ДокументОбъект = НайтиСоздатьДокумент(
		Документы.СчетФактураВыданный,
		Тип("ДокументСсылка.СчетФактураВыданный"),
		МассивНайденныхДокументов,
		СозданНовыйДокумент,
		СтрокаТаблицы
	);
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, Объект, , "Дата");
	ДокументОбъект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ДокументОбъект.ДокументОснование = ОснованиеОбъект.Ссылка;
	
	ДанныеСчетаФактуры = Новый Структура;
	ДанныеСчетаФактуры.Вставить("ДокументОснование", ОснованиеОбъект.Ссылка);
	ДанныеСчетаФактуры.Вставить("Организация",       ДокументОбъект.Организация);
	ДанныеСчетаФактуры.Вставить("Дата",              ДокументОбъект.Дата);
	ДанныеСчетаФактуры.Вставить("Выставлен",         Истина);
	ДанныеСчетаФактуры.Вставить("ДатаВыставления",   ДокументОбъект.Дата);
	ДокументОбъект.Заполнить(ДанныеСчетаФактуры);
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если СозданНовыйДокумент Тогда
			ДобавитьСтрокуВТаблицуСформированныхДокументов(
				ДокументОбъект.Ссылка,
				0,
				ДокументОбъект.Валюта,
				5
			);
			МассивНайденныхДокументов.Добавить(ДокументОбъект.Ссылка);
		ИначеЕсли СтрокаТаблицы <> Неопределено Тогда
			ОбновитьСтрокуВТаблицуСформированныхДокументов(
				СтрокаТаблицы,
				0,
				ДокументОбъект.Валюта,
				5
			);
		КонецЕсли;
	Исключение
		Отказ = Истина;
		Объект.Документы.Очистить();
	КонецПопытки;
	
	Возврат ДокументОбъект;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Создание документов

&НаСервере
Функция ЕстьСтрокиПродажиСервер()
	
	ПараметрыОтбораПродажа = Новый Структура("ВариантОформления", ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг"));
	СтрокиПродажи = Объект.Товары.НайтиСтроки(ПараметрыОтбораПродажа);
	Возврат СтрокиПродажи.Количество() > 0;
	
КонецФункции

&НаСервере
Функция СоздатьДокументыСервер()
	
	НачатьТранзакцию();
	Отказ = Ложь;
	СозданНовыйДокумент = Ложь;
	МассивНайденныхДокументов = Новый Массив();

	//////////////////////////////////////////////////////////////////////////////
	// Отмена проведения ранее созданных документов
	
	Если ДокументыСформированы Тогда
		
		МассивДокументов = Новый Массив();
		
		Для Каждого ТекСтрока Из Объект.Документы Цикл
			МассивДокументов.Добавить(ТекСтрока.ПолучитьИдентификатор());
		КонецЦикла;
		
		ПровестиОтменитьПроведениеДокументовСервер(МассивДокументов, Ложь);
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Создание коммерческого предложения
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И НЕ Отказ Тогда
		
		ЗаписатьКоммерческоеПредложение(МассивНайденныхДокументов, Отказ);
		
	//////////////////////////////////////////////////////////////////////////////
	// Создание заказа клиента
	
	ИначеЕсли (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Или
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) И НЕ Отказ Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения);
		ПараметрыОтбора.Вставить("ДатаПлатежа", НачалоДня(Объект.Дата));
		НайденныеСтрокиАванс = Объект.ЭтапыГрафикаОплаты.НайтиСтроки(ПараметрыОтбора);
		ПараметрыОтбора.Вставить("ВариантОплаты", Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки);
		ПараметрыОтбора.Вставить("ДатаПлатежа", НачалоДня(Объект.Дата));
		НайденныеСтрокиПредоплата = Объект.ЭтапыГрафикаОплаты.НайтиСтроки(ПараметрыОтбора);
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
			И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			Объект.СуммаПредоплаты = ПродажиСервер.СуммаПредоплатыПоСоглашению(
				Объект,
				Объект.ЭтапыГрафикаОплаты,
				Объект.СуммаДокумента,
				"СуммаСНДС",
				Истина
			);
			
		КонецЕсли;
		
		БезПроведения = Объект.СоздаватьПриходныйКассовыйОрдер И Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная И
							(НайденныеСтрокиПредоплата.Количество()>0 ИЛИ НайденныеСтрокиАванс.Количество()>0) И
							Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И
							Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным;
		
		ОснованиеОбъект = ЗаписатьЗаказ(МассивНайденныхДокументов, Отказ, БезПроведения);
		
		// Создание счета на оплату по заказу клиента
		Если Объект.СоздаватьСчетНаОплату И НЕ Отказ И
			Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			ЗаписатьСчетНаОплату(МассивНайденныхДокументов, ОснованиеОбъект, Отказ);
			
		КонецЕсли;
		
		// Создание приходного кассового ордера по заказу клиента
		Если Объект.СоздаватьПриходныйКассовыйОрдер И НЕ Отказ И
			Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию И 
			Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным И
			Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			
			ПКО = ЗаписатьПриходныйКассовыйОрдер(МассивНайденныхДокументов, ОснованиеОбъект, Отказ);
			Если БезПроведения И ПКО <> Неопределено Тогда
				ОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		КонецЕсли;
		
	//////////////////////////////////////////////////////////////////////////////
	// Создание реализации товаров и услуг / акта выполненных работ
	
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг И НЕ Отказ Тогда
		
		ПараметрыОтбораАкт = Новый Структура("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот);
		ПараметрыОтбораРеализация = Новый Структура("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
		
		Работы = Объект.Товары.Выгрузить(ПараметрыОтбораАкт);
		Товары = Объект.Товары.Выгрузить(ПараметрыОтбораРеализация);
		СоздаватьСчетПКО = Ложь;
		
		Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			Объект.СуммаПредоплаты = ПродажиСервер.СуммаПредоплатыПоСоглашению(
				Объект,
				Объект.ЭтапыГрафикаОплаты,
				Объект.СуммаДокумента,
				"СуммаСНДС",
				Истина
			);
		КонецЕсли;
		
		БезПроведения = Объект.СоздаватьПриходныйКассовыйОрдер И Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная И
					Объект.СуммаПредоплаты > 0 И
					Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		
		// Если только работы - все помещаем в акт выполненных работ
		Если Работы.Количество() > 0 И Товары.Количество() = 0 Тогда
			
			ОснованиеОбъект = ЗаписатьАкт(МассивНайденныхДокументов, Отказ);
			СоздаватьСчетПКО = Истина;
			
		// Если нет работ или есть товары + работы - все помещаем в реализацию товаров услуг
		Иначе
			
			ОснованиеОбъект = ЗаписатьРеализацию(МассивНайденныхДокументов, Отказ, БезПроведения);
			СоздаватьСчетПКО = (Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
			
		КонецЕсли;
		
		// Создание счета на оплату по реализации / акту
		Если Объект.СоздаватьСчетНаОплату И СоздаватьСчетПКО И НЕ Отказ Тогда
			
			ЗаписатьСчетНаОплату(МассивНайденныхДокументов, ОснованиеОбъект, Отказ);
			
		КонецЕсли;
		
		// Создание приходного кассового ордера по реализации / акту
		Если Объект.СоздаватьПриходныйКассовыйОрдер И СоздаватьСчетПКО И НЕ Отказ И
			Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			
			ПКО = ЗаписатьПриходныйКассовыйОрдер(МассивНайденныхДокументов, ОснованиеОбъект, Отказ);
			Если БезПроведения И ПКО <> Неопределено Тогда
				ОснованиеОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		КонецЕсли;
		
		// Создание счета-фактуры по реализации / акту
		Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") И НЕ Отказ Тогда
			ЗаписатьСчетФактуру(МассивНайденныхДокументов, ОснованиеОбъект, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Создание реализации товаров и услуг и акта выполненных работ по заказу
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг И НЕ Отказ Тогда
		
		ПараметрыОтбораАкт = Новый Структура(
			"ВариантОформленияПродажи,ВариантОформления",
			Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот,
			Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
			);
		ПараметрыОтбораРеализация = Новый Структура(
			"ВариантОформленияПродажи,ВариантОформления",
			Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг,
			Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг
			);
		
		Работы = Объект.Товары.Выгрузить(ПараметрыОтбораАкт);
		Товары = Объект.Товары.Выгрузить(ПараметрыОтбораРеализация);
		СоздаватьПКО = Ложь;
		МассивРеализаций = Новый Массив;
		
		Если Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным
			И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
			
			Объект.СуммаПредоплаты = ПродажиСервер.СуммаПредоплатыПоСоглашению(
				Объект,
				Объект.ЭтапыГрафикаОплаты,
				Объект.СуммаДокумента,
				"СуммаСНДС",
				Истина
			);
			
		КонецЕсли;
		
		БезПроведения = Объект.СоздаватьПриходныйКассовыйОрдер И Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная И
					Объект.СуммаПредоплаты > 0 И
					Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		
		// Создание реализации товаров и услуг по заказу
		Если Товары.Количество() > 0 Тогда
			
			МассивСкладов = Новый Массив();
			РеализацияСГруппыСкладов = Ложь;
			
			Если СкладГруппа Тогда
				ВыборГруппы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Склад, "ВыборГруппы");
				Если ВыборГруппы = Перечисления.ВыборГруппыСкладов.РазрешитьВЗаказахИНакладных Тогда
					МассивСкладов.Добавить(Объект.Склад);
					РеализацияСГруппыСкладов = Истина;
				Иначе
					ТаблицаСкладов = Товары.Скопировать(ПараметрыОтбораРеализация, "Склад");
					ТаблицаСкладов.Свернуть("Склад");
					МассивСкладов = ТаблицаСкладов.ВыгрузитьКолонку("Склад");
				КонецЕсли;
			Иначе
				МассивСкладов.Добавить(Объект.Склад);
			КонецЕсли;
			
			ВключатьУслуги = Истина;
			
			Для Каждого ТекСклад Из МассивСкладов Цикл
				
				Если ЗначениеЗаполнено(ТекСклад) Или МассивСкладов.Количество() = 1 Тогда
					
					Если РеализацияСГруппыСкладов Тогда
						
						ТоварыПоСкладу = Товары;
						
					Иначе
						
						ТоварыПоСкладу = Товары.Скопировать(Новый Структура("Склад", ТекСклад));
						
						Если ВключатьУслуги И ЗначениеЗаполнено(ТекСклад) Тогда
							Услуги = Товары.Скопировать(Новый Структура("Склад", Справочники.Склады.ПустаяСсылка()));
							Для Каждого ТекСтрока Из Услуги Цикл
								НоваяСтрока = ТоварыПоСкладу.Добавить();
								ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
							КонецЦикла;
							ВключатьУслуги = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
					ПродажаОбъект = ЗаписатьРеализациюПоЗаказу(МассивНайденныхДокументов, ОснованиеОбъект, ТоварыПоСкладу, ТекСклад, Отказ, БезПроведения);
					МассивРеализаций.Добавить(ПродажаОбъект);
					СоздаватьПКО = Истина;
					
					// Создание счета-фактуры по реализации / акту
					Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") И НЕ Отказ Тогда
						ЗаписатьСчетФактуру(МассивНайденныхДокументов, ПродажаОбъект, Отказ);
					КонецЕсли;
				
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Создание акта выполненных работ по заказу
		Если Работы.Количество() > 0 И НЕ Отказ Тогда
			
			ПродажаОбъект = ЗаписатьАктПоЗаказу(МассивНайденныхДокументов, ОснованиеОбъект, Работы, Отказ);
			
			// Создание счета-фактуры по реализации / акту
			Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
				ЗаписатьСчетФактуру(МассивНайденныхДокументов, ПродажаОбъект, Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Создание приходного кассового ордера по реализации / акту
		Если Объект.СоздаватьПриходныйКассовыйОрдер И СоздаватьПКО И НЕ Отказ И
			Объект.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным И
			Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			
			ПКО = ЗаписатьПриходныйКассовыйОрдер(МассивНайденныхДокументов, МассивРеализаций, Отказ);
			Если БезПроведения И ПКО <> Неопределено Тогда
				Для Каждого ПродажаОбъект Из МассивРеализаций Цикл
					ПродажаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Пометка на удаление лишних документов
	
	Для Каждого ТекСтрока Из Объект.Документы Цикл
		Если МассивНайденныхДокументов.Найти(ТекСтрока.Документ) = Неопределено Тогда
			ПометитьНаУдалениеДокумент(ТекСтрока, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	//////////////////////////////////////////////////////////////////////////////
	// Проверка заказов клиентов на полную отгрузку/оплату
	
	Если (Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Или
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг) И
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") И НЕ Отказ Тогда
		
		ПроверитьЗакрытиеЗаказаКлиента(Отказ);
		
	КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////
	// Завершение создания / изменения документов
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		Объект.Документы.Очистить();
		МассивНайденныхДокументов.Очистить();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
		
	Если МассивНайденныхДокументов.Количество() > 0 Тогда
		
		ДокументыСформированы = Истина;
		Модифицированность = Ложь;
		ОбновитьГиперссылкуИнформационнойНадписиФормируемыеДокументы();
		УстановитьТолькоПросмотрЭлементовФормы(Истина);
		Объект.Документы.Сортировать("Состояние,Порядок");
		
		Если Объект.Партнер = Справочники.Партнеры.РозничныйПокупатель Тогда
			ОформляласьПродажаРозничномуКлиенту = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивНайденныхДокументов.Количество();
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументыКлиент()
	
	Отказ = Ложь;
	
	ИменаПолей = ИменяПолейПодбораМногооборотнойТары(Объект.ВариантОформленияДокументов);
	МногооборотнаяТараКлиент.ПредложитьПодобратьМногооборотнуюТару(ЭтаФорма, "Товары", ИменаПолей);
	
	Если ИспользоватьАвтоматическиеСкидкиВПродажах И
		Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
		
		Если Не Объект.СкидкиРассчитаны И СкидкиИзменились() Тогда
			
			ОтветНаВопрос = СкидкиНаценкиКлиент.ПредложитьПользователюРассчитатьСкидки();
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.ОК Тогда
				ПрименитьИзмененияСкидокНаценокНаКлиенте();
			КонецЕсли;
			
		Иначе
			Объект.СкидкиРассчитаны = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ((Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента")
			Или Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг")) И
			(Объект.СтатусЗаказаКлиента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОбеспечению") Или
			Объект.СтатусЗаказаКлиента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.КОтгрузке") Или
			Объект.СтатусЗаказаКлиента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Закрыт"))) Или 
			(Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг") И
			ЕстьСтрокиПродажиСервер()) Тогда
			
		Если Не Объект.НеОтгружатьЧастями Тогда
			ЗаполнитьПустыеДатыОтгрузки();
		Иначе
			ЗаполнитьПустуюДатуОтгрузки();
		КонецЕсли;
			
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") И
		Объект.ВариантОформленияДокументов <> ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
		
		СуммаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
		Объект.СуммаДокумента = Объект.Товары.Итог("СуммаСНДС");
		
		Если Объект.ВариантОформленияДокументов <> ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг")
			И Объект.ПорядокРасчетов <> ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным") Тогда
			
			ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
			ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
			
			Если Объект.СуммаДокумента <> СуммаЭтаповОплаты Тогда
				
				Если Объект.ЭтапыГрафикаОплаты.Количество() = 0 Тогда
					
					Если ГрафикСоглашенияЗаполнен Тогда
						ТекстВопроса = НСтр("ru='Отсутствуют этапы графика оплаты. Заполнить этапы в соответствии с соглашением?'");
					ИначеЕсли ГрафикЗаполнен Тогда
						ТекстВопроса = НСтр("ru='Отсутствуют этапы графика оплаты. Заполнить этапы в соответствии с графиком?'");
					Иначе
						Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
							ТекстВопроса = НСтр("ru='Отсутствуют этапы графика оплаты. Добавить один этап ""%ВариантОплаты%"" с оплатой 100% на дату планируемой отгрузки?'");
						Иначе
							ТекстВопроса = НСтр("ru='Отсутствуют этапы графика оплаты. Добавить один этап ""%ВариантОплаты%"" с оплатой 100%?'");
						КонецЕсли;
						ТекстВопроса = СтрЗаменить(ТекстВопроса, "%ВариантОплаты%", ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"));
					КонецЕсли;
						
					ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ОкОтмена);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					Иначе
						Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
							ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
						Иначе
							ЦенообразованиеКлиент.ДобавитьЭтапОплатыПоУмолчанию(
								Объект.ЭтапыГрафикаОплаты,
								Объект.ЖелаемаяДатаОтгрузки,
								Объект.СуммаДокумента,
								ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
							);
						КонецЕсли;
						ЦенообразованиеКлиент.ОповеститьОбОкончанииЗаполненияЭтаповГрафикаОплаты();
					КонецЕсли;
					
				Иначе
					
					ОтветНаВопрос = Вопрос(НСтр("ru='Сумма этапов графика оплаты не совпадает с суммой подобранных товаров. Скорректировать сумму этапов оплаты?'"), РежимДиалогаВопрос.ОкОтмена);
					
					Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
						Отказ = Истина;
						Возврат;
					Иначе
						ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, Объект.СуммаДокумента);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;
		
	// Предложим пользователю скорректировать желаемую дату отгрузки
		
	Если ЗначениеЗаполнено(Объект.ЖелаемаяДатаОтгрузки) Тогда
		
		МаксДатаАванса = ПродажиКлиент.МаксимальнаяДатаАванса(Объект.ЭтапыГрафикаОплаты);
		ПродажиКлиент.СкорректироватьЖелаемуюДатуОтгрузки(Объект.ЖелаемаяДатаОтгрузки, МаксДатаАванса, Отказ);
		
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	
	ОчиститьСообщения();
	Если ПроверитьЗаполнение() Тогда
		КоличествоСозданныхДокументов = СоздатьДокументыСервер();
		Если КоличествоСозданныхДокументов > 0 Тогда
			ПоказатьОповещениеПользователя(
				СтрЗаменить(НСтр("ru = 'Созданы документы (%КоличествоСозданныхДокументов%)'"), "%КоличествоСозданныхДокументов%", КоличествоСозданныхДокументов),
				,
				,
				БиблиотекаКартинок.Информация32
			);
		Иначе
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Документы не созданы'"),
				,
				,
				БиблиотекаКартинок.Информация32
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеДокумент(СтрокаТаблицы, Отказ)
	
	Если ЗаблокироватьДокумент(СтрокаТаблицы.Документ) Тогда
		ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
		Если Не ДокументОбъект.ПометкаУдаления Тогда
			Попытка
				ДокументОбъект.УстановитьПометкуУдаления(Истина);
				СтрокаТаблицы.Состояние = 1;
			Исключение
				ТекстОшибки = НСтр("ru='Не удалось установить пометку удаления для документа %Документ%. %ОписаниеОшибки%'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОбъект);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект);
				Отказ = Истина;
			КонецПопытки;
		Иначе
			СтрокаТаблицы.Состояние = 1;
		КонецЕсли;
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаблокироватьДокумент(ДокументСсылка)
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ДокументСсылка);
	Исключение
		ТекстОшибки = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументСсылка);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументСсылка);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция НайтиСозданныйДокументПоТипу(ТипДокумента, МассивНайденныхДокументов)
	
	Для Каждого ТекСтрока Из Объект.Документы Цикл
		
		Если ТипЗнч(ТекСтрока.Документ) = ТипДокумента И
			МассивНайденныхДокументов.Найти(ТекСтрока.Документ) = Неопределено Тогда
			Возврат ТекСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьДокумент(МенеджерДокумента, ТипДокумента, МассивНайденныхДокументов, СозданНовыйДокумент, СтрокаТаблицы)
	
	Если ДокументыСформированы Тогда
		
		СтрокаТаблицы = НайтиСозданныйДокументПоТипу(ТипДокумента, МассивНайденныхДокументов);
		Если СтрокаТаблицы <> Неопределено И ЗаблокироватьДокумент(СтрокаТаблицы.Документ) Тогда
			ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
			Если ДокументОбъект.ПометкаУдаления Тогда
				ДокументОбъект.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			МассивНайденныхДокументов.Добавить(СтрокаТаблицы.Документ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументОбъект = Неопределено Тогда
		
		ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДата();
		СозданНовыйДокумент = Истина;
		
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокуВТаблицуСформированныхДокументов(ДокументСсылка, Сумма, Валюта, Порядок)
	
	НоваяСтрока = Объект.Документы.Добавить();
	НоваяСтрока.Документ = ДокументСсылка;
	НоваяСтрока.Состояние = 0;
	НоваяСтрока.Сумма = Сумма;
	НоваяСтрока.Валюта = Валюта;
	НоваяСтрока.Порядок = Порядок;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтрокуВТаблицуСформированныхДокументов(СтрокаТаблицы, Сумма,Валюта, Порядок)
	
	СтрокаТаблицы.Состояние = 0;
	СтрокаТаблицы.Сумма = Сумма;
	СтрокаТаблицы.Валюта = Валюта;
	СтрокаТаблицы.Порядок = Порядок;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВыделенныеДокументы()
	
	Если Объект.Документы.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Отсутствуют оформленные документы'"));
		Возврат Неопределено;
	ИначеЕсли Элементы.ОформленныеДокументы.ВыделенныеСтроки.Количество() = 0 Тогда
		Предупреждение(НСтр("ru='Отсутствуют выделенные документы'"));
		Возврат Неопределено;
	Иначе
		МассивДокументов = Новый Массив();
		Для Каждого ТекЭлемент Из Элементы.ОформленныеДокументы.ВыделенныеСтроки Цикл
			МассивДокументов.Добавить(ТекЭлемент);
		КонецЦикла;
		Возврат МассивДокументов;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УстановитьПометкуУдаленияСервер(ВыделенныеДокументы)
	
	Сч = ВыделенныеДокументы.Количество();
	КоличествоИзмененныхДокументов = 0;
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	Пока Сч > 0 Цикл
		
		Сч = Сч - 1;
		ДокументНеПомеченНаУдаление = Ложь;
		
		СтрокаТаблицы = Объект.Документы.НайтиПоИдентификатору(ВыделенныеДокументы[Сч]);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПометитьНаУдалениеДокумент(СтрокаТаблицы, ДокументНеПомеченНаУдаление);
		Если ДокументНеПомеченНаУдаление Тогда
			Отказ = Истина;
		Иначе
			КоличествоИзмененныхДокументов = КоличествоИзмененныхДокументов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Возврат КоличествоИзмененныхДокументов;
	
КонецФункции

&НаСервере
Функция ПровестиОтменитьПроведениеДокументовСервер(ВыделенныеДокументы, Проведение = Истина)
	
	Сч = ВыделенныеДокументы.Количество();
	КоличествоИзмененныхДокументов = 0;
	Отказ = Ложь;
	
	НачатьТранзакцию();
	
	Пока Сч > 0 Цикл
		
		Сч = Сч - 1;
		
		СтрокаТаблицы = Объект.Документы.НайтиПоИдентификатору(ВыделенныеДокументы[Сч]);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗаблокироватьДокумент(СтрокаТаблицы.Документ) Тогда
			
			ДокументОбъект = СтрокаТаблицы.Документ.ПолучитьОбъект();
			
			Если ДокументОбъект.ПометкаУдаления И Проведение Тогда
				
				Попытка
					ДокументОбъект.УстановитьПометкуУдаления(Ложь);
					СтрокаТаблицы.Состояние = 1;
				Исключение
					ТекстОшибки = НСтр("ru='Не удалось снять пометку удаления для документа %Документ%. %ОписаниеОшибки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОбъект);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект);
				КонецПопытки;
				
			КонецЕсли;
			
			Если ДокументОбъект.Проведен <> Проведение Тогда
				
				Попытка
					ДокументОбъект.Записать(?(Проведение, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
				Исключение
					Если Проведение Тогда
						ТекстОшибки = НСтр("ru='Не удалось провести документ %Документ%. %ОписаниеОшибки%'");
					Иначе
						ТекстОшибки = НСтр("ru='Не удалось отменить проведение документа %Документ%. %ОписаниеОшибки%'");
					КонецЕсли;
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%", ДокументОбъект);
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ДокументОбъект);
					Отказ = Истина;
					Продолжить;
				КонецПопытки;
				
				СтрокаТаблицы.Состояние = ?(Проведение, 0, 2);
				КоличествоИзмененныхДокументов = КоличествоИзмененныхДокументов + 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Возврат КоличествоИзмененныхДокументов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолноеИмяДокумента(ДокументСсылка)
	
	Возврат ДокументСсылка.Метаданные().ПолноеИмя();
	
КонецФункции

&НаСервере
Процедура ОбновитьТекстИнформационнойНадписиФормируемыеДокументы()
	
	МассивНадписей = Новый Массив();
	
	СуммаВсего = Объект.Товары.Итог("СуммаСНДС");
	СуммаЗаказа = 0;
	СуммаАкта = 0;
	СуммаРеализации = 0;
	СуммаПКО = 0;
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		
		СуммаЗаказа = Объект.Товары.Итог("СуммаСНДС");
		
		Если СуммаЗаказа > 0 Тогда
			ТекстНадписи = НСтр("ru='Коммерческое предложение (%СуммаВсего% %Валюта%)'");
			МассивНадписей.Добавить(ТекстНадписи);
		КонецЕсли;
		
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		
		СуммаЗаказа = Объект.Товары.Итог("СуммаСНДС");
		ДобавитьТекстНадписиВМассив(МассивНадписей, НСтр("ru='Заказ'"), "%СуммаВсего%", СуммаЗаказа, Объект.СоздаватьСчетНаОплату)
		
	ИначеЕсли ЭтоРеализация(Объект.ВариантОформленияДокументов) Тогда
		
		ТребуетсяОформлениеЗаказа = Ложь;
		ТребуетсяОформлениеАкта = Ложь;
		ТребуетсяОформлениеРеализации = Ложь;
		
		ЕстьТовары  = Объект.Товары.НайтиСтроки(Новый Структура("ТипНоменклатуры", Перечисления.ТипыНоменклатуры.Товар)).Количество() > 0;
		
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			
			Если ТекСтрока.ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
				
				СуммаЗаказа = СуммаЗаказа + ТекСтрока.СуммаСНДС;
				ТребуетсяОформлениеЗаказа = Истина;
				
			Иначе
				
				Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
				
					СуммаЗаказа = СуммаЗаказа + ТекСтрока.СуммаСНДС;
					ТребуетсяОформлениеЗаказа = Истина;
					
				КонецЕсли;
				
				Если ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг Или
					(ЕстьТовары И ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот И
					Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг) Тогда
					СуммаРеализации = СуммаРеализации + ТекСтрока.СуммаСНДС;
					ТребуетсяОформлениеРеализации = Истина;
				ИначеЕсли ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
					СуммаАкта = СуммаАкта + ТекСтрока.СуммаСНДС;
					ТребуетсяОформлениеАкта = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТребуетсяОформлениеЗаказа Тогда
			ДобавитьТекстНадписиВМассив(МассивНадписей, НСтр("ru='Заказ'"), "%СуммаЗаказа%", СуммаЗаказа, Объект.СоздаватьСчетНаОплату)
		КонецЕсли;
		
		Если ТребуетсяОформлениеРеализации Тогда
			ДобавитьТекстНадписиВМассив(
				МассивНадписей,
				НСтр("ru='Реализация'"),
				"%СуммаРеализации%",
				СуммаРеализации,
				Объект.СоздаватьСчетНаОплату И Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
			);
		КонецЕсли;
		
		Если ТребуетсяОформлениеАкта Тогда
			ДобавитьТекстНадписиВМассив(
				МассивНадписей,
				НСтр("ru='Акт'"),
				"%СуммаАкта%",
				СуммаАкта,
				Объект.СоздаватьСчетНаОплату И Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
			);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение И
		Объект.СоздаватьПриходныйКассовыйОрдер И
		Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		
		
		Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг Тогда
			СуммаПКО = ПродажиСервер.СуммаПредоплатыПоСоглашению(
				Объект,
				Объект.ЭтапыГрафикаОплаты,
				Объект.СуммаДокумента,
				"СуммаСНДС",
				Истина
			);
			Если СуммаПКО > 0 Тогда
				ТекстНадписи = НСтр("ru='ПКО (%СуммаПКО% %Валюта%)'");
				МассивНадписей.Добавить(ТекстНадписи);
			КонецЕсли;
		Иначе
			СтрокиОплаты = Объект.ЭтапыГрафикаОплаты.НайтиСтроки(Новый Структура("ДатаПлатежа", Объект.Дата));
			Если СтрокиОплаты.Количество() > 0 Тогда
				ТаблицаЭтаповОплаты = Объект.ЭтапыГрафикаОплаты.Выгрузить(СтрокиОплаты, "СуммаПлатежа");
				ТаблицаЭтаповОплаты.Свернуть(,"СуммаПлатежа");
				СуммаПКО = ТаблицаЭтаповОплаты[0].СуммаПлатежа;
				ТекстНадписи = НСтр("ru='ПКО (%СуммаПКО% %Валюта%)'");
				МассивНадписей.Добавить(ТекстНадписи);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НадписьСформированныеДокументы = "";
	
	Для Каждого ТекЭлемент Из МассивНадписей Цикл
		НадписьСформированныеДокументы = НадписьСформированныеДокументы + ТекЭлемент + ", ";
	КонецЦикла;
	
	Если ЗначениеЗаполнено(НадписьСформированныеДокументы) Тогда
		НадписьСформированныеДокументы = Лев(НадписьСформированныеДокументы, СтрДлина(НадписьСформированныеДокументы) - 2);
	КонецЕсли;
	
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаВсего%",      Формат(СуммаВсего, "ЧДЦ=2"));
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаЗаказа%",     Формат(СуммаЗаказа, "ЧДЦ=2"));
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаРеализации%", Формат(СуммаРеализации, "ЧДЦ=2"));
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаАкта%",       Формат(СуммаАкта, "ЧДЦ=2"));
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%Валюта%",          Объект.Валюта);
	НадписьСформированныеДокументы = СтрЗаменить(НадписьСформированныеДокументы, "%СуммаПКО%",        Формат(СуммаПКО, "ЧДЦ=2"));
	
	ОбновитьГиперссылкуИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГиперссылкуИнформационнойНадписиФормируемыеДокументы()
	
	Если ДокументыСформированы Тогда
		Элементы.НадписьСформированныеДокументы.Гиперссылка = Истина;
	Иначе
		Элементы.НадписьСформированныеДокументы.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьТекстНадписиВМассив(МассивНадписей, ИмяПараметраДокумент, ИмяПараметраСумма, СуммаДокумента, СоздаватьСчетНаОплату)
	
	Если СуммаДокумента > 0 Тогда
		
		Если СоздаватьСчетНаОплату и Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию") Тогда
			ТекстНадписи = НСтр("ru='%ИмяПараметраДокумент% + Счет (%ИмяПараметраСумма% %Валюта%)'");
		Иначе
			ТекстНадписи = НСтр("ru='%ИмяПараметраДокумент% (%ИмяПараметраСумма% %Валюта%)'");
		КонецЕсли;
		
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ИмяПараметраДокумент%", ИмяПараметраДокумент);
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%ИмяПараметраСумма%", ИмяПараметраСумма);
		
		МассивНадписей.Добавить(ТекстНадписи);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Заполнение условий продаж

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Объект.Договор,
		Объект.Партнер,
		Объект.Контрагент,
		Объект.Организация,
		Объект.ХозяйственнаяОперация,
		Объект.Валюта,
		Объект.Соглашение
	);
	
	Если Договор <> Объект.Договор Тогда
		
		Объект.Договор = Договор;
		ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
		
		Если Не ОснованиеИзменено Тогда
			Объект.Основание = ПолучитьТекстОснованияДляПечати();
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажПоУмолчанию()
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Объект.Партнер,
			Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение", Истина, Объект.Соглашение)
		);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			Если Объект.Соглашение <> УсловияПродажПоУмолчанию.Соглашение
				И ЗначениеЗаполнено(УсловияПродажПоУмолчанию.Соглашение) Тогда
					Объект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
					ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
					
					СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
					ПродажиСервер.ЗаполнитьЦены(
						Объект.Товары,
						, // Массив строк или структура отбора
						Новый Структура( // Параметры заполнения
							"Дата, Валюта, Соглашение, ПоляЗаполнения",
							Объект.Дата,
							Объект.Валюта,
							Объект.Соглашение,
							"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
						),
						Новый Структура( // Структура действий с измененными строками
							"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
							"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Истина)
						)
					);
			Иначе
				Объект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			КонецЕсли;
		Иначе
			ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
			Объект.Соглашение = Неопределено;
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
		
	Иначе
		
		УсловияПродажПоУмолчанию = ПродажиСервер.ПолучитьУсловияПродажПоУмолчанию(
			Неопределено,
			Новый Структура("УчитыватьГруппыСкладов, ВыбранноеСоглашение", Истина, Объект.Соглашение)
		);
		
		Если УсловияПродажПоУмолчанию <> Неопределено Тогда
			Объект.Соглашение = УсловияПродажПоУмолчанию.Соглашение;
			ЗаполнитьУсловияПродаж(УсловияПродажПоУмолчанию);
			
			СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
			ПродажиСервер.ЗаполнитьЦены(
				Объект.Товары,
				, // Массив строк или структура отбора
				Новый Структура( // Параметры заполнения
					"Дата, Валюта, Соглашение, ПоляЗаполнения",
					Объект.Дата,
					Объект.Валюта,
					Объект.Соглашение,
					"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
				),
				Новый Структура( // Структура действий с измененными строками
					"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
					"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Истина)
				)
			);
		Иначе
			Объект.Соглашение = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродажПоCоглашению()
	
	УсловияПродаж = ПродажиСервер.ПолучитьУсловияПродаж(Объект.Соглашение, Истина);
	ЗаполнитьУсловияПродаж(УсловияПродаж);
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	ПродажиСервер.ЗаполнитьЦены(
		Объект.Товары,
		, // Массив строк или структура отбора
		Новый Структура( // Параметры заполнения
			"Дата, Валюта, Соглашение, ПоляЗаполнения",
			Объект.Дата,
			Объект.Валюта,
			Объект.Соглашение,
			"Цена, СтавкаНДС, ВидЦены, СрокПоставки"
		),
		Новый Структура( // Структура действий с измененными строками
			"ПересчитатьСумму, ПересчитатьСуммуСНДС, ПересчитатьСуммуНДС, ПересчитатьСуммуРучнойСкидки, ОчиститьАвтоматическуюСкидку, ПересчитатьСуммуСУчетомРучнойСкидки",
			"КоличествоУпаковок", СтруктураПересчетаСуммы, СтруктураПересчетаСуммы, "КоличествоУпаковок", Неопределено, Новый Структура("Очищать", Истина)
		)
	);
	
	БанковскийСчет            = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
	БанковскийСчетКонтрагента = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Объект.Контрагент, , Объект.БанковскийСчетКонтрагента);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУсловияПродаж(Знач УсловияПродаж)
	
	Если УсловияПродаж = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Валюта = УсловияПродаж.Валюта;
	Объект.ХозяйственнаяОперация = УсловияПродаж.ХозяйственнаяОперация;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГрафикОплаты) Тогда
		Объект.ГрафикОплаты = УсловияПродаж.ГрафикОплаты;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ФормаОплаты) Тогда
		Объект.ФормаОплаты = УсловияПродаж.ФормаОплаты;
	КонецЕсли;
	
	Объект.НалогообложениеНДС   = УсловияПродаж.НалогообложениеНДС;
	СкрыватьПодакцизныеТовары = (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
	Объект.ЦенаВключаетНДС      = УсловияПродаж.ЦенаВключаетНДС;
	Объект.ВернутьМногооборотнуюТару = УсловияПродаж.ВозвращатьМногооборотнуюТару;
	Объект.СрокВозвратаМногооборотнойТары = УсловияПродаж.СрокВозвратаМногооборотнойТары;
	
	Если ЗначениеЗаполнено(УсловияПродаж.Организация) И УсловияПродаж.Организация <> Объект.Организация Тогда
		Объект.Организация = УсловияПродаж.Организация;
		Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация);
		Объект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты);
	КонецЕсли;
	
	Если Не УсловияПродаж.Типовое Тогда
		Если ЗначениеЗаполнено(УсловияПродаж.Контрагент) Тогда
			Объект.Контрагент = УсловияПродаж.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Партнер, Объект.Контрагент);
	
	Объект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Объект.Договор,
		Объект.Партнер,
		Объект.Контрагент,
		Объект.Организация,
		Объект.ХозяйственнаяОперация,
		Объект.Валюта,
		Объект.Соглашение
	);
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	
	Если ЗначениеЗаполнено(УсловияПродаж.Склад) Тогда
		Объект.Склад = УсловияПродаж.Склад;
		СтруктураОтветственного = ПродажиСервер.ПолучитьОтветственногоПоСкладу(Объект.Склад, Объект.Менеджер);
		Если СтруктураОтветственного <> Неопределено Тогда
			Объект.Отпустил = СтруктураОтветственного.Ответственный;
			Объект.ОтпустилДолжность = СтруктураОтветственного.ОтветственныйДолжность;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.ГруппаФинансовогоУчета) Тогда
		Объект.ГруппаФинансовогоУчета = УсловияПродаж.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияПродаж.СрокПоставки) Тогда
		ДатаНачала = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		Объект.ЖелаемаяДатаОтгрузки = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаНачала, Перечисления.Периодичность.День, УсловияПродаж.СрокПоставки) + 1;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Варианты оформления документов

&НаСервере
Процедура ВариантОформленияДокументовПриИзмененииСервер()
	
	Объект.Серии.Очистить();
	УстановитьВидимостьЭлементовСерий();
	ЗаполнитьСтатусыУказанияСерий();
	
	Если Объект.Товары.Количество() > 0 Тогда
		ЗаполнитьВариантОформленияВТабличнойЧастиСервер();
	КонецЕсли;
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("КартинкаНесколькоСкладов");
	МассивЭлементов.Добавить("НадписьНесколькоСкладов");
	МассивЭлементов.Добавить("ЖелаемаяДатаОтгрузки");
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ДекорацияРеквизитыПечатиРеализации");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение
	);
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьЭтапыОплаты",
		"Видимость",
		Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение
			И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
			И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
			И Не ЭтоПередачаНаКомиссию
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГрафикОплаты",
		"Видимость",
		Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
		И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
		И Не ЭтоПередачаНаКомиссию
	);
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		Элементы.ГруппаДополнительныеРеквизиты.ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизитыКоммерческоеПредложение;
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента Тогда
		Элементы.ГруппаДополнительныеРеквизиты.ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизитыЗаказКлиента;
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг Тогда
		Элементы.ГруппаДополнительныеРеквизиты.ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизитыРеализацияТоваровУслуг;
	ИначеЕсли Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
		Элементы.ГруппаДополнительныеРеквизиты.ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизитыЗаказКлиентаРеализацияТоваровУслуг;
	КонецЕсли;
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика") Тогда
			Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаКоммерческоеПредложениеСиламиПеревозчика;
		ИначеЕсли Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу") Тогда
			Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаКоммерческоеПредложениеСиламиПеревозчикаПоАдресу;
		Иначе
			Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаСамовывоз;
		КонецЕсли;
	Иначе
		ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, "Партнер", Объект);
	КонецЕсли;
	
	ЗаполнитьСтатусыУказанияСерий();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантОформленияВТабличнойЧастиСервер()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекСтрока, Объект.ВариантОформленияДокументов);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекСтрока, ВариантОформленияДокументов)
	
	Если ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг") Тогда
		Если ТекСтрока.ДатаОтгрузки = НачалоДня(ТекущаяДата()) Или ТекСтрока.ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			ТекСтрока.ВариантОформления = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг");
		Иначе
			ТекСтрока.ВариантОформления = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.ЗаказКлиента");
		КонецЕсли;
	Иначе
		ТекСтрока.ВариантОформления = ВариантОформленияДокументов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВариантОформленияДокументовПродажиПоУмолчанию()
	
	Если Объект.СоздаватьЗаказКлиента И Объект.СоздаватьДокументПродажи И ИспользоватьЗаказыКлиентов Тогда
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг;
	ИначеЕсли Объект.СоздаватьДокументПродажи Тогда
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг;
	ИначеЕсли Объект.СоздаватьЗаказКлиента  И ИспользоватьЗаказыКлиентов Тогда
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента;
	ИначеЕсли Объект.СоздаватьКоммерческоеПредложение И ИспользоватьКоммерческиеПредложенияКлиентам Тогда
		Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьВариантыОформленияДокументовПродажи()
	
	Элементы.ВариантОформленияДокументов.СписокВыбора.Очистить();
	
	Если Объект.СоздаватьКоммерческоеПредложение И ИспользоватьКоммерческиеПредложенияКлиентам Тогда
		Элементы.ВариантОформленияДокументов.СписокВыбора.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение);
	КонецЕсли;
	
	Если Объект.СоздаватьЗаказКлиента И ИспользоватьЗаказыКлиентов Тогда
		Элементы.ВариантОформленияДокументов.СписокВыбора.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиента);
	КонецЕсли;
	
	Если Объект.СоздаватьДокументПродажи Тогда
		Элементы.ВариантОформленияДокументов.СписокВыбора.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг);
	КонецЕсли;
	
	Если Объект.СоздаватьЗаказКлиента И Объект.СоздаватьДокументПродажи И ИспользоватьЗаказыКлиентов Тогда
		Элементы.ВариантОформленияДокументов.СписокВыбора.Добавить(Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг);
	КонецЕсли;
	
	Если Элементы.ВариантОформленияДокументов.СписокВыбора.Количество() > 1 Тогда
		Элементы.ВариантОформленияДокументов.ТолькоПросмотр = Ложь;
	Иначе
		Элементы.ВариантОформленияДокументов.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура ИнициализироватьПомощникПродаж()
	
	Модифицированность = Ложь;
	ДокументыСформированы = Ложь;
	
	Объект.Дата = ТекущаяДата();
	
	Объект.Товары.Очистить();
	Объект.ЭтапыГрафикаОплаты.Очистить();
	Объект.СкидкиНаценки.Очистить();
	Объект.Серии.Очистить();
	Объект.Документы.Очистить();
	Объект.ДополнительныеРеквизитыКоммерческогоПредложения.Очистить();
	Объект.ДополнительныеРеквизитыЗаказа.Очистить();
	Объект.ДополнительныеРеквизитыРеализации.Очистить();
	Объект.ДополнительныеРеквизитыАкта.Очистить();
	ВидыЦен.Очистить();
	Склады.Очистить();
	
	Если ОформляласьПродажаРозничномуКлиенту Тогда
		Объект.Партнер = Справочники.Партнеры.РозничныйПокупатель;
	Иначе
		Объект.Партнер = Неопределено;
	КонецЕсли;
	
	Объект.Организация                    = Неопределено;
	Объект.БанковскийСчет                 = Неопределено;
	Объект.Склад                          = Неопределено;
	Объект.ЦенаВключаетНДС                = Неопределено;
	Объект.Контрагент                     = Неопределено;
	Объект.Договор                        = Неопределено;
	Объект.Сделка                         = Неопределено;
	Объект.ГрафикОплаты                   = Неопределено;
	Объект.ЖелаемаяДатаОтгрузки           = Неопределено;
	Объект.ДополнительнаяИнформация       = Неопределено;
	Объект.НеОтгружатьЧастями             = Неопределено;
	Объект.ФормаОплаты                    = Неопределено;
	Объект.БанковскийСчет                 = Неопределено;
	Объект.БанковскийСчетКонтрагента      = Неопределено;
	Объект.Касса                          = Неопределено;
	Объект.АдресДоставки                  = Неопределено;
	Объект.НалогообложениеНДС             = Неопределено;
	Объект.Комментарий                    = Неопределено;
	Объект.НомерПоДаннымКлиента           = Неопределено;
	Объект.ДатаПоДаннымКлиента            = Неопределено;
	Объект.Грузоотправитель               = Неопределено;
	Объект.Грузополучатель                = Неопределено;
	Объект.БанковскийСчетГрузоотправителя = Неопределено;
	Объект.БанковскийСчетГрузополучателя  = Неопределено;
	Объект.ГруппаФинансовогоУчета         = Неопределено;
	Объект.КартаЛояльности                = Неопределено;
	Объект.Автомобиль                     = Неопределено;
	Объект.БанковскийСчетПеревозчика      = Неопределено;
	Объект.ДоверенностьВыдана             = Неопределено;
	Объект.ДоверенностьДата               = Неопределено;
	Объект.ДоверенностьЛицо               = Неопределено;
	Объект.ДоверенностьНомер              = Неопределено;
	Объект.Перевозчик                     = Неопределено;
	Объект.Отпустил                       = Неопределено;
	Объект.ОтпустилДолжность              = Неопределено;
	Объект.Подразделение                  = Неопределено;
	Объект.Основание                      = Неопределено;
	Объект.СрокДоставки                   = Неопределено;
	Объект.Водитель                       = Неопределено;
	Объект.ВариантОформленияДокументов    = Неопределено;
	Объект.СуммаДокумента                 = Неопределено;
	Объект.СкидкиРассчитаны               = Неопределено;
	Объект.ВернутьМногооборотнуюТару      = Неопределено;
	Объект.СрокВозвратаМногооборотнойТары = Неопределено;
	
	Объект.Менеджер       = Пользователи.ТекущийПользователь();
	Объект.Валюта         = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета(Объект.Валюта);
	Объект.Организация    = ЗначениеНастроекПовтИсп.ПолучитьОрганизациюПоУмолчанию(Объект.Организация);
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
	Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
	Объект.Склад          = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Склад, Истина);
	Объект.Подразделение  = ЗначениеНастроекПовтИсп.ПодразделениеПользователя(Объект.Менеджер, Объект.Подразделение);
	
	Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	Партнер = Объект.Партнер;
	ОбновитьДосьеПартнера();
	
	ЗаполнитьУсловияПродажПоУмолчанию();
	ОбновитьОграничениеЗадолженности();
	Объект.Основание = ПолучитьТекстОснованияДляПечати();
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоПродажи(Объект.Склад);
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	
	ОбновитьЭлементыПартнера(ЭтаФорма);
	ЗаголовокКорзины = НСтр("ru = 'Корзина'");
	УстановитьВариантОформленияДокументовПродажиПоУмолчанию();
	ВариантОформленияДокументовПриИзмененииСервер();
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	ОбновитьГиперссылкуИнформационнойНадписиФормируемыеДокументы();
	УстановитьТолькоПросмотрЭлементовФормы(Ложь);
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций,  Объект.Товары.Количество());
	УстановитьВидимостьГрафикаОплаты();
	
	СкрыватьПодакцизныеТовары = (Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
	
	Элементы.Декорация.Видимость = СкрыватьПодакцизныеТовары;
	
	// Установить параметры динамических списков.
	
	УстановитьПараметрВидЦен();
	
	ЗначениеОтбора = ?(ЗначениеЗаполнено(СегментНоменклатуры), СегментНоменклатуры, Неопределено);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "СегментНоменклатуры", ЗначениеОтбора, ЗначениеЗаполнено(СегментНоменклатуры));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Номенклатура", Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ЕдиницаИзмерения", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ТипНоменклатуры", Перечисления.ТипыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВидНоменклатуры", Справочники.ВидыНоменклатуры.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ЦеноваяГруппа", Справочники.ЦеновыеГруппы.ПустаяСсылка());
		
	Если СкрыватьПодакцизныеТовары Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
			Список.Отбор,
			"Номенклатура.ПодакцизныйТовар",
			Ложь,
			ВидСравненияКомпоновкиДанных.Равно, 
			"ОтборПоУмолчанию",
			СкрыватьПодакцизныеТовары
		);
		
	КонецЕсли;
	
	УстановитьЗаголовкиЭлементов();
	УстановитьТекущуюСтраницуФормаОплаты();
	СкидкиНаценкиСервер.НастроитьКомандуПоказатьСообщения(Объект, Элементы.ПоказатьСообщения);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиЭлементов()

	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		ТекстЗаголовка = НСтр("ru = 'Цена (%Валюта%)'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Валюта%", Объект.Валюта);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Цена'");
	КонецЕсли;
	
	Элементы.Список.ПодчиненныеЭлементы.ПодборТаблицаНоменклатураЦена.Заголовок = ТекстЗаголовка;
	Элементы.ПодборТаблицаХарактеристики.ПодчиненныеЭлементы.ПодборТаблицаХарактеристикиЦена.Заголовок = ТекстЗаголовка;

	// Только в наличии
	Если Не ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстЗаголовка = НСтр("ru = 'Только в наличии'");
	ИначеЕсли СкладГруппа Тогда
		ТекстЗаголовка = НСтр("ru = 'Только в наличии на группе складов ""%Склад%""'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Склад%", Объект.Склад);
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Только в наличии на складе ""%Склад%""'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Склад%", Объект.Склад);
	КонецЕсли;
	
	Элементы.ТолькоВНаличии.Доступность = ЗначениеЗаполнено(Объект.Склад) ИЛИ СкладГруппа;
	Элементы.ТолькоВНаличии.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатуОтгрузки(МассивВыделенныхСтрок = Неопределено)

	ДатаОтгрузки = Объект.ЖелаемаяДатаОтгрузки;
	Если Объект.Товары.Количество() > 0 Тогда
		Если РаботаСДиалогамиКлиент.ВвестиДатуСКонтролемПустогоЗначения(ДатаОтгрузки, НСтр("ru='Введите дату отгрузки'"), ЧастиДаты.Дата) Тогда
			ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, МассивВыделенныхСтрок);
			ПродажиКлиент.ОповеститьОбОкончанииЗаполненияДатОтгрузки(ДатаОтгрузки, (МассивВыделенныхСтрок <> Неопределено));
		КонецЕсли;
	Иначе
		ТекстПредупреждения = НСтр("ru='В документе нет строк для заполнения. Дата отгрузки не будет заполнена.'");
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатуОтгрузкиСервер(ДатаОтгрузки, Знач МассивВыделенныхСтрок)

	Если МассивВыделенныхСтрок = Неопределено Тогда

		Для Каждого СтрокаТЧ Из Объект.Товары Цикл
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;

	Иначе

		Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
			СтрокаТЧ = Объект.Товары.НайтиПоИдентификатору(ИдентификаторСтроки);
			СтрокаТЧ.ДатаОтгрузки = ДатаОтгрузки;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СброситьПометкиКомандШапки(Элементы)
	
	Элементы.ПерейтиПартнер.Пометка = Ложь;
	Элементы.ПерейтиПодбор.Пометка = Ложь;
	Элементы.ПерейтиКорзина.Пометка = Ложь;
	Элементы.ПерейтиОтгрузкаОплата.Пометка = Ложь;
	Элементы.ПерейтиДокументы.Пометка = Ложь;
	Элементы.ПерейтиДоставка.Пометка = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекущуюСтраницуФормаОплаты()

	Если Объект.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		Элементы.СтраницыФормаОплаты.ТекущаяСтраница = Элементы.СтраницаНаличнаяОплата;
	Иначе
		Элементы.СтраницыФормаОплаты.ТекущаяСтраница = Элементы.СтраницаПрочаяОплата;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииСкладаСервер()
	
	СкладГруппа = Справочники.Склады.ЭтоГруппаИСкладыИспользуютсяВТЧДокументоПродажи(Объект.Склад);
	СкладыСервер.ЗаполнитьСкладыВТабличнойЧасти(Объект.Склад, СкладГруппа, Объект.Товары, Ложь);
	Элементы.ТоварыЗаполнитьСкладВВыделенныхСтроках.Доступность = СкладГруппа;
	ОбновитьЗависимыеРеквизитыФормыСервер();
	
	РассчитатьПараметрыСерий();
	УстановитьВидимостьЭлементовСерий();
	ЗаполнитьСтатусыУказанияСерий();
	
	Склады.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		
		Если СкладГруппа Тогда
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Склады.Ссылка КАК Склад
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Ссылка В ИЕРАРХИИ(&Склад)
			|	И (НЕ Склады.ЭтоГруппа)");
			
			Запрос.УстановитьПараметр("Склад", Объект.Склад);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Склады.Добавить(Выборка.Склад);
			КонецЦикла;
			
			Элементы.ТоварыСклад.Видимость = Истина;
			
		Иначе
			
			Склады.Добавить(Объект.Склад);
			
			Элементы.ТоварыСклад.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Склады.Количество() > 0 Тогда
		МассивСкладов = Склады.ВыгрузитьЗначения();
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Склад", МассивСкладов);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Склад", МассивСкладов);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Склад", Неопределено, Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Склад", Неопределено, Ложь);
		ТолькоВНаличии = Ложь;
		ТолькоВНаличииПриИзмененииНаСервере();
	КонецЕсли;
	
	УстановитьЗаголовкиЭлементов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗависимыеРеквизитыФормыСервер()
	
	ОбщегоНазначенияУТ.ОбновитьЗависимыеРеквизитыФормы(
		Объект.Товары,
		Элементы.КартинкаНесколькоСкладов.Картинка,
		НадписьНесколькоСкладов,
		СкладГруппа,
		Объект.Склад,
		СкладОбязателен,
		Ложь,
		НСтр("ru='Складов отгрузки'")
	);
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПартнераСервер()
	
	ГрафикОплаты = Объект.ГрафикОплаты;
	ЗаполнитьУсловияПродажПоУмолчанию();
	ОбновитьОграничениеЗадолженности();
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		ВалютаДокумента = Объект.Валюта;
		ПриИзмененииХозяйственнойОперацииСервер(Ложь);
		ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
		ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты;
		
		Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
			ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
		ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
			ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, Объект.Товары.Итог("СуммаСНДС"));
			ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
		КонецЕсли;
		
		ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	
	КонецЕсли;
	
	Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
	
	ПриИзмененииСкладаСервер();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	УстановитьЗаголовкиЭлементов();
	УстановитьПараметрВидЦен();
	
	УстановитьТекущуюСтраницуФормаОплаты();
	ОбновитьЭлементыПартнера(ЭтаФорма);
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаПартнер Тогда
		ОбновитьДосьеПартнера();
	Иначе
		ДосьеПартнераОбновлено = Ложь;
	КонецЕсли;
	УстановитьВидимостьГрафикаОплаты();
	
	Если Не ОснованиеИзменено Тогда
		Объект.Основание = ПолучитьТекстОснованияДляПечати();
	КонецЕсли;
	
	Партнер = Объект.Партнер;
	
	Если Объект.ВариантОформленияДокументов = Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение Тогда
		ДоставкаТоваров.КоммерческоеПредложениеПриИзмененииПартнера(Элементы,Объект);
	Иначе
		ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	КонецЕсли;
	
	ЗаполнитьПорядокРасчетов();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьИтоговыеПоказатели(Форма)
	
	СуммаВсего = Форма.Объект.Товары.Итог("Сумма");
	Форма.СуммаАвтоСкидки   = Форма.Объект.Товары.Итог("СуммаАвтоматическойСкидки");
	Форма.СуммаРучнойСкидки = Форма.Объект.Товары.Итог("СуммаРучнойСкидки");
	Форма.СуммаСкидки       = Форма.СуммаАвтоСкидки + Форма.СуммаРучнойСкидки;
	
	Если СуммаВсего > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / (СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / (СуммаВсего + Форма.СуммаСкидки);
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	ИначеЕсли Форма.СуммаСкидки > 0 Тогда
		
		Форма.ПроцентАвтоСкидки   = Форма.СуммаАвтоСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентРучнойСкидки = Форма.СуммаРучнойСкидки * 100 / Форма.СуммаСкидки;
		Форма.ПроцентСкидки       = Форма.ПроцентАвтоСкидки + Форма.ПроцентРучнойСкидки;
		
	Иначе
		
		Форма.ПроцентАвтоСкидки   = 0;
		Форма.ПроцентРучнойСкидки = 0;
		Форма.ПроцентСкидки       = 0;
		
	КонецЕсли;
	
	Если Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС")
	 Или Форма.Объект.НалогообложениеНДС = ПредопределенноеЗначение("Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД") Тогда
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаБезНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоБезНДС;
	Иначе
		Форма.Элементы.ГруппаСтраницыНДС.ТекущаяСтраница   = Форма.Элементы.СтраницаСНДС;
		Форма.Элементы.ГруппаСтраницыВсего.ТекущаяСтраница = Форма.Элементы.СтраницаВсегоСНДС;
	КонецЕсли;
	
	Форма.СуммаАвансаДоОбеспечения = 0;
	Форма.СуммаПредоплатыДоОтгрузки = 0;
	Форма.СуммаКредитаПослеОтгрузки = 0;
	Форма.ПроцентАвансаДоОбеспечения = 0;
	Форма.ПроцентПредоплатыДоОтгрузки = 0;
	Форма.ПроцентКредитаПослеОтгрузки = 0;
	
	СоответствиеВариантовОплаты = Новый Соответствие;
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения"),
		Новый Структура("Сумма, Проценты", "СуммаАвансаДоОбеспечения", "ПроцентАвансаДоОбеспечения")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаПредоплатыДоОтгрузки", "ПроцентПредоплатыДоОтгрузки")
	);
	СоответствиеВариантовОплаты.Вставить(ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки"),
		Новый Структура("Сумма, Проценты", "СуммаКредитаПослеОтгрузки", "ПроцентКредитаПослеОтгрузки")
	);
	
	Для Каждого ТекСтрока Из Форма.Объект.ЭтапыГрафикаОплаты Цикл
		ИменаЭлементов = СоответствиеВариантовОплаты[ТекСтрока.ВариантОплаты];
		Если ИменаЭлементов <> Неопределено Тогда
			Форма[ИменаЭлементов.Сумма] = Форма[ИменаЭлементов.Сумма] + ТекСтрока.СуммаПлатежа;
			Форма[ИменаЭлементов.Проценты] = Форма[ИменаЭлементов.Проценты] + ТекСтрока.ПроцентПлатежа;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииХозяйственнойОперацииСервер(ВызовПоКоманде = Истина)
	
	Если ВызовПоКоманде Тогда
		ЗаполнитьДоговорПоУмолчанию();
	КонецЕсли;
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		
		Если (ИспользоватьРучныеСкидкиВПродажах Или ИспользоватьАвтоматическиеСкидкиВПродажах)Тогда
			СкидкиНаценкиСервер.ОтменитьСкидки(Объект, "Товары", Истина);
		КонецЕсли;
		
		Если Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД Тогда
			Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
			СкрыватьПодакцизныеТовары = Ложь;
		КонецЕсли; 
				
	КонецЕсли;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовПоОперацииСервер()
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	Документы.ЗаказКлиента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект.ХозяйственнаяОперация, 
		МассивВсехРеквизитов, 
		МассивРеквизитовОперации
	);
	
	ДенежныеСредстваСервер.УстановитьВидимостьЭлементовПоМассиву(
		Элементы,
		МассивВсехРеквизитов,
		МассивРеквизитовОперации
	);
	
	ЭтоПередачаНаКомиссию = (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("БанковскийСчет");
	
	МассивЭлементов.Добавить("ТоварыРассчитатьСкидкиНаценки");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыОткрытьИнформациюОСкидках");
	МассивЭлементов.Добавить("КонтекстноеМенюТоварыОткрытьИнформациюОСкидках");
	
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("ПроцентРучнойСкидки");
	МассивЭлементов.Добавить("СуммаРучнойСкидки");
	МассивЭлементов.Добавить("ПроцентАвтоСкидки");
	МассивЭлементов.Добавить("СуммаАвтоСкидки");
	МассивЭлементов.Добавить("ПроцентСкидки");
	МассивЭлементов.Добавить("СуммаСкидки");
	МассивЭлементов.Добавить("СуммаАвансаДоОбеспечения");
	МассивЭлементов.Добавить("ПроцентАвансаДоОбеспечения");
	МассивЭлементов.Добавить("СуммаПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("ПроцентПредоплатыДоОтгрузки");
	МассивЭлементов.Добавить("СуммаКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("ПроцентКредитаПослеОтгрузки");
	МассивЭлементов.Добавить("НашДолгСуммаДолга");
	МассивЭлементов.Добавить("ДолгКлиентаСуммаДолга");
	МассивЭлементов.Добавить("СуммаДолга");
	МассивЭлементов.Добавить("ПроцентДолга");
	МассивЭлементов.Добавить("СуммаОплаты");
	МассивЭлементов.Добавить("ПроцентОплаты");
	МассивЭлементов.Добавить("СуммаОтгрузки");
	МассивЭлементов.Добавить("ПроцентОтгрузки");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Не ЭтоПередачаНаКомиссию);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьЭтапыОплаты",
		"Видимость",
		Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение
			И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
			И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
			И Не ЭтоПередачаНаКомиссию
	);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ГрафикОплаты",
		"Видимость",
		Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
		И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
		И Не ЭтоПередачаНаКомиссию
	);
	
	НоменклатураСервер.УстановитьПараметрыВыбораНоменклатуры(Объект.ХозяйственнаяОперация, Элементы.ТоварыНоменклатура);
	
	ПродажиСервер.ЗаполнитьСписокВыбораНалогообложения(Объект.ХозяйственнаяОперация, Элементы.НалогообложениеНДС);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		Список.Отбор,
		"Номенклатура.ТипНоменклатуры",
		Перечисления.ТипыНоменклатуры.Товар,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоУмолчанию",
		ЭтоПередачаНаКомиссию
	);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимыеРеквизитыФормы()
	
	ОбновитьЗависимыеРеквизитыФормыСервер();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий, Объект)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСкладВВыделенныхСтрокахНаСервере(Знач МассивВыделенныхСтрок, Склад)
	
	ЗаполненоСтрок = СкладыСервер.ЗаполнитьСкладыВВыделенныхСтроках(Объект.Товары, МассивВыделенныхСтрок, Склад);
	
	Если ЗаполненоСтрок > 0 Тогда
		ЗаполнитьСтатусыУказанияСерий();
	КонецЕсли;
	
	Возврат ЗаполненоСтрок;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииСоглашенияСервер()

	ГрафикОплаты = Объект.ГрафикОплаты;
	
	ЗаполнитьУсловияПродажПоCоглашению();
	ОбновитьОграничениеЗадолженности();
	
	ВалютаДокумента = Объект.Валюта;
	ПриИзмененииХозяйственнойОперацииСервер(Ложь);
	ПриИзмененииСкладаСервер();
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты) И ГрафикОплаты <> Объект.ГрафикОплаты;
	
	Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
		ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
	ИначеЕсли Объект.ЭтапыГрафикаОплаты.Количество() > 0 Тогда
		ЦенообразованиеКлиентСервер.РаспределитьСуммуПоЭтапамГрафикаОплаты(Объект.ЭтапыГрафикаОплаты, Объект.Товары.Итог("СуммаСНДС"));
		ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
		)
	);
	
	УстановитьТекущуюСтраницуФормаОплаты();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	УстановитьЗаголовкиЭлементов();
	УстановитьПараметрВидЦен();
	УстановитьВидимостьГрафикаОплаты();
	
	Если Не ОснованиеИзменено Тогда
		Объект.Основание = ПолучитьТекстОснованияДляПечати();
	КонецЕсли;
	
	Если ИспользоватьРучныеСкидкиВПродажах 
		И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда 
		ПодборТоваровСервер.УстановитьМаксимальныйПроцентРучнойСкидки(ЭтаФорма);
	КонецЕсли;
	
	ЗаполнитьПорядокРасчетов();
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрВидЦен()
	
	ВидыЦен.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СоглашениеШапка.ВидЦен КАК ВидЦен
		|ИЗ
		|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
		|ГДЕ
		|	СоглашениеШапка.Ссылка = &Соглашение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Товары.ВидЦены
		|ИЗ
		|	Справочник.СоглашенияСКлиентами.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Соглашение
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЦеновыеГруппы.ВидЦен
		|ИЗ
		|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК ЦеновыеГруппы
		|ГДЕ
		|	ЦеновыеГруппы.Ссылка = &Соглашение");
		
		Запрос.УстановитьПараметр("Соглашение", Объект.Соглашение);
		ВидыЦен.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦен"));
		
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВидыЦен", ВидыЦен.ВыгрузитьЗначения());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Соглашение", Объект.Соглашение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Валюта", Объект.Валюта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Дата", НачалоДня(Объект.Дата));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "ВидыЦен", ВидыЦен.ВыгрузитьЗначения());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Соглашение", Объект.Соглашение);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Валюта", Объект.Валюта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ПодборТаблицаХарактеристики, "Дата", НачалоДня(Объект.Дата));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭлементыПартнера(Форма)
	
	ДоступностьКоманд = ЗначениеЗаполнено(Форма.Объект.Партнер);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("РазворачиватьГруппировкиДосье");
	МассивЭлементов.Добавить("ОткрытьКарточкуКлиента");
	МассивЭлементов.Добавить("СоздатьКонтактноеЛицо");
	МассивЭлементов.Добавить("СоздатьСделку");
	МассивЭлементов.Добавить("СоздатьДоговор");
	МассивЭлементов.Добавить("СоздатьЗадание");
	МассивЭлементов.Добавить("СоздатьПретензию");
	МассивЭлементов.Добавить("ЗапланироватьВзаимодействие");
	МассивЭлементов.Добавить("ЗапланироватьВстречу");
	МассивЭлементов.Добавить("НаписатьЭлектронноеПисьмо");
	МассивЭлементов.Добавить("Позвонить");
	МассивЭлементов.Добавить("СоздатьЗаметку");
	МассивЭлементов.Добавить("УстановитьНапоминание");

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность", ДоступностьКоманд);

КонецПроцедуры

&НаСервере
Процедура ОбновитьДосьеПартнера()
	
	ДосьеПартнера.Очистить();
	
	Если ЗначениеЗаполнено(Объект.Партнер) Тогда
		
		ОтчетДосьеПартнера = Отчеты.ДосьеПартнера.Создать();
		ОтчетДосьеПартнера.Контакты = Истина;
		ОтчетДосьеПартнера.ТекущаяАктивность = Истина;
		ОтчетДосьеПартнера.ДанныеКлиента = Истина;
		ОтчетДосьеПартнера.Классификация = Истина;
		ОтчетДосьеПартнера.ВариантКлассификацииЗадолженности = ВариантКлассификацииЗадолженности;
		ОтчетДосьеПартнера.СформироватьОтчет(ДосьеПартнера, Объект.Партнер);
		Если Не РазворачиватьГруппировкиДосье Тогда
			ДосьеПартнера.ПоказатьУровеньГруппировокСтрок(0);
		КонецЕсли;
		
	КонецЕсли;
	
	ДосьеПартнераОбновлено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда
			Объект.БанковскийСчетКонтрагента = ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Объект.Контрагент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДоговорПриИзмененииСервер()
	
	ПродажиСервер.ЗаполнитьБанковскиеСчетаПоДоговору(Объект.Договор, Объект.БанковскийСчет, Объект.БанковскийСчетКонтрагента);
	
	Если Не ОснованиеИзменено Тогда
		Объект.Основание = ПолучитьТекстОснованияДляПечати();
	КонецЕсли;
	
	ЗаполнитьПорядокРасчетов();
	ОбновитьОграничениеЗадолженности();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииСервер()
	
	ПродажиСервер.УстановитьДоступностьДоговора(Объект, Элементы.Договор.Доступность, Элементы.Договор.Видимость, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ЗаполнитьДоговорПоУмолчанию();
		
		Если ЗначениеЗаполнено(Объект.ФормаОплаты) Тогда
			Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
				Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
			КонецЕсли;
			Объект.Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
		КонецЕсли;
		
	КонецЕсли;
	ОтветственныеЛицаСервер.ПриИзмененииСвязанныхРеквизитовДокумента(Объект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьБанковскийСчетКонтрагентаПоУмолчаниюСервер(Контрагент)
	
	Возврат ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетКонтрагентаПоУмолчанию(Контрагент);
	
КонецФункции

&НаСервере
Процедура ПриИзмененииГрафикаОплатыСервер()
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ГрафикЗаполнен = ЗначениеЗаполнено(Объект.ГрафикОплаты);
	
	Если ГрафикСоглашенияЗаполнен Или ГрафикЗаполнен Тогда
		ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, Ложь);
		ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	КонецЕсли;
	
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
	Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
	УстановитьТекущуюСтраницуФормаОплаты();
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииФормыОплатыСервер()
	
	УстановитьТекущуюСтраницуФормаОплаты();
	
	Объект.БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(Объект.Организация, , Объект.БанковскийСчет);
	Объект.Касса          = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(Объект.Организация, Объект.ФормаОплаты, Объект.Касса);
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВалютыСервер(НоваяВалюта, ПересчитатьСуммы = Истина)
	
	ЗаполнитьДоговорПоУмолчанию();
	
	Если ПересчитатьСуммы Тогда
		СтараяВалюта                = ВалютаДокумента;
		ДатаДокумента               = ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДата());
		СтруктураКурсовСтаройВалюты = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, ДатаДокумента);
		СтруктураКурсовНовойВалюты  = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта,  ДатаДокумента);
		
		Ценообразование.ПересчитатьСуммыТабличнойЧастиВВалюту(
			Объект.Товары,
			Объект.ЦенаВключаетНДС,
			СтараяВалюта,
			НоваяВалюта,
			СтруктураКурсовСтаройВалюты,
			СтруктураКурсовНовойВалюты,
			Истина,
			Истина
		);
		
		РассчитатьИтоговыеПоказатели(ЭтаФорма);
		
		Ценообразование.РаспределитьСуммуПоЭтапамОплаты(Объект, Объект.Товары.Итог("СуммаСНДС"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЦенаВключаетНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НалогообложениеНДСПриИзмененииСервер(КэшированныеЗначения)
	
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, КэшированныеЗначения);
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстОснованияДляПечати()
	
	ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным;
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Договор, "ПорядокРасчетов");
	КонецЕсли;
	
	ТекстОснования = Обработки.ПомощникПродаж.ПолучитьТекстОснования(Объект, ПорядокРасчетов);
	
	Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Если ЗначениеЗаполнено(ТекстОснования) Тогда
			ТекстОснования = ТекстОснования + ", " + НСтр("ru='передача на комиссию'");
		Иначе
			ТекстОснования = НСтр("ru='Передача на комиссию'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстОснования;
	
КонецФункции

&НаСервере
Функция ПоместитьВоВременноеХранилищеНаСервере()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ЭтапыГрафикаОплаты.Выгрузить());
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЭтапыОплатыИзВременногоХранилищаСервер(АдресВоВременномХранилище)
	
	ЭтапыОплаты = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Для Каждого ТекСтрока Из ЭтапыОплаты Цикл
		НоваяСтрока = Объект.ЭтапыГрафикаОплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПараметровСервер(ЗначенияПараметров)
	
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияПараметров);
	ИнициализироватьВариантыОформленияДокументовПродажи();
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	Если Элементы.ВариантОформленияДокументов.СписокВыбора.НайтиПоЗначению(Объект.ВариантОформленияДокументов) = Неопределено Тогда
		УстановитьВариантОформленияДокументовПродажиПоУмолчанию();
		ВариантОформленияДокументовПриИзмененииСервер();
	ИначеЕсли ЭтоРеализация(Объект.ВариантОформленияДокументов) И
		(ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг")
		И (Объект.СтатусРеализацииТоваровУслуг = Перечисления.СтатусыРеализацийТоваровУслуг.КОтгрузке
			ИЛИ Объект.СтатусРеализацииТоваровУслуг = Перечисления.СтатусыРеализацийТоваровУслуг.КПредоплате)) Тогда
			Объект.Серии.Очистить();
			УстановитьВидимостьЭлементовСерий();
			ЗаполнитьСтатусыУказанияСерий();
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТолькоПросмотрЭлементовФормы(Установить = Истина)
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("Склад");
	МассивЭлементов.Добавить("Соглашение");
	МассивЭлементов.Добавить("Партнер");
	
	Если Элементы.ВариантОформленияДокументов.СписокВыбора.Количество() > 1 Тогда
		МассивЭлементов.Добавить("ВариантОформленияДокументов");
	КонецЕсли;
	
	МассивЭлементов.Добавить("Организация");
	МассивЭлементов.Добавить("Контрагент");
	МассивЭлементов.Добавить("Договор");
	МассивЭлементов.Добавить("Сделка");
	МассивЭлементов.Добавить("ВалютаДокументов");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");
	МассивЭлементов.Добавить("ХозяйственнаяОперация");
	МассивЭлементов.Добавить("НалогообложениеНДС");
	МассивЭлементов.Добавить("КартаЛояльности");
	МассивЭлементов.Добавить("Менеджер");
	МассивЭлементов.Добавить("Подразделение");
	МассивЭлементов.Добавить("ГрафикОплаты");
	МассивЭлементов.Добавить("БанковскийСчет");
	МассивЭлементов.Добавить("ГруппаФинансовогоУчета");
	МассивЭлементов.Добавить("ЖелаемаяДатаОтгрузки");
	МассивЭлементов.Добавить("НеОтгружатьЧастями");
	МассивЭлементов.Добавить("ФормаОплаты");
	МассивЭлементов.Добавить("Касса");
	МассивЭлементов.Добавить("ДополнительнаяИнформация");
	МассивЭлементов.Добавить("Комментарий");
	МассивЭлементов.Добавить("ЦенаВключаетНДС");	
	МассивЭлементов.Добавить("Товары");
	МассивЭлементов.Добавить("ГруппаТара");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Установить);
	
	МассивЭлементов = Новый Массив();
	
	МассивЭлементов.Добавить("СоздатьПартнера");
	МассивЭлементов.Добавить("СчитатьКартуЛояльности");
	МассивЭлементов.Добавить("ТоварыРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыПоискПоШтрихкоду");
	МассивЭлементов.Добавить("ТоварыЗагрузитьДанныеИзТСД");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоСоглашению");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыЗаполнитьЦеныВыделенныхСтрокПоВидуЦен");
	МассивЭлементов.Добавить("ТоварыНазначитьАвтоматическиеСкидки");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидку");
	МассивЭлементов.Добавить("ТоварыНазначитьРучнуюСкидкуВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыОтменитьРучныеСкидки");
	МассивЭлементов.Добавить("ТоварыУказатьСерии");
	МассивЭлементов.Добавить("ТоварыОтменитьУказаниеСерий");
	МассивЭлементов.Добавить("ЗаполнитьДатуОтгрузкиДляВсехСтрок");
	МассивЭлементов.Добавить("ЗаполнитьДатуОтгрузкиДляВыделенныхСтрок");
	МассивЭлементов.Добавить("ТоварыЗаполнитьСкладВВыделенныхСтроках");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюРазбитьСтроку");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюУказатьСерии");
	МассивЭлементов.Добавить("ТоварыКонтекстноеМенюОтменитьУказаниеСерий");
	МассивЭлементов.Добавить("Настройка");
	МассивЭлементов.Добавить("ДополнитьМногооборотнойТарой");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", Не Установить);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Изменить", "Доступность", Установить);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРеквизитыПечатиРеализации(ПоказыватьРеквизитыТТН)
	ИспользуетсяДоставка = ИспользоватьУправлениеДоставкой
						   И (Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.ДоКлиента")
							  ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу"));
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("АдресДоставки",                  Объект.АдресДоставки);
	СтруктураПараметров.Вставить("БанковскийСчетГрузоотправителя", Объект.БанковскийСчетГрузоотправителя);
	СтруктураПараметров.Вставить("БанковскийСчетГрузополучателя",  Объект.БанковскийСчетГрузополучателя);
	СтруктураПараметров.Вставить("БанковскийСчетКонтрагента",      Объект.БанковскийСчетКонтрагента);
	СтруктураПараметров.Вставить("Грузоотправитель",               Объект.Грузоотправитель);
	СтруктураПараметров.Вставить("Грузополучатель",                Объект.Грузополучатель);
	СтруктураПараметров.Вставить("ДоверенностьВыдана",             Объект.ДоверенностьВыдана);
	СтруктураПараметров.Вставить("ДоверенностьДата",               Объект.ДоверенностьДата);
	СтруктураПараметров.Вставить("ДоверенностьЛицо",               Объект.ДоверенностьЛицо);
	СтруктураПараметров.Вставить("ДоверенностьНомер",              Объект.ДоверенностьНомер);
	СтруктураПараметров.Вставить("Договор",                        Объект.Договор);
	СтруктураПараметров.Вставить("Основание",                      Объект.Основание);
	СтруктураПараметров.Вставить("Отпустил",                       Объект.Отпустил);
	СтруктураПараметров.Вставить("ОтпустилДолжность",              Объект.ОтпустилДолжность);
	СтруктураПараметров.Вставить("Партнер",                        Объект.Партнер);
	СтруктураПараметров.Вставить("ХозяйственнаяОперация",          Объект.ХозяйственнаяОперация);
	СтруктураПараметров.Вставить("Контрагент",                     Объект.Контрагент);
	СтруктураПараметров.Вставить("Перевозчик",                     Объект.Перевозчик);
	СтруктураПараметров.Вставить("БанковскийСчетПеревозчика",      Объект.БанковскийСчетПеревозчика);
	СтруктураПараметров.Вставить("СрокДоставки",                   Объект.СрокДоставки);
	СтруктураПараметров.Вставить("Автомобиль",                     Объект.Автомобиль);
	СтруктураПараметров.Вставить("Водитель",                       Объект.Водитель);
	СтруктураПараметров.Вставить("ТолькоПросмотр",                 ДокументыСформированы И Не Модифицированность);
	СтруктураПараметров.Вставить("ПоказыватьРеквизитыТТН",         ПоказыватьРеквизитыТТН);
	СтруктураПараметров.Вставить("ТипОбъекта",                     "ПомощникПродаж");
	СтруктураПараметров.Вставить("ИспользуетсяДоставка",           ИспользуетсяДоставка);
	СтруктураПараметров.Вставить("БанковскийСчетОрганизации",      Объект.БанковскийСчет);
	Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика")
	  ИЛИ Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу") Тогда
		СтруктураПараметров.Вставить("ПеревозчикПартнер",              Объект.ПеревозчикПартнер);
	КонецЕсли;
	
	ОткрытьФормуМодально("ОбщаяФорма.РеквизитыПечатиРеализации", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантНавигацииПриИзменении(Элемент)
	
	ВариантНавигацииПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыЗаказКлиента(Команда)
	
	АдресВоВременномХранилище = ПоместитьДополнительныеРеквизитыВоВременноеХранилище("ДополнительныеРеквизитыЗаказа");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("ТипДокумента",              "ДокументОбъект.ЗаказКлиента");
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	ОткрытьФормуМодально(
		"Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты",
		ПараметрыФормы,
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыКоммерческоеПредложение(Команда)
	
	АдресВоВременномХранилище = ПоместитьДополнительныеРеквизитыВоВременноеХранилище("ДополнительныеРеквизитыКоммерческогоПредложения");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("ТипДокумента",              "ДокументОбъект.КоммерческоеПредложениеКлиенту");
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	ОткрытьФормуМодально(
		"Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты",
		ПараметрыФормы,
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыРеализацияТоваровУслуг(Команда)
	
	АдресВоВременномХранилище = ПоместитьДополнительныеРеквизитыВоВременноеХранилище("ДополнительныеРеквизитыРеализации");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("ТипДокумента",              "ДокументОбъект.РеализацияТоваровУслуг");
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	ОткрытьФормуМодально(
		"Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты",
		ПараметрыФормы,
		ЭтаФорма
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыАктВыполненныхРабот(Команда)
	
	АдресВоВременномХранилище = ПоместитьДополнительныеРеквизитыВоВременноеХранилище("ДополнительныеРеквизитыАкта");
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ТолькоПросмотр",            ДокументыСформированы И Не Модифицированность);
	ПараметрыФормы.Вставить("ТипДокумента",              "ДокументОбъект.АктВыполненныхРабот");
	ПараметрыФормы.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);
	
	ОткрытьФормуМодально(
		"Обработка.ПомощникПродаж.Форма.ДополнительныеРеквизиты",
		ПараметрыФормы,
		ЭтаФорма
	);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьДополнительныеРеквизитыВоВременноеХранилище(ДополнительныеРеквизиты)
	
	ТаблицаДопРеквизитов = Объект[ДополнительныеРеквизиты].Выгрузить();
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТаблицаДопРеквизитов, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, КоличествоПодобранныхПозиций)
	
	 НадписьВсегоПодобраноПозиций =  НСтр("ru = 'Подобрано позиций: %КоличествоПодобранныхПозиций%'");
	 НадписьВсегоПодобраноПозиций = СтрЗаменить(НадписьВсегоПодобраноПозиций, "%КоличествоПодобранныхПозиций%", КоличествоПодобранныхПозиций);
	 
КонецПроцедуры

&НаСервере
Функция ПоместитьТоварыВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПустыеДатыОтгрузки()
	
	Если Объект.Склад.Пустая() 
		Или Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаОтгрузкиПустаяСервер() Тогда
		
		ТекстВопроса = НСтр("ru='Дата отгрузки заполнена не во всех строках. Рассчитать дату отгрузки?'");
		ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			
			РассчитатьДатуОтгрузкиСервер();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДатуОтгрузкиСервер()

	ПараметрыСостоянияОбеспечения = Новый Структура;
	ПараметрыСостоянияОбеспечения.Вставить("Заказ", Объект.Ссылка);
	ПараметрыСостоянияОбеспечения.Вставить("Склад", Объект.Склад);
	ПараметрыСостоянияОбеспечения.Вставить("ЖелаемаяДатаОтгрузки", Объект.ЖелаемаяДатаОтгрузки);
	ПараметрыСостоянияОбеспечения.Вставить("АдресТовары", ПоместитьВоВременноеХранилище(Объект.Товары.Выгрузить()));
	ПараметрыСостоянияОбеспечения.Вставить("ОтборПоСостояниюНаличия", Перечисления.СостоянияНаличия.Любое);
	ПараметрыСостоянияОбеспечения.Вставить("НеОтгружатьЧастями", Объект.НеОтгружатьЧастями);
	ПараметрыСостоянияОбеспечения.Вставить("РассчитатьБезЗаказа", Истина);
	
	ОбработкаСостояниеОбеспечения = Обработки.СостояниеОбеспечения.Создать();
	
	ОбработкаСостояниеОбеспечения.ПолучитьСостояниеОбеспечения(ПараметрыСостоянияОбеспечения);
	
	Для каждого СтрокаТовары из ОбработкаСостояниеОбеспечения.Товары Цикл
		
		СтрокаТовары.Выбран = НЕ ЗначениеЗаполнено(СтрокаТовары.ДатаОтгрузки) Или Объект.НеОтгружатьЧастями;
		
	КонецЦикла;
	
	ОбработкаСостояниеОбеспечения.РассчитатьДляПолнойОтгрузки(ПараметрыСостоянияОбеспечения);
	РезультатРасчета = ОбработкаСостояниеОбеспечения.ПолучитьРезультатРасчета(ПараметрыСостоянияОбеспечения);
	
	Если РезультатРасчета <> Неопределено Тогда
		
		Объект.Товары.Загрузить(РезультатРасчета);
		
	КонецЕсли;
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются, ЗаполнитьПризнакТипНоменклатуры, ЗаполнитьПризнакВариантОформленияПродажи",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются"),
			Новый Структура("Номенклатура", "ТипНоменклатуры"),
			Новый Структура("Номенклатура", "ВариантОформленияПродажи")
			
		)
	);
	
КонецПроцедуры

&НаСервере
Функция ДатаОтгрузкиПустаяСервер()
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаОтгрузки) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПустуюДатуОтгрузки()
	
	Если Объект.Склад.Пустая() Или Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаОтгрузкиПустаяСервер() Тогда
		
		ТекстВопроса = НСтр("ru='Дата отгрузки не заполнена. Рассчитать дату отгрузки?'");
		
		ОтветНаВопрос = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			НеОтгружатьЧастямиПриИзмененииСервер(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура НеОтгружатьЧастямиПриИзмененииСервер(УчитыватьСостояниеОбеспечения = Ложь)
	
	// Вычислим максимальную дату отгрузки и приведем к ней ТЧ
	Если Объект.НеОтгружатьЧастями Тогда
		
		Если УчитыватьСостояниеОбеспечения Тогда
			РассчитатьДатуОтгрузкиСервер();
		КонецЕсли;
		
		МаксимальнаяДатаОтгрузки = Дата(1,1,1);
		Для Каждого Товар Из Объект.Товары Цикл 
			МаксимальнаяДатаОтгрузки = Макс(МаксимальнаяДатаОтгрузки, Товар.ДатаОтгрузки);
			
		КонецЦикла;
		
		Объект.ДатаОтгрузки = МаксимальнаяДатаОтгрузки;
		
		ЗаполнитьДатуОтгрузкиСервер(Объект.ДатаОтгрузки, Неопределено);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементовФормыДатОтгрузки();
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьВидимостьЭлементовФормыДатОтгрузки()
	
	Элементы.ГруппаТоварыДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
	Элементы.ТоварыДатаОтгрузки.Видимость = НЕ Объект.НеОтгружатьЧастями;
	Элементы.ДатаОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	Элементы.РассчитатьДатуОтгрузки.Видимость = Объект.НеОтгружатьЧастями;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГрафикаОплаты()
	
	ГрафикСоглашенияЗаполнен = ЗначениеЗаполнено(Объект.Соглашение) И ПродажиВызовСервера.ГрафикСоглашенияЗаполнен(Объект.Соглашение);
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГрафикОплаты", "Видимость",
		Не ГрафикСоглашенияЗаполнен
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиОплаты")
		И Объект.ХозяйственнаяОперация<>Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
		И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
		И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЭтапыОплатыСервер(ГрафикСоглашенияЗаполнен, ГрафикЗаполнен, ЗаполнятьФормуОплаты = Ложь)
	
	Если ГрафикСоглашенияЗаполнен Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплатыПоСоглашению(
			Объект,
			Объект.Товары.Итог("СуммаСНДС"),
			ЗаполнятьФормуОплаты // ЗаполнятьФормуОплаты
		);
	ИначеЕсли ГрафикЗаполнен Тогда
		ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(
			Объект,
			Объект.Товары.Итог("СуммаСНДС"),
			ЗаполнятьФормуОплаты // ЗаполнятьФормуОплаты
		);
	КонецЕсли;
	
	НадписьЭтапыОплаты = ЦенообразованиеКлиентСервер.НадписьЭтапыОплаты(Объект.ЭтапыГрафикаОплаты.Количество());
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	
	Если ЗаполнятьФормуОплаты Тогда
		УстановитьТекущуюСтраницуФормаОплаты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьДополнительныхРеквизитов()
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документы.АктВыполненныхРабот.ПустаяСсылка());
	Если НаборСвойств.Количество() > 0 И НаборСвойств[0].Набор.ДополнительныеРеквизиты.Количество() > 0 Тогда
		ЕстьДопРеквизитыАкта = Истина;
	КонецЕсли;
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документы.ЗаказКлиента.ПустаяСсылка());
	Если НаборСвойств.Количество() > 0 И НаборСвойств[0].Набор.ДополнительныеРеквизиты.Количество() > 0 Тогда
		ЕстьДопРеквизитыЗаказа = Истина;
	КонецЕсли;
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документы.РеализацияТоваровУслуг.ПустаяСсылка());
	Если НаборСвойств.Количество() > 0 И НаборСвойств[0].Набор.ДополнительныеРеквизиты.Количество() > 0 Тогда
		ЕстьДопРеквизитыРеализации = Истина;
	КонецЕсли;
	
	НаборСвойств = УправлениеСвойствамиСлужебный.ПолучитьНаборыСвойствОбъекта(Документы.КоммерческоеПредложениеКлиенту.ПустаяСсылка());
	Если НаборСвойств.Количество() > 0 И НаборСвойств[0].Набор.ДополнительныеРеквизиты.Количество() > 0 Тогда
		ЕстьДопРеквизитыКомПредложения = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СкрытьНедоступныеДополнительныеРеквизиты()
	
	ПроверитьДоступностьДополнительныхРеквизитов();
	
	МассивЭлементов = Новый Массив();
	
	Если НЕ ЕстьДопРеквизитыКомПредложения Тогда
		МассивЭлементов.Добавить("ДополнительныеРеквизитыКоммерческоеПредложение");
	КонецЕсли;
	
	Если НЕ ЕстьДопРеквизитыЗаказа Тогда
		МассивЭлементов.Добавить("ДополнительныеРеквизитыЗаказКлиента");
		МассивЭлементов.Добавить("ДополнительныеРеквизитыЗаказКлиента1");
	КонецЕсли;
	
	Если НЕ ЕстьДопРеквизитыРеализации Тогда
		МассивЭлементов.Добавить("ДополнительныеРеквизитыРеализацияТоваровУслуг");
		МассивЭлементов.Добавить("ДополнительныеРеквизитыРеализацияТоваровУслуг1");
	КонецЕсли;
		
	Если НЕ ЕстьДопРеквизитыАкта Тогда
		МассивЭлементов.Добавить("ДополнительныеРеквизитыАктВыполненныхРабот");
		МассивЭлементов.Добавить("ДополнительныеРеквизитыАктВыполненныхРабот1");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
		Элементы,
		МассивЭлементов,
		"Видимость",
		Ложь
		);
	КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьПечатиПКО()
	
	ЕстьПравоПечатиПКО = ПравоДоступа("Добавление",Метаданные.Документы.ПриходныйКассовыйОрдер);
	
	Если НЕ ЕстьПравоПечатиПКО Тогда
		Если Объект.СоздаватьПриходныйКассовыйОрдер Тогда
			Объект.СоздаватьПриходныйКассовыйОрдер = Ложь;
		КонецЕсли;
		Если Объект.ПечататьПриходныйКассовыйОрдер Тогда
			Объект.ПечататьПриходныйКассовыйОрдер = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерий()
	РассчитатьПараметрыСерий();
	
	Для каждого ВариантОформления Из Перечисления.ВариантыОформленияДокументовПродажи Цикл
		ЗаполняемыеСтроки = Объект.Товары.НайтиСтроки(Новый Структура("ВариантОформления", ВариантОформления));
		Если ЗаполняемыеСтроки.Количество()>0 Тогда
			Если ЭтоРеализация(ВариантОформления) Тогда
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Реализация, ЗаполняемыеСтроки);
			Иначе
				НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект, ПараметрыУказанияСерий.Заказ, ЗаполняемыеСтроки);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ОпределитьПараметрыСерий(ТекущиеДанныеИдентификатор)
	Если ТекущиеДанныеИдентификатор<> Неопределено Тогда
		ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущиеДанныеИдентификатор);
		Если ЭтоРеализация(ТекущиеДанные.ВариантОформления) Тогда
			Возврат ПараметрыУказанияСерий.Реализация
		Иначе
			Возврат ПараметрыУказанияСерий.Заказ
		КонецЕсли;
	Иначе
		Возврат ПараметрыУказанияСерий.Реализация
	КонецЕсли; 
КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоРеализация(ВариантОформления)
	Если ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг Или
		ВариантОформления = Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг Тогда
		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли;
КонецФункции

&НаСервере
Процедура РассчитатьПараметрыСерий()
	
	ПараметрыОтбораПродажа = Новый Структура("ВариантОформления", Перечисления.ВариантыОформленияДокументовПродажи.ЗаказКлиентаРеализацияТоваровУслуг);
	СтрокиПродажи = Объект.Товары.НайтиСтроки(ПараметрыОтбораПродажа);

	Объект.ЕстьСтрокиЗаказКлиентаРеализацияТоваровУслуг = СтрокиПродажи.Количество() > 0; 
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПомощникПродаж));

КонецПроцедуры

&НаСервере
Процедура ОбновитьОграничениеЗадолженности()
	
	ПродажиСервер.ОбновитьОграничениеЗадолженности(
		Объект.Договор,
		Объект.Дата,
		ТекстОстатокДопустимогоКредита,
		Элементы.ТекстОстатокДопустимогоКредита.Видимость,
		Элементы.ТекстОстатокДопустимогоКредита.ЦветТекста,
		Элементы.КартинкаОтгрузкаЗапрещена.Видимость);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗакрытиеЗаказаКлиента(Отказ)
	
	КонтролироватьРасчеты  = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОплаты");
	КонтролироватьОтгрузку = ПолучитьФункциональнуюОпцию("НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки");
	
	НайденныйЗаказ = Неопределено;
	
	Для каждого ТекСтрока Из Объект.Документы Цикл
	
		Если ТипЗнч(ТекСтрока.Документ) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			
			НайденныйЗаказ = ТекСтрока.Документ;
			Прервать;
		КонецЕсли;
	
	КонецЦикла; 
	
	Если КонтролироватьРасчеты И НайденныйЗаказ <> Неопределено Тогда
		Если НайденныйЗаказ.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным И НайденныйЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(РасчетыСКлиентамиОстатки.КОплатеОстаток, 0) <= 0
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЕстьНезавершенныеРасчеты,
				|	РасчетыСКлиентамиОстатки.Валюта КАК Валюта,
				|	РасчетыСКлиентамиОстатки.КОплатеОстаток КАК КОплатеОстаток
				|ИЗ
				|	РегистрНакопления.РасчетыСКлиентами.Остатки(, ЗаказКлиента = &Ссылка) КАК РасчетыСКлиентамиОстатки";
				
			Запрос.УстановитьПараметр("Ссылка", НайденныйЗаказ);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если Выборка.Следующий() Тогда
				Если Выборка.ЕстьНезавершенныеРасчеты  Тогда
					ТекстОшибки = НСтр("ru='Невозможно создать заказ со статусом ""Закрыт"" без полной оплаты.
						|Для закрытия заказа требуется оплата %СуммаКОплате% %Валюта%. Создание документов будет отменено. '");
					
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СуммаКОплате%",      Строка(Выборка.КОплатеОстаток));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Валюта%",      Строка(Выборка.Валюта));
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						,
						,
						Отказ
					);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если КонтролироватьОтгрузку И НайденныйЗаказ <> Неопределено Тогда
		Если НайденныйЗаказ.Статус = Перечисления.СтатусыЗаказовКлиентов.Закрыт Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) <= 0
				|			ТОГДА ЛОЖЬ
				|		ИНАЧЕ ИСТИНА
				|	КОНЕЦ КАК ЕстьНезавершеннаяОтгрузка,
				|	ЕСТЬNULL(ЗаказыКлиентовОстатки.СуммаОстаток, 0) КАК СуммаОстаток
				|ИЗ
				|	РегистрНакопления.ЗаказыКлиентов.Остатки(, ЗаказКлиента = &Ссылка) КАК ЗаказыКлиентовОстатки";
			
			Запрос.УстановитьПараметр("Ссылка", НайденныйЗаказ);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЕстьНезавершеннаяОтгрузка Тогда
					
					ТекстОшибки = НСтр("ru='Невозможно создать заказ со статусом ""Закрыт"" без полной отгрузки. Создание документов будет отменено.'");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							ТекстОшибки,
							,
							,
							,
							Отказ
						);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокРасчетов()
	
	Объект.ПорядокРасчетов = ВзаиморасчетыСервер.ПорядокРасчетовПоДокументу(Объект);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"НадписьЭтапыОплаты",
		"Видимость",
		Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение
			И Объект.ВариантОформленияДокументов <> Перечисления.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг
			И Объект.ПорядокРасчетов <> Перечисления.ПорядокРасчетов.ПоНакладным
			И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию
	);
	
	УстановитьВидимостьГрафикаОплаты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеДокумента(ДокументИсточник)
	
	НайденныеДокументы = Объект.Документы.НайтиСтроки(Новый Структура("Документ", ДокументИсточник));
	
	Если НайденныеДокументы.Количество() = 1 Тогда
		
		ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "Проведен");
		
		Если ДокументПроведен Тогда
			НайденныеДокументы[0].Состояние = 0;
		Иначе
			НайденныеДокументы[0].Состояние = 2;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВернутьМногооборотнуюТаруПриИзмененииСервер()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействий.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВТЧ(Объект);
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.Товары, СтруктураДействий, Неопределено);
	
	ОбновитьДоступностьЭлементовВозвратнойТары(ЭтаФорма);
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ, СВЯЗАННЫХ С ДОСТАВКОЙ

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	Если Объект.ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
		Элементы.АдресДоставкиСамовывоз.Видимость = Ложь;
		Если Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчика") Тогда
			Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаКоммерческоеПредложениеСиламиПеревозчика;
		ИначеЕсли Объект.СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу") Тогда
			Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаКоммерческоеПредложениеСиламиПеревозчикаПоАдресу;
		Иначе
			Элементы.СтраницыДоставки.ТекущаяСтраница = Элементы.СтраницаСамовывоз;
		КонецЕсли;
	Иначе
		Элементы.АдресДоставкиСамовывоз.Видимость = Истина;
		ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Найти(Элемент.Имя,"АдресДоставкиПолучателя") <> 0 Тогда
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(Объект.АдресДоставки,
												Объект.АдресДоставкиЗначенияПолей,
												РедактироватьАдресаДоставкиТолькоВДиалоге,
												АдресаДоставкиТолькоРоссийские);
	Иначе
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(Объект.АдресДоставкиПеревозчика,
												Объект.АдресДоставкиПеревозчикаЗначенияПолей,
												РедактироватьАдресаДоставкиТолькоВДиалоге,
												АдресаДоставкиТолькоРоссийские);
	КонецЕсли;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы,Объект,Элемент.Имя,ВыбранноеЗначение);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяДоставкиС);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			Объект.ВремяДоставкиС = Дата(1,1,1,0,0,1);
		Иначе
			Объект.ВремяДоставкиС = ВыбранноеВремя;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, Объект.ВремяДоставкиПо);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			Объект.ВремяДоставкиПо = Дата(1,1,1,0,0,1);
		Иначе
			Объект.ВремяДоставкиПо = ВыбранноеВремя;
		КонецЕсли;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиДоставка(Команда)
	
	СброситьПометкиКомандШапки(Элементы);
	Элементы.ПерейтиДоставка.Пометка = Истина;
	Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаДоставка;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	Если ИспользоватьУправлениеДоставкой Тогда
		ДоставкаТоваров.ЗаполнитьРеквизитыДоставкиПомощникаПродаж(Элементы, ИмяЭлементаФормы, Объект)
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поиск

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	Если НЕ ПодборТоваровКлиент.ВыполнениеПоискаТоваровВозможно(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискТоваровНаСервере();
	
	ПодборТоваровКлиент.ПослеВыполненияПоискаТоваров(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискТоваровНаСервере()
	
	ПодборТоваровСервер.ВыполнитьПоискТоваров(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики ожидания

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ИерархияНоменклатурыПриАктивизацииСтрокиНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий на сервере

&НаСервере
Процедура ПолучитьИнформациюОТовареНаСервере()
	
	ПодборТоваровСервер.ПолучитьИнформациюОТовареПриПродаже(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКорзиныНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииКорзины(ЭтаФорма);
	ОбновитьТекстИнформационнойНадписиФормируемыеДокументы();
	МногооборотнаяТараСервер.ОбновитьСостояниеЗаполненияМногооборотнойТары(Объект.СостояниеЗаполненияМногооборотнойТары);
	
КонецПроцедуры

&НаСервере
Процедура СПодобраннойНоменклатуройСовместноПродаетсяНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоНоменклатуреПродаваемойСовместно(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормыНаСервере()
	
	ПодборТоваровСервер.СохранитьНастройкиФормыПодбора(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуНоменклатурыНаСервере()
	
	ПодборТоваровСервер.ПерейтиКСпискуНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиКСпискуХарактеристикНаСервере()
	
	ПодборТоваровСервер.ПерейтиКСпискуХарактеристик(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТоварыСоСхожимиСвойствамиНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииОтображенияТоваровСоСхожимиСвойствами(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДиапазонаЦенНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоДиапазонуЦен(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ТолькоВНаличииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборТолькоВНаличии(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СегментНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииСегментаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ДеревоОтборовОтборПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ДеревоОтборовОтборПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИерархияНоменклатурыПриАктивизацииСтрокиНаСервере()
	
	ПодборТоваровСервер.ПриАктивизацииСтрокиИерархииНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВидаНоменклатуры(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ВариантНавигацииПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииВариантаНавигации(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	
	ПодборТоваровСервер.ПриИзмененииИспользованияФильтров(ЭтаФорма);
	УстановитьВидимостьЭлементовПоОперацииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ТоварыДругогоКачестваНаСервере()
	
	ПодборТоваровСервер.УстановитьОтборПоНоменклатуреДругогоКачества(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура НоменклатураИсходногоКачестваПриИзмененииНаСервере()
	
	ПодборТоваровСервер.НоменклатураИсходногоКачестваПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура СписокКачестваПометкаПриИзмененииНаСервере()
	
	ПодборТоваровСервер.СписокКачестваПометкаПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ВладелецХарактеристик()
	
	Возврат	ПодборТоваровСервер.ВладелецХарактеристик(ТекущаяСтрокаНоменклатуры.Номенклатура);
	
КонецФункции

&НаСервере
Функция АдресТаблицПараметровДереваОтборовНаСервере()
	
	Структура = Новый Структура("АдресТаблицыПараметров, АдресТаблицыСопостовления");
	
	Структура.АдресТаблицыПараметров = ПодборТоваровСервер.АдресТаблицыПараметровДереваОтборов(ЭтаФорма);
	Структура.АдресТаблицыСопостовления = ПодборТоваровСервер.АдресТаблицыСопостовленияДереваОтборов(ЭтаФорма);

	Возврат Структура;
	
КонецФункции

&НаСервере
Функция АдресТаблицыПараметровДереваОтборовНаСервере()
	
	АдресТаблицы = ПодборТоваровСервер.АдресТаблицыПараметровДереваОтборов(ЭтаФорма);
	
	Возврат АдресТаблицы;
	
КонецФункции

&НаСервере
Процедура СброситьОтборыПоСвойствамНаСервере()
	
	ПодборТоваровСервер.СброситьОтборыПоСвойствам(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДоступностьЭлементовВозвратнойТары(Форма)
	
	МассивЭлементов = Новый Массив();
	МассивЭлементов.Добавить("СрокВозвратаМногооборотнойТары");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность", Форма.Объект.ВернутьМногооборотнуюТару);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМногооборотнуюТаруИзХранилищаСервер(АдресТарыВХранилище)
	
	СтруктураДействийИзмененныеСтроки = Новый Структура;
	СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(Объект);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьПризнакТипНоменклатуры", Новый Структура("Номенклатура", "ТипНоменклатуры"));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьКоличествоУпаковок");
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДС", Объект.НалогообложениеНДС);
	СтруктураДействийИзмененныеСтроки.Вставить("ЗаполнитьСтавкуНДСВозвратнойТары", Объект.ВернутьМногооборотнуюТару);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСумму");
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
	СтруктураДействийИзмененныеСтроки.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Истина));
	
	СтруктураДействийСДобавленнымиСтроками =  ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураДействийИзмененныеСтроки);;
	СтруктураДействийСДобавленнымиСтроками.Вставить("ПроверитьЗаполнитьСклад", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияСкладаВСтрокеТЧ(Объект, СкладГруппа));
	СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", Новый Структура("Номенклатура", "ВариантОформленияПродажи"));
	Если ЗначениеЗаполнено(Объект.Соглашение) Тогда
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьУсловияПродаж", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияУсловийПродажВСтрокеТЧ(Объект));
	Иначе
		СтруктураДействийСДобавленнымиСтроками.Вставить("ЗаполнитьЦенуПродажи", ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныВСтрокеТЧ(Объект));
	КонецЕсли;
	
	ИменаПолей = ИменяПолейПодбораМногооборотнойТары(Объект.ВариантОформленияДокументов, Истина);
	МногооборотнаяТараСервер.ЗаполнитьМногооборотнуюТаруИзХранилища(
		Объект,
		АдресТарыВХранилище,
		"Товары",
		ИменаПолей,
		СтруктураДействийИзмененныеСтроки,
		СтруктураДействийИзмененныеСтроки);
		
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура(
			"ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.ВариантОформления)
			И ТекСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
			ЗаполнитьВариантОформленияВСтрокеТабличнойЧасти(ТекСтрока, Объект.ВариантОформленияДокументов);
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьИтоговыеПоказатели(ЭтаФорма);
	ОбновитьЗависимыеРеквизитыФормыСервер();
	ОбновитьНадписьВсегоПодобраноПозиций(НадписьВсегоПодобраноПозиций, Объект.Товары.Количество());
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИменяПолейПодбораМногооборотнойТары(ВариантОформленияДокументов, ИсключитьКоличество = Ложь)
	
	Если ИсключитьКоличество Тогда
		
		Если ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
			ИменаПолей = "Номенклатура,Характеристика";
		ИначеЕсли ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг") Тогда
			ИменаПолей = "Номенклатура,Характеристика,Склад";
		Иначе
			ИменаПолей = "Номенклатура,Характеристика,Склад,ДатаОтгрузки";
		КонецЕсли;
		
	Иначе
		
		Если ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.КоммерческоеПредложение") Тогда
			ИменаПолей = "Номенклатура,Характеристика,Количество";
		ИначеЕсли ВариантОформленияДокументов = ПредопределенноеЗначение("Перечисление.ВариантыОформленияДокументовПродажи.РеализацияТоваровУслуг") Тогда
			ИменаПолей = "Номенклатура,Характеристика,Количество,Склад";
		Иначе
			ИменаПолей = "Номенклатура,Характеристика,Количество,Склад,ДатаОтгрузки";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИменаПолей;
	
КонецФункции
