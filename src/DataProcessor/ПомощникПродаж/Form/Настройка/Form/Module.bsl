////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность И Не СохранитьПараметры Тогда
		
		СписокКнопок = Новый СписокЗначений();
		СписокКнопок.Добавить("Закрыть", НСтр("ru = 'Закрыть'"));
		СписокКнопок.Добавить("НеЗакрывать", НСтр("ru = 'Не закрывать'"));
		
		ОтветНаВопрос = Вопрос(НСтр("ru = 'Параметры помощника продаж были изменены. Закрыть форму без сохранения параметров?'"), СписокКнопок);
		
		Если ОтветНаВопрос = "НеЗакрывать" Тогда
			Отказ = Истина;
			СохранитьПараметры = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СохранитьПараметры Тогда
		
		ОчиститьСообщения();
		
		Если Не СоздаватьКоммерческоеПредложение И
			Не СоздаватьЗаказКлиента И
			Не СоздаватьДокументПродажи Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите не менее одного документа для создания'"));
			Отказ = Истина;
			СохранитьПараметры = Ложь;
			
		КонецЕсли;
		
		Если СоздаватьКоммерческоеПредложение И Не ЗначениеЗаполнено(СтатусКоммерческогоПредложения) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Статус коммерческого предложения"" не заполнено'"),
				,
				"СтатусКоммерческогоПредложения",
				,
				Отказ
			);
			СохранитьПараметры = Ложь;
		
		КонецЕсли;
		
		Если ИспользоватьСтатусыЗаказовКлиентов И СоздаватьЗаказКлиента И Не ЗначениеЗаполнено(СтатусЗаказаКлиента) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Статус заказа клиента"" не заполнено'"),
				,
				"СтатусЗаказаКлиента",
				,
				Отказ
			);
			СохранитьПараметры = Ложь;
		
		КонецЕсли;
		
		Если ИспользоватьСтатусыРеализацийТоваровУслуг
			И СоздаватьДокументПродажи
			И Не ЗначениеЗаполнено(СтатусРеализацииТоваровУслуг) Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Статус реализации"" не заполнено'"),
				,
				"СтатусРеализацииТоваровУслуг",
				,
				Отказ
			);
			СохранитьПараметры = Ложь;
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если СохранитьПараметры Тогда
		
		СтруктураПараметров = ПолучитьПараметры(ЭтаФорма);
		ОповеститьОВыборе(СтруктураПараметров);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьСтатусыРеализацийТоваровУслуг = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыРеализацийТоваровУслуг");
	ИспользоватьСтатусыЗаказовКлиентов        = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыЗаказовКлиентов");
	
	СтруктураПараметров = ПолучитьПараметры(Параметры);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураПараметров);
	
	Если НЕ ИспользоватьСтатусыЗаказовКлиентов Тогда
		СтатусЗаказаКлиента = ПредопределенноеЗначение("Перечисление.СтатусыЗаказовКлиентов.Закрыт");
	КонецЕсли;
	
	ЕстьПравоПечатиПКО = ПравоДоступа("Добавление",Метаданные.Документы.ПриходныйКассовыйОрдер);
	
	УстановитьДоступностьСчетаНаОплатуПриходногоКассовогоОрдера(ЭтаФорма);
	УстановитьДоступностьКоммерческогоПредложения(ЭтаФорма);
	УстановитьДоступностьЗаказаКлиента(ЭтаФорма);
	УстановитьДоступностьСчетаНаОплату(ЭтаФорма);
	УстановитьДоступностьДокументаПродажи(ЭтаФорма);
	УстановитьДоступностьПриходногоКассовогоОрдера(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура СоздаватьКоммерческоеПредложениеПриИзменении(Элемент)
	
	УстановитьДоступностьКоммерческогоПредложения(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьЗаказКлиентаПриИзменении(Элемент)
	
	УстановитьДоступностьСчетаНаОплатуПриходногоКассовогоОрдера(ЭтаФорма);
	УстановитьДоступностьЗаказаКлиента(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьСчетНаОплатуПриИзменении(Элемент)
	
	УстановитьДоступностьСчетаНаОплату(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьДокументПродажиПриИзменении(Элемент)
	
	УстановитьДоступностьСчетаНаОплатуПриходногоКассовогоОрдера(ЭтаФорма);
	УстановитьДоступностьДокументаПродажи(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздаватьПриходныйКассовыйОрдерПриИзменении(Элемент)
	
	Если НЕ ЕстьПравоПечатиПКО Тогда
		ОчиститьСообщения();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Недостаточно прав на создание ПКО.'"));
	КонецЕсли;
	
	УстановитьДоступностьПриходногоКассовогоОрдера(ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОК(Команда)
	
	СохранитьПараметры = Истина;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПараметры(Источник)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ПечататьАктВыполненныхРабот",              Источник.ПечататьАктВыполненныхРабот);
	СтруктураПараметров.Вставить("ПечататьЗаказКлиента",                     Источник.ПечататьЗаказКлиента);
	СтруктураПараметров.Вставить("ПечататьКоммерческоеПредложение",          Источник.ПечататьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("ПечататьПриходныйКассовыйОрдер",           Источник.ПечататьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("ПечататьРеализациюТоваровУслуг",           Источник.ПечататьРеализациюТоваровУслуг);
	СтруктураПараметров.Вставить("ПечататьСчетНаОплату",                     Источник.ПечататьСчетНаОплату);
	СтруктураПараметров.Вставить("ПечататьСчетФактуру",                      Источник.ПечататьСчетФактуру);
	СтруктураПараметров.Вставить("СоздаватьДокументПродажи",                 Источник.СоздаватьДокументПродажи);
	СтруктураПараметров.Вставить("СоздаватьЗаказКлиента",                    Источник.СоздаватьЗаказКлиента);
	СтруктураПараметров.Вставить("СоздаватьКоммерческоеПредложение",         Источник.СоздаватьКоммерческоеПредложение);
	СтруктураПараметров.Вставить("СоздаватьПриходныйКассовыйОрдер",          Источник.СоздаватьПриходныйКассовыйОрдер);
	СтруктураПараметров.Вставить("СоздаватьСчетНаОплату",                    Источник.СоздаватьСчетНаОплату);
	СтруктураПараметров.Вставить("СтатусЗаказаКлиента",                      Источник.СтатусЗаказаКлиента);
	СтруктураПараметров.Вставить("СтатусКоммерческогоПредложения",           Источник.СтатусКоммерческогоПредложения);
	СтруктураПараметров.Вставить("СтатусРеализацииТоваровУслуг",             Источник.СтатусРеализацииТоваровУслуг);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьИзменениеФлага(Реквизит, ЗависимыйЭлемент, ЗависимыйРеквизит  = Неопределено)
	
	ЗависимыйЭлемент.Доступность = Реквизит;
	Если Не Реквизит И ЗависимыйЭлемент <> Неопределено Тогда
		 ЗависимыйРеквизит = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСчетаНаОплатуПриходногоКассовогоОрдера(Форма)
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи,
		Форма.Элементы.СоздаватьСчетНаОплату,
		Форма.СоздаватьСчетНаОплату
	);
	ОбработатьИзменениеФлага(
		(Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи) И Форма.СоздаватьСчетНаОплату,
		Форма.Элементы.ПечататьСчетНаОплату,
		Форма.ПечататьСчетНаОплату
	);
	ОбработатьИзменениеФлага(
		Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи,
		Форма.Элементы.СоздаватьПриходныйКассовыйОрдер,
		Форма.СоздаватьПриходныйКассовыйОрдер
	);
	ОбработатьИзменениеФлага(
		(Форма.СоздаватьЗаказКлиента Или Форма.СоздаватьДокументПродажи) И Форма.СоздаватьПриходныйКассовыйОрдер,
		Форма.Элементы.ПечататьПриходныйКассовыйОрдер,
		Форма.ПечататьПриходныйКассовыйОрдер
	);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКоммерческогоПредложения(Форма)
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьКоммерческоеПредложение,
		Форма.Элементы.ПечататьКоммерческоеПредложение,
		Форма.ПечататьКоммерческоеПредложение
	);
	ОбработатьИзменениеФлага(
		Форма.СоздаватьКоммерческоеПредложение,
		Форма.Элементы.СтатусКоммерческогоПредложения
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЗаказаКлиента(Форма)
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьЗаказКлиента,
		Форма.Элементы.ПечататьЗаказКлиента,
		Форма.ПечататьЗаказКлиента
	);
	ОбработатьИзменениеФлага(
		Форма.СоздаватьЗаказКлиента,
		Форма.Элементы.СтатусЗаказаКлиента
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСчетаНаОплату(Форма)
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьСчетНаОплату,
		Форма.Элементы.ПечататьСчетНаОплату,
		Форма.ПечататьСчетНаОплату
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДокументаПродажи(Форма)
	
	ОбработатьИзменениеФлага(
		Форма.СоздаватьДокументПродажи,
		Форма.Элементы.ПечататьРеализацию,
		Форма.ПечататьРеализациюТоваровУслуг
	);
	ОбработатьИзменениеФлага(
		Форма.СоздаватьДокументПродажи,
		Форма.Элементы.ПечататьАкт,
		Форма.ПечататьАктВыполненныхРабот
	);
	ОбработатьИзменениеФлага(
		Форма.СоздаватьДокументПродажи,
		Форма.Элементы.ПечататьСчетФактуру,
		Форма.ПечататьСчетФактуру
	);
	ОбработатьИзменениеФлага(
		Форма.СоздаватьДокументПродажи,
		Форма.Элементы.СтатусРеализацииТоваровУслуг
	);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПриходногоКассовогоОрдера(Форма)
	
	Если Форма.ЕстьПравоПечатиПКО Тогда
		ОбработатьИзменениеФлага(
			Форма.СоздаватьПриходныйКассовыйОрдер,
			Форма.Элементы.ПечататьПриходныйКассовыйОрдер,
			Форма.ПечататьПриходныйКассовыйОрдер
		);
	Иначе
		Форма.СоздаватьПриходныйКассовыйОрдер = Ложь;
		Форма.ПечататьПриходныйКассовыйОрдер = Ложь;
	КонецЕсли; 

КонецПроцедуры
