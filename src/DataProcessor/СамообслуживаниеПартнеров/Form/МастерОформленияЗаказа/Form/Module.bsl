
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Партнер") Тогда
		Партнер = Параметры.Партнер;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("Соглашение") Тогда
		Соглашение = Параметры.Соглашение;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СоглашениеСКлиентом.Наименование КАК СоглашениеСтрока,
		               |	СоглашениеСКлиентом.ГрафикОплаты,
		               |	ЕСТЬNULL(ГрафикиОплаты.ФормаОплаты, ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.ПустаяСсылка)) КАК ФормаОплаты,
		               |	СоглашениеСКлиентом.Валюта,
		               |	СоглашениеСКлиентом.ЦенаВключаетНДС,
		               |	СоглашениеСКлиентом.Контрагент,
		               |	СоглашениеСКлиентом.Организация,
		               |	СоглашениеСКлиентом.НалогообложениеНДС,
		               |	СоглашениеСКлиентом.Склад,
		               |	СоглашениеСКлиентом.ХозяйственнаяОперация,
		               |	СоглашениеСКлиентом.ИспользуютсяДоговорыКонтрагентов
		               |ИЗ
		               |	Справочник.СоглашенияСКлиентами КАК СоглашениеСКлиентом
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты КАК ГрафикиОплаты
		               |		ПО СоглашениеСКлиентом.ГрафикОплаты = ГрафикиОплаты.Ссылка
		               |ГДЕ
		               |	СоглашениеСКлиентом.Ссылка = &Соглашение";
		
		Запрос.УстановитьПараметр("Соглашение",Соглашение);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма,Выборка);
		КонецЕсли;
		
	Иначе
		
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
	Если Параметры.Свойство("Склад") Тогда
		Склад = Параметры.Склад;
	КонецЕсли;
	
	Если Параметры.Свойство("АдресКорзины") Тогда
		СформироватьТаблицуТоварыПоДаннымКорзины(Параметры.АдресКорзины);
	КонецЕсли;
	
	Элементы.СтраницыОсновные.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыКнопки.ОтображениеСтраниц   = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницыДоставки.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	МакетИтоговаяИнформация = Обработки.СамообслуживаниеПартнеров.ПолучитьМакет("ОформлениеЗаказа").ПолучитьТекст();
	
	СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	ИспользоватьУправлениеДоставкой = ПолучитьФункциональнуюОпцию("ИспользоватьУправлениеДоставкой");
	Если ИспользоватьУправлениеДоставкой Тогда
		АдресаДоставкиТолькоРоссийские = ПолучитьФункциональнуюОпцию("АдресаДоставкиТолькоРоссийские");
		РедактироватьАдресаДоставкиТолькоВДиалоге = ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
		Если РедактироватьАдресаДоставкиТолькоВДиалоге Тогда
			Для Каждого ЭлементФормы Из Элементы Цикл
				Если Найти(ЭлементФормы.Имя,"АдресДоставки") <> 0 И ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода Тогда
					ЭлементФормы.РедактированиеТекста = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьУстановитьРеквизитыДоставкиСервер("Партнер");
	КонецЕсли;
	
	УправлениеДоступностьюСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	Если ИспользуютсяДоговорыКонтрагентов Тогда
		УправлениеДоговорами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЖелаемаяДатаОтгрузкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЖелаемаяДатаОтгрузки) И ЖелаемаяДатаОтгрузки < НачалоДня(ТекущаяДата()) Тогда
		ЖелаемаяДатаОтгрузки = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ПродажиКлиент.ЗаполнитьСписокВыбораАдреса(Элемент, Партнер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ, СВЯЗАННЫХ С ДОСТАВКОЙ

&НаКлиенте
Процедура СпособМестоДоставкиПеревозчикПриИзменении(Элемент)
	
	Если СпособДоставки = ПредопределенноеЗначение("Перечисление.СпособыДоставки.Самовывоз") Тогда
		ДоставкаТоваровКлиентСервер.УстановитьСтраницуДоставки(Элементы,СпособДоставки)
	Иначе
		ЗаполнитьУстановитьРеквизитыДоставкиСервер(Элемент.Имя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(АдресДоставки,
												АдресДоставкиЗначенияПолей,
												РедактироватьАдресаДоставкиТолькоВДиалоге,
												АдресаДоставкиТолькоРоссийские);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РеквизитыДоставки = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки();
	ЗаполнитьЗначенияСвойств(РеквизитыДоставки, ЭтаФорма);
	ДоставкаТоваровКлиент.АдресДоставкиОбработкаВыбора(Элементы,РеквизитыДоставки,Элемент.Имя,ВыбранноеЗначение);
	ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыДоставки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, ВремяДоставкиС);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			ВремяДоставкиС = Дата(1,1,1,0,0,1);
		Иначе
			ВремяДоставкиС = ВыбранноеВремя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВремяДоставкиПоНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, ВремяДоставкиПо);
	Если ВыбранноеВремя <> Неопределено Тогда
		Если ВыбранноеВремя = Дата(1,1,1) Тогда
			ВремяДоставкиПо = Дата(1,1,1,0,0,1);
		Иначе
			ВремяДоставкиПо = ВыбранноеВремя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьПереходПоСтраницам(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьИнформациюОСкидках(Команда)
	
	ТекущиеДанные = Элементы.ОтобранныеТоварыРассчитанныеСкидки.ТекущиеДанные;
	СкидкиНаценкиКлиент.ОткрытьФормуПримененныеСкидки(ТекущиеДанные, ЗаполнитьСтруктуруПоРеквизитамФормы(), ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция ЗаполнитьСтруктуруПоРеквизитамФормы()
	
	СтруктураДляРасчетаСкидок = Новый Структура;
	
	СтруктураДляРасчетаСкидок.Вставить("Ссылка",Документы.ЗаказКлиента.ПустаяСсылка());
	СтруктураДляРасчетаСкидок.Вставить("Дата",ТекущаяДата());
	СтруктураДляРасчетаСкидок.Вставить("Соглашение",Соглашение);
	СтруктураДляРасчетаСкидок.Вставить("Склад",Склад);
	СтруктураДляРасчетаСкидок.Вставить("КартаЛояльности",Справочники.КартыЛояльности.ПустаяСсылка());
	СтруктураДляРасчетаСкидок.Вставить("Партнер",Партнер);
	СтруктураДляРасчетаСкидок.Вставить("ГрафикОплаты",ГрафикОплаты);
	СтруктураДляРасчетаСкидок.Вставить("ФормаОплаты",ФормаОплаты);
	СтруктураДляРасчетаСкидок.Вставить("Валюта",Валюта);
	СтруктураДляРасчетаСкидок.Вставить("Контрагент",Контрагент);
	СтруктураДляРасчетаСкидок.Вставить("Менеджер",Неопределено);
	СтруктураДляРасчетаСкидок.Вставить("Организация",Организация);
	СтруктураДляРасчетаСкидок.Вставить("НалогообложениеНДС",НалогообложениеНДС);
	СтруктураДляРасчетаСкидок.Вставить("ЦенаВключаетНДС",ЦенаВключаетНДС);
	СтруктураДляРасчетаСкидок.Вставить("СуммаДокумента",СуммаДокумента);
	СтруктураДляРасчетаСкидок.Вставить("СкидкиРассчитаны",Ложь);
	СтруктураДляРасчетаСкидок.Вставить("ЖелаемаяДатаОтгрузки",ЖелаемаяДатаОтгрузки);
	СтруктураДляРасчетаСкидок.Вставить("ДополнительнаяИнформация",ДополнительнаяИнформация);
	СтруктураДляРасчетаСкидок.Вставить("ХозяйственнаяОперация",ХозяйственнаяОперация);
	СтруктураДляРасчетаСкидок.Вставить("СпособДоставки",СпособДоставки);
	СтруктураДляРасчетаСкидок.Вставить("ВремяДоставкиС",ВремяДоставкиС);
	СтруктураДляРасчетаСкидок.Вставить("ВремяДоставкиПо",ВремяДоставкиПо);
	СтруктураДляРасчетаСкидок.Вставить("ДополнительнаяИнформацияПоДоставке",ДополнительнаяИнформацияПоДоставке);
	СтруктураДляРасчетаСкидок.Вставить("ЗонаДоставки",ЗонаДоставки);
	СтруктураДляРасчетаСкидок.Вставить("АдресДоставкиЗначенияПолей",АдресДоставкиЗначенияПолей);
	СтруктураДляРасчетаСкидок.Вставить("ПеревозчикПартнер",ПеревозчикПартнер);
	СтруктураДляРасчетаСкидок.Вставить("АдресДоставки",АдресДоставки);
	СтруктураДляРасчетаСкидок.Вставить("НеОтгружатьЧастями",НеОтгружатьЧастями);
	Если ИспользуютсяДоговорыКонтрагентов Тогда
		СтруктураДляРасчетаСкидок.Вставить("Договор",Договор);
	КонецЕсли;
	
	СтруктураДляРасчетаСкидок.Вставить("Товары",ОтобранныеТоварыРассчитанныеСкидки);
	СтруктураДляРасчетаСкидок.Вставить("СкидкиНаценки",СкидкиНаценки);
	СтруктураДляРасчетаСкидок.Вставить("ЭтапыГрафикаОплаты",ЭтапыГрафикаОплаты);
	
	Возврат СтруктураДляРасчетаСкидок;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораКонтрагента()
	
	Элементы.Контрагент.СписокВыбора.ЗагрузитьЗначения(ПартнерыИКонтрагенты.ПолучитьВсехКонтрагентовПартнера(Партнер));
	Контрагент = ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСкидки()
	
	СтруктураДляРасчетаСкидок = ЗаполнитьСтруктуруПоРеквизитамФормы();
	
	СтруктураПараметры = Новый Структура;
	СтруктураПараметры.Вставить("ПрименятьКОбъекту",                Истина);
	СтруктураПараметры.Вставить("ТолькоПредварительныйРасчет",      Ложь);
	СтруктураПараметры.Вставить("ВосстанавливатьУправляемыеСкидки", Ложь);
	СтруктураПараметры.Вставить("УправляемыеСкидки", Новый Массив);
	
	ПримененныеСкидки = СкидкиНаценкиСервер.Рассчитать(СтруктураДляРасчетаСкидок,СтруктураПараметры);
	АдресПримененныхСкидокВоВременномХранилище = ПоместитьВоВременноеХранилище(ПримененныеСкидки,УникальныйИдентификатор);
	СуммаДокумента = СтруктураДляРасчетаСкидок.СуммаДокумента;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюСервер()
	
	Элементы.ФормаОплаты.ТолькоПросмотр = ЗначениеЗаполнено(ФормаОплаты);
	Элементы.ГруппаТоварыСкидкиНаценки.Видимость = (НЕ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Элементы.Контрагент.ТолькоПросмотр = Истина;
	Иначе
		Элементы.Контрагент.ТолькоПросмотр = Ложь;
		ЗаполнитьСписокВыбораКонтрагента();
	КонецЕсли;
	
	Если  ИспользуютсяДоговорыКонтрагентов Тогда
		УправлениеДоговорами();
	Иначе
		Элементы.Договор.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.АдресДоставки.Видимость            = НЕ ИспользоватьУправлениеДоставкой;
	Элементы.АдресДоставкиПолучателя.Видимость  = ИспользоватьУправлениеДоставкой;
	Элементы.АдресДоставкиПолучателя1.Видимость = ИспользоватьУправлениеДоставкой;
	Элементы.ГруппаДоставка.Видимость			= ИспользоватьУправлениеДоставкой;
	Элементы.ДополнительнаяИнформация.РастягиватьПоГоризонтали = НЕ ИспользоватьУправлениеДоставкой;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоговорами()
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЗаполнитьДоговорПоУмолчанию();
		ЗаполнитьСписокВыбораДоговоров();
	Иначе
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоговорПоУмолчанию()
	
	Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(
		Договор,
		Партнер,
		Контрагент,
		Организация,
		ХозяйственнаяОперация,
		Валюта,
		Соглашение
	);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораДоговоров()
	
	Элементы.Договор.СписокВыбора.ЗагрузитьЗначения(
	ПродажиСервер.ПолучитьДоступныеДоговоры(
		Договор,
		Партнер,
		Контрагент,
		Организация,
		ХозяйственнаяОперация,
		Валюта,
		Соглашение
	));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ИтоговаяИнформация = МакетИтоговаяИнформация;
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#Соглашение#",СоглашениеСтрока);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#Склад#",Склад);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ГрафикОплаты#",ГрафикОплаты);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ФормаОплаты#",ФормаОплаты);
	Если НЕ ИспользоватьПартнеровКакКонтрагентов Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#Контрагент#",Контрагент);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#КТ#","");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация,"#КТ#");
	КонецЕсли;
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#НалогообложениеНДС#",НалогообложениеНДС);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#АдресДоставки#",АдресДоставки);
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ЖелаемаяДатаОтгрузки#",Формат(ЖелаемаяДатаОтгрузки,"ДФ=dd.MM.yyyy")); 
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#НеОтгружатьЧастями#",?(НеОтгружатьЧастями,Нстр("ru='Не отгружать частями'"),Нстр("ru='Возможна отгрузка частями'")));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#КоличествоПозиций#",Строка(ОтобранныеТоварыРассчитанныеСкидки.Количество()));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#СуммаДокумента#",Формат(СуммаДокумента,"ЧДЦ=2"));
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#Валюта#",Валюта);
	Если ИспользоватьУправлениеДоставкой Тогда
		РеквизитыДоставки = НСтр("ru='Способ доставки'") + ": <EM>" + СпособДоставки + "</EM>" 
			+ "<BR>" + НСтр("ru='Желаемое время доставки'") +": <EM>"
			+ ?(ЗначениеЗаполнено(ВремяДоставкиС), НСтр("ru='c '") + Формат(ВремяДоставкиС,"ДФ=ЧЧ:мм") + " ","")
			+ ?(ЗначениеЗаполнено(ВремяДоставкиПо),НСтр("ru='до '") + Формат(ВремяДоставкиПо,"ДФ=ЧЧ:мм"),"")
			+ "</EM>" + "<BR>";
	Иначе
		РеквизитыДоставки = "";
	КонецЕсли;
	ИтоговаяИнформация  = СтрЗаменить(ИтоговаяИнформация,"#РеквизитыДоставки#",РеквизитыДоставки);
	
	СтрокаЭтапыГрафикаОплаты = "";
	Для каждого Строка Из ЭтапыГрафикаОплаты Цикл
		
		СтрокаЭтапыГрафикаОплаты = СтрокаЭтапыГрафикаОплаты +  Формат(Строка.ДатаПлатежа,"ДФ=dd.MM.yyyy") + " - " + Строка.ВариантОплаты + ": " + 
		Формат(Строка.СуммаПлатежа,"ЧДЦ=2") + " " + Строка(Валюта)+ " (" + Строка.ПроцентПлатежа + " "  +  Нстр("ru='% от суммы заказа ) '") + "<br>";
		
	КонецЦикла;
	
	ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ЭтапГрафикаОплаты#",СтрокаЭтапыГрафикаОплаты);
	
КонецПроцедуры

&НаКлиенте
Функция НеВыполненыУсловияПереходаПоСтраницам(Команда)
	
	Отказ = Ложь;
	
	Если Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаДополнительныеРеквизиты Тогда
		Если Команда.Имя = "Далее" Тогда
			
			Если НЕ ЗначениеЗаполнено(ФормаОплаты) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Не указана форма оплаты.'"),,"ФормаОплаты");
				Отказ = Истина;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Не указан контрагент.'"),,"Контрагент");
				Отказ = Истина;
			КонецЕсли;
			
			Если ИспользуютсяДоговорыКонтрагентов И НЕ ЗначениеЗаполнено(Договор) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Не указан договор.'"),,"Договор");
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаТовары Тогда	 
		
		Если ОтобранныеТоварыРассчитанныеСкидки.Количество() = 0 Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Нет товаров для оформления заказа.'"),,"ОтобранныеТоварыРассчитанныеСкидки");
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Команда)
	
	Если НеВыполненыУсловияПереходаПоСтраницам(Команда) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаДополнительныеРеквизиты Тогда
		Если Команда.Имя = "Далее" Тогда
			
			Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаТовары;
			Элементы.СтраницыКнопки.ТекущаяСтраница   = Элементы.СтраницаКнопкиНазадДалееОтмена;
			Элементы.КнопкаДалееСтраницаНазадДалееОтмена.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		
		Если Команда.Имя = "Назад" Тогда
			
			Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаДополнительныеРеквизиты;
			Элементы.СтраницыКнопки.ТекущаяСтраница   = Элементы.СтраницаКнопкиДалееОтмена;
			Элементы.КнопкаДалееСтраницаДалееОтмена.КнопкаПоУмолчанию = Истина;
			
		ИначеЕсли Команда.Имя = "Далее" Тогда
			
			ЗаполнитьИтоговуюИнформацию();
			Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаИтоговаяИнформация;
			Элементы.СтраницыКнопки.ТекущаяСтраница   = Элементы.СтраницаКнопкиОтменаНазадОформить;
			Элементы.КнопкаОформить.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаИтоговаяИнформация Тогда
		
		Если Команда.Имя = "Далее" Тогда
			
			ОформитьЗаказ();
			Оповестить("ЗаказОформлен");
			Закрыть(); 
			
		ИначеЕсли Команда.Имя = "Назад" Тогда
			
			Элементы.СтраницыОсновные.ТекущаяСтраница = Элементы.СтраницаТовары;
			Элементы.СтраницыКнопки.ТекущаяСтраница   = Элементы.СтраницаКнопкиНазадДалееОтмена;
			Элементы.КнопкаДалееСтраницаНазадДалееОтмена.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТаблицуТоварыПоДаннымКорзины(АдресКорзиныВХранилище)
	
	ДанныеКорзины = ПолучитьИзВременногоХранилища(АдресКорзиныВХранилище);
	
	Если ДанныеКорзины = Неопределено ИЛИ ДанныеКорзины.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДанныеКорзины.Номенклатура,
	               |	ДанныеКорзины.Характеристика,
	               |	ДанныеКорзины.Упаковка,
	               |	ДанныеКорзины.КоличествоУпаковок,
	               |	ДанныеКорзины.Цена,
	               |	ДанныеКорзины.Сумма,
	               |	ДанныеКорзины.СуммаНДС,
	               |	ДанныеКорзины.СуммаСНДС,
	               |	ДанныеКорзины.Количество,
	               |	ДанныеКорзины.ВидЦены,
	               |	ДанныеКорзины.СтавкаНДС,
	               |	ДанныеКорзины.КОформлению,
	               |	ДанныеКорзины.ПодакцизныйТовар
	               |ПОМЕСТИТЬ ДанныеКорзины
	               |ИЗ
	               |	&ДанныеКорзины КАК ДанныеКорзины
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДанныеКорзины.Номенклатура,
	               |	ДанныеКорзины.Характеристика,
	               |	ДанныеКорзины.Упаковка,
	               |	ДанныеКорзины.Номенклатура.НаименованиеПолное КАК НаименованиеНоменклатурыПолное,
	               |	ДанныеКорзины.Характеристика.НаименованиеПолное КАК НаименованиеХарактеристикиПолное,
	               |	ДанныеКорзины.Номенклатура.ВариантОформленияПродажи КАК ВариантОформленияПродажи,
	               |	ДанныеКорзины.КоличествоУпаковок,
	               |	ДанныеКорзины.Цена,
	               |	ДанныеКорзины.Сумма,
	               |	ДанныеКорзины.СуммаНДС,
	               |	ДанныеКорзины.СуммаСНДС КАК СуммаСНДС,
	               |	ДанныеКорзины.Количество,
	               |	ДанныеКорзины.ВидЦены,
	               |	ДанныеКорзины.СтавкаНДС,
	               |	ДанныеКорзины.ПодакцизныйТовар,
	               |	ВЫБОР
	               |		КОГДА СпрНоменклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
	               |			ТОГДА &Склад
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |	КОНЕЦ КАК Склад,
	               |	Выразить("""" КАК Строка(1000)) КАК Содержание
	               |ИЗ
	               |	ДанныеКорзины КАК ДанныеКорзины
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	               |		ПО ДанныеКорзины.Номенклатура = СпрНоменклатура.Ссылка
	               |ГДЕ
	               |	ДанныеКорзины.КОформлению
	               |	И ДанныеКорзины.Цена > 0
	               |	И ВЫБОР
	               |			КОГДА &НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД)
	               |				ТОГДА ДанныеКорзины.ПодакцизныйТовар = ЛОЖЬ
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДанныеКорзины",ДанныеКорзины);
	Запрос.УстановитьПараметр("НалогообложениеНДС",НалогообложениеНДС);
	Запрос.УстановитьПараметр("Склад",Склад);
	
	ТаблицаДанныеКорзины = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтрока Из ТаблицаДанныеКорзины Цикл
	
		Если ТекСтрока.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктВыполненныхРабот Тогда
			ТекСтрока.Содержание = НоменклатураКлиентСервер.ПредставлениеНоменклатурыДляПечати(
				ТекСтрока.НаименованиеНоменклатурыПолное, 
				ТекСтрока.НаименованиеХарактеристикиПолное
			);
			
		КонецЕсли;
	
	КонецЦикла;
	
	ОтобранныеТоварыРассчитанныеСкидки.Загрузить(ТаблицаДанныеКорзины);
	
	Если НЕ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		РассчитатьСкидки();
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	ПродажиСервер.ЗаполнитьЭтапыГрафикаОплаты(ЗаполнитьСтруктуруПоРеквизитамФормы(), СуммаДокумента);
	Если ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьЗаказ()

	СамообслуживаниеСервер.ОформитьЗаказ(ЗаполнитьСтруктуруПоРеквизитамФормы());

КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
// Доставка

&НаСервере
Процедура ЗаполнитьУстановитьРеквизитыДоставкиСервер(ИмяЭлементаФормы);
	
	Если ИспользоватьУправлениеДоставкой Тогда
		РеквизитыДоставки = ДоставкаТоваровКлиентСервер.ПолучитьПустуюСтруктуруРеквизитовДоставки();
		РеквизитыДоставки.Вставить("Партнер",Партнер);
		РеквизитыДоставки.Вставить("Ссылка",Документы.ЗаказКлиента.ПустаяСсылка());
		ЗаполнитьЗначенияСвойств(РеквизитыДоставки, ЭтаФорма);
		ДоставкаТоваров.ЗаполнитьРеквизитыДоставки(Элементы, ИмяЭлементаФормы, РеквизитыДоставки);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, РеквизитыДоставки);
	КонецЕсли;
	
КонецПроцедуры
