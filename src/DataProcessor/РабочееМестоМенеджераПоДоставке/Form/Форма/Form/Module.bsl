//////////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	КоэффициентПересчетаВТонны     			 = Константы.КоэффициентПересчетаВТонны.Получить();	
	КоэффициентПересчетаВКубическиеМетры     = Константы.КоэффициентПересчетаВКубическиеМетры.Получить();
	
	Если КоэффициентПересчетаВТонны = 0 Тогда
		КоэффициентПересчетаВТонны = 1;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не задан коэффициент пересчета в тонны. Обратитесь к администратору.';"));
	КонецЕсли;
	
	Если КоэффициентПересчетаВКубическиеМетры = 0 Тогда	
		КоэффициентПересчетаВКубическиеМетры = 1;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не задан коэффициент пересчета в кубические метры. Обратитесь к администратору.';"));
	КонецЕсли;
	
	ВосстановитьНастройки();
	СкладБыл = Склад;
	
	Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	
	Обработка = РеквизитФормыВЗначение("Объект");
	ОбработкаПолноеИмя = Обработка.Метаданные().ПолноеИмя();
	
	УстановитьОтборЗаданияНаПеревозкуВРаботе();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаФормированиеЗаданийНаПеревозку Тогда
		ТекущаяСтраница = "ФормированиеЗаданий";
		Если ЗначениеЗаполнено(Склад) Тогда
			ОбновитьСпискиЗаданийНаПеревозку();
		Иначе
			УстановитьОтметкуСкладДоступностьКоманд();
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДокументыДляПеревозчиков Тогда
		ТекущаяСтраница = "ДокументыДляПеревозчиков";
		ОбновитьДокументыДляПеревозчиковСервер();
	Иначе
		ТекущаяСтраница = "ЗаданияВРаботе";
		ОбновитьЗаданияВРаботеСервер();
	КонецЕсли;
	
	УстановитьВидимостьСкладов();
	
	РедактироватьАдресаДоставкиТолькоВДиалоге = ПолучитьФункциональнуюОпцию("РедактироватьАдресаДоставкиТолькоВДиалоге");
	АдресаДоставкиТолькоРоссийские = Константы.АдресаДоставкиТолькоРоссийские.Получить();
	ЕдиницаИзмеренияВеса = Константы.ЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъема = Константы.ЕдиницаИзмеренияОбъема.Получить();
	
	УстановитьЗаголовкиКолонокВесОбъемСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаспоряженияРазвернуть();
	ЗаданияНаПеревозкуФормированиеПриАктивизацииСтрокиОбработчикОжидания();
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = ОбработкаПолноеИмя + ".Форма.ФормаВыбораТранспорта" Тогда
		ДобавитьНовыеЗаданияСервер(ВыбранноеЗначение);
	КонецЕсли;
	Если ИсточникВыбора.ИмяФормы = ОбработкаПолноеИмя + ".Форма.ФормаВыбораРаспоряжений" Тогда
		РазбитьПунктДоставкиСервер(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкиИЗаданияНаПеревозку();
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ДатаРаспоряженийПриИзменении(Элемент)
	
	ОбновитьСписокРаспоряженийНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	
	Если Склад <> СкладБыл Тогда
		ОбновитьСпискиДляНужнойСтраницы();
		СкладБыл = Склад;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодДокументовДляПеревозчиковПриИзменении(Элемент)
	
	Если ПериодДокументовДляПеревозчиковБыл <> ПериодДокументовДляПеревозчиков Тогда
		ПериодДокументовДляПеревозчиковПриИзмененииСервер();
		ПериодДокументовДляПеревозчиковБыл = ПериодДокументовДляПеревозчиков;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	
	ОбновитьДокументыДляПеревозчиковСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗонаДоставкиПриИзменении(Элемент)
	
	ОбновитьСписокРаспоряженийНаДоставку();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьСпискиДляНужнойСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	СтатусПриИзмененииСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРаспоряженийРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ДатаРаспоряжений) Тогда
		ДатаРаспоряжений = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаРаспоряженийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ДатаРаспоряжений) Тогда
		ДатаРаспоряжений = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусФормируется(Команда)
	
	ВыделенныеСсылки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ЗаданияНаПеревозкуВРаботе);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заданий будет установлен статус ""Формируется"".'");
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,"Установить");
	Режим.Добавить(КодВозвратаДиалога.Нет,"Не устанавливать");
	Ответ = Вопрос(ТекстВопроса,Режим);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, "Формируется");
	ОповеститьПользователяОбУстановкеСтатуса(Элементы.ЗаданияНаПеревозкуВРаботе, КоличествоОбработанных, ВыделенныеСсылки.Количество(), "Формируется");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусКПогрузке(Команда)
	
	ВыделенныеСсылки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ЗаданияНаПеревозкуВРаботе);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заданий будет установлен статус ""К погрузке"".'");
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,"Установить");
	Режим.Добавить(КодВозвратаДиалога.Нет,"Не устанавливать");
	Ответ = Вопрос(ТекстВопроса,Режим);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, "КПогрузке");
	ОповеститьПользователяОбУстановкеСтатуса(Элементы.ЗаданияНаПеревозкуВРаботе, КоличествоОбработанных, ВыделенныеСсылки.Количество(), "КПогрузке");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтправлен(Команда)
	
	ВыделенныеСсылки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ЗаданияНаПеревозкуВРаботе);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заданий будет установлен статус ""Отправлен"".'");
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,"Установить");
	Режим.Добавить(КодВозвратаДиалога.Нет,"Не устанавливать");
	Ответ = Вопрос(ТекстВопроса,Режим);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, "Отправлен");
	ОповеститьПользователяОбУстановкеСтатуса(Элементы.ЗаданияНаПеревозкуВРаботе, КоличествоОбработанных, ВыделенныеСсылки.Количество(), "Отправлен");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрытПолностьюДоставленныхЗаданий(Команда)
	
	ВыделенныеСсылки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ЗаданияНаПеревозкуВРаботе);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У полностью доставленных заданий из выделенных в списке будет установлен статус ""Закрыт"". Продолжить?'");
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,"Установить");
	Режим.Добавить(КодВозвратаДиалога.Нет,"Не устанавливать");
	Ответ = Вопрос(ТекстВопроса,Режим);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, "Закрыт", Новый Структура("КонтрольДоставки"));
	ОповеститьПользователяОбУстановкеСтатуса(Элементы.ЗаданияНаПеревозкуВРаботе, КоличествоОбработанных, ВыделенныеСсылки.Количество(), "Закрыт");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусЗакрыт(Команда)
	
	ВыделенныеСсылки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.ЗаданияНаПеревозкуВРаботе);
	Если ВыделенныеСсылки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заданий будет установлен статус ""Закрыт"".'");
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да,"Установить");
	Режим.Добавить(КодВозвратаДиалога.Нет,"Не устанавливать");
	Ответ = Вопрос(ТекстВопроса,Режим);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСсылки, "Закрыт");
	ОповеститьПользователяОбУстановкеСтатуса(Элементы.ЗаданияНаПеревозкуВРаботе, КоличествоОбработанных, ВыделенныеСсылки.Количество(), "Закрыт");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСПОРЯЖЕНИЯ НА ДОСТАВКУ

&НаКлиенте
Процедура РаспоряженияНаДоставкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбраннаяСтрокаЭлементДерева = РаспоряженияНаДоставку.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если ВыбраннаяСтрокаЭлементДерева.ПолучитьЭлементы().Количество() = 0 Тогда
		ОткрытьЗначение(ВыбраннаяСтрокаЭлементДерева.Распоряжение)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	НачалиПеретаскивание = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	НачалиПеретаскивание = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПроверитьУстановитьДопустимостьПеретаскивания(Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаДоставкуПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение[0].Свойство("ПереходДаты") Тогда
		//Перетаскивание из заданий на перевозку
		УбратьСтрокиИзЗаданийСервер();
	ИначеЕсли ПараметрыПеретаскивания.Значение[0].Свойство("КлючСвязи") Тогда
		//Перетаскивание из списка накладных
		УбратьСтрокиИзЗаданийСервер(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ЗАДАНИЯ НА ПЕРЕВОЗКУ

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаданияНаПеревозкуФормированиеПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
		Если Строка <> Неопределено Тогда
			//Перетаскивание внутри списка Задания на перевозку формируемые
			ПеренестиСтрокиВнутриСпискаЗаданийФормируемыхСервер(ПараметрыПеретаскивания.Значение,Строка);
		КонецЕсли;
	ИначеЕсли ПараметрыПеретаскивания.Значение[0].Свойство("ЗонаДоставки") Тогда
		//Перетаскивание из распоряжений
		ПеренестиСтроки(Строка);
	ИначеЕсли ПараметрыПеретаскивания.Значение[0].Свойство("КлючСвязи") Тогда
		//Перетаскивание из списка распоряжений
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Строка = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ВыбраннаяСтрока);
	ЭтоГруппировка = (Строка.ПолучитьРодителя() = Неопределено);
	Если ЭтоГруппировка Тогда
		Если Поле.ТолькоПросмотр ИЛИ Поле.Имя = "ЗаданияНаПеревозкуФормированиеЗонаДоставки" Тогда
			СтандартнаяОбработка = Ложь;
			Развернут = Элементы.ЗаданияНаПеревозкуФормирование.Развернут(Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока);
			ВерсияДанных = СохранитьЗаданиеНаПеревозкуПолучитьВерсиюСервер(Строка.ПолучитьИдентификатор());
			ПараметрыФормы = Новый Структура("Ключ", Строка.Ссылка);
			ОткрытьФормуМодально("Документ.ЗаданиеНаПеревозку.ФормаОбъекта",ПараметрыФормы ,ЭтаФорма);
			Позиция = ПроверитьВерсиюОбновитьСпискиПолучитьПозициюСервер(Строка.Ссылка,ВерсияДанных);
			Если Позиция <> Неопределено Тогда
				Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока = Позиция;
				Если Развернут Тогда
					Элементы.ЗаданияНаПеревозкуФормирование.Развернуть(Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	МассивПроведенныхЗаданий = Новый Массив;
	Для Каждого ИД Из Элементы.ЗаданияНаПеревозкуФормирование.ВыделенныеСтроки Цикл
		Стр = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИД);
		Если Стр.ПолучитьРодителя() = Неопределено И ЗначениеЗаполнено(Стр.Ссылка) Тогда
			МассивПроведенныхЗаданий.Добавить(Стр.Ссылка);
		КонецЕсли;
	КонецЦикла;
	Если МассивПроведенныхЗаданий.Количество() > 0 Тогда
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да, "Пометить");
		Режим.Добавить(КодВозвратаДиалога.Нет, "Не помечать, только очистить маршруты");
		Режим.Добавить(КодВозвратаДиалога.Отмена);
		Текст = НСтр("ru = 'Пометить на удаление выделенные задания на перевозку?';");
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПометитьНаУдалениеСервер(МассивПроведенныхЗаданий);
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	УбратьСтрокиИзЗаданийСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеАдресТранспортТипНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		
		Список = Новый СписокЗначений;
		Список.Добавить("Транспортное средство");
		Список.Добавить("Тип транспортного средства");
		ВыбранныйТип = ВыбратьИзСписка(Список, Элемент);
		
		Если ВыбранныйТип <> Неопределено Тогда
			ТранспортТипБыл = ТекущиеДанные.АдресДоставки;
			Если ВыбранныйТип.Значение = "Транспортное средство" Тогда
		
				ЗначениеОтбора = Новый Структура("ИспользоватьВДоставке", Истина);
				Если ТипЗнч(ТекущиеДанные.АдресДоставки) = Тип("СправочникСсылка.ТипыТранспортныхСредств") Тогда
					ЗначениеОтбора.Вставить("ТипТранспортногоСредства", ТекущиеДанные.АдресДоставки);
				КонецЕсли;
				
				ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
				Форма = ПолучитьФорму("Справочник.ТранспортныеСредства.ФормаВыбора", ПараметрыВыбора);
				ТранспортСтал = Форма.ОткрытьМодально();
				Если ТранспортСтал <> Неопределено И ТранспортТипБыл <> ТранспортСтал Тогда
					ТекущиеДанные.АдресДоставки            = ТранспортСтал;
					ТекущиеДанные.ТранспортноеСредство     = ТранспортСтал;
					ТекущиеДанные.ТипТранспортногоСредства = ПредопределенноеЗначение("Справочник.ТипыТранспортныхСредств.ПустаяСсылка");
					ТекущиеДанные.ОформлениеПоТипу         = "ТС";
				КонецЕсли;
				
			Иначе
				Форма = ПолучитьФорму("Справочник.ТипыТранспортныхСредств.ФормаВыбора");
				ТипСтал = Форма.ОткрытьМодально();
				Если ТипСтал <> Неопределено И ТранспортТипБыл <> ТипСтал Тогда
					ТекущиеДанные.ТипТранспортногоСредства = ТипСтал;
					ТекущиеДанные.АдресДоставки            = ТипСтал;
					ТекущиеДанные.ТранспортноеСредство     = ПредопределенноеЗначение("Справочник.ТранспортныеСредства.ПустаяСсылка");
					ТекущиеДанные.ОформлениеПоТипу         = "ТипТС"
				КонецЕсли;
			
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ДоставкаТоваровКлиент.ОткрытьФормуВыбораАдресаИОбработатьРезультат(ТекущиеДанные.АдресДоставки,
													ТекущиеДанные.АдресДоставкиЗначенияПолей,
													РедактироватьАдресаДоставкиТолькоВДиалоге,
													АдресаДоставкиТолькоРоссийские);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеПриИзменении(Элемент)
	
	УстановитьМодифицированность(Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РедактироватьАдресаДоставкиТолькоВДиалоге Тогда
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			Элементы.ЗаданияНаПеревозкуФормированиеАдресДоставки.РедактированиеТекста = Истина;
		Иначе
			Элементы.ЗаданияНаПеревозкуФормированиеАдресДоставки.РедактированиеТекста = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	НачалиПеретаскивание = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	НачалиПеретаскивание = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеАдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные.АдресДоставки = ВыбранноеЗначение.Представление;
	Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные.АдресДоставкиЗначенияПолей = ВыбранноеЗначение.ЗначенияПолей;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеВремяПриИзменении(Элемент)
	
	Если Элемент = Элементы.ЗаданияНаПеревозкуФормированиеВремяС
		ИЛИ Элемент = Элементы.ЗаданияНаПеревозкуФормированиеДатаС Тогда
		ВремяСВремяПо = "ВремяС";
	Иначе
		ВремяСВремяПо = "ВремяПо";
	КонецЕсли;
	ПроверитьСоответствиеВремени(ВремяСВремяПо);
	
	ТекСтрока = Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные;
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		ЗаданияПроверитьОтсортироватьЗаполнитьПризнакиПерехода();
	Иначе
		ТекВетка = Родитель.ПолучитьЭлементы();
		ТекИндекс = ТекВетка.Индекс(ТекСтрока);
		Если (ТекИндекс > 0 И ТекСтрока.ВремяС <= ТекВетка[ТекИндекс-1].ВремяС)
			ИЛИ (ТекИндекс < ТекВетка.Количество()-1 И ТекСтрока.ВремяС >= ТекВетка[ТекИндекс+1].ВремяС) Тогда
			ЗаданияОтсортироватьПеренумероватьЗаполнитьПризнакиПереходаДат();
		Иначе
			ЗаполнитьПризнакиПереходаДат();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьМодифицированность(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеВремяНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные;
	Если Элемент = Элементы.ЗаданияНаПеревозкуФормированиеВремяС Тогда
		ВремяСВремяПо = "ВремяС";
	Иначе
		ВремяСВремяПо = "ВремяПо";
	КонецЕсли;
	ВыбранноеВремя = РаботаСДиалогамиКлиент.ВыбратьВремя(ЭтаФорма, Элемент, ТекСтрока[ВремяСВремяПо]);
	Если ВыбранноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока[ВремяСВремяПо] = ВыбранноеВремя;
	
	ПроверитьСоответствиеВремени(ВремяСВремяПо);
	
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		ЗаданияПроверитьОтсортироватьЗаполнитьПризнакиПерехода();
	Иначе
		ТекВетка = Родитель.ПолучитьЭлементы();
		ТекИндекс = ТекВетка.Индекс(ТекСтрока);
		Если (ТекИндекс > 0 И ТекСтрока.ВремяС <= ТекВетка[ТекИндекс-1].ВремяС)
			ИЛИ (ТекИндекс < ТекВетка.Количество()-1 И ТекСтрока.ВремяС >= ТекВетка[ТекИндекс+1].ВремяС) Тогда
			ЗаданияОтсортироватьПеренумероватьЗаполнитьПризнакиПереходаДат();
		Иначе
			ЗаполнитьПризнакиПереходаДат();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьМодифицированность(ТекСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ НАКЛАДНЫЕ В ЗАДАНИЯХ НА ПЕРЕВОЗКУ

&НаКлиенте
Процедура НакладныеВЗаданияхНаПеревозкуПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Значение[0].Свойство("ЗонаДоставки") Тогда
		//Перетаскивание из распоряжений
		ПеренестиСтроки(Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НакладныеВЗаданияхНаПеревозкуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьЗначение(НакладныеВЗаданияхНаПеревозку.НайтиПоИдентификатору(ВыбраннаяСтрока).Распоряжение);
	
КонецПроцедуры

&НаКлиенте
Процедура НакладныеВЗаданияхНаПеревозкуНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	НачалиПеретаскивание = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура НакладныеВЗаданияхНаПеревозкуОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	НачалиПеретаскивание = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НакладныеВЗаданияхНаПеревозкуПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ПроверитьУстановитьДопустимостьПеретаскивания(Элемент, ПараметрыПеретаскивания);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьЗаданияНаПеревозку(Команда)
	
	АдресЗаданийФормируемых = ПоместитьЗаданияВХранилище();
	ПараметрыФормы = Новый Структура("ДатаОтбор, АдресЗаданийФормируемых, Склад, ИтогоВес, ИтогоОбъем",
							ДатаРаспоряжений, АдресЗаданийФормируемых, Склад, ИтогоВес, ИтогоОбъем);
	ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.ФормаВыбораТранспорта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиДоставки(Команда)
	
	ОбновитьСпискиДляНужнойСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокиВЗадание(Команда)
	
	ПеренестиСтроки(Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока)
	
КонецПроцедуры

&НаКлиенте
Процедура РазнестиРаспоряженияПоВремени(Команда)
	
	Если Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	Если Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
		Текст = НСтр("ru='Разбиение строки возможно только для строк-адресов';");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат;
	КонецЕсли;
	Если НЕ ПроверитьРазбитьПунктДоставкиСервер() Тогда
		АдресРаспоряжений = ПоместитьРаспоряженияВХранилище(Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные.КлючСвязи);
		ПараметрыФормы = Новый Структура("АдресРаспоряжений", АдресРаспоряжений);
		ОткрытьФорму(ОбработкаПолноеИмя + ".Форма.ФормаВыбораРаспоряжений", ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьПоВремени(Команда)
	
	Если Элементы.ЗаданияНаПеревозкуФормирование.ВыделенныеСтроки.Количество() < 2 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Для объединения необходимо выделить хотя бы 2 строки.';"));
		Возврат
	КонецЕсли;
	Если НЕ ОбъединитьПоВремениСервер() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось объединить выделенные строки: выберите строки с одинаковыми адресами.';"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьСтрокиИзЗаданий(Команда)
	
	Если Элементы.ЗаданияНаПеревозкуФормирование.ВыделенныеСтроки.Количество()>0 Тогда
		УбратьСтрокиИзЗаданийСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УбратьНакладныеИзЗаданий(Команда)
	
	Если Элементы.ЗаданияНаПеревозкуФормирование.ВыделенныеСтроки.Количество() > 0 Тогда
		УбратьСтрокиИзЗаданийСервер(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияВверх(Команда)
	
	Если Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	Родитель = Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат
	КонецЕсли;
	Индекс = Родитель.ПолучитьЭлементы().Индекс(Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные);
	Ветка = Родитель.ПолучитьЭлементы();
	Если Индекс <> 0 Тогда
		Ветка.Сдвинуть(Индекс, -1);
		Ветка[Индекс-1].ПорядокВМаршруте = Индекс;
		Ветка[Индекс].ПорядокВМаршруте	 = Индекс+1;
		Ветка[Индекс-1].ВремяС			 = Ветка[Индекс].ВремяС;
		Ветка[Индекс-1].ВремяПо			 = Ветка[Индекс].ВремяС;
		Если Лев(Ветка[Индекс].ПереходДаты, 5) = "ДатаС" Тогда
			Ветка[Индекс-1].ПереходДаты		 = "ДатаС";
		Иначе
			Ветка[Индекс-1].ПереходДаты		 = "";
		КонецЕсли;
		Если Прав(Ветка[Индекс].ПереходДаты, 5) = "атаПо" Тогда
			Ветка[Индекс].ПереходДаты = "ДатаПо";
		Иначе
			Ветка[Индекс].ПереходДаты = "";
		КонецЕсли;
		Если Ветка.Количество() > Индекс + 1 Тогда
			Ветка[Индекс+1].ПереходДаты = "";
			Если НачалоДня(Ветка[Индекс+1].ВремяС) <> НачалоДня(Ветка[Индекс].ВремяС) Тогда
				Ветка[Индекс+1].ПереходДаты = "ДатаС";
			КонецЕсли;
			Если НачалоДня(Ветка[Индекс+1].ВремяС) <> НачалоДня(Ветка[Индекс+1].ВремяПо) Тогда
				Ветка[Индекс+1].ПереходДаты = Ветка[Индекс+1].ПереходДаты + "ДатаПо";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьМодифицированность(Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияВниз(Команда)
	
	Если Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	Родитель = Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат
	КонецЕсли;
	Индекс = Родитель.ПолучитьЭлементы().Индекс(Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные);
	Ветка = Родитель.ПолучитьЭлементы();
	Если Индекс <> Ветка.Количество()-1 Тогда
		Ветка.Сдвинуть(Индекс, 1);
		Ветка[Индекс+1].ПорядокВМаршруте = Индекс+2;
		Ветка[Индекс].ПорядокВМаршруте	 = Индекс+1;
		Ветка[Индекс+1].ВремяС			 = Ветка[Индекс].ВремяПо;
		Ветка[Индекс+1].ВремяПо			 = Ветка[Индекс].ВремяПо;
		Если Лев(Ветка[Индекс+1].ПереходДаты, 5) = "ДатаС" Тогда
			Ветка[Индекс].ПереходДаты = "ДатаС";
		КонецЕсли;
		Ветка[Индекс+1].ПереходДаты		 = "";
		Если НачалоДня(Ветка[Индекс].ВремяС) <> НачалоДня(Ветка[Индекс].ВремяПо) Тогда
			Ветка[Индекс].ПереходДаты	 = "ДатаПо";
		КонецЕсли;
	КонецЕсли;
	УстановитьМодифицированность(Родитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВчерашнимиРейсами(Команда)
	
	ЗаполнитьПрошлымиРейсамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРейсамиНаДату(Команда)
	
	ВыбраннаяДата = ОткрытьФормуМодально("ОбщаяФорма.ВыборДаты",,);
	Если ЗначениеЗаполнено(ВыбраннаяДата) Тогда
		ЗаполнитьПрошлымиРейсамиСервер(ВыбраннаяДата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадание(Команда)
	Если Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	Строка = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока);
	Если Строка.ПолучитьРодителя() <> Неопределено Тогда
		Строка = Строка.ПолучитьРодителя();
	КонецЕсли;
	Развернут = Элементы.ЗаданияНаПеревозкуФормирование.Развернут(Строка.ПолучитьИдентификатор());
	ВерсияДанных = СохранитьЗаданиеНаПеревозкуПолучитьВерсиюСервер(Строка.ПолучитьИдентификатор());
	ПараметрыФормы = Новый Структура("Ключ", Строка.Ссылка);
	ОткрытьФормуМодально("Документ.ЗаданиеНаПеревозку.ФормаОбъекта",ПараметрыФормы ,ЭтаФорма);
	Позиция = ПроверитьВерсиюОбновитьСпискиПолучитьПозициюСервер(Строка.Ссылка,ВерсияДанных);
	Если Позиция <> Неопределено Тогда
		Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока = Позиция;
		Если Развернут Тогда
			Элементы.ЗаданияНаПеревозкуФормирование.Развернуть(Позиция);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаСервере
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ЗаданиеНаПеревозку.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ПеремещениеТоваров.ПустаяСсылка"));
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.РеализацияТоваровУслуг.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФорм.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		
		Ссылка = МассивСсылок[0];
		Элементы.ЖурналОрдеров.ТекущаяСтрока = Ссылка;
		
		ОткрытьЗначение(Ссылка);
		
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Если ТипЗнч(МассивСсылок[0]) = Тип("ДокументСсылка.ЗаданиеНаПеревозку") Тогда
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаСтраницаЗаданияНаПеревозкуВРаботе Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаЗаданияНаПеревозкуВРаботе;
				ОбновитьСпискиДляНужнойСтраницы();
			КонецЕсли;
			Элементы.ЗаданияНаПеревозкуВРаботе.ТекущаяСтрока = МассивСсылок[0];
			ОткрытьЗначение(МассивСсылок[0]);
		Иначе
			Если Элементы.ГруппаСтраницы.ТекущаяСтраница <> Элементы.ГруппаДокументыДляПеревозчиков Тогда
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДокументыДляПеревозчиков;
				ОбновитьСпискиДляНужнойСтраницы();
			КонецЕсли;
			Элементы.ДокументыДляПеревозчиков.ТекущаяСтрока = МассивСсылок[0];
			ОткрытьЗначение(МассивСсылок[0]);
		КонецЕсли;
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура УстановитьМодифицированность(СтрокаДерева)
	
	СтрокаДерева.Модифицирован = Истина;
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Родитель.Модифицирован = Истина;
	КонецЕсли;
	ЗаданияМодифицированы = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьМодифицированностьСервер(СтрокаДерева)
	
	СтрокаДерева.Модифицирован = Истина;
	Родитель = СтрокаДерева.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		Родитель.Модифицирован = Истина;
	КонецЕсли;
	ЗаданияМодифицированы = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтогиВЗаголовкахГрупп(Назначение = "Все")
	
	Если Назначение = "Все" ИЛИ Назначение = "Распоряжения" Тогда
		Если ЗонаГруппаИлиПустая Тогда
			ИтогоРаспоряжений = 0;
			Для Каждого СтрЗона Из РаспоряженияНаДоставку.ПолучитьЭлементы() Цикл
				ИтогоРаспоряжений = ИтогоРаспоряжений + СтрЗона.ПолучитьЭлементы().Количество();
			КонецЦикла;
		Иначе
			ИтогоРаспоряжений = РаспоряженияНаДоставку.ПолучитьЭлементы().Количество();
		КонецЕсли;
		
		Текст = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ИтогоРаспоряжений,
																					НСтр("ru='распоряжение, распоряжения, распоряжений';"));
		НадписьКоличествоРаспоряжений = Текст;
	КонецЕсли;
	
	Если Назначение = "Все" ИЛИ Назначение = "Пункты" Тогда
		ИтогоПунктов = 0;
		Для Каждого Стр Из ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы() Цикл
			ИтогоПунктов = ИтогоПунктов + Стр.ПолучитьЭлементы().Количество();
		КонецЦикла;
		
		Текст = НСтр("ru = '%КоличествоПунктов% доставки';");
		Текст = СтрЗаменить(Текст, "%КоличествоПунктов%", 
							СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ИтогоПунктов,
																								НСтр("ru='пункт, пункта, пунктов';")));
		НадписьКоличествоПунктовДоставки = Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиИЗаданияНаПеревозку()
	
	Настройки = Новый Соответствие;
	Настройки.Вставить("Склад",								Склад);
	Настройки.Вставить("ДатаСохранения",					ТекущаяДата());
	Настройки.Вставить("ДатаРаспоряжений",					ДатаРаспоряжений);
	Настройки.Вставить("ЗонаДоставки",						ЗонаДоставки);
	Настройки.Вставить("Статус",							Статус);
	Настройки.Вставить("Перевозчик",						Перевозчик);
	Настройки.Вставить("ПериодДокументовДляПеревозчиков",	ПериодДокументовДляПеревозчиков);
	Настройки.Вставить("ТекущаяСтраница",					ТекущаяСтраница);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.РабочееМестоМенеджераПоДоставке", "Настройки", Настройки);
	
	СохранитьЗаданияНаПеревозкуСервер();

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Перем ЗначениеНастроек;
	Перем ДатаСохранения;

	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.РабочееМестоМенеджераПоДоставке", "Настройки");
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Соответствие") Тогда

		Склад			 				= ЗначениеНастроек.Получить("Склад");
		ДатаСохранения					= ЗначениеНастроек.Получить("ДатаСохранения");
		ДатаРаспоряжений				= ЗначениеНастроек.Получить("ДатаРаспоряжений");
		ЗонаДоставки					= ЗначениеНастроек.Получить("ЗонаДоставки");
		Статус							= ЗначениеНастроек.Получить("Статус");
		Перевозчик						= ЗначениеНастроек.Получить("Перевозчик");
		ПериодДокументовДляПеревозчиков = ЗначениеНастроек.Получить("ПериодДокументовДляПеревозчиков");
		ТекущаяСтраница 				= ЗначениеНастроек.Получить("ТекущаяСтраница");
		Если ПериодДокументовДляПеревозчиков.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
			ПериодДокументовДляПеревозчиков.ДатаОкончания = Дата(1,1,1);
		КонецЕсли;
		ПериодДокументовДляПеревозчиковБыл = ПериодДокументовДляПеревозчиков;
		
		//Если в прошлые дни планировали на будущие, тогда подставляем будущий день
		Если (НачалоДня(ДатаСохранения) < НачалоДня(ДатаРаспоряжений)) Тогда
			ДатаРаспоряжений = Макс(ТекущаяДата() + 60*60*24, ДатаРаспоряжений)
		ИначеЕсли ЗначениеЗаполнено(ДатаРаспоряжений) Тогда
			ДатаРаспоряжений = ТекущаяДата()
		КонецЕсли;
		
		Если ТекущаяСтраница = "ФормированиеЗаданий" Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаФормированиеЗаданийНаПеревозку ;
		ИначеЕсли ТекущаяСтраница = "ДокументыДляПеревозчиков" Тогда
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДокументыДляПеревозчиков;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаЗаданияНаПеревозкуВРаботе;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияРазвернуть()
	
	Для каждого СтрокаДерева из РаспоряженияНаДоставку.ПолучитьЭлементы() Цикл
		Элементы.РаспоряженияНаДоставку.Развернуть(СтрокаДерева.ПолучитьИдентификатор(),Истина)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтроки(ИДСтрокиНазначения)
	
	МассивИДВыбранныхСтрок = Элементы.РаспоряженияНаДоставку.ВыделенныеСтроки;
	Если МассивИДВыбранныхСтрок.Количество() = 0 Тогда
		Сообщить(НСтр("ru='Не выбраны распоряжения для переноса.';"), СтатусСообщения.Важное);
		Возврат
	КонецЕсли;
	Если ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Количество() = 0 Тогда
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да, "Создать");
		Режим.Добавить(КодВозвратаДиалога.Отмена);
		Текст = НСтр("ru = 'Список формируемых заданий не заполнен. Создать задания на перевозку?';");
		Ответ = Вопрос(Текст, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			АдресЗаданийФормируемых = ПоместитьЗаданияВХранилище();
			ПараметрыФормы = Новый Структура("ДатаОтбор, АдресЗаданийФормируемых, Склад, ИтогоВес, ИтогоОбъем",
							ДатаРаспоряжений, АдресЗаданийФормируемых, Склад, ИтогоВес, ИтогоОбъем);
			ОткрытьФормуМодально(ОбработкаПолноеИмя + ".Форма.ФормаВыбораТранспорта", ПараметрыФормы, ЭтаФорма);
		Иначе
			Возврат
		КонецЕсли;
		Если ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Количество() > 0 Тогда
			ИДСтрокиНазначения = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	Если ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Количество() = 1 Тогда
		ИДСтрокиНазначения = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	Если ИДСтрокиНазначения = Неопределено тогда
		Сообщить(НСтр("ru='Не выбрана строка назначения в списке заданий на перевозку.';"), СтатусСообщения.Важное);
		Возврат
	КонецЕсли;

	ПеренестиСтрокиСервер(МассивИДВыбранныхСтрок, ИДСтрокиНазначения);
	
	Элементы.ЗаданияНаПеревозкуФормирование.Развернуть(ИДСтрокиНазначения);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыДляПеревозчиковСервер()
	
	Если ЗначениеЗаполнено(Перевозчик) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДокументыДляПеревозчиков.Отбор, "Перевозчик",Перевозчик,
														ВидСравненияКомпоновкиДанных.Равно);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДокументыДляПеревозчиков.Отбор, "Перевозчик");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДокументыДляПеревозчиков.Отбор, "Склад",Склад,
														ВидСравненияКомпоновкиДанных.ВИерархии);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДокументыДляПеревозчиков.Отбор, "Склад");
	КонецЕсли;
	
	ПериодДокументовДляПеревозчиковПриИзмененииСервер();
	
	Элементы.ДокументыДляПеревозчиковПеревозчик.Видимость = НЕ ЗначениеЗаполнено(Перевозчик);
	УстановитьВидимостьСкладов();
	
	// Заполним список выбора перевозчиков
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 5
          |	РаспоряженияПеревозчики.Перевозчик
          |ИЗ
          |	(ВЫБРАТЬ
          |		РеализацияТоваровУслуг.ПеревозчикПартнер КАК Перевозчик,
          |		РеализацияТоваровУслуг.Дата КАК Дата
          |	ИЗ
          |		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
          |	ГДЕ
          |		РеализацияТоваровУслуг.Проведен
          |		И РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
          |		И РеализацияТоваровУслуг.ПеревозчикПартнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
          |		И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
          |				ИЛИ РеализацияТоваровУслуг.Склад В ИЕРАРХИИ (&Склад))
          |		И (РеализацияТоваровУслуг.Дата >= &ДатаНачала
          |				ИЛИ &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
          |		И (РеализацияТоваровУслуг.Дата <= &ДатаОкончания
          |				ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
          |	
          |	ОБЪЕДИНИТЬ ВСЕ
          |	
          |	ВЫБРАТЬ
          |		ПеремещениеТоваров.ПеревозчикПартнер,
          |		ПеремещениеТоваров.Дата
          |	ИЗ
          |		Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
          |	ГДЕ
          |		ПеремещениеТоваров.Проведен
          |		И ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчика)
          |		И ПеремещениеТоваров.ПеревозчикПартнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)
          |		И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
          |				ИЛИ ПеремещениеТоваров.СкладОтправитель В ИЕРАРХИИ (&Склад))
          |		И (ПеремещениеТоваров.Дата >= &ДатаНачала
          |				ИЛИ &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
          |		И (ПеремещениеТоваров.Дата <= &ДатаОкончания
          |				ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))) КАК РаспоряженияПеревозчики
          |
          |СГРУППИРОВАТЬ ПО
          |	РаспоряженияПеревозчики.Перевозчик
          |
          |УПОРЯДОЧИТЬ ПО
          |	МАКСИМУМ(РаспоряженияПеревозчики.Дата) УБЫВ";
	Запрос.УстановитьПараметр("Склад",Склад);
	Запрос.УстановитьПараметр("ДатаНачала",ПериодДокументовДляПеревозчиков.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ПериодДокументовДляПеревозчиков.ДатаОкончания);
	Элементы.Перевозчик.СписокВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Перевозчик"));
	
	УстановитьОтметкуСкладДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокВесОбъемСервер()
	
	ТекстВес = НСтр("ru=""Вес брутто, "";")	+ ЕдиницаИзмеренияВеса;
	ТекстОбъем = НСтр("ru=""Объем, "";")	+ ЕдиницаИзмеренияОбъема;
	Элементы.РаспоряженияНаДоставкуВес.Заголовок = ТекстВес;
	Элементы.РаспоряженияНаДоставкуОбъем.Заголовок = ТекстОбъем;
	
	Элементы.ЗаданияНаПеревозкуФормированиеВес.Заголовок = ТекстВес;
	Элементы.ЗаданияНаПеревозкуФормированиеОбъем.Заголовок = ТекстОбъем;
	
	Элементы.НакладныеВЗаданияхНаПеревозкуВес.Заголовок = ТекстВес;
	Элементы.НакладныеВЗаданияхНаПеревозкуОбъем.Заголовок = ТекстОбъем;
	
	Элементы.ЗаданияНаПеревозкуВРаботеВес.Заголовок = ТекстВес;
	Элементы.ЗаданияНаПеревозкуВРаботеОбъем.Заголовок = ТекстОбъем;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСтрокиСервер(МассивИДВыбранныхСтрок, ИДСтрокиНазначения)
	
	ТекущаяСтрокаЗаданийНаПеревозку = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИДСтрокиНазначения);
	РодительТекущейСтрокиЗаданийНаПеревозку = ТекущаяСтрокаЗаданийНаПеревозку.ПолучитьРодителя();
	РаспоряженияКорневыеСтроки = РаспоряженияНаДоставку.ПолучитьЭлементы();
	
	Если РодительТекущейСтрокиЗаданийНаПеревозку <> Неопределено тогда
		ТекущаяВеткаЗаданийНаПеревозку = РодительТекущейСтрокиЗаданийНаПеревозку.ПолучитьЭлементы();
		ИндексТекущейПозицииВЗаданииНаПеревозку = ТекущаяВеткаЗаданийНаПеревозку.Индекс(ТекущаяСтрокаЗаданийНаПеревозку);
	Иначе
		РодительТекущейСтрокиЗаданийНаПеревозку = ТекущаяСтрокаЗаданийНаПеревозку;
		ТекущаяВеткаЗаданийНаПеревозку = РодительТекущейСтрокиЗаданийНаПеревозку.ПолучитьЭлементы();
		ИндексТекущейПозицииВЗаданииНаПеревозку = ТекущаяВеткаЗаданийНаПеревозку.Количество();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(РодительТекущейСтрокиЗаданийНаПеревозку.Ссылка) Тогда
		СохранитьЗаданиеВСтроке(РодительТекущейСтрокиЗаданийНаПеревозку);
	КонецЕсли;
	Сдвиг = 0; //Сдвиг позиции вставки пункта вследствие вставки предшествующих в цикле
	Для каждого ИДСтроки из МассивИДВыбранныхСтрок Цикл
		
		ТекущаяСтрокаРаспоряжений = РаспоряженияНаДоставку.НайтиПоИдентификатору(ИДСтроки);
		
		// Если текущую строку уже удалили вместе с родителем
		Если ТекущаяСтрокаРаспоряжений = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВершинаТекущейВеткиРаспоряжений = ТекущаяСтрокаРаспоряжений.ПолучитьРодителя();
		
		// Если в выбранных строках есть родитель этой строки, ничего не делаем, строка будет обработана вместе с родителем
		Если ВершинаТекущейВеткиРаспоряжений <> Неопределено
				И МассивИДВыбранныхСтрок.Найти(ВершинаТекущейВеткиРаспоряжений.ПолучитьИдентификатор())<>Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВершинаТекущейВеткиРаспоряжений = Неопределено Тогда
			ТекущаяВеткаРаспоряжений = ТекущаяСтрокаРаспоряжений.ПолучитьЭлементы();
			ВершинаТекущейВеткиРаспоряжений = ТекущаяСтрокаРаспоряжений;
		Иначе
			ТекущаяВеткаРаспоряжений = ВершинаТекущейВеткиРаспоряжений.ПолучитьЭлементы();
		КонецЕсли;
			
		КоллекцияПодчиненныхСтрок = ТекущаяСтрокаРаспоряжений.ПолучитьЭлементы();
		
		Если КоллекцияПодчиненныхСтрок.Количество() = 0 тогда
			КоллекцияПодчиненныхСтрок = Новый Массив(1);
			КоллекцияПодчиненныхСтрок[0] = ТекущаяСтрокаРаспоряжений;
			Если ЗонаГруппаИлиПустая Тогда
				ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Вес = ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Вес - ТекущаяСтрокаРаспоряжений.Вес;
				ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Объем = ТекущаяСтрокаРаспоряжений.ПолучитьРодителя().Объем - ТекущаяСтрокаРаспоряжений.Объем;
			КонецЕсли;
		КонецЕсли;
		
		ИтогоВес = ИтогоВес - ТекущаяСтрокаРаспоряжений.Вес;
		ИтогоОбъем = ИтогоОбъем - ТекущаяСтрокаРаспоряжений.Объем;
		РодительТекущейСтрокиЗаданийНаПеревозку.Вес = РодительТекущейСтрокиЗаданийНаПеревозку.Вес + ТекущаяСтрокаРаспоряжений.Вес;
		РодительТекущейСтрокиЗаданийНаПеревозку.Объем = РодительТекущейСтрокиЗаданийНаПеревозку.Объем + ТекущаяСтрокаРаспоряжений.Объем;
		
		Для каждого СтрокаРаспоряжений из КоллекцияПодчиненныхСтрок Цикл
			// Для ДанныеФормыКоллекцияЭлементовДерева нет метода НайтиСтроки, ищем в цикле
			Для Каждого СтрокаПункт Из ТекущаяВеткаЗаданийНаПеревозку Цикл
				Если СтрокаПункт.АдресДоставки = СтрокаРаспоряжений.АдресДоставки Тогда
					СтрокаПунктСНужнымАдресом = СтрокаПункт;
					Прервать;
				КонецЕсли;
				СтрокаПунктСНужнымАдресом = Неопределено;
			КонецЦикла;
			Если СтрокаПунктСНужнымАдресом = Неопределено Тогда
				СтрокаНазначения = ТекущаяВеткаЗаданийНаПеревозку.Вставить(ИндексТекущейПозицииВЗаданииНаПеревозку+Сдвиг);
				ЗаполнитьЗначенияСвойств(СтрокаНазначения, СтрокаРаспоряжений);
				СтрокаНазначения.Ссылка = РодительТекущейСтрокиЗаданийНаПеревозку.Ссылка;
				СтрокаНазначения.ОформлениеПоТипу = "Адрес";
				СтрокаНазначения.ПереходДаты = "";
				Если ИндексТекущейПозицииВЗаданииНаПеревозку + Сдвиг > 0 Тогда
					Если ИндексТекущейПозицииВЗаданииНаПеревозку + Сдвиг + 1 < ТекущаяВеткаЗаданийНаПеревозку.Количество() Тогда
						СтрокаНазначения.ВремяС = Мин(ТекущаяВеткаЗаданийНаПеревозку[ИндексТекущейПозицииВЗаданииНаПеревозку + Сдвиг - 1].ВремяПо,
												ТекущаяВеткаЗаданийНаПеревозку[ИндексТекущейПозицииВЗаданииНаПеревозку + Сдвиг + 1].ВремяС);
						СтрокаНазначения.ВремяПо = ТекущаяВеткаЗаданийНаПеревозку[ИндексТекущейПозицииВЗаданииНаПеревозку + Сдвиг + 1].ВремяС;
					Иначе
						СтрокаНазначения.ВремяС = ТекущаяВеткаЗаданийНаПеревозку[ИндексТекущейПозицииВЗаданииНаПеревозку + Сдвиг - 1].ВремяПо;
						СтрокаНазначения.ВремяПо = СтрокаНазначения.ВремяС;
					КонецЕсли;
				Иначе
					СтрокаНазначения.ВремяС = РодительТекущейСтрокиЗаданийНаПеревозку.ВремяС;
					Если ТекущаяВеткаЗаданийНаПеревозку.Количество() > 1 Тогда
						СтрокаНазначения.ВремяПо = ТекущаяВеткаЗаданийНаПеревозку[ИндексТекущейПозицииВЗаданииНаПеревозку + Сдвиг + 1].ВремяС;
					Иначе
						СтрокаНазначения.ВремяПо = СтрокаНазначения.ВремяС;
					КонецЕсли;
				КонецЕсли;
				СтрокаНазначения.КлючСвязи = Новый УникальныйИдентификатор;
				КлючСвязи = СтрокаНазначения.КлючСвязи;
				УстановитьМодифицированностьСервер(СтрокаНазначения);
				
				Сдвиг = Сдвиг + 1; // сдвигаем индекс для вставки
				ИДСтрокиНазначения = СтрокаНазначения.ПолучитьИдентификатор();
			Иначе
				СтрокаНазначения = СтрокаПунктСНужнымАдресом;
				СтрокаНазначения.Вес	 = СтрокаНазначения.Вес + СтрокаРаспоряжений.Вес;
				СтрокаНазначения.Объем	 = СтрокаНазначения.Объем + СтрокаРаспоряжений.Объем;
				УстановитьМодифицированностьСервер(СтрокаНазначения);
				КлючСвязи = СтрокаНазначения.КлючСвязи;
				ИДСтрокиНазначения = СтрокаНазначения.ПолучитьИдентификатор();
			КонецЕсли;
			
			МассивСтрокСкладыРаспоряжений = СкладыДляИтоговРаспоряжений.НайтиСтроки(Новый Структура("Распоряжение",СтрокаРаспоряжений.Распоряжение));
			Для Каждого СтрокаСкладРаспоряжения Из МассивСтрокСкладыРаспоряжений Цикл
				НоваяСтрока = СкладыЗаданийНаПеревозку.Добавить();
				НоваяСтрока.Склад				= СтрокаСкладРаспоряжения.Склад;
				НоваяСтрока.РаспоряжениеСсылка	= СтрокаСкладРаспоряжения.Распоряжение;
				НоваяСтрока.КлючСвязиМаршрута	= СтрокаНазначения.КлючСвязи;
				СкладыДляИтоговРаспоряжений.Удалить(СкладыДляИтоговРаспоряжений.Индекс(СтрокаСкладРаспоряжения));
				Если НЕ ЗначениеЗаполнено(СтрокаНазначения.Склад)
					ИЛИ (СтрокаСкладРаспоряжения.Склад <> РодительТекущейСтрокиЗаданийНаПеревозку.Склад
						И НЕ СтрокаСкладРаспоряжения.Склад.ПринадлежитЭлементу(РодительТекущейСтрокиЗаданийНаПеревозку.Склад)) Тогда
				// Если несоответствие со складом задания, берем склад из отбора в шапке обработки
					РодительТекущейСтрокиЗаданийНаПеревозку.Склад = Склад;
				КонецЕсли;
			КонецЦикла;
			
			НоваяСтрокаНакладная = НакладныеВЗаданияхНаПеревозку.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНакладная, СтрокаРаспоряжений);
			НоваяСтрокаНакладная.Ссылка = РодительТекущейСтрокиЗаданийНаПеревозку.Ссылка;
			НоваяСтрокаНакладная.КлючСвязи = КлючСвязи;
			
		КонецЦикла;
		
		Если ВершинаТекущейВеткиРаспоряжений = ТекущаяСтрокаРаспоряжений Тогда
			РаспоряженияКорневыеСтроки.Удалить(РаспоряженияКорневыеСтроки.Индекс(ТекущаяСтрокаРаспоряжений));
		Иначе
			ТекущаяВеткаРаспоряжений.Удалить(ТекущаяВеткаРаспоряжений.Индекс(ТекущаяСтрокаРаспоряжений));
			// Если удалили последний элемент в ветке, удалим родителя
			Если ТекущаяВеткаРаспоряжений.Количество() = 0 Тогда
				РаспоряженияКорневыеСтроки.Удалить(РаспоряженияКорневыеСтроки.Индекс(ВершинаТекущейВеткиРаспоряжений));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ПеренумероватьИЗаполнитьПризнакиПереходаДат();
	ЗаполнитьСкладыВИтогахСписков();
	ЗаполнитьПризнакиОформленияРаспоряжений();
	ОбновитьИтогиВЗаголовкахГрупп();
	Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока = ИДСтрокиНазначения;
	УстановитьОтметкуСкладДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСкладыВИтогахСписков(ТаблицаСкладовЗаданий = Неопределено);
	
	// Заполним склады в списке распоряжений (при обновлении не перезаполняем)
	ТаблицаСкладов = РеквизитФормыВЗначение("СкладыДляИтоговРаспоряжений");
	Если ЗонаГруппаИлиПустая И ТаблицаСкладовЗаданий = Неопределено Тогда
		Для Каждого Стр Из РаспоряженияНаДоставку.ПолучитьЭлементы() Цикл
			ТаблицаСОтбором = ТаблицаСкладов.Скопировать(Новый Структура("ЗонаДоставки",Стр.ЗонаДоставки));
			ТаблицаСОтбором.Свернуть("Склад");
			КоличествоСкладов = ТаблицаСОтбором.Количество();
			Если КоличествоСкладов = 1 Тогда
				Стр.Склад = ТаблицаСОтбором[0].Склад
			Иначе
				Текст = НСтр("ru = '%КоличествоCкладов% погрузки';");
				Текст = СтрЗаменить(Текст, "%КоличествоCкладов%",
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСкладов, НСтр("ru='склад, склада, складов';")));
				Стр.Склад = Текст;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТаблицаСкладов.Свернуть("Склад");
	Если ТаблицаСкладов.Количество() = 0 Тогда
		ИтогоСкладов = "";
	ИначеЕсли ТаблицаСкладов.Количество() = 1 Тогда
		ИтогоСкладов = ТаблицаСкладов[0].Склад;
	Иначе
		Текст = НСтр("ru = '%КоличествоCкладов% погрузки';");
		Текст = СтрЗаменить(Текст, "%КоличествоCкладов%",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ТаблицаСкладов.Количество(), НСтр("ru='склад, склада, складов';")));
		ИтогоСкладов = Текст;
	КонецЕсли;
	
	// Заполним склады в списке заданий
	Если ТаблицаСкладовЗаданий = Неопределено Тогда
		ТаблицаСкладов = РеквизитФормыВЗначение("СкладыЗаданийНаПеревозку");
	Иначе
		ТаблицаСкладов = ТаблицаСкладовЗаданий;
	КонецЕсли;
	Для Каждого СтрокаЗадание Из ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы() Цикл
		Если НЕ СтрокаЗадание.Модифицирован И ТаблицаСкладовЗаданий = Неопределено Тогда
			Продолжить
		КонецЕсли;
		Для Каждого СтрокаПункт Из СтрокаЗадание.ПолучитьЭлементы() Цикл
			Если НЕ СтрокаПункт.Модифицирован И ТаблицаСкладовЗаданий = Неопределено Тогда
				Продолжить
			КонецЕсли;
			ТаблицаСОтбором = ТаблицаСкладов.Скопировать(Новый Структура("КлючСвязиМаршрута",СтрокаПункт.КлючСвязи));
			ТаблицаСОтбором.Свернуть("Склад");
			КоличествоСкладов = ТаблицаСОтбором.Количество();
			Если КоличествоСкладов = 1 Тогда
				СтрокаПункт.Склад = ТаблицаСОтбором[0].Склад
			Иначе
				Текст = НСтр("ru = '%КоличествоCкладов% погрузки';");
				Текст = СтрЗаменить(Текст, "%КоличествоCкладов%",
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСкладов, НСтр("ru='склад, склада, складов';")));
				СтрокаПункт.Склад = Текст;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним склады в распоряжениях по заданиям (только при обновлении списков)
	Если ТаблицаСкладовЗаданий = Неопределено Тогда
		Возврат
	КонецЕсли;
	Для Каждого СтрокаРаспоряжение Из НакладныеВЗаданияхНаПеревозку Цикл
		ТаблицаСОтбором = ТаблицаСкладов.Скопировать(Новый Структура("РаспоряжениеСсылка",СтрокаРаспоряжение.Распоряжение));
		ТаблицаСОтбором.Свернуть("Склад");
		КоличествоСкладов = ТаблицаСОтбором.Количество();
		Если КоличествоСкладов = 1 Тогда
			СтрокаРаспоряжение.Склад = ТаблицаСОтбором[0].Склад;
		Иначе
			Текст = НСтр("ru = '%КоличествоCкладов% погрузки';");
			Текст = СтрЗаменить(Текст, "%КоличествоCкладов%",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоСкладов, НСтр("ru='склад, склада, складов';")));
			СтрокаРаспоряжение.Склад = Текст;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиОформленияРаспоряжений()
	
	ВерхниеСтрокиДерева = РаспоряженияНаДоставку.ПолучитьЭлементы();
	Если ЗонаГруппаИлиПустая Тогда
		Для каждого СтрокаЗонаДоставки из ВерхниеСтрокиДерева Цикл
			ЗаполнитьПризнакиОформленияРаспоряженийНижнийУровень(СтрокаЗонаДоставки.ПолучитьЭлементы())
		КонецЦикла;
	Иначе
		ЗаполнитьПризнакиОформленияРаспоряженийНижнийУровень(ВерхниеСтрокиДерева)
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиОформленияРаспоряженийНижнийУровень(КоллекцияСтрокДерева)
	
	ПредыдущийАдрес = "ОтсутствуетАдрес";
	Подсвечиваем = 0;
	Для каждого Строка из КоллекцияСтрокДерева Цикл
		Если (Строка.АдресДоставки <> ПредыдущийАдрес) И (ПредыдущийАдрес <> "ОтсутствуетАдрес") тогда
			Подсвечиваем = Макс(Подсвечиваем-1,-Подсвечиваем+1);
		КонецЕсли;
		Строка.ОформлениеСтроки = Подсвечиваем;
		ПредыдущийАдрес = Строка.АдресДоставки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПризнакиПереходаДат()
	
	СтрокиЗаданияНаПеревозку = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы();
	Если СтрокиЗаданияНаПеревозку.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	предДатаС = СтрокиЗаданияНаПеревозку[0].ВремяС + 60*60*24;
	Для Каждого Стр из СтрокиЗаданияНаПеревозку Цикл
		
		Если НачалоДня(Стр.ВремяС) <> НачалоДня(предДатаС) Тогда
			
			Если НачалоДня(Стр.ВремяС) <> НачалоДня(Стр.ВремяПо) Тогда
				Стр.ПереходДаты = "ДатаСДатаПо"
			Иначе
				Стр.ПереходДаты = "ДатаС"
			КонецЕсли;
				
		Иначе
			
			Если НачалоДня(Стр.ВремяС) <> НачалоДня(Стр.ВремяПо) Тогда
				Стр.ПереходДаты = "ДатаПо"
			Иначе
				Стр.ПереходДаты = ""
			КонецЕсли;
			
		КонецЕсли;
		
		предДатаС = Стр.ВремяС;
		
		Для Каждого ВложеннаяСтрока из Стр.ПолучитьЭлементы() Цикл
			
			Если НачалоДня(ВложеннаяСтрока.ВремяС) <> НачалоДня(предДатаС) Тогда
				
				Если НачалоДня(ВложеннаяСтрока.ВремяС) <> НачалоДня(ВложеннаяСтрока.ВремяПо) Тогда
					ВложеннаяСтрока.ПереходДаты = "ДатаСДатаПо"
				Иначе
					ВложеннаяСтрока.ПереходДаты = "ДатаС"
				КонецЕсли;
				
			Иначе
				
				Если НачалоДня(ВложеннаяСтрока.ВремяС) <> НачалоДня(ВложеннаяСтрока.ВремяПо) Тогда
					ВложеннаяСтрока.ПереходДаты = "ДатаПо"
				Иначе
					ВложеннаяСтрока.ПереходДаты = ""
				КонецЕсли;
				
			КонецЕсли;
			
			предДатаС = ВложеннаяСтрока.ВремяС;
			
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьСкладыЗаданийНаПеревозку()
	Запрос = Новый Запрос("ВЫБРАТЬ
	      |	ЗаданиеНаПеревозку.Ссылка
	      |ПОМЕСТИТЬ ВТЗаданиеНаПеревозку
	      |ИЗ
	      |	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	      |ГДЕ
	      |	ЗаданиеНаПеревозку.Проведен
	      |	И ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется)
	      |	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	      |			ИЛИ ЗаданиеНаПеревозку.Склад В ИЕРАРХИИ (&Склад))
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	ЗаданиеНаПеревозкуДокументы.Распоряжение,
	      |	ЗаданиеНаПеревозкуМаршрут.КлючСвязи
	      |ПОМЕСТИТЬ ВТЗаданиеНаПеревозкуСтроки
	      |ИЗ
	      |	ВТЗаданиеНаПеревозку КАК ВТЗаданиеНаПеревозку
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуДокументы
	      |		ПО (ЗаданиеНаПеревозкуДокументы.Ссылка = ВТЗаданиеНаПеревозку.Ссылка)
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
	      |		ПО (ЗаданиеНаПеревозкуМаршрут.КлючСвязи = ЗаданиеНаПеревозкуДокументы.КлючСвязи)
	      |;
	      |
	      |////////////////////////////////////////////////////////////////////////////////
	      |ВЫБРАТЬ
	      |	РеализацияТоваровУслугТовары.Склад КАК Склад,
	      |	РеализацияТоваровУслугТовары.Ссылка КАК РаспоряжениеСсылка,
	      |	ВТЗаданиеНаПеревозкуСтроки.КлючСвязи КАК КлючСвязиМаршрута
	      |ИЗ
	      |	ВТЗаданиеНаПеревозкуСтроки КАК ВТЗаданиеНаПеревозкуСтроки
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	      |		ПО ВТЗаданиеНаПеревозкуСтроки.Распоряжение = РеализацияТоваровУслугТовары.Ссылка
	      |
	      |ОБЪЕДИНИТЬ ВСЕ
	      |
	      |ВЫБРАТЬ
	      |	ПеремещениеТоваров.СкладОтправитель,
	      |	ПеремещениеТоваров.Ссылка,
	      |	ВТЗаданиеНаПеревозкуСтроки.КлючСвязи
	      |ИЗ
	      |	ВТЗаданиеНаПеревозкуСтроки КАК ВТЗаданиеНаПеревозкуСтроки
	      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	      |		ПО ВТЗаданиеНаПеревозкуСтроки.Распоряжение = ПеремещениеТоваров.Ссылка");
		
	Запрос.УстановитьПараметр("Склад",Склад);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено
	КонецЕсли;
	ТаблицаРезультат = Результат.Выгрузить();
	ЗначениеВДанныеФормы(ТаблицаРезультат, СкладыЗаданийНаПеревозку);
	Возврат ТаблицаРезультат;
	
КонецФункции

&НаСервере
Процедура ОбновитьСкладыДляИтоговРаспоряжений()
	
	СкладыДляИтоговРаспоряжений.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаданиеНаПеревозку.Ссылка КАК Ссылка,
	|	ЗаданиеНаПеревозку.Статус КАК Статус
	|ПОМЕСТИТЬ ВТЗаданияНаПеревозкуОтрабатываемые
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
	|ГДЕ
	|	ЗаданиеНаПеревозку.Проведен
	|	И (ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке)
	|			ИЛИ ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Отправлен)
	|			ИЛИ ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыт))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданиеНаПеревозкуДокументы.Распоряжение
	|ПОМЕСТИТЬ ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых
	|ИЗ
	|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаданияНаПеревозкуОтрабатываемые КАК ВТЗаданияНаПеревозкуОтрабатываемые
	|		ПО ЗаданиеНаПеревозкуДокументы.Ссылка = ВТЗаданияНаПеревозкуОтрабатываемые.Ссылка
	|ГДЕ
	|	НЕ(ВТЗаданияНаПеревозкуОтрабатываемые.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыт)
	|				И НЕ ЗаданиеНаПеревозкуДокументы.Доставлено)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.ЗонаДоставки
	|ПОМЕСТИТЬ ВТРеализацииНаДоставку
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	НЕ РеализацияТоваровУслуг.Ссылка В (&НакладныеВЗаданияхНаПеревозкуФормируемых)
	|	И НЕ РеализацияТоваровУслуг.Ссылка В
	|				(ВЫБРАТЬ
	|					влВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых.Распоряжение
	|				ИЗ
	|					ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых КАК влВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых)
	|	И РеализацияТоваровУслуг.Проведен
	|	И РеализацияТоваровУслуг.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)
	|	И (РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|			ИЛИ РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИЛИ РеализацияТоваровУслуг.Склад В ИЕРАРХИИ (&Склад))
	|	И (&ЗонаДоставки = ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|			ИЛИ РеализацияТоваровУслуг.ЗонаДоставки В ИЕРАРХИИ (&ЗонаДоставки))
	|	И (&ДатаРаспоряжений = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) <= &ДатаРаспоряжений)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Ссылка КАК Распоряжение,
	|	РеализацияТоваровУслугТовары.Склад,
	|	соедВТРеализацииНаДоставку.ЗонаДоставки
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРеализацииНаДоставку КАК соедВТРеализацииНаДоставку
	|		ПО (соедВТРеализацииНаДоставку.Ссылка = РеализацияТоваровУслугТовары.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Ссылка,
	|	РеализацияТоваровУслугТовары.Склад,
	|	соедВТРеализацииНаДоставку.ЗонаДоставки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка,
	|	ПеремещениеТоваров.СкладОтправитель,
	|	ПеремещениеТоваров.ЗонаДоставки
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	НЕ ПеремещениеТоваров.Ссылка В (&НакладныеВЗаданияхНаПеревозкуФормируемых)
	|	И НЕ ПеремещениеТоваров.Ссылка В
	|				(ВЫБРАТЬ
	|					влВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых.Распоряжение
	|				ИЗ
	|					ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых КАК влВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых)
	|	И ПеремещениеТоваров.Проведен
	|	И (ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
	|			ИЛИ ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
	|	И (&ЗонаДоставки = ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
	|			ИЛИ ПеремещениеТоваров.ЗонаДоставки В ИЕРАРХИИ (&ЗонаДоставки))
	|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|			ИЛИ ПеремещениеТоваров.СкладОтправитель В ИЕРАРХИИ (&Склад))
	|	И (&ДатаРаспоряжений = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(ПеремещениеТоваров.Дата, ДЕНЬ) <= &ДатаРаспоряжений)";
	
	Запрос.УстановитьПараметр("ЗонаДоставки", ЗонаДоставки);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаРаспоряжений", ДатаРаспоряжений);
	Запрос.УстановитьПараметр("НакладныеВЗаданияхНаПеревозкуФормируемых", РеквизитФормыВЗначение("НакладныеВЗаданияхНаПеревозку").ВыгрузитьКолонку("Распоряжение"));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат
	КонецЕсли;
	
	ТаблицаРезультатов = Новый ТаблицаЗначений;
	ТаблицаРезультатов = Результат.Выгрузить();
	ЗначениеВДанныеФормы(ТаблицаРезультатов, СкладыДляИтоговРаспоряжений);
	ТаблицаРезультатов.Свернуть("Склад");
	
	Если ТаблицаРезультатов.Количество() = 1 Тогда
		ИтогоСкладов = ТаблицаРезультатов[0].Склад;
	Иначе
		Текст = НСтр("ru = '%КоличествоCкладов% погрузки';");
		Текст = СтрЗаменить(Текст, "%КоличествоCкладов%",
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ТаблицаРезультатов.Количество(), НСтр("ru='склад, склада, складов';")));
		ИтогоСкладов = Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпискиЗаданийНаПеревозку()
	
	УстановитьВидимостьСкладов();
	
	ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Очистить();
	НакладныеВЗаданияхНаПеревозку.Очистить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = ПолучитьТекстЗапросаЗаданияНаПеревозку();
	
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("Ссылка", ПредопределенноеЗначение("Документ.ЗаданиеНаПеревозку.ПустаяСсылка"));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВТонны", КоэффициентПересчетаВТонны);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВКубическиеМетры", КоэффициентПересчетаВКубическиеМетры);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДеревоРезультатов = Новый ДеревоЗначений;
		ДеревоРезультатов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ТаблицаСкладов = ОбновитьСкладыЗаданийНаПеревозку();
		Для Каждого Стр из ДеревоРезультатов.Строки Цикл
			Стр.ПорядокВМаршруте = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(Стр.ПорядокВМаршруте, Истина, Истина);
			Если Стр.Строки.Количество() = 1 И Стр.Строки[0].АдресДоставки = Null Тогда
				Стр.Строки.Удалить(Стр.Строки[0]);
			КонецЕсли;
		КонецЦикла;
	
		ЗначениеВДанныеФормы(ДеревоРезультатов, ЗаданияНаПеревозкуФормирование);
		
		ЗаполнитьПризнакиПереходаДат();
		
		Запрос.Текст = ПолучитьТекстЗапросаРаспоряженияВЗаданияхНаПеревозку();
		
		Запрос.УстановитьПараметр("Склад", Склад);
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			ТаблицаРезультатов = Новый ТаблицаЗначений;
			ТаблицаРезультатов = Результат.Выгрузить();
			ТаблицаРезультатов.Колонки.Добавить("ПолучательПредставление", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(100)));
			Для Каждого Стр из ТаблицаРезультатов Цикл
				Если ЗначениеЗаполнено(Стр.ВремяПо) Тогда
					Стр.Время = Формат(Стр.ВремяС, "ДФ=ЧЧ:мм") + " - " + Формат(Стр.ВремяПо, "ДФ=ЧЧ:мм")
				Иначе
					Стр.Время = Формат(Стр.ВремяС, "ДФ=ЧЧ:мм")
				КонецЕсли;
				Если ЗначениеЗаполнено(Стр.Перевозчик) Тогда
					Стр.ПолучательПредставление = Строка(Стр.Перевозчик) + " (" + Строка(Стр.Получатель) + ")";
				Иначе
					Стр.ПолучательПредставление = Строка(Стр.Получатель);
				КонецЕсли;
			КонецЦикла;
			ТаблицаРезультатов.Колонки.Добавить("Склад");
			ЗначениеВДанныеФормы(ТаблицаРезультатов, НакладныеВЗаданияхНаПеревозку);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьСписокРаспоряженийНаДоставку();
	ЗаполнитьСкладыВИтогахСписков(ТаблицаСкладов);
	ЗаданияМодифицированы = Ложь;
	УстановитьОтметкуСкладДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаЗаданияНаПеревозку()
	
	Возврат
		"ВЫБРАТЬ
		|	ЗаданиеНаПеревозку.Ссылка КАК Ссылка,
		|	ЗаданиеНаПеревозку.ДатаВремяРейсаПланС,
		|	ЗаданиеНаПеревозку.ДатаВремяРейсаПланПо,
		|	ЗаданиеНаПеревозку.Номер,
		|	ЗаданиеНаПеревозку.Статус,
		|	ЗаданиеНаПеревозку.ТранспортноеСредство,
		|	ЗаданиеНаПеревозку.Склад,
		|	ЗаданиеНаПеревозку.ДополнительнаяИнформация,
		|	ЗаданиеНаПеревозку.ТранспортноеСредство.ГрузоподъемностьВТоннах,
		|	ЗаданиеНаПеревозку.ТранспортноеСредство.ВместимостьВКубическихМетрах
		|ПОМЕСТИТЬ ВТЗаданиеНаПеревозку
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		|ГДЕ
		|	ЗаданиеНаПеревозку.Проведен
		|	И ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется)
		|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИЛИ ЗаданиеНаПеревозку.Склад В ИЕРАРХИИ (&Склад))
		|	И (&Ссылка = ЗНАЧЕНИЕ(Документ.ЗаданиеНаПеревозку.ПустаяСсылка)
		|			ИЛИ ЗаданиеНаПеревозку.Ссылка = &Ссылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеНаПеревозкуМаршрут.АдресДоставки КАК АдресДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
		|	ЗаданиеНаПеревозкуМаршрут.ЗонаДоставки КАК ЗонаДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.Вес КАК Вес,
		|	ЗаданиеНаПеревозкуМаршрут.Объем КАК Объем,
		|	ВТЗаданиеНаПеревозку.Номер КАК Номер,
		|	""ThisStringWillBeChangeLater"" КАК Склад,
		|	ВТЗаданиеНаПеревозку.Склад КАК СкладДляИтогов,
		|	ЗаданиеНаПеревозкуМаршрут.ВремяС КАК ВремяС,
		|	ЗаданиеНаПеревозкуМаршрут.ВремяПо КАК ВремяПо,
		|	ВТЗаданиеНаПеревозку.Ссылка КАК Ссылка,
		|	ВТЗаданиеНаПеревозку.ДатаВремяРейсаПланС КАК ВремяДоставкиС,
		|	ВТЗаданиеНаПеревозку.ДатаВремяРейсаПланПо КАК ВремяДоставкиПо,
		|	НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозкуМаршрут.ВремяС, ДЕНЬ) КАК ДатаС,
		|	НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозкуМаршрут.ВремяПо, ДЕНЬ) КАК ДатаПо,
		|	ВТЗаданиеНаПеревозку.ТранспортноеСредство КАК ТранспортТип,
		|	ВТЗаданиеНаПеревозку.ТранспортноеСредство.ВместимостьПредставление КАК ВместимостьПредставление,
		|	ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка) КАК ТранспортноеСредство,
		|	ЗНАЧЕНИЕ(Справочник.ТипыТранспортныхСредств.ПустаяСсылка) КАК ТипТранспортногоСредства,
		|	ЗаданиеНаПеревозкуМаршрут.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ЗаданиеНаПеревозкуМаршрут.НомерСтроки КАК ПорядокВМаршруте,
		|	ЗаданиеНаПеревозкуМаршрут.КлючСвязи КАК КлючСвязи,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(20)) КАК ПереходДаты,
		|	ЛОЖЬ КАК Модифицирован,
		|	1 КАК КоличествоПунктовДоставки,
		|	0 КАК КоличествоРаспоряжений,
		|	""Адрес"" КАК ОформлениеПоТипу,
		|	ВТЗаданиеНаПеревозку.ДополнительнаяИнформация КАК ДополнительнаяИнформацияЗадание,
		|	ВТЗаданиеНаПеревозку.ТранспортноеСредствоГрузоподъемностьВТоннах / &КоэффициентПересчетаВТонны КАК ГрузоподъемностьВЕдПользователя,
		|	ВТЗаданиеНаПеревозку.ТранспортноеСредствоВместимостьВКубическихМетрах / &КоэффициентПересчетаВКубическиеМетры КАК ВместимостьВЕдПользователя
		|ИЗ
		|	ВТЗаданиеНаПеревозку КАК ВТЗаданиеНаПеревозку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
		|		ПО (ЗаданиеНаПеревозкуМаршрут.Ссылка = ВТЗаданиеНаПеревозку.Ссылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВремяДоставкиС,
		|	ВремяДоставкиПо,
		|	ПорядокВМаршруте
		|ИТОГИ
		|	МАКСИМУМ(ТранспортТип) КАК АдресДоставки,
		|	СУММА(Вес),
		|	СУММА(Объем),
		|	МАКСИМУМ(СкладДляИтогов) КАК Склад,
		|	МАКСИМУМ(ВремяДоставкиС) КАК ВремяС,
		|	МАКСИМУМ(ВремяДоставкиПо) КАК ВремяПо,
		|	МАКСИМУМ(ВремяДоставкиС),
		|	МАКСИМУМ(ВремяДоставкиПо),
		|	НАЧАЛОПЕРИОДА(МАКСИМУМ(ВремяДоставкиС), ДЕНЬ) КАК ДатаС,
		|	НАЧАЛОПЕРИОДА(МАКСИМУМ(ВремяДоставкиПо), ДЕНЬ) КАК ДатаПо,
		|	МАКСИМУМ(ВместимостьПредставление),
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ТранспортТип) ССЫЛКА Справочник.ТранспортныеСредства
		|			ТОГДА МАКСИМУМ(ТранспортТип)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ТранспортныеСредства.ПустаяСсылка)
		|	КОНЕЦ КАК ТранспортноеСредство,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ТранспортТип) ССЫЛКА Справочник.ТранспортныеСредства
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ТипыТранспортныхСредств.ПустаяСсылка)
		|		ИНАЧЕ МАКСИМУМ(ТранспортТип)
		|	КОНЕЦ КАК ТипТранспортногоСредства,
		|	МАКСИМУМ(ВТЗаданиеНаПеревозку.ДополнительнаяИнформация) КАК ДополнительнаяИнформация,
		|	МАКСИМУМ(Номер) КАК ПорядокВМаршруте,
		|	МАКСИМУМ(КлючСвязи),
		|	""_"" КАК ПереходДаты,
		|	СУММА(КоличествоПунктовДоставки),
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ТранспортТип) ССЫЛКА Справочник.ТранспортныеСредства
		|			ТОГДА ""ТС""
		|		ИНАЧЕ ""ТипТС""
		|	КОНЕЦ КАК ОформлениеПоТипу,
		|	МАКСИМУМ(ГрузоподъемностьВЕдПользователя),
		|	МАКСИМУМ(ВместимостьВЕдПользователя)
		|ПО
		|	Ссылка";
	
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапросаРаспоряженияВЗаданияхНаПеревозку()
	
	Возврат
		"ВЫБРАТЬ
		|	ЗаданиеНаПеревозку.Ссылка
		|ПОМЕСТИТЬ ВТЗаданиеНаПеревозку
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		|ГДЕ
		|	ЗаданиеНаПеревозку.Проведен
		|	И ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Формируется)
		|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИЛИ ЗаданиеНаПеревозку.Склад В ИЕРАРХИИ (&Склад))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеНаПеревозкуМаршрут.Ссылка,
		|	ЗаданиеНаПеревозкуМаршрут.АдресДоставки,
		|	ЗаданиеНаПеревозкуМаршрут.КлючСвязи
		|ПОМЕСТИТЬ ВТЗаданиеНаПеревозкуМаршрут
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Маршрут КАК ЗаданиеНаПеревозкуМаршрут
		|ГДЕ
		|	ЗаданиеНаПеревозкуМаршрут.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТЗаданиеНаПеревозку.Ссылка
		|			ИЗ
		|				ВТЗаданиеНаПеревозку КАК ВТЗаданиеНаПеревозку)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеНаПеревозкуДокументы.Ссылка,
		|	ЗаданиеНаПеревозкуДокументы.КлючСвязи,
		|	ЗаданиеНаПеревозкуДокументы.Распоряжение,
		|	ЗаданиеНаПеревозкуДокументы.Вес,
		|	ЗаданиеНаПеревозкуДокументы.Объем,
		|	ЗаданиеНаПеревозкуДокументы.Получатель,
		|	ЗаданиеНаПеревозкуДокументы.Перевозчик,
		|	ЗаданиеНаПеревозкуДокументы.ВремяС,
		|	ЗаданиеНаПеревозкуДокументы.ВремяПо,
		|	ЗаданиеНаПеревозкуДокументы.ДополнительнаяИнформация КАК ДополнительнаяИнформация,
		|	ВТЗаданиеНаПеревозкуМаршрут.АдресДоставки КАК АдресДоставки,
		|	""             "" КАК Время
		|ПОМЕСТИТЬ ВТЗаданиеНаПеревозкуДокументы
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаданиеНаПеревозкуМаршрут КАК ВТЗаданиеНаПеревозкуМаршрут
		|		ПО ЗаданиеНаПеревозкуДокументы.Ссылка = ВТЗаданиеНаПеревозкуМаршрут.Ссылка
		|			И ЗаданиеНаПеревозкуДокументы.КлючСвязи = ВТЗаданиеНаПеревозкуМаршрут.КлючСвязи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.Дата,
		|	ВТЗаданиеНаПеревозкуДокументы.Ссылка,
		|	ВТЗаданиеНаПеревозкуДокументы.КлючСвязи,
		|	ВТЗаданиеНаПеревозкуДокументы.Распоряжение,
		|	ТИПЗНАЧЕНИЯ(ВТЗаданиеНаПеревозкуДокументы.Распоряжение) КАК ВидРаспоряжения,
		|	ВТЗаданиеНаПеревозкуДокументы.Вес,
		|	ВТЗаданиеНаПеревозкуДокументы.Объем,
		|	ВТЗаданиеНаПеревозкуДокументы.Получатель,
		|	ВТЗаданиеНаПеревозкуДокументы.Перевозчик,
		|	ВТЗаданиеНаПеревозкуДокументы.ВремяС,
		|	ВТЗаданиеНаПеревозкуДокументы.ВремяПо,
		|	ВТЗаданиеНаПеревозкуДокументы.ДополнительнаяИнформация,
		|	ВТЗаданиеНаПеревозкуДокументы.АдресДоставки,
		|	ВТЗаданиеНаПеревозкуДокументы.Время
		|ИЗ
		|	ВТЗаданиеНаПеревозкуДокументы КАК ВТЗаданиеНаПеревозкуДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО ВТЗаданиеНаПеревозкуДокументы.Распоряжение = РеализацияТоваровУслуг.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.Номер,
		|	ПеремещениеТоваров.Дата,
		|	ВТЗаданиеНаПеревозкуДокументы.Ссылка,
		|	ВТЗаданиеНаПеревозкуДокументы.КлючСвязи,
		|	ВТЗаданиеНаПеревозкуДокументы.Распоряжение,
		|	ТИПЗНАЧЕНИЯ(ВТЗаданиеНаПеревозкуДокументы.Распоряжение),
		|	ВТЗаданиеНаПеревозкуДокументы.Вес,
		|	ВТЗаданиеНаПеревозкуДокументы.Объем,
		|	ВТЗаданиеНаПеревозкуДокументы.Получатель,
		|	ВТЗаданиеНаПеревозкуДокументы.Перевозчик,
		|	ВТЗаданиеНаПеревозкуДокументы.ВремяС,
		|	ВТЗаданиеНаПеревозкуДокументы.ВремяПо,
		|	ВТЗаданиеНаПеревозкуДокументы.ДополнительнаяИнформация,
		|	ВТЗаданиеНаПеревозкуДокументы.АдресДоставки,
		|	ВТЗаданиеНаПеревозкуДокументы.Время
		|ИЗ
		|	ВТЗаданиеНаПеревозкуДокументы КАК ВТЗаданиеНаПеревозкуДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ПО ВТЗаданиеНаПеревозкуДокументы.Распоряжение = ПеремещениеТоваров.Ссылка";
	
КонецФункции

&НаСервере
Процедура ОбновитьСписокРаспоряженийНаДоставку()
	
	ЗонаГруппаИлиПустая = (НЕ ЗначениеЗаполнено(ЗонаДоставки) ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗонаДоставки,"ЭтоГруппа"));
	
	УстановитьВидимостьСкладов();
	
	ОбновитьСкладыДляИтоговРаспоряжений();
	
	РаспоряженияНаДоставку.ПолучитьЭлементы().Очистить();
	
	Запрос = ПолучитьЗапросРаспоряженийНаДоставку();
	
	Если ЗонаГруппаИлиПустая Тогда
		Запрос.Текст = Запрос.Текст +"
		|ИТОГИ
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(СкладКоличествоПоЗоне) > 1
		|			ТОГДА ""ThisStringWillBeChangedLater""
		|		ИНАЧЕ МАКСИМУМ(Склад)
		|	КОНЕЦ КАК Склад,
		|	МАКСИМУМ(СкладКоличествоПоЗоне),
		|	СУММА(Объем),
		|	СУММА(Вес),
		|	5 КАК ОформлениеСтроки,
		|	Количество(Различные Распоряжение) как Номер,
		|	МАКСИМУМ(ЗонаДоставки) КАК АдресДоставки,
		|	МАКСИМУМ(ЗонаДоставки) КАК ЗонаДоставки,
		|	Сумма(КоличествоРаспоряжений)
		|ПО
		|	ЗонаДоставкиНаименование"
	КонецЕсли;
	
	ИтогоВес = 0;
	ИтогоОбъем = 0;
	ИтогоРаспоряжений = 0;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДеревоРезультатов = Новый ДеревоЗначений;
		ДеревоРезультатов = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		ИтогоВес = ДеревоРезультатов.Строки.Итог("Вес");
		ИтогоОбъем = ДеревоРезультатов.Строки.Итог("Объем");
		ИтогоРаспоряжений = ДеревоРезультатов.Строки.Итог("КоличествоРаспоряжений");
		ЗначениеВДанныеФормы(ДеревоРезультатов, РаспоряженияНаДоставку);
		Для Каждого Стр из РаспоряженияНаДоставку.ПолучитьЭлементы() Цикл
			
			Если ЗонаГруппаИлиПустая Тогда
				Если Стр.СкладКоличествоПоЗоне >1 Тогда 
					Текст = НСтр("ru = '%КоличествоCкладов% погрузки';");
					Текст = СтрЗаменить(Текст, "%КоличествоCкладов%",
						СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Стр.СкладКоличествоПоЗоне, НСтр("ru='склад, склада, складов';")));
					Стр.Склад = Текст;
				КонецЕсли;
				Для Каждого ВложеннаяСтрока из Стр.ПолучитьЭлементы() Цикл
					Если ЗначениеЗаполнено(ВложеннаяСтрока.ВремяПо) Тогда
						ВложеннаяСтрока.Время = Формат(ВложеннаяСтрока.ВремяС, "ДФ=ЧЧ:мм") + " - " + Формат(ВложеннаяСтрока.ВремяПо, "ДФ=ЧЧ:мм")
					Иначе
						ВложеннаяСтрока.Время = Формат(ВложеннаяСтрока.ВремяС, "ДФ=ЧЧ:мм")
					КонецЕсли;
					Если ТипЗнч(ВложеннаяСтрока.Склад) = Тип("Число") Тогда
						Текст = НСтр("ru = '%КоличествоСкладов% погрузки';");
						Текст = СтрЗаменить(Текст, "%КоличествоСкладов%", 
							СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(ВложеннаяСтрока.Склад, НСтр("ru='склад, склада, складов';")));
						ВложеннаяСтрока.Склад = Текст;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если ЗначениеЗаполнено(Стр.ВремяПо) Тогда
					Стр.Время = Формат(Стр.ВремяС, "ДФ=ЧЧ:мм") + " - " + Формат(Стр.ВремяПо, "ДФ=ЧЧ:мм")
				Иначе
					Стр.Время = Формат(Стр.ВремяС, "ДФ=ЧЧ:мм")
				КонецЕсли;
				
				Если ТипЗнч(Стр.Склад) = Тип("Число") Тогда
					Текст = НСтр("ru = '%КоличествоСкладов% погрузки';");
					Текст = СтрЗаменить(Текст, "%КоличествоСкладов%", 
					СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Стр.Склад, НСтр("ru='склад, склада, складов';")));
					Стр.Склад = Текст;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
		ЗаполнитьПризнакиОформленияРаспоряжений();
	КонецЕсли;
	УстановитьЗаголовокРаспоряжениеАдресДоставки();
	ОбновитьИтогиВЗаголовкахГрупп();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросРаспоряженийНаДоставку()
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Партнеры.Ссылка,
		|	Партнеры.Наименование КАК ПартнерНаименование
		|ПОМЕСТИТЬ ВТПартнерыНаименование
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Склады.Ссылка,
		|	Склады.Наименование КАК СкладНаименование
		|ПОМЕСТИТЬ ВТСкладыНаименование
		|ИЗ
		|	Справочник.Склады КАК Склады
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеНаПеревозку.Ссылка,
		|	ЗаданиеНаПеревозку.Статус
		|ПОМЕСТИТЬ ВТЗаданияНаПеревозкуОтрабатываемые
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
		|ГДЕ
		|	ЗаданиеНаПеревозку.Проведен
		|	И (ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.КПогрузке)
		|			ИЛИ ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Отправлен)
		|			ИЛИ ЗаданиеНаПеревозку.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыт))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаданиеНаПеревозкуДокументы.Распоряжение
		|ПОМЕСТИТЬ ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку.Распоряжения КАК ЗаданиеНаПеревозкуДокументы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТЗаданияНаПеревозкуОтрабатываемые КАК ВТЗаданияНаПеревозкуОтрабатываемые
		|		ПО ЗаданиеНаПеревозкуДокументы.Ссылка = ВТЗаданияНаПеревозкуОтрабатываемые.Ссылка
		|ГДЕ
		|	НЕ(ВТЗаданияНаПеревозкуОтрабатываемые.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданийНаПеревозку.Закрыт)
		|				И НЕ ЗаданиеНаПеревозкуДокументы.Доставлено)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка,
		|	РеализацияТоваровУслуг.ЗонаДоставки,
		|	РеализацияТоваровУслуг.Склад,
		|	РеализацияТоваровУслуг.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА РеализацияТоваровУслуг.АдресДоставкиПеревозчика
		|		ИНАЧЕ РеализацияТоваровУслуг.АдресДоставки
		|	КОНЕЦ КАК АдресДоставки,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА РеализацияТоваровУслуг.АдресДоставкиПеревозчикаЗначенияПолей
		|		ИНАЧЕ РеализацияТоваровУслуг.АдресДоставкиЗначенияПолей
		|	КОНЕЦ КАК АдресДоставкиЗначенияПолей,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА ВТПартнерыНаименованиеПеревозчик.ПартнерНаименование + "" ("" + ВТПартнерыНаименование.ПартнерНаименование + "")""
		|		ИНАЧЕ ВТПартнерыНаименование.ПартнерНаименование
		|	КОНЕЦ КАК ПолучательПредставление,
		|	РеализацияТоваровУслуг.ПеревозчикПартнер КАК Перевозчик,
		|	РеализацияТоваровУслуг.Партнер КАК Получатель,
		|	РеализацияТоваровУслуг.ВремяДоставкиС,
		|	РеализацияТоваровУслуг.ВремяДоставкиПо,
		|	РеализацияТоваровУслуг.Номер,
		|	РеализацияТоваровУслуг.ДополнительнаяИнформацияПоДоставке
		|ПОМЕСТИТЬ ВТРаспоряженияНаДоставку
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПартнерыНаименование КАК ВТПартнерыНаименование
		|		ПО РеализацияТоваровУслуг.Партнер = ВТПартнерыНаименование.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПартнерыНаименование КАК ВТПартнерыНаименованиеПеревозчик
		|		ПО РеализацияТоваровУслуг.ПеревозчикПартнер = ВТПартнерыНаименованиеПеревозчик.Ссылка
		|ГДЕ
		|	НЕ РеализацияТоваровУслуг.Ссылка В (&НакладныеВЗаданияхНаПеревозкуФормируемых)
		|	И НЕ РеализацияТоваровУслуг.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых.Распоряжение
		|				ИЗ
		|					ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых КАК ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых)
		|	И РеализацияТоваровУслуг.Проведен
		|	И РеализацияТоваровУслуг.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеализацийТоваровУслуг.КПредоплате)
		|	И (РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ИЛИ РеализацияТоваровУслуг.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|	И (&ЗонаДоставки = ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
		|			ИЛИ РеализацияТоваровУслуг.ЗонаДоставки В ИЕРАРХИИ (&ЗонаДоставки))
		|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИЛИ РеализацияТоваровУслуг.Склад В ИЕРАРХИИ (&Склад))
		|	И (&ДатаРаспоряжений = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ НАЧАЛОПЕРИОДА(РеализацияТоваровУслуг.Дата, ДЕНЬ) <= &ДатаРаспоряжений)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваров.Ссылка,
		|	ПеремещениеТоваров.ЗонаДоставки,
		|	ПеремещениеТоваров.СкладОтправитель,
		|	ПеремещениеТоваров.Дата,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА ПеремещениеТоваров.АдресДоставкиПеревозчика
		|		ИНАЧЕ ПеремещениеТоваров.АдресДоставки
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА ПеремещениеТоваров.АдресДоставкиПеревозчикаЗначенияПолей
		|		ИНАЧЕ ПеремещениеТоваров.АдресДоставкиЗначенияПолей
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу)
		|			ТОГДА ВТПартнерыНаименованиеПеревозчик.ПартнерНаименование + "" ("" + ВТСкладыНаименование.СкладНаименование + "")""
		|		ИНАЧЕ ВТСкладыНаименование.СкладНаименование
		|	КОНЕЦ,
		|	ПеремещениеТоваров.ПеревозчикПартнер,
		|	ПеремещениеТоваров.СкладПолучатель,
		|	ПеремещениеТоваров.ВремяДоставкиС,
		|	ПеремещениеТоваров.ВремяДоставкиПо,
		|	ПеремещениеТоваров.Номер,
		|	ПеремещениеТоваров.ДополнительнаяИнформацияПоДоставке
		|ИЗ
		|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСкладыНаименование КАК ВТСкладыНаименование
		|		ПО ПеремещениеТоваров.СкладПолучатель = ВТСкладыНаименование.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПартнерыНаименование КАК ВТПартнерыНаименованиеПеревозчик
		|		ПО ПеремещениеТоваров.ПеревозчикПартнер = ВТПартнерыНаименованиеПеревозчик.Ссылка
		|ГДЕ
		|	НЕ ПеремещениеТоваров.Ссылка В (&НакладныеВЗаданияхНаПеревозкуФормируемых)
		|	И НЕ ПеремещениеТоваров.Ссылка В
		|				(ВЫБРАТЬ
		|					ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых.Распоряжение
		|				ИЗ
		|					ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых КАК ВТНакладныеВЗаданияхНаПеревозкуОтрабатываемых)
		|	И ПеремещениеТоваров.Проведен
		|	И (ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.ДоКлиента)
		|			ИЛИ ПеремещениеТоваров.СпособДоставки = ЗНАЧЕНИЕ(Перечисление.СпособыДоставки.СиламиПеревозчикаПоАдресу))
		|	И (&ЗонаДоставки = ЗНАЧЕНИЕ(Справочник.ЗоныДоставки.ПустаяСсылка)
		|			ИЛИ ПеремещениеТоваров.ЗонаДоставки В ИЕРАРХИИ (&ЗонаДоставки))
		|	И (&Склад = ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|			ИЛИ ПеремещениеТоваров.СкладОтправитель В ИЕРАРХИИ (&Склад))
		|	И (&ДатаРаспоряжений = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ НАЧАЛОПЕРИОДА(ПеремещениеТоваров.Дата, ДЕНЬ) <= &ДатаРаспоряжений)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РаспоряженияСкладыЗоны.Склад) КАК СкладКоличество,
		|	РаспоряженияСкладыЗоны.ЗонаДоставки
		|ПОМЕСТИТЬ ВТСкладыПоЗонамДляРасчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТРаспоряженияНаДоставку.Склад КАК Склад,
		|		ВТРаспоряженияНаДоставку.ЗонаДоставки КАК ЗонаДоставки
		|	ИЗ
		|		ВТРаспоряженияНаДоставку КАК ВТРаспоряженияНаДоставку) КАК РаспоряженияСкладыЗоны
		|
		|СГРУППИРОВАТЬ ПО
		|	РаспоряженияСкладыЗоны.ЗонаДоставки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугТовары.Ссылка,
		|	ВЫБОР
		|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслугТовары.Склад) > 1
		|			ТОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РеализацияТоваровУслугТовары.Склад)
		|		ИНАЧЕ МАКСИМУМ(РеализацияТоваровУслугТовары.Склад)
		|	КОНЕЦ КАК Склад,
		|	СУММА(ВЫБОР
		|			КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Номенклатура.Вес
		|			ИНАЧЕ РеализацияТоваровУслугТовары.КоличествоУпаковок * РеализацияТоваровУслугТовары.Упаковка.Вес
		|		КОНЕЦ) КАК Вес,
		|	СУММА(ВЫБОР
		|			КОГДА РеализацияТоваровУслугТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА РеализацияТоваровУслугТовары.Количество * РеализацияТоваровУслугТовары.Номенклатура.Объем
		|			ИНАЧЕ РеализацияТоваровУслугТовары.КоличествоУпаковок * РеализацияТоваровУслугТовары.Упаковка.Объем
		|		КОНЕЦ) КАК Объем
		|ПОМЕСТИТЬ ВТРаспоряженияНаДоставкуСкладВесОбъем
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка В
		|			(ВЫБРАТЬ
		|				ВТРаспоряженияНаДоставку.Ссылка
		|			ИЗ
		|				ВТРаспоряженияНаДоставку КАК ВТРаспоряженияНаДоставку)
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеТоваровТовары.Ссылка,
		|	МАКСИМУМ(ВТРаспоряженияНаДоставку.Склад),
		|	СУММА(ВЫБОР
		|			КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА ПеремещениеТоваровТовары.Количество * ПеремещениеТоваровТовары.Номенклатура.Вес
		|			ИНАЧЕ ПеремещениеТоваровТовары.КоличествоУпаковок * ПеремещениеТоваровТовары.Упаковка.Вес
		|		КОНЕЦ),
		|	СУММА(ВЫБОР
		|			КОГДА ПеремещениеТоваровТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		|				ТОГДА ПеремещениеТоваровТовары.Количество * ПеремещениеТоваровТовары.Номенклатура.Объем
		|			ИНАЧЕ ПеремещениеТоваровТовары.КоличествоУпаковок * ПеремещениеТоваровТовары.Упаковка.Объем
		|		КОНЕЦ)
		|ИЗ
		|	Документ.ПеремещениеТоваров.Товары КАК ПеремещениеТоваровТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспоряженияНаДоставку КАК ВТРаспоряженияНаДоставку
		|		ПО (ВТРаспоряженияНаДоставку.Ссылка = ПеремещениеТоваровТовары.Ссылка)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПеремещениеТоваровТовары.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРаспоряженияНаДоставкуСкладВесОбъем.Ссылка КАК Распоряжение,
		|	ВТРаспоряженияНаДоставкуСкладВесОбъем.Склад КАК Склад,
		|	ВТСкладыПоЗонамДляРасчета.СкладКоличество КАК СкладКоличествоПоЗоне,
		|	ВТРаспоряженияНаДоставкуСкладВесОбъем.Объем КАК Объем,
		|	ВТРаспоряженияНаДоставкуСкладВесОбъем.Вес КАК Вес,
		|	ВТРаспоряженияНаДоставку.ЗонаДоставки КАК ЗонаДоставки,
		|	ВТРаспоряженияНаДоставку.ЗонаДоставки.Наименование КАК ЗонаДоставкиНаименование,
		|	ВТРаспоряженияНаДоставку.Дата КАК Дата,
		|	ВТРаспоряженияНаДоставку.АдресДоставки КАК АдресДоставки,
		|	ВТРаспоряженияНаДоставку.АдресДоставкиЗначенияПолей КАК АдресДоставкиЗначенияПолей,
		|	ВТРаспоряженияНаДоставку.ПолучательПредставление,
		|	ВТРаспоряженияНаДоставку.Перевозчик,
		|	ВТРаспоряженияНаДоставку.Получатель,
		|	ВТРаспоряженияНаДоставку.ВремяДоставкиС КАК ВремяС,
		|	ВТРаспоряженияНаДоставку.ВремяДоставкиПо КАК ВремяПо,
		|	ВТРаспоряженияНаДоставку.Номер,
		|	ВТРаспоряженияНаДоставку.ДополнительнаяИнформацияПоДоставке КАК ДополнительнаяИнформация,
		|	ТИПЗНАЧЕНИЯ(ВТРаспоряженияНаДоставкуСкладВесОбъем.Ссылка) КАК ВидРаспоряжения,
		|	""             "" КАК Время,
		|	1 КАК КоличествоРаспоряжений,
		|	0 КАК ОформлениеСтроки
		|ИЗ
		|	ВТРаспоряженияНаДоставкуСкладВесОбъем КАК ВТРаспоряженияНаДоставкуСкладВесОбъем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРаспоряженияНаДоставку КАК ВТРаспоряженияНаДоставку
		|		ПО (ВТРаспоряженияНаДоставку.Ссылка = ВТРаспоряженияНаДоставкуСкладВесОбъем.Ссылка)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСкладыПоЗонамДляРасчета КАК ВТСкладыПоЗонамДляРасчета
		|		ПО (ВТСкладыПоЗонамДляРасчета.ЗонаДоставки = ВТРаспоряженияНаДоставку.ЗонаДоставки)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗонаДоставкиНаименование,
		|	ВТРаспоряженияНаДоставку.АдресДоставки";
	Запрос.УстановитьПараметр("ЗонаДоставки", ЗонаДоставки);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ДатаРаспоряжений", ДатаРаспоряжений);
	Запрос.УстановитьПараметр("НакладныеВЗаданияхНаПеревозкуФормируемых",
								РеквизитФормыВЗначение("НакладныеВЗаданияхНаПеревозку").ВыгрузитьКолонку("Распоряжение"));
	Возврат Запрос;
	
КонецФункции

&НаСервере
Процедура СохранитьЗаданияНаПеревозкуСервер()
	
	Если НЕ ЗаданияМодифицированы Тогда
		Возврат
	КонецЕсли;
	Для Каждого Стр Из ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы() Цикл
		Если Стр.Модифицирован Тогда
			СохранитьЗаданиеВСтроке(Стр)
		КонецЕсли;
	КонецЦикла;
	ЗаданияМодифицированы = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗаданиеВСтроке(ЭлементДерева)
	
	ИДЭлементДерева = ЭлементДерева.ПолучитьИдентификатор();
	Если ЗначениеЗаполнено(ЭлементДерева.Ссылка) Тогда
		ДокОбъект = ЭлементДерева.Ссылка.ПолучитьОбъект();
		ДокОбъект.Заблокировать();
	Иначе
		ДокОбъект 			= Документы.ЗаданиеНаПеревозку.СоздатьДокумент();
		ДокОбъект.Дата		= ТекущаяДата();
		ДокОбъект.Приоритет = ПредопределенноеЗначение("Перечисление.Приоритеты.Средний");
		ДокОбъект.Статус	= ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Формируется");
		ДокОбъект.УстановитьСсылкуНового(ЭлементДерева.Ссылка);
	КонецЕсли;
	ДокОбъект.ТранспортноеСредство = ЭлементДерева.АдресДоставки;
	ДокОбъект.ДатаВремяРейсаПланС  = ЭлементДерева.ВремяС;
	ДокОбъект.ДатаВремяРейсаПланПо = ЭлементДерева.ВремяПо;
	ДокОбъект.Статус               = Перечисления.СтатусыЗаданийНаПеревозку.Формируется;
	Если ТипЗнч(ЭлементДерева.Склад) = Тип("Строка") ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементДерева.Склад,"ЭтоГруппа") Тогда
		ДокОбъект.Склад = Склад;
	Иначе
		ДокОбъект.Склад = ЭлементДерева.Склад;
	КонецЕсли;
	ДокОбъект.Маршрут.Очистить();
	ТаблицаСкладов = РеквизитФормыВЗначение("СкладыЗаданийНаПеревозку");
	ТаблицаОтобранныхСкладов = Новый ТаблицаЗначений;
	ТаблицаОтобранныхСкладов.Колонки.Добавить("Склад");
	Для Каждого ПунктЗадания Из ЭлементДерева.ПолучитьЭлементы() Цикл
		СтрокаТЧ = ДокОбъект.Маршрут.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ПунктЗадания);
		ТаблицаСОтбором = ТаблицаСкладов.Скопировать(Новый Структура("КлючСвязиМаршрута",ПунктЗадания.КлючСвязи));
		ТаблицаСОтбором.Свернуть("Склад");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаСОтбором,ТаблицаОтобранныхСкладов);
	КонецЦикла;
	
	ТаблицаОтобранныхСкладов.Свернуть("Склад");
	ДокОбъект.СкладыПогрузки.Загрузить(ТаблицаОтобранныхСкладов);
	ДокОбъект.Распоряжения.Загрузить(РеквизитФормыВЗначение("НакладныеВЗаданияхНаПеревозку").Скопировать(Новый Структура("Ссылка",ЭлементДерева.Ссылка)));
	ДокОбъект.ДополнительныеСвойства.Вставить("КонтролироватьКорректностьУказанияРаспоряжений",Ложь);
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	ДокОбъект.Разблокировать();
	
	ЭлементДерева.Номер				= ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Ссылка, "Номер"), Истина, Истина);
	ЭлементДерева.ПорядокВМаршруте	= ЭлементДерева.Номер;
	ЭлементДерева.Ссылка				= ДокОбъект.Ссылка;
	ЭлементДерева.Модифицирован		= Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьУстановитьМодифицированность()
	
	ЕстьМодифицированныеСтроки = Ложь;
	Для Каждого Стр Из ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы() Цикл
		Если Стр.Модифицирован Тогда
			ЕстьМодифицированныеСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ЗаданияМодифицированы = ЕстьМодифицированныеСтроки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаПеревозкуФормированиеПриАктивизацииСтрокиОбработчикОжидания()
	
	СтрокаЗаданийНаПеревозку = Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные;
	Если СтрокаЗаданийНаПеревозку = Неопределено тогда
		Элементы.НакладныеВЗаданияхНаПеревозку.ОтборСтрок = Новый ФиксированнаяСтруктура("Ссылка",NULL);
	Иначе
		Если СтрокаЗаданийНаПеревозку.ПолучитьРодителя() = Неопределено Тогда
			Элементы.НакладныеВЗаданияхНаПеревозку.ОтборСтрок = Новый ФиксированнаяСтруктура("Ссылка",СтрокаЗаданийНаПеревозку.Ссылка);
		Иначе
			Элементы.НакладныеВЗаданияхНаПеревозку.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", СтрокаЗаданийНаПеревозку.КлючСвязи);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСкладов()
	
	ФлагВидимости = Склад.Пустая() ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад,"ЭтоГруппа");
	Элементы.РаспоряженияНаДоставкуСклад.Видимость			= ФлагВидимости;
	Элементы.ЗаданияНаПеревозкуВРаботеСклад.Видимость		= ФлагВидимости;
	Элементы.НакладныеВЗаданияхНаПеревозкуСклад.Видимость	= ФлагВидимости;
	Элементы.ДокументыДляПеревозчиковСклад.Видимость		= ФлагВидимости;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборЗаданияНаПеревозкуВРаботе()
	
	Если Статус = "ВсеВРаботе" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияНаПеревозкуВРаботе.Отбор, "Статус",Перечисления.СтатусыЗаданийНаПеревозку.Закрыт,
														ВидСравненияКомпоновкиДанных.НеРавно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияНаПеревозкуВРаботе.Отбор, "Проведен",Истина,
														ВидСравненияКомпоновкиДанных.Равно);
	ИначеЕсли ЗначениеЗаполнено(Статус) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияНаПеревозкуВРаботе.Отбор, "Статус",Перечисления.СтатусыЗаданийНаПеревозку[Статус],
														ВидСравненияКомпоновкиДанных.Равно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияНаПеревозкуВРаботе.Отбор, "Проведен",Истина,
														ВидСравненияКомпоновкиДанных.Равно);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЗаданияНаПеревозкуВРаботе.Отбор, "Статус");
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЗаданияНаПеревозкуВРаботе.Отбор, "Проведен");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияНаПеревозкуВРаботе.Отбор, "Склад",Склад,
														ВидСравненияКомпоновкиДанных.ВИерархии);
	Иначе
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ЗаданияНаПеревозкуВРаботе.Отбор, "Склад");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УбратьСтрокиИзЗаданийСервер(ИсточникНакладные = Ложь)
	
	Если ИсточникНакладные Тогда
	КонецЕсли;
	Для Каждого ИД Из Элементы.ЗаданияНаПеревозкуФормирование.ВыделенныеСтроки Цикл
		Стр = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИД);
		Если Стр = Неопределено Тогда
			Продолжить; //Эту строку уже удалили при переносе родительской строки
		КонецЕсли;
		УстановитьМодифицированностьСервер(Стр);
		СтрРодитель = Стр.ПолучитьРодителя();
		ИтогоВес = ИтогоВес + Стр.Вес;
		ИтогоОбъем = ИтогоОбъем + Стр.Объем;
		ЕстьНесоответствиеОтбору = Ложь;
		Если СтрРодитель = Неопределено Тогда
			Ветка = Стр.ПолучитьЭлементы();
			Для Итератор = 0 По Ветка.Количество()-1 Цикл
				Пункт = Ветка[Ветка.Количество()-1];//Цикл с удалением элементов
				Позиция = ПолучитьПозициюДляВставки(Пункт);
				Если Позиция = Неопределено Тогда
					ЕстьНесоответствиеОтбору = Истина;
				КонецЕсли;
				Для Каждого Элемент Из НакладныеВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи",Пункт.КлючСвязи)) Цикл
					Если Позиция <> Неопределено Тогда
						Если НЕ ДобавитьИЗаполнитьСтрокуРаспоряжений(Пункт,Элемент,Позиция) Тогда
							ЕстьНесоответствиеОтбору = Истина;
						КонецЕсли;
					КонецЕсли;
					НакладныеВЗаданияхНаПеревозку.Удалить(НакладныеВЗаданияхНаПеревозку.Индекс(Элемент));
				КонецЦикла;
				Если Позиция <> Неопределено И ЗонаГруппаИлиПустая
					  И РаспоряженияНаДоставку.ПолучитьЭлементы()[Позиция.Зона].ПолучитьЭлементы().Количество() = 0 Тогда
					РаспоряженияНаДоставку.ПолучитьЭлементы().Удалить(Позиция.Зона);
				КонецЕсли;
				Ветка.Удалить(Ветка.Количество()-1);
			КонецЦикла;
			//Строку-задание удаляем, только если задание помечено на удаление или еще не записано
			Если НЕ ЗначениеЗаполнено(Стр.Ссылка) ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.Ссылка,"ПометкаУдаления") Тогда
				ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Удалить(ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Индекс(Стр));
			Иначе
				Стр.Вес = 0;
				Стр.Объем = 0;
			КонецЕсли;
		Иначе
			Позиция = ПолучитьПозициюДляВставки(Стр);
			Если Позиция = Неопределено Тогда
				ЕстьНесоответствиеОтбору = Истина;
			КонецЕсли;
			Для Каждого СтрокаРаспоряжение Из НакладныеВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи",Стр.КлючСвязи)) Цикл
				Если Позиция <> Неопределено Тогда
					Если НЕ ДобавитьИЗаполнитьСтрокуРаспоряжений(Стр,СтрокаРаспоряжение,Позиция) Тогда
						ЕстьНесоответствиеОтбору = Истина;
					КонецЕсли;
				КонецЕсли;
				НакладныеВЗаданияхНаПеревозку.Удалить(НакладныеВЗаданияхНаПеревозку.Индекс(СтрокаРаспоряжение));
			КонецЦикла;
			Если Позиция <> Неопределено И ЗонаГруппаИлиПустая
				И РаспоряженияНаДоставку.ПолучитьЭлементы()[Позиция.Зона].ПолучитьЭлементы().Количество() = 0 Тогда
				РаспоряженияНаДоставку.ПолучитьЭлементы().Удалить(Позиция.Зона);
			КонецЕсли;
			СтрРодитель.Вес = СтрРодитель.Вес - Стр.Вес;
			СтрРодитель.Объем = СтрРодитель.Объем - Стр.Объем;
			СтрРодитель.ПолучитьЭлементы().Удалить(СтрРодитель.ПолучитьЭлементы().Индекс(Стр));
		КонецЕсли;
	КонецЦикла;
	Если ЕстьНесоответствиеОтбору Тогда
		Текст = НСтр("ru='Не все распоряжения из перенесенных отображены в списке распоряжений, т.к. не соответствуют отбору';");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	КонецЕсли;
	ПроверитьУстановитьМодифицированность();
	ПеренумероватьИЗаполнитьПризнакиПереходаДат();
	ЗаполнитьПризнакиОформленияРаспоряжений();
	ОбновитьИтогиВЗаголовкахГрупп();
	ЗаполнитьСкладыВИтогахСписков();
	УстановитьОтметкуСкладДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПозициюДляВставки(СтрокаИсточник)
	
	Если ЗначениеЗаполнено(ЗонаДоставки)
			И (НЕ ЗначениеЗаполнено(СтрокаИсточник.ЗонаДоставки)
				ИЛИ НЕ(СтрокаИсточник.ЗонаДоставки.ПринадлежитЭлементу(ЗонаДоставки)
					ИЛИ СтрокаИсточник.ЗонаДоставки = ЗонаДоставки)
			   ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Зона			 = СтрокаИсточник.ЗонаДоставки;
	АдресДоставки	 = СтрокаИсточник.АдресДоставки;
	КоллекцияРаспоряжений = РаспоряженияНаДоставку.ПолучитьЭлементы();
	Если ЗонаГруппаИлиПустая Тогда
		Для Каждого СтрокаЗона Из КоллекцияРаспоряжений Цикл
			Если Зона = СтрокаЗона.ЗонаДоставки Тогда
				Ветка = СтрокаЗона.ПолучитьЭлементы();
				Для Каждого СтрокаРаспоряжение Из Ветка Цикл
					Если АдресДоставки < СтрокаРаспоряжение.АдресДоставки Тогда
						Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Индекс(СтрокаЗона), Ветка.Индекс(СтрокаРаспоряжение));
					КонецЕсли;
				КонецЦикла;
				Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Индекс(СтрокаЗона), Ветка.Количество()-1);
			ИначеЕсли Строка(Зона) < Строка(СтрокаЗона.ЗонаДоставки) Тогда
				НоваяСтрока = КоллекцияРаспоряжений.Вставить(КоллекцияРаспоряжений.Индекс(СтрокаЗона));
				НоваяСтрока.ЗонаДоставки  = Зона;
				НоваяСтрока.АдресДоставки = Зона;
				НоваяСтрока.ОформлениеСтроки = 5;
				Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Индекс(НоваяСтрока), 0);
			КонецЕсли;
		КонецЦикла;
		НоваяСтрока = КоллекцияРаспоряжений.Добавить();
		НоваяСтрока.ЗонаДоставки  = Зона;
		НоваяСтрока.АдресДоставки = Зона;
		НоваяСтрока.ОформлениеСтроки = 5;
		Возврат Новый Структура("Зона, Распоряжение", КоллекцияРаспоряжений.Количество()-1, 0);
	Иначе
		Для Каждого СтрокаРаспоряжение Из КоллекцияРаспоряжений Цикл
			Если АдресДоставки < СтрокаРаспоряжение.АдресДоставки Тогда
				Возврат КоллекцияРаспоряжений.Индекс(СтрокаРаспоряжение);
			КонецЕсли;
		КонецЦикла;
		Возврат КоллекцияРаспоряжений.Количество();
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДобавитьИЗаполнитьСтрокуРаспоряжений(ПунктИсточник,СтрокаРаспоряжениеИсточник,Позиция);
	
	Если Позиция = Неопределено 
		  ИЛИ (ЗначениеЗаполнено(ДатаРаспоряжений) И СтрокаРаспоряжениеИсточник.Дата > ДатаРаспоряжений)Тогда
		Возврат Ложь;
	КонецЕсли;
	КоллекцияРаспоряжений = РаспоряженияНаДоставку.ПолучитьЭлементы();
	Если ЗонаГруппаИлиПустая Тогда
		СтрокаПриемник = КоллекцияРаспоряжений[Позиция.Зона].ПолучитьЭлементы().Вставить(Позиция.Распоряжение);
		КоллекцияРаспоряжений[Позиция.Зона].Вес = КоллекцияРаспоряжений[Позиция.Зона].Вес + СтрокаРаспоряжениеИсточник.Вес;
		КоллекцияРаспоряжений[Позиция.Зона].Объем = КоллекцияРаспоряжений[Позиция.Зона].Объем + СтрокаРаспоряжениеИсточник.Объем;
	Иначе
		СтрокаПриемник = КоллекцияРаспоряжений.Вставить(Позиция);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаРаспоряжениеИсточник);
	//Адрес, зона могут быть исправлены в таблице заданий
	СтрокаПриемник.АдресДоставки = ПунктИсточник.АдресДоставки;
	СтрокаПриемник.ЗонаДоставки = ПунктИсточник.ЗонаДоставки;
	// Дата документа могла измениться
	СтрокаПриемник.Дата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаПриемник.Распоряжение,"Дата");
	
	Для Каждого СтрокаСкладЗадания Из СкладыЗаданийНаПеревозку.НайтиСтроки(Новый Структура("РаспоряжениеСсылка",СтрокаПриемник.Распоряжение)) Цикл
		НоваяСтрока = СкладыДляИтоговРаспоряжений.Добавить();
		НоваяСтрока.Склад			= СтрокаСкладЗадания.Склад;
		НоваяСтрока.Распоряжение	= СтрокаСкладЗадания.РаспоряжениеСсылка;
		НоваяСтрока.ЗонаДоставки	= ПунктИсточник.ЗонаДоставки;
		СкладыЗаданийНаПеревозку.Удалить(СкладыЗаданийНаПеревозку.Индекс(СтрокаСкладЗадания));
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ДобавитьНовыеЗаданияСервер(ВыбранноеЗначение);
	
	ТаблицаНовыхЗаданий = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресТранспортВХранилище);
	ТаблицаНовыхЗаданий.Сортировать("ВремяС, ВремяПо");
	КоллекцияЗаданий = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы();
	Индекс = 0;
	Для Каждого Стр Из ТаблицаНовыхЗаданий Цикл
		Пока Индекс < КоллекцияЗаданий.Количество()
			 И (КоллекцияЗаданий[Индекс].ВремяС < Стр.ВремяС
				ИЛИ (КоллекцияЗаданий[Индекс].ВремяС = Стр.ВремяС
					 И КоллекцияЗаданий[Индекс].ВремяПо < Стр.ВремяПо)) Цикл
			Индекс = Индекс + 1;
		КонецЦикла;
		НоваяСтр = КоллекцияЗаданий.Вставить(Индекс);
		ЗаполнитьЗначенияСвойств(НоваяСтр, Стр);
		НоваяСтр.Ссылка							 = Новый УникальныйИдентификатор;
		НоваяСтр.АдресДоставки					 = Стр.ТранспортноеСредство;
		НоваяСтр.ОформлениеПоТипу				 = ?(ТипЗнч(Стр.ТранспортноеСредство) = Тип("СправочникСсылка.ТранспортныеСредства"),"ТС","ТипТС");
		НоваяСтр.Модифицирован					 = Истина;
		НоваяСтр.ВместимостьПредставление		 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ТранспортноеСредство,"ВместимостьПредставление");
		НоваяСтр.ГрузоподъемностьВЕдПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ТранспортноеСредство,"ГрузоподъемностьВТоннах") / КоэффициентПересчетаВТонны;
		НоваяСтр.ВместимостьВЕдПользователя		 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.ТранспортноеСредство,"ВместимостьВКубическихМетрах") / КоэффициентПересчетаВКубическиеМетры;
	КонецЦикла;
	ЗаданияМодифицированы = Истина;
	ЗаполнитьПризнакиПереходаДат();
	Элементы.ЗаданияНаПеревозкуФормирование.Обновить();
	УстановитьОтметкуСкладДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Функция ПоместитьЗаданияВХранилище()
	
	ТаблицаЗаданийФормируемых = Новый ТаблицаЗначений();
	ТаблицаЗаданийФормируемых.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("ДокументСсылка.ЗаданиеНаПеревозку"));
	ТаблицаЗаданийФормируемых.Колонки.Добавить("АдресДоставки", Новый ОписаниеТипов("СправочникСсылка.ТранспортныеСредства"));
	ТаблицаЗаданийФормируемых.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗаданийНаПеревозку"));
	ТаблицаЗаданийФормируемых.Колонки.Добавить("ВремяС", Новый ОписаниеТипов("Дата"));
	ТаблицаЗаданийФормируемых.Колонки.Добавить("ВремяПо", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Задание Из ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы() Цикл
		Если ТипЗнч(Задание.АдресДоставки) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
			Стр = ТаблицаЗаданийФормируемых.Добавить();
			ЗаполнитьЗначенияСвойств(Стр, Задание);			
		КонецЕсли;
	КонецЦикла;
	ТаблицаЗаданийФормируемых.ЗаполнитьЗначения(ПредопределенноеЗначение("Перечисление.СтатусыЗаданийНаПеревозку.Формируется"),"Статус");
	ТаблицаЗаданийФормируемых.Колонки.АдресДоставки.Имя = "ТранспортноеСредство";
	Возврат ПоместитьВоВременноеХранилище(ТаблицаЗаданийФормируемых, УникальныйИдентификатор);

КонецФункции

&НаСервере
Функция ПоместитьРаспоряженияВХранилище(КлючСвязи)
	
	СтруктураПоиск = Новый Структура("КлючСвязи",КлючСвязи);
	РаспоряженияДляВыбора = РеквизитФормыВЗначение("НакладныеВЗаданияхНаПеревозку").Скопировать(СтруктураПоиск);
	Возврат ПоместитьВоВременноеХранилище(РаспоряженияДляВыбора, УникальныйИдентификатор);

КонецФункции

&НаКлиенте
Процедура ПроверитьУстановитьДопустимостьПеретаскивания(Элемент, ПараметрыПеретаскивания)
	
	ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
	Если НачалиПеретаскивание
			И ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		Если Элемент = Элементы.ЗаданияНаПеревозкуФормирование 
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Число") Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
		ИначеЕсли ((ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементКоллекции")
					ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДанныеФормыЭлементДерева"))) Тогда
			ИсточникЗадания = ПараметрыПеретаскивания.Значение[0].Свойство("ПереходДаты");
			ИсточникНакладныеВЗаданиях = ПараметрыПеретаскивания.Значение[0].Свойство("КлючСвязи");
			ИсточникРаспоряжения = ((НЕ ПараметрыПеретаскивания.Значение[0].Свойство("ПереходДаты"))
								И (НЕ ПараметрыПеретаскивания.Значение[0].Свойство("КлючСвязи")));
			Если (Элемент = Элементы.РаспоряженияНаДоставку И (ИсточникЗадания ИЛИ ИсточникНакладныеВЗаданиях))
				ИЛИ (Элемент = Элементы.ЗаданияНаПеревозкуФормирование И ИсточникРаспоряжения)
				ИЛИ (Элемент = Элементы.ЗаданияНаПеревозкуФормирование И ИсточникЗадания)
				ИЛИ (Элемент = Элементы.НакладныеВЗаданияхНаПеревозку И ИсточникРаспоряжения) Тогда
				ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Перемещение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокРаспоряжениеАдресДоставки()
	
	Если ЗонаГруппаИлиПустая Тогда
		Текст = НСтр("ru = 'Зона доставки%ПС%Адрес доставки';");
		Текст = СтрЗаменить(Текст, "%ПС%", Символы.ПС);
		Элементы.РаспоряженияНаДоставкуАдресДоставки.Заголовок = Текст;
	Иначе
		Текст = НСтр("ru = 'Адрес доставки';");
		Элементы.РаспоряженияНаДоставкуАдресДоставки.Заголовок = Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиДляНужнойСтраницы();
	
	Если ЗаданияМодифицированы Тогда
		СохранитьЗаданияНаПеревозкуСервер();
	КонецЕсли;
	
	// Если ушли со страницы Формирование заданий или сменили склад или нажали обновить, при этом есть изменения
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаФормированиеЗаданийНаПеревозку Тогда
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			РаспоряженияНаДоставку.ПолучитьЭлементы().Очистить();
			ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Очистить();
			УстановитьОтметкуСкладДоступностьКоманд();
		Иначе
			ОбновитьСпискиЗаданийНаПеревозку();
			РаспоряженияРазвернуть();
		КонецЕсли;
		ТекущаяСтраница = "ФормированиеЗаданий";
	ИначеЕсли Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДокументыДляПеревозчиков Тогда
		ОбновитьДокументыДляПеревозчиковСервер();
		ТекущаяСтраница = "ДокументыДляПеревозчиков";
	Иначе
		ОбновитьЗаданияВРаботеСервер();
		ТекущаяСтраница = "ЗаданияВРаботе";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтметкуСкладДоступностьКоманд()
	
	СкладЗаполнен = ЗначениеЗаполнено(Склад);
	
	Если НЕ СкладЗаполнен И Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаФормированиеЗаданийНаПеревозку Тогда
		Элементы.СтраницыСклад.ТекущаяСтраница = Элементы.СтраницаСкладСОтметкой;
	Иначе
		Элементы.СтраницыСклад.ТекущаяСтраница = Элементы.СтраницаСкладБезОтметки;
	КонецЕсли;
	
	Элементы.ЗаданияНаПеревозкуФормирование.КоманднаяПанель.Доступность	 = СкладЗаполнен;
	Элементы.ПеренестиСтрокиВРейс.Доступность							 = СкладЗаполнен;
	Элементы.ЗонаДоставки.Доступность									 = СкладЗаполнен;
	Элементы.ДатаРаспоряжений.Доступность								 = СкладЗаполнен;
	
	ЗаданияЗаполнены = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Количество() > 0;
	Элементы.ЗаданияНаПеревозкуФормированиеЗаданияВверх.Доступность		 = ЗаданияЗаполнены;
	Элементы.ЗаданияНаПеревозкуФормированиеЗаданияВниз.Доступность		 = ЗаданияЗаполнены;
	Элементы.ДеревоФормированиеДоставкиРазбить.Доступность				 = ЗаданияЗаполнены;
	Элементы.ДеревоФормированиеДоставкиОбъединить.Доступность			 = ЗаданияЗаполнены;
	Элементы.ЗаданияНаПеревозкуФормированиеОткрытьЗадание.Доступность	 = ЗаданияЗаполнены;
	Элементы.УбратьСтрокиИзРейса.Доступность							 = ЗаданияЗаполнены;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаданияВРаботеСервер()
	
	УстановитьВидимостьСкладов();
	УстановитьОтборЗаданияНаПеревозкуВРаботе();
	УстановитьОтметкуСкладДоступностьКоманд();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьРазбитьПунктДоставкиСервер()
	
	КлючСвязи = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока).КлючСвязи;
	КоличествоРаспоряжений = НакладныеВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи",КлючСвязи)).Количество();
	Если КоличествоРаспоряжений < 2 Тогда
		Текст = НСтр("ru='Разбиение строки возможно для адресов, к которым относится более одного распоряжения';");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат Истина;
	КонецЕсли;
	Если КоличествоРаспоряжений > 2 Тогда
		Возврат Ложь; //Вернуться в клиент и открыть форму выбора распоряжений
	КонецЕсли;
	РазбитьПунктДоставкиСервер(); // Случай с двумя распоряжениями - просто разбиваем без выбора
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура РазбитьПунктДоставкиСервер(ВыбранноеЗначение = Неопределено)
	ИДТекущейСтроки = Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока;
	Если ВыбранноеЗначение <> Неопределено Тогда
		// Если более двух распоряжений для разбиения
		МассивРаспоряжений = ПолучитьИзВременногоХранилища(ВыбранноеЗначение.АдресРаспоряжений);
	Иначе
		//Если надо разделить два распоряжения
		МассивРаспоряжений = Новый Массив();
		Отбор = Новый Структура("КлючСвязи", ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИДТекущейСтроки).КлючСвязи);
		МассивРаспоряжений.Добавить(НакладныеВЗаданияхНаПеревозку.НайтиСтроки(Отбор)[1]);
	КонецЕсли;
	ТекущаяСтрока = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИДТекущейСтроки);
	ВеткаРодитель = ТекущаяСтрока.ПолучитьРодителя().ПолучитьЭлементы();
	НоваяСтрокаПункт = ВеткаРодитель.Вставить(ВеткаРодитель.Индекс(ТекущаяСтрока)+1);
	ЗаполнитьЗначенияСвойств(НоваяСтрокаПункт, ТекущаяСтрока);
	НоваяСтрокаПункт.КлючСвязи = Новый УникальныйИдентификатор;
	Вес = 0; Объем = 0;
	Для Каждого Стр Из МассивРаспоряжений Цикл
		СтрокаРаспоряжение = НакладныеВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("Распоряжение", Стр.Распоряжение))[0];
		СтрокаРаспоряжение.КлючСвязи = НоваяСтрокаПункт.КлючСвязи;
		Вес = Вес + СтрокаРаспоряжение.Вес;
		Объем = Объем + СтрокаРаспоряжение.Объем;
	КонецЦикла;
	НоваяСтрокаПункт.Вес = Вес;
	НоваяСтрокаПункт.Объем = Объем;
	УстановитьМодифицированностьСервер(НоваяСтрокаПункт);
	Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока = НоваяСтрокаПункт.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаСервере
Функция ОбъединитьПоВремениСервер()
	
	ФлагПерваяСтрока = Истина;
	Объединили = Ложь;
	Вес = 0;
	Объем = 0;
	ПредыдущийАдресДоставки = "";
	МассивИД = Элементы.ЗаданияНаПеревозкуФормирование.ВыделенныеСтроки;
	Для Каждого ИД Из МассивИД Цикл
		Строка = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИД);
		Родитель = Строка.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если НЕ ФлагПерваяСтрока И ВРег(СокрЛП(Строка.АдресДоставки)) <> ПредыдущийАдресДоставки Тогда
			Возврат Ложь;
		КонецЕсли;
		ИндексРодителя = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Индекс(Родитель);
		ИндексСтроки = Родитель.ПолучитьЭлементы().Индекс(Строка);
		Если ФлагПерваяСтрока Тогда
			ФлагПерваяСтрока = Ложь;
			//Нужно найти самый верхний в списке пункт доставки, чтобы слить в него строки с одинаковыми адресами доставки
			МинИндексРодителя = ИндексРодителя;
			МинИндексСтроки = ИндексСтроки;
		Иначе
			Если МинИндексРодителя > ИндексРодителя Тогда
				МинИндексРодителя = ИндексРодителя;
				МинИндексСтроки = ИндексСтроки;
			ИначеЕсли (МинИндексРодителя = ИндексРодителя) И (МинИндексСтроки > ИндексСтроки) Тогда
				МинИндексСтроки = ИндексСтроки;
			КонецЕсли;
		КонецЕсли;
		Вес = Вес + Строка.Вес;
		Объем = Объем + Строка.Объем;
		ПредыдущийАдресДоставки = ВРег(СокрЛП(Строка.АдресДоставки));
		Объединили = Истина;
	КонецЦикла;
	Если Объединили Тогда
		СтрокаРезультат = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы()[МинИндексРодителя].ПолучитьЭлементы()[МинИндексСтроки];
		СтрокаРезультат.Вес = Вес;
		СтрокаРезультат.Объем = Объем;
		МассивИД.Удалить(МассивИД.Найти(СтрокаРезультат.ПолучитьИдентификатор()));
		КлючСвязи = СтрокаРезультат.КлючСвязи;
		Для Каждого ИД Из МассивИД Цикл
			Строка = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИД);
			Ветка = Строка.ПолучитьРодителя().ПолучитьЭлементы();
			МассивРаспоряжений = НакладныеВЗаданияхНаПеревозку.НайтиСтроки(Новый Структура("КлючСвязи", Строка.КлючСвязи));
			Для Каждого СтрокаРаспоряжение Из МассивРаспоряжений Цикл 
				СтрокаРаспоряжение.КлючСвязи = КлючСвязи;
			КонецЦикла;
			Ветка.Удалить(Ветка.Индекс(Строка));
		КонецЦикла;
	КонецЕсли;
	Возврат Объединили
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПрошлымиРейсамиСервер(ДатаЗаданий = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаданиеНаПеревозку.ТранспортноеСредство,
		|	ЗаданиеНаПеревозку.ТранспортноеСредство.ВместимостьПредставление КАК ВместимостьПредставление,
		|	ЗаданиеНаПеревозку.ДатаВремяРейсаПланС,
		|	ЗаданиеНаПеревозку.Дата
		|ИЗ
		|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку";
	Если ДатаЗаданий = Неопределено Тогда
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозку.Дата, ДЕНЬ) КАК МаксДень
			|ПОМЕСТИТЬ ВТМаксДень
			|ИЗ
			|	Документ.ЗаданиеНаПеревозку КАК ЗаданиеНаПеревозку
			|ГДЕ
			|	ЗаданиеНаПеревозку.Проведен
			|	И ЗаданиеНаПеревозку.Дата < НАЧАЛОПЕРИОДА(&ТекущаяДата, ДЕНЬ)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗаданиеНаПеревозку.Дата УБЫВ
			|;
			|////////////////////////////////////////////////////////////////////////////////
			|" + Запрос.Текст + "
			|ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТМаксДень КАК ВТМаксДень
			|	ПО ВТМаксДень.МаксДень = НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозку.Дата)
			|ГДЕ
			|	ЗаданиеНаПеревозку.Склад В ИЕРАРХИИ(&Склад)";
	Иначе
		Запрос.Текст = Запрос.Текст +  "
			|ГДЕ
			|	ЗаданиеНаПеревозку.Склад В ИЕРАРХИИ(&Склад)
			|И ЗаданиеНаПеревозку.Проведен И НАЧАЛОПЕРИОДА(ЗаданиеНаПеревозку.Дата, День) = &ДатаЗаданий";
		Запрос.УстановитьПараметр("ДатаЗаданий", ДатаЗаданий);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("Склад", Склад);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Количество() = 0 Тогда
		Текст = НСтр("ru='На указанную дату нет проведенных заданий на перевозку';");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
		Возврат
	КонецЕсли;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ТранспортноеСредство = Выборка.ТранспортноеСредство;
		НоваяСтрока.АдресДоставки = Выборка.ТранспортноеСредство;
		Если НачалоДня(Выборка.ДатаВремяРейсаПланС) > НачалоДня(Выборка.Дата) Тогда
			// Если планировали на будущие дни, тогда в планах на будущее используем время отправки рейсов из истории
			НоваяСтрока.ВремяС = НачалоДня(ТекущаяДата()) + (Выборка.ДатаВремяРейсаПланС - НачалоДня(Выборка.Дата));
		ИначеЕсли Выборка.ДатаВремяРейсаПланС - НачалоДня(Выборка.Дата) > ТекущаяДата() - НачалоДня(ТекущаяДата()) + 60*60 Тогда
			// Если планируем отправку сегодня и время еще не прошло - используем время отправки из истории
			НоваяСтрока.ВремяС = НачалоДня(ТекущаяДата()) + (Выборка.ДатаВремяРейсаПланС - НачалоДня(Выборка.ДатаВремяРейсаПланС));
		Иначе
			// Если планируем отправку сегодня и время уже прошло - считаем, что рейс можно отправить через час после формирования
			НоваяСтрока.ВремяС = ТекущаяДата() + 60*60;
		КонецЕсли;
		НоваяСтрока.ВремяПо = НоваяСтрока.ВремяС;
		НоваяСтрока.Склад = Склад;
		Если ТипЗнч(Выборка.ТранспортноеСредство) = Тип("СправочникСсылка.ТранспортныеСредства") Тогда
			НоваяСтрока.ОформлениеПоТипу = "ТС";
		Иначе
			НоваяСтрока.ОформлениеПоТипу = "ТипТС";
		КонецЕсли;
		НоваяСтрока.ГрузоподъемностьВЕдПользователя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ТранспортноеСредство,"ГрузоподъемностьВТоннах") / КоэффициентПересчетаВТонны;
		НоваяСтрока.ВместимостьВЕдПользователя		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ТранспортноеСредство,"ВместимостьВКубическихМетрах") / КоэффициентПересчетаВКубическиеМетры;
		НоваяСтрока.ВместимостьПредставление		= Выборка.ВместимостьПредставление;
		УстановитьМодифицированностьСервер(НоваяСтрока);
	КонецЦикла;
	УстановитьОтметкуСкладДоступностьКоманд();
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатуса(СписокДокументов, КоличествоОбработанных, КоличествоВсего, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		СписокДокументов.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке заданий на перевозку установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного задания на перевозку.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьИЗаполнитьПризнакиПереходаДат();
	
	ПеренумероватьПунктыЗаданий();
	ЗаполнитьПризнакиПереходаДат();
	
КонецПроцедуры

&НаСервере
Процедура ПеренумероватьПунктыЗаданий()
	
	Для Каждого СтрЗадание Из ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы() Цикл
		Если СтрЗадание.Модифицирован Тогда
			Для Каждого СтрПункт Из СтрЗадание.ПолучитьЭлементы() Цикл
				СтрПункт.ПорядокВМаршруте = СтрЗадание.ПолучитьЭлементы().Индекс(СтрПункт)+1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаданияОтсортироватьПеренумероватьЗаполнитьПризнакиПереходаДат();
	
	ТекСтрока = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока);
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		ТекВетка = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы();
	Иначе
		ТекВетка = Родитель.ПолучитьЭлементы();
	КонецЕсли;
	ТекИндекс = ТекВетка.Индекс(ТекСтрока);
	
	Позиция = 0;
	Пока Позиция < ТекВетка.Количество()
		И (Позиция = ТекИндекс
			ИЛИ (ТекСтрока.ВремяС > ТекВетка[Позиция].ВремяС
			ИЛИ (ТекСтрока.ВремяС = ТекВетка[Позиция].ВремяС
				И ТекСтрока.ВремяПо > ТекВетка[Позиция].ВремяПо))) Цикл
		Позиция = Позиция + 1;
	КонецЦикла;
	
	Если Позиция > ТекИндекс Тогда
		ТекВетка.Сдвинуть(ТекИндекс,Позиция-ТекИндекс-1);
	Иначе
		ТекВетка.Сдвинуть(ТекИндекс,Позиция-ТекИндекс);
	КонецЕсли;
	
	Если Родитель <> Неопределено Тогда
		ПеренумероватьПунктыЗаданий();
	КонецЕсли;
	ЗаполнитьПризнакиПереходаДат();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеВремени(Источник);
	
	ТекСтрока = Элементы.ЗаданияНаПеревозкуФормирование.ТекущиеДанные;
	Родитель = ТекСтрока.ПолучитьРодителя();
	Если (ТекСтрока.ВремяС > ТекСтрока.ВремяПо) Тогда
		Если Источник = "ВремяС" Тогда
			ТекСтрока.ВремяПо = ТекСтрока.ВремяС;
		Иначе
			ТекСтрока.ВремяС = ТекСтрока.ВремяПо;
		КонецЕсли;
	КонецЕсли;
	
	Если Родитель <> Неопределено
		И (ТекСтрока.ВремяС < Родитель.ВремяС
			ИЛИ ТекСтрока.ВремяПо > Родитель.ВремяПо) Тогда
		Родитель.ВремяС = Мин(ТекСтрока.ВремяС,Родитель.ВремяС);
		Родитель.ВремяПо = Макс(ТекСтрока.ВремяПо,Родитель.ВремяПо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаданияПроверитьОтсортироватьЗаполнитьПризнакиПерехода();
	
	ТекСтрока = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(Элементы.ЗаданияНаПеревозкуФормирование.ТекущаяСтрока);
	ТекИндекс = ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы().Индекс(ТекСтрока);
	Для Каждого Стр Из ТекСтрока.ПолучитьЭлементы() Цикл
		Если Стр.ВремяС < ТекСтрока.ВремяС Тогда
			Стр.ВремяС = ТекСтрока.ВремяС;
		КонецЕсли;
		Если Стр.ВремяПо < ТекСтрока.ВремяС Тогда
			Стр.ВремяПо = ТекСтрока.ВремяС;
		КонецЕсли;
		Если Стр.ВремяС > ТекСтрока.ВремяПо Тогда
			Стр.ВремяС = ТекСтрока.ВремяПо;
		КонецЕсли;
	КонецЦикла;
	
	ЗаданияОтсортироватьПеренумероватьЗаполнитьПризнакиПереходаДат();
	
КонецПроцедуры

&НаСервере
Функция СохранитьЗаданиеНаПеревозкуПолучитьВерсиюСервер(ИДСтроки)
	
	Строка = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИДСтроки);
	СохранитьЗаданиеВСтроке(Строка);
	Возврат Строка.Ссылка.ВерсияДанных;
	
КонецФункции

&НаСервере
Функция ПроверитьВерсиюОбновитьСпискиПолучитьПозициюСервер(ОбъектСсылка,ВерсияДанных);
	
	Если ОбъектСсылка.ВерсияДанных <> ВерсияДанных Тогда
		СохранитьЗаданияНаПеревозкуСервер();
		ОбновитьСпискиЗаданийНаПеревозку();
		// Спозиционируемся на той же строке, если она соответствует отбору
		Для Каждого Стр Из ЗаданияНаПеревозкуФормирование.ПолучитьЭлементы() Цикл
			Если Стр.Ссылка = ОбъектСсылка Тогда
				Возврат Стр.ПолучитьИдентификатор();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ПометитьНаУдалениеСервер(МассивСсылок);
	
	Для Каждого ОбъектСсылка Из МассивСсылок Цикл
		ДокОбъект = ОбъектСсылка.ПолучитьОбъект();
		Попытка
			ДокОбъект.УстановитьПометкуУдаления(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиСтрокиВнутриСпискаЗаданийФормируемыхСервер(МассивИДСтрок,ИДСтрокиНазначения)
	
	СтрокаПриемник = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИДСтрокиНазначения);
	СтрокаРодитель = СтрокаПриемник.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		СтрокаРодитель = СтрокаПриемник;
		ИндексДляВставки = СтрокаРодитель.ПолучитьЭлементы().Количество();
	Иначе
		ИндексДляВставки = СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаПриемник);
	КонецЕсли;
	Для Каждого ИДСтроки Из МассивИДСтрок Цикл
		ПеретаскиваемаяСтрока = ЗаданияНаПеревозкуФормирование.НайтиПоИдентификатору(ИДСтроки);
		БывшийРодитель = ПеретаскиваемаяСтрока.ПолучитьРодителя();
		Если БывшийРодитель = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Вставить(ИндексДляВставки);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ПеретаскиваемаяСтрока);
		БывшийРодитель.Вес = БывшийРодитель.Вес - НоваяСтрока.Вес;
		БывшийРодитель.Объем = БывшийРодитель.Объем - НоваяСтрока.Объем;
		СтрокаРодитель.Вес = СтрокаРодитель.Вес + НоваяСтрока.Вес;
		СтрокаРодитель.Объем = СтрокаРодитель.Объем + НоваяСтрока.Объем;
		НоваяСтрока.Ссылка = СтрокаРодитель.Ссылка;
		Если ИндексДляВставки > 0 Тогда
			Если ИндексДляВставки+1 < СтрокаРодитель.ПолучитьЭлементы().Количество() Тогда
				НоваяСтрока.ВремяС = Мин(СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки - 1].ВремяПо,
										СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки + 1].ВремяС);
				НоваяСтрока.ВремяПо = СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки + 1].ВремяС;
			Иначе
				НоваяСтрока.ВремяС = СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки - 1].ВремяПо;
				НоваяСтрока.ВремяПо = НоваяСтрока.ВремяС;
			КонецЕсли;
		Иначе
			НоваяСтрока.ВремяС = СтрокаРодитель.ВремяС;
			Если СтрокаРодитель.ПолучитьЭлементы().Количество() > 1 Тогда
				НоваяСтрока.ВремяПо = СтрокаРодитель.ПолучитьЭлементы()[ИндексДляВставки + 1].ВремяС;
			Иначе
				НоваяСтрока.ВремяПо = НоваяСтрока.ВремяС;
			КонецЕсли;
			НоваяСтрока.ВремяПо = НоваяСтрока.ВремяС;
		КонецЕсли;
		ПеретаскиваемаяСтрока.ПолучитьРодителя().ПолучитьЭлементы().Удалить(ПеретаскиваемаяСтрока);
		УстановитьМодифицированностьСервер(НоваяСтрока);
		ИндексДляВставки = ИндексДляВставки + 1;
	КонецЦикла;
	ПеренумероватьИЗаполнитьПризнакиПереходаДат();
	
КонецПроцедуры

&НаСервере
Процедура СтатусПриИзмененииСервер()
	
	УстановитьОтборЗаданияНаПеревозкуВРаботе();
	
	Если Статус = "ВсеВРаботе" ИЛИ НЕ ЗначениеЗаполнено(Статус) Тогда
		Элементы.ЗаданияНаПеревозкуВРаботеСтатус.Видимость = Истина;
	Иначе
		Элементы.ЗаданияНаПеревозкуВРаботеСтатус.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПериодДокументовДляПеревозчиковПриИзмененииСервер()
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДокументыДляПеревозчиков.Отбор, "Дата");
	Если ЗначениеЗаполнено(ПериодДокументовДляПеревозчиков) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДокументыДляПеревозчиков.Отбор, "Дата",ПериодДокументовДляПеревозчиков.ДатаНачала,
														ВидСравненияКомпоновкиДанных.БольшеИлиРавно, "ДатаБольше");
		
		ЭлементОтбора = ДокументыДляПеревозчиков.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Дата");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.Использование    = Истина;
		ЭлементОтбора.ПравоеЗначение   = ПериодДокументовДляПеревозчиков.ДатаОкончания;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Представление    = "ДатаМеньше";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыДляПеревозчиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДокументыДляПеревозчиков.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ОткрытьЗначение(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры