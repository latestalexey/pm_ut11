///////////////////////////////////////////////////////////////////////////////
//ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	РежимРедактирования = "ВДиалоге";
	ЗаполнитьДеревоЗадач();
	УстановитьДоступностьПолейДереваЗадач(РежимРедактирования);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	РазвернутьДерево();
КонецПроцедуры

//-----------------------------------------------------------------------------
&НаКлиенте
Процедура СделкаПриИзменении(Элемент)
	ЗаполнитьДеревоЗадач();
	РазвернутьДерево();
	УстановитьФильтрВзаимодейсвия();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаЗадачи Тогда
		РазвернутьДерево();
	КонецЕсли;
КонецПроцедуры

//КОМАНДЫ

&НаКлиенте
Процедура СоздатьЗадание(Команда)
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		НовСообщение = Новый СообщениеПользователю;
		НовСообщение.Текст = "Выбирите задачу";
		НовСообщение.Сообщить();
	иначе
		ТекущаяЗадача = ТекущиеДанные.Ссылка;
		ДанныеЗаполнения = Новый Структура ("Предмет,акПроект,Наименование",ТекущаяЗадача,Сделка,ТекущиеДанные.Наименование);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",ДанныеЗаполнения);
		
		ФормаЭлемента = ПолучитьФорму("БизнесПроцесс.Задание.Форма.ФормаБизнесПроцесса", ПараметрыФормы, ЭтаФорма);
		ФормаЭлемента.ОткрытьМодально();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВзаимодействие(Команда)
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		НовСообщение = Новый СообщениеПользователю;
		НовСообщение.Текст = "Выбирите задачу";
		НовСообщение.Сообщить();
	иначе
		ТекущаяЗадача = ТекущиеДанные.Ссылка;
		ДанныеЗаполнения = Новый Структура ("Предмет,акПроект,Тема",ТекущаяЗадача,Сделка,ТекущиеДанные.Наименование);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",ДанныеЗаполнения);
		
		ФормаЭлемента = ПолучитьФорму("Документ.ЗапланированноеВзаимодействие.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
		ФормаЭлемента.ОткрытьМодально();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВстречу(Команда)
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		НовСообщение = Новый СообщениеПользователю;
		НовСообщение.Текст = "Выбирите задачу";
		НовСообщение.Сообщить();
	иначе
		ТекущаяЗадача = ТекущиеДанные.Ссылка;
		ДанныеЗаполнения = Новый Структура ("Предмет,акПроект,Тема",ТекущаяЗадача,Сделка,ТекущиеДанные.Наименование);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",ДанныеЗаполнения);
		
		ФормаЭлемента = ПолучитьФорму("Документ.Встреча.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
		ФормаЭлемента.ОткрытьМодально();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТелефонныйЗвонок(Команда)
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		НовСообщение = Новый СообщениеПользователю;
		НовСообщение.Текст = "Выбирите задачу";
		НовСообщение.Сообщить();
	иначе
		ТекущаяЗадача = ТекущиеДанные.Ссылка;
		ДанныеЗаполнения = Новый Структура ("Предмет,акПроект,Тема",ТекущаяЗадача,Сделка,ТекущиеДанные.Наименование);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",ДанныеЗаполнения);
		
		ФормаЭлемента = ПолучитьФорму("Документ.ТелефонныйЗвонок.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
		ФормаЭлемента.ОткрытьМодально();
	КонецЕсли;КонецПроцедуры

&НаКлиенте
Процедура СоздатьПисьмоИсходящее(Команда)
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		НовСообщение = Новый СообщениеПользователю;
		НовСообщение.Текст = "Выбирите задачу";
		НовСообщение.Сообщить();
	иначе
		ТекущаяЗадача = ТекущиеДанные.Ссылка;
		ДанныеЗаполнения = Новый Структура ("Предмет,акПроект,Тема",ТекущаяЗадача,Сделка,ТекущиеДанные.Наименование);
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",ДанныеЗаполнения);
		
		ФормаЭлемента = ПолучитьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма);
		ФормаЭлемента.ОткрытьМодально();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПодчиненную(Команда)
	ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ДанныеЗаполнения = Новый Структура;
	Если ТекущийДанные <> Неопределено Тогда 
		ДанныеЗаполнения.Вставить("Родитель", ТекущийДанные.Ссылка);
		ДанныеЗаполнения.Вставить("Владелец", Сделка);
		ДанныеЗаполнения.Вставить("ПлановаяДатаНачала", ТекущийДанные.ПлановаяДатаОкончания+1);//
		ДанныеЗаполнения.Вставить("ПлановаяПродолжительность", 1);
		ДанныеЗаполнения.Вставить("ОписаниеЗадачи", "Без подробностей");
	КонецЕсли;	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",ДанныеЗаполнения);
	
	ФормаЭлемента = ПолучитьФорму("Справочник.ЗадачиПроектов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	ФормаЭлемента.ОткрытьМодально();
	ЗаполнитьДеревоЗадач();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоследующую(Команда)
	ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	ПараметрыФормы = Новый Структура;
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Владелец", Сделка);
	ДанныеЗаполнения.Вставить("ПлановаяПродолжительность", 1);
	ДанныеЗаполнения.Вставить("ОписаниеЗадачи", "Без подробностей");
	
	Если ТекущийДанные <> Неопределено Тогда 
		ДанныеЗаполнения.Вставить("Родитель", ТекущийДанные.Ссылка.Родитель);		
		ДанныеЗаполнения.Вставить("ПлановаяДатаНачала", ТекущийДанные.ПлановаяДатаОкончания);//
		ПараметрыФормы.Вставить("Предшественник", ТекущийДанные.Ссылка);
	КонецЕсли;	
	ПараметрыФормы.Вставить("ЗначенияЗаполнения",ДанныеЗаполнения);
	
	ФормаЭлемента = ПолучитьФорму("Справочник.ЗадачиПроектов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	ФормаЭлемента.ОткрытьМодально();
	ЗаполнитьДеревоЗадач();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДеревоЗадач(Команда)
	ЗаполнитьДеревоЗадач();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточку(Команда)
	ТекущийДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущийДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущийДанные.Ссылка);
	
	ОткрытьФорму("Справочник.ЗадачиПроектов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
//ДЕРЕВО ЗНАЧЕНИЙ

&НаСервере
Процедура УстановитьДоступностьПолейДереваЗадач(Режим)
	
	Если Режим = "ВСписке" Тогда 
		Элементы.ДеревоЗадачИзменить.Видимость = Ложь;
		Элементы.ДеревоЗадачОткрытьКарточку.Видимость = Истина;
	Иначе
		Элементы.ДеревоЗадачИзменить.Видимость = Истина;
		Элементы.ДеревоЗадачОткрытьКарточку.Видимость = Ложь;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаписатьПроектнуюЗадачуИзСтрокиДерева(ИндексСтроки)
	
	ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ИндексСтроки);
	
	Если ЗначениеЗаполнено(ЭлементДерева.Ссылка) Тогда 
		ПроектнаяЗадачаОбъект = ЭлементДерева.Ссылка.ПолучитьОбъект();
		
		Если ЭлементДерева.ВерсияДанных <> ЭлементДерева.Ссылка.ВерсияДанных Тогда 
			ЗаполнитьСтрокуДереваИзПроектнойЗадачи(ЭлементДерева, ПроектнаяЗадачаОбъект.Ссылка);			
			ТекстСообщения = НСтр("ru = 'Данные были изменены другим пользователем'");
			ВызватьИсключение ТекстСообщения; 
		КонецЕсли;	
	Иначе
		ПроектнаяЗадачаОбъект = Справочники.ЗадачиПроектов.СоздатьЭлемент();
	КонецЕсли;	
	
	ПроектнаяЗадачаОбъект.Наименование = ЭлементДерева.Наименование;
	ПроектнаяЗадачаОбъект.Владелец = Сделка;
	ПроектнаяЗадачаОбъект.Родитель = ЭлементДерева.ЗадачаРодитель;
	
	ПроектнаяЗадачаОбъект.ПлановаяДатаНачала = ЭлементДерева.ПлановаяДатаНачала;
	ПроектнаяЗадачаОбъект.ПлановаяПродолжительность = ЭлементДерева.ПлановаяПродолжительность;
	
	ПроектнаяЗадачаОбъект.ДатаНачала = ЭлементДерева.ДатаНачала;
	ПроектнаяЗадачаОбъект.ДатаОкончания = ЭлементДерева.ДатаОкончания;
	
	//
	//ПроектнаяЗадачаОбъект.Предшественники.Загрузить(ЭлементДерева.Предшественники.Выгрузить());
	//ПроектнаяЗадачаОбъект.Исполнители.Загрузить(ЭлементДерева.Исполнители.Выгрузить());
		
	ПроектнаяЗадачаОбъект.Записать();
	ЭлементДерева.Ссылка = ПроектнаяЗадачаОбъект.Ссылка;
	ЭлементДерева.ВерсияДанных = ПроектнаяЗадачаОбъект.ВерсияДанных;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьСтрокуДереваИзПроектнойЗадачи(ЭлементДерева, ПроектнаяЗадача)
	
	Если ТипЗнч(ЭлементДерева) = Тип("Число") Тогда 
		ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ЭлементДерева);
	КонецЕсли;	
	
	ЭлементДерева.ЗадачаРодитель = ПроектнаяЗадача.Родитель;
	ЭлементДерева.НаименованиеЗадачи = ПроектнаяЗадача.акКодСДР + "  " + ПроектнаяЗадача.Наименование;
	
	ЭлементДерева.Наименование = ЭлементДерева.Наименование;
	ЭлементДерева.Владелец = ПроектнаяЗадача.Владелец;
	ЭлементДерева.ЗадачаРодитель = ПроектнаяЗадача.Родитель;
	
	ЭлементДерева.ПлановаяДатаНачала = ПроектнаяЗадача.ПлановаяДатаНачала;
	ЭлементДерева.ПлановаяПродолжительность = ПроектнаяЗадача.ПлановаяПродолжительность;
	
	ЭлементДерева.ДатаНачала = ПроектнаяЗадача.ДатаНачала;
	ЭлементДерева.ДатаОкончания = ПроектнаяЗадача.ДатаОкончания;
	
	// предшественники
	ЭлементДерева.Предшественники.Очистить();
	Для Каждого СтрокаТаблЧасти Из ПроектнаяЗадача.Предшественники.Выгрузить() Цикл
		СтрокаТаблицыЗначений = ЭлементДерева.Предшественники.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, СтрокаТаблЧасти);
	КонецЦикла;	
	ЭлементДерева.ПредшественникиСтр = ПолучитьСтрокуПредшественников(ПроектнаяЗадача);
	
КонецПроцедуры	

&НаСервере
Функция ПометитьНаУдалениеПроектныеЗадачи(ВыделенныеСтроки, ПометкаУдаления)
	
	Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
		СтрокаТаблицыПроектнаяЗадача = ДеревоЗадач.НайтиПоИдентификатору(СтрокаТаблицы);
		Если СтрокаТаблицыПроектнаяЗадача = Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		
		ПроектнаяЗадачаСсылка = СтрокаТаблицыПроектнаяЗадача.Ссылка;
		Если ПроектнаяЗадачаСсылка.Пустая() Тогда
			Продолжить;
		КонецЕсли;	
		
		ПроектнаяЗадачаОбъект = ПроектнаяЗадачаСсылка.ПолучитьОбъект();
		ПроектнаяЗадачаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
	КонецЦикла;
	
	ЗаполнитьДеревоЗадач();
КонецФункции

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если РежимРедактирования = "ВДиалоге" Тогда
		СтандартнаяОбработка = Ложь;
    	Параметр =  Новый Структура("Ключ", Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка);
   		ОткрытьФорму("Справочник.ЗадачиПроектов.ФормаОбъекта", Параметр, ЭтаФорма);
	КонецЕсли;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуПредшественников(Задача)
	ПредшественникиСтр = "";
	Для Каждого СтрокаТаблЧасти Из Задача.Предшественники Цикл
		
		Если СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало Тогда
			ТипЗависимости = "";
		ИначеЕсли СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеОкончание Тогда
			ТипЗависимости = НСтр("ru = 'ОО'");
		ИначеЕсли СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоОкончание Тогда
			ТипЗависимости = НСтр("ru = 'НО'");
		ИначеЕсли СтрокаТаблЧасти.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоНачало Тогда
			ТипЗависимости = НСтр("ru = 'НН'");
		КонецЕсли;
				
		ПредшественникКодСДР = СтрокаТаблЧасти.Предшественник.акКодСДР;
		ПредшественникиСтр = ПредшественникиСтр + ПредшественникКодСДР + ТипЗависимости  + ", ";
		
	КонецЦикла;	
	
	Если ПредшественникиСтр <> "" Тогда 
		ПредшественникиСтр = Лев(ПредшественникиСтр, СтрДлина(ПредшественникиСтр)-2);
	КонецЕсли;
	
	Возврат ПредшественникиСтр;

КонецФункции

&НаСервере
Функция ПолучитьСтрокуИсполнителей(Задача)
	
	ИсполнителиСтр = "";
	Для Каждого Строка Из Задача.Исполнители Цикл
		ПредставлениеИсполнителя = Строка(Строка.Исполнитель);	
		ИсполнителиСтр = ИсполнителиСтр + ", " + ПредставлениеИсполнителя;
	КонецЦикла;	
	
	Если ИсполнителиСтр <> "" Тогда 
		ИсполнителиСтр = Сред(ИсполнителиСтр, 2);
	КонецЕсли;	
	
	Возврат ИсполнителиСтр;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьСтрокиДерева(СтрокаКорень,Задача)
	Если Задача.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = СтрокаКорень.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,Задача) ;
	НоваяСтрока.ЗадачаРодитель = Задача.Родитель;
	НоваяСтрока.НаименованиеЗадачи = Задача.акКодСДР + "  " + Задача.Наименование;
	НоваяСтрока.Выделять = НЕ ЗначениеЗаполнено(Задача.Родитель);
	
	// предшественники
	НоваяСтрока.Предшественники.Очистить();
	Для Каждого СтрокаТаблЧасти Из Задача.Предшественники.Выгрузить() Цикл
		СтрокаТаблицыЗначений =НоваяСтрока.Предшественники.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений, СтрокаТаблЧасти);
	КонецЦикла;	
	
	НоваяСтрока.ПредшественникиСтр = ПолучитьСтрокуПредшественников(Задача);
	НоваяСтрока.ИсполнителиСтр = ПолучитьСтрокуИсполнителей(Задача);
	
	Если ЗначениеЗаполнено(Задача.ПлановаяДатаНачала) Тогда
		НоваяСтрока.ПлановаяДатаОкончания = 
		Задача.ПлановаяДатаНачала + 
		?(ЗначениеЗаполнено(Задача.ПлановаяПродолжительность),
		Задача.ПлановаяПродолжительность*60*60*24,0);
		
	КонецЕсли; 	
	//подчиненные элементы
	Запрос = Новый ЗАпрос;
	Запрос.Текст =	"ВЫБРАТЬ
	              	|	ЗадачиПроектов.Ссылка
	              	|ИЗ
	              	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
	              	|ГДЕ
	              	|	ЗадачиПроектов.Родитель = &Родитель
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	ЗадачиПроектов.акКодСДР ИЕРАРХИЯ";
	Запрос.УстановитьПараметр("Родитель",Задача);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл    
		ЗаполнитьСтрокиДерева(НоваяСтрока, Выборка.Ссылка);
    КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗадач()
	текДеревоЗадач=РеквизитФормыВЗначение("ДеревоЗадач");
	текДеревоЗадач.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиПроектов.Ссылка,
	|	ЗадачиПроектов.акКодСДР,
	|	ЗадачиПроектов.акНомерЗадачиВУровне КАК акНомерЗадачиВУровне
	|ИЗ
	|	Справочник.ЗадачиПроектов КАК ЗадачиПроектов
	|ГДЕ
	|	ЗадачиПроектов.Владелец = &Владелец
	|	И ЗадачиПроектов.Родитель = ЗНАЧЕНИЕ(Справочник.ЗадачиПроектов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	акНомерЗадачиВУровне ИЕРАРХИЯ";

	Запрос.УстановитьПараметр("Владелец", Сделка);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьСтрокиДерева(текДеревоЗадач,ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(текДеревоЗадач,"ДеревоЗадач");
	ЗаполнитьДиаграммуГанта();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево()
	
	КоллекцияЭлементовДерева=ДеревоЗадач.ПолучитьЭлементы();
	
	//Развернуть дерево 
	Для Каждого СтрокаКоллекции Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки=СтрокаКоллекции.ПолучитьИдентификатор();
		Элементы.ДеревоЗадач.Развернуть(ИдентификаторСтроки,Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДанныеДоступностиКомандПеремещения(ДеревоЗадач, ЭлементыФормы)
	
	ДеревоЗадачВверх = Истина;
	ДеревоЗадачВниз = Истина;
	ДеревоЗадачНаУровеньВыше = Истина;
	ДеревоЗадачНаУровеньНиже = Истина;
	
	ВыделенныеСтроки = ЭлементыФормы.ДеревоЗадач.ВыделенныеСтроки;
	ВыделенныеСтрокиКоличество = ВыделенныеСтроки.Количество();
	
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		СтрокаТекущая = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока);
		СтрокаРодитель = СтрокаТекущая.ПолучитьРодителя();
		
		ДеревоЗадачНаУровеньВыше = ДеревоЗадачНаУровеньВыше 
			И (СтрокаРодитель <> Неопределено)
			И ВыделенныеСтрокиКоличество = 1
			И Не СтрокаТекущая.ПометкаУдаления;
			
		Если СтрокаРодитель = Неопределено Тогда
			СтрокаРодитель = ДеревоЗадач;
		КонецЕсли;
		
		ДеревоЗадачНаУровеньНиже = ДеревоЗадачНаУровеньНиже 
			И СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаТекущая) > 0
			И ВыделенныеСтрокиКоличество = 1
			И Не СтрокаТекущая.ПометкаУдаления;
		
		ДеревоЗадачВверх = ДеревоЗадачВверх
			И СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаТекущая) > 0
			И Не СтрокаТекущая.ПометкаУдаления;
			
		ДеревоЗадачВниз = ДеревоЗадачВниз
			И СтрокаРодитель.ПолучитьЭлементы().Индекс(СтрокаТекущая) < 
				СтрокаРодитель.ПолучитьЭлементы().Количество() - 1
			И Не СтрокаТекущая.ПометкаУдаления;
			
	КонецЦикла;
	
	ДанныеВозврата = Новый Структура;
	ДанныеВозврата.Вставить("ДеревоЗадачВверх", 		ДеревоЗадачВверх);
	ДанныеВозврата.Вставить("ДеревоЗадачВниз", 			ДеревоЗадачВниз);
	ДанныеВозврата.Вставить("ДеревоЗадачНаУровеньВыше", ДеревоЗадачНаУровеньВыше);
	ДанныеВозврата.Вставить("ДеревоЗадачНаУровеньНиже", ДеревоЗадачНаУровеньНиже);
		
	Возврат ДанныеВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы)
	
	ДанныеДоступности = ПолучитьДанныеДоступностиКомандПеремещения(ДеревоЗадач, Элементы);
	
	Элементы.ДеревоЗадачВверх.Доступность = ДанныеДоступности.ДеревоЗадачВверх;
	Элементы.ДеревоЗадачВниз.Доступность = ДанныеДоступности.ДеревоЗадачВниз;
	
	Элементы.ФормаНаУровеньВыше.Доступность = ДанныеДоступности.ДеревоЗадачНаУровеньВыше;
	Элементы.ФормаНаУровеньНиже.Доступность = ДанныеДоступности.ДеревоЗадачНаУровеньНиже;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	Если Элементы.ЗадачиСтраницы.ТекущаяСтраница <> Элементы.СтраницаЗадачи Тогда 
		Возврат;
	КонецЕсли;	
	УстановитьФильтрВзаимодейсвия();

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ТекущаяПроектнаяЗадача = ПредопределенноеЗначение("Справочник.ЗадачиПроектов.ПустаяСсылка");
		Элементы.ДеревоЗадачВверх.Доступность = Ложь;
		Элементы.ДеревоЗадачВниз.Доступность= Ложь;
		Элементы.ФормаНаУровеньВыше.Доступность = Ложь;
		Элементы.ФормаНаУровеньНиже.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если КоличествоВыделенныхЗадач <> Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество() 
		ИЛИ ТекущаяПроектнаяЗадача <> Элемент.ТекущиеДанные.Ссылка Тогда
		КоличествоВыделенныхЗадач = Элементы.ДеревоЗадач.ВыделенныеСтроки.Количество();
		ТекущаяПроектнаяЗадача = Элемент.ТекущиеДанные.Ссылка;
		УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	ВыделенныеСтроки = Элемент.ВыделенныеСтроки;
	Если ВыделенныеСтроки = Неопределено Или ВыделенныеСтроки.Количество() <= 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ВыделенныеСтроки.Количество() = 1 Тогда 
		Если НЕ Элементы.ДеревоЗадач.ТекущиеДанные.ПометкаУдаления Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Пометить ""%1"" на удаление?'"),
				Строка(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка));
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
		    	Возврат;
			КонецЕсли;
			ПометкаУдаления = Истина;
		Иначе
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Снять с ""%1"" пометку удаления?'"),
				Строка(Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка));
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
		    	Возврат;
			КонецЕсли;
			ПометкаУдаления = Ложь;
		КонецЕсли;
	ИначеЕсли ВыделенныеСтроки.Количество() > 1 Тогда
		ПометкаУдаления = Истина;
		Для Каждого СтрокаТаблицы Из ВыделенныеСтроки Цикл
			СтрокаТаблицыПроектнаяЗадача = ДеревоЗадач.НайтиПоИдентификатору(СтрокаТаблицы);
			Если СтрокаТаблицыПроектнаяЗадача.ПометкаУдаления = Истина Тогда
				ПометкаУдаления = Ложь;
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		Если ПометкаУдаления Тогда
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос(НСтр("ru = 'Пометить выделенные элементы на удаление?'"), Режим);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос(НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'"), Режим);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;		
	ПометитьНаУдалениеПроектныеЗадачи(ВыделенныеСтроки, ПометкаУдаления);		
    РазвернутьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если ОтменаРедактирования Тогда 
		
		ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
		ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда 
			
			Отказ = Истина;
			
			РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
			Если РодительЭлемента = Неопределено Тогда 
				ИндексЭлемента = ДеревоЗадач.ПолучитьЭлементы().Индекс(ЭлементДерева);
				ДеревоЗадач.ПолучитьЭлементы().Удалить(ИндексЭлемента);
			Иначе
				ИндексЭлемента = РодительЭлемента.ПолучитьЭлементы().Индекс(ЭлементДерева);
				РодительЭлемента.ПолучитьЭлементы().Удалить(ИндексЭлемента);
			КонецЕсли;	
			Возврат;
			
		Иначе	
			
		КонецЕсли;	
		
	Иначе	
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Наименование) Тогда 
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Наименование""'");
			Предупреждение(ТекстСообщения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;			
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
		
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда 
		НовыйЭлемент = Истина;
	Иначе
		НовыйЭлемент = Ложь;
	КонецЕсли;	
	
	ЗаписатьПроектнуюЗадачуИзСтрокиДерева(Элементы.ДеревоЗадач.ТекущаяСтрока);
	
	Если НовыйЭлемент Тогда 
		ПоказатьОповещениеПользователя(
			"Создание:", 
			ПолучитьНавигационнуюСсылку(ТекущиеДанные.Ссылка),
			Строка(ТекущиеДанные.Ссылка),
			БиблиотекаКартинок.Информация32);
	Иначе
		ПоказатьОповещениеПользователя(
			"Изменение:", 
			ПолучитьНавигационнуюСсылку(ТекущиеДанные.Ссылка),
			Строка(ТекущиеДанные.Ссылка),
			БиблиотекаКартинок.Информация32);
	КонецЕсли;	
	ИсторияРаботыПользователя.Добавить(ТекущиеДанные.Ссылка);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Владелец) Тогда // изменяется новая строка
		ИндексСтроки = Элементы.ДеревоЗадач.ТекущаяСтрока;
		
		ТекущиеДанные.Владелец = Сделка;
				
		РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительЭлемента = Неопределено Тогда 
			ТекущиеДанные.ЗадачаРодитель = РодительЭлемента.Ссылка;//?
		КонецЕсли;	
		ТекущиеДанные.ПлановаяДатаНачала  =НачалоДня(ТекущаяДата());
		ТекущиеДанные.ПлановаяДатаОкончания  =КонецДня(ТекущаяДата())+1;
		ТекущиеДанные.ПлановаяПродолжительность = 1;

	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Владелец) Тогда // изменяется новая строка
		ИндексСтроки = Элементы.ДеревоЗадач.ТекущаяСтрока;
		
		ТекущиеДанные.Владелец = Сделка;
		
		РодительЭлемента = ТекущиеДанные.ПолучитьРодителя();
		Если НЕ РодительЭлемента = Неопределено Тогда 
			ТекущиеДанные.ЗадачаРодитель = РодительЭлемента.Ссылка;
		КонецЕсли;	
		ТекущиеДанные.ПлановаяДатаНачала  =НачалоДня(ТекущаяДата());
		ТекущиеДанные.ПлановаяДатаОкончания  =КонецДня(ТекущаяДата())+1;
		ТекущиеДанные.ПлановаяПродолжительность = 1;
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачНаименованиеЗадачиПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Наименование = ТекущиеДанные.НаименованиеЗадачи;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если РежимРедактирования = "ВСписке" Тогда 
		
		ТекущаяСтрока = Элементы.ДеревоЗадач.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда 
			НовыйЭлемент = ДеревоЗадач.ПолучитьЭлементы().Добавить();
		Иначе
			ЭлементДерева = ДеревоЗадач.НайтиПоИдентификатору(ТекущаяСтрока);
			РодительЭлемента = ЭлементДерева.ПолучитьРодителя();
			
			Если РодительЭлемента = Неопределено Тогда 
				НовыйЭлемент = ДеревоЗадач.ПолучитьЭлементы().Добавить();
			Иначе
				НовыйЭлемент = РодительЭлемента.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			//Стадия		
			Если Копирование Тогда 
				НовыйЭлемент.Копирование = Истина;
				
				НовыйЭлемент.ЗадачаРодитель = ЭлементДерева.ЗадачаРодитель;
				
				НовыйЭлемент.Наименование = ЭлементДерева.Наименование;
				НовыйЭлемент.ПлановаяДатаНачала = ЭлементДерева.ПлановаяДатаНачала;
				НовыйЭлемент.ПлановаяПродолжительность = ЭлементДерева.ПлановаяПродолжительность;
				НовыйЭлемент.ПлановаяДатаОкончания = ЭлементДерева.ПлановаяДатаОкончания;
				
				НовыйЭлемент.ДатаНачала = ЭлементДерева.ДатаНачала;
				НовыйЭлемент.ДатаОкончания = ЭлементДерева.ДатаОкончания;
								
			КонецЕсли;	
		КонецЕсли;	
		
		Элементы.ДеревоЗадач.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
		Элементы.ДеревоЗадач.ИзменитьСтроку();
		
	Иначе
		
		ПараметрыФормы = Новый Структура;
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ПлановаяПродолжительность", 1);
		ДанныеЗаполнения.Вставить("ОписаниеЗадачи", "Без подробностей");
		
		Если ТекущаяПроектнаяЗадача <> Неопределено Тогда 
			ДанныеЗаполнения.Вставить("Родитель", ТекущаяПроектнаяЗадача.Ссылка);
			ДанныеЗаполнения.Вставить("Владелец", Сделка);
			ДанныеЗаполнения.Вставить("ПлановаяДатаНачала", ТекущаяДата());//
		КонецЕсли;	
		ПараметрыФормы.Вставить("ЗначенияЗаполнения",ДанныеЗаполнения);
		
		ФормаЭлемента = ПолучитьФорму("Справочник.ЗадачиПроектов.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		ФормаЭлемента.ОткрытьМодально();
	КонецЕсли;
	ЗаполнитьДеревоЗадач();
	РазвернутьДерево();
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПриИзменении(Элемент)
	УстановитьДоступностьПолейДереваЗадач(РежимРедактирования);
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
//ДИАГРАММА ГАНТА

&НаСервере
Процедура УстановитьТекстЗначения(Интервал)
	
	Интервал.Значение.Текст = Строка(День(Интервал.Начало)) + "." 
		+ Строка(Месяц(Интервал.Начало)) + "-" 
		+ Строка(День(Интервал.Конец)) + "." 
		+ Строка(Месяц(Интервал.Конец));
									 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОднуТочкуДиаграммыГанта(СтрокаДерева, Связи, Серия, МаксимальнаяДата, МинимальнаяДата)
	
	Диаграмма = ДиаграммаГанта;
	
	ЦветЗапланированного = WebЦвета.Васильковый;
	ЦветНепросроченного = ЦветаСтиля.ОтметкаПоложительногоВыполненияЗадачи;
	ЦветПросроченного = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветВыполненого =  ЦветаСтиля.ЗавершенныйБизнесПроцесс; 
	ЦветНеназначенного = WebЦвета.НейтральноКоричневый;
	ЦветРодителя = WebЦвета.Черный;
	
	Если ЗначениеЗаполнено(СтрокаДерева.ДатаНачала) И ЗначениеЗаполнено(СтрокаДерева.ДатаОкончания) Тогда 
		ДатаНачала = СтрокаДерева.ДатаНачала;
		ДатаОкончания = СтрокаДерева.ДатаОкончания;
	Иначе	
		ДатаНачала = СтрокаДерева.ПлановаяДатаНачала;
		ДатаОкончания = СтрокаДерева.ПлановаяДатаОкончания;
	КонецЕсли;
	//необходимо чтобы задачи отображались в любом случае
	Если НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецДня(ТекущаяДата()+1);
	КонецЕсли;

	
	
	НужноДобавитьСтроку = Истина;
	
	// Если даты не заполнены и нет дочерних задач - не добавляем точку
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания)
		И СтрокаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
		
		НужноДобавитьСтроку = Ложь;
		
	КонецЕсли;	
	
	Если НужноДобавитьСтроку Тогда
		
		// Поскольку серия одна, каждой работе соответствует одна точка и одно значение.
		
		// Инициализируем точку.
		Точка = Диаграмма.УстановитьТочку(СтрокаДерева.Ссылка, 
											?(СтрокаДерева.Ссылка.Родитель.Пустая(), 
				  							Неопределено,
											СтрокаДерева.Ссылка.Родитель));
											
		Точка.Текст = СтрокаДерева.НаименованиеЗадачи;
		
		Диаграмма.РазвернутьТочку(Точка, Истина);
		
		// Инициализируем значение.
		Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
		
		Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда	
			 
			Если ЗначениеЗаполнено(СтрокаДерева.ДатаОкончания) Тогда
				Значение.Редактирование = Ложь;
			Иначе	
				Значение.Редактирование = Истина;
			КонецЕсли;	
			
			// Добавляем интервал. В данном примере у каждой работы единственный интервал.
			Интервал = Значение.Добавить();
			Интервал.Начало = ДатаНачала;
			Интервал.Конец = ДатаОкончания;
			
			// Формируем подпись.
			УстановитьТекстЗначения(Интервал);
			
			ЭтоРодитель = (СтрокаДерева.ПолучитьЭлементы().Количество() <> 0);
			
			// Определяем статус задачи.
			Если ЭтоРодитель Тогда
				Значение.Цвет = ЦветРодителя;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ДатаОкончания) Тогда
				Значение.Цвет = ЦветВыполненого;
			ИначеЕсли ДатаОкончания < ТекущаяДата() Тогда
				Значение.Цвет = ЦветПросроченного;
			ИначеЕсли ДатаНачала < ТекущаяДата() И Не ЗначениеЗаполнено(СтрокаДерева.ДатаНачала) Тогда 		
				Значение.Цвет = ЦветНеназначенного;
			ИначеЕсли ЗначениеЗаполнено(СтрокаДерева.ДатаНачала) Тогда 	
				Значение.Цвет = ЦветНепросроченного;
			Иначе
				Значение.Цвет = ЦветЗапланированного;
			КонецЕсли;
			
			// Если надо, корректируем максимальную и минимальную даты.
			Если МаксимальнаяДата = NULL Или МаксимальнаяДата < ДатаОкончания Тогда
				МаксимальнаяДата = ДатаОкончания;
			КонецЕсли;				
			
			Если МинимальнаяДата = NULL Или МинимальнаяДата > ДатаНачала Тогда
				МинимальнаяДата = ДатаНачала;
			КонецЕсли;	
			
			// Получаем связи данной работы и заносим в таблицу.
			Если НЕ СтрокаДерева.Ссылка.Родитель.Пустая() Тогда 
				
				Связь = Связи.Добавить();
				Связь.Начало = СтрокаДерева.Ссылка.Родитель;
				Связь.Конец = СтрокаДерева.Ссылка;
				Связь.ТипЗависимости=Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало;
			КонецЕсли;
			// Получаем связи данной работы и заносим в таблицу.
			Для Каждого СтрокаДереваПред Из СтрокаДерева.Предшественники Цикл
				Если ЗначениеЗаполнено(СтрокаДереваПред.Предшественник) И СтрокаДереваПред.Предшественник.ПометкаУдаления Тогда 
				   Продолжить;
				КонецЕсли; 
				
				Связь = Связи.Добавить();
				Связь.Начало = СтрокаДереваПред.Предшественник;
				Связь.Конец = СтрокаДерева.Ссылка;
				Связь.ТипЗависимости = СтрокаДереваПред.ТипЗависимости;
			КонецЦикла;
			
			
		КонецЕсли;			
				
		Строки = СтрокаДерева.ПолучитьЭлементы();
		Для Каждого Строка Из Строки Цикл
			ЗаполнитьОднуТочкуДиаграммыГанта(Строка, Связи, Серия, МаксимальнаяДата, МинимальнаяДата);
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьДиаграммуГанта()
	
	// Получаем диаграмму и запрещаем на время заполнения ее обновление.
	// В случае большого объема данных это существенно ускорит выполнение.
	Диаграмма = ДиаграммаГанта;
	Диаграмма.Обновление = Ложь;
	Диаграмма.Очистить();
	Диаграмма.ИнтервалыФона.Очистить();
	
	Для Каждого Шкала Из Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы Цикл
		Шкала.Метки.Очистить();
	КонецЦикла;	
	
	Диаграмма.ОтображатьЛегенду = Ложь;
	Диаграмма.ОтображатьЗаголовок = Ложь;
	Диаграмма.ОбластьПостроения.Право = 1;
	
	// Создаем таблицу значений, в которую, по мере обхода запроса, будем заносить связи.
	Связи = Новый ТаблицаЗначений;
	Связи.Колонки.Добавить("Конец");
	Связи.Колонки.Добавить("Начало");
	Связи.Колонки.Добавить("ТипЗависимости");

	
	// Серия будет одна.
	Серия = Диаграмма.Серии.Добавить();
	
	// Заводим переменные для определения максимальной и минимальной дат работ.
	МаксимальнаяДата = NULL;
	МинимальнаяДата = NULL;
	
	Строки = ДеревоЗадач.ПолучитьЭлементы();
	Для Каждого СтрокаДерева Из Строки Цикл
		ЗаполнитьОднуТочкуДиаграммыГанта(СтрокаДерева, Связи, Серия, МаксимальнаяДата, МинимальнаяДата);
	КонецЦикла;
	
	// Теперь в интервале минимальной и максимальной дат заполняем интервалы выходных дней.
	Если МинимальнаяДата <> NULL Тогда
		
		День = 3600 * 24;
		Неделя = 3600 * 24 * 7;
		МаксимальнаяДата = МаксимальнаяДата + Неделя * 4;
		
		ОсновнойКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
		
		РабочиеДни = Справочники.Календари.ПрочитатьДанныеГрафикаИзРегистра(ОсновнойКалендарь, Год(МинимальнаяДата));
		Если Год(МаксимальнаяДата) > Год(МинимальнаяДата) Тогда 
			врРабочиеДни = Справочники.Календари.ПрочитатьДанныеГрафикаИзРегистра(ОсновнойКалендарь, Год(МаксимальнаяДата));
			Для Каждого Элемент Из врРабочиеДни Цикл
				РабочиеДни.Добавить(Элемент);
			КонецЦикла;	
		КонецЕсли;	 
		
		
		ТекДата = МинимальнаяДата;
		Пока ТекДата <= МаксимальнаяДата Цикл;
			
			РабочийДень = (РабочиеДни.Найти(НачалоДня(ТекДата)) <> Неопределено);
			
			Если Не РабочийДень Тогда
			
				Кон = КонецДня(ТекДата);
				Нач = НачалоДня(ТекДата);
				Диаграмма.ИнтервалыФона.Добавить(Нач, Кон);
				
			КонецЕсли;	
			
			ТекДата = ТекДата + День;
			
		КонецЦикла;		
		
	КонецЕсли;
	
	// По заполненной таблице создаем связи.
	СоздатьСвязиНаДиаграммеГанта(Связи, Диаграмма, Серия);
	
	// Находим элемент шкалы времени для непериодических меток.
	ЭлементМеток = ПолучитьЭлементДляМеток(Диаграмма);
	
	// Создаем метку - текущая дата
	Метка = ЭлементМеток.Метки.Добавить(ТекущаяДата());
	Метка.Текст = НСтр("ru = 'Текущая дата'");
	Метка.ЦветТекста = WebЦвета.Красный;
	Метка.ЦветЛинии = Метка.ЦветТекста;
	
	// Развертываем первую точку - рекурсивно. 
	Если Диаграмма.Точки.Количество() > 0 Тогда
		Диаграмма.РазвернутьТочку(Диаграмма.Точки.Получить(0), Истина);
	КонецЕсли;
	
	// Включаем обновление диаграммы.
	Диаграмма.Обновление = Истина;
	
	Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Авто;
	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСвязиНаДиаграммеГанта(Связи, Диаграмма, Серия)
	
	ТекущаяТочка = NULL;
	Для Каждого Связь Из Связи Цикл 
		
		Если ТекущаяТочка = NULL Или ТекущаяТочка.Значение <> Связь.Конец Тогда
			ТекущаяТочка = Диаграмма.УстановитьТочку(Связь.Конец);
		КонецЕсли;			
		
		ТочкаНачала = Диаграмма.УстановитьТочку(Связь.Начало);
		Значение = Диаграмма.ПолучитьЗначение(ТочкаНачала, Серия);
		Для Каждого Интервал Из Значение Цикл
			ИнтервалНачала = Интервал;
			Прервать;
		КонецЦикла;				
		Значение = Диаграмма.ПолучитьЗначение(ТекущаяТочка, Серия);
		Для Каждого Интервал Из Значение Цикл
			ИнтервалКонца = Интервал;
			Прервать;
		КонецЦикла;				
		
		Если ИнтервалНачала = Неопределено ИЛИ ИнтервалКонца = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СвязьДобавленная = ИнтервалНачала.Добавить(ИнтервалКонца);
		
		Если Связь.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоНачало Тогда
			СвязьДобавленная.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
		ИначеЕсли Связь.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.НачалоОкончание Тогда
			СвязьДобавленная.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоКонец;
		ИначеЕсли Связь.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеНачало Тогда
			СвязьДобавленная.ТипСвязи = ТипСвязиДиаграммыГанта.КонецНачало;
		ИначеЕсли Связь.ТипЗависимости = Перечисления.ТипыЗависимостейПроектныхЗадач.ОкончаниеОкончание Тогда
			СвязьДобавленная.ТипСвязи = ТипСвязиДиаграммыГанта.КонецКонец;
		КонецЕсли;			
		
		Если ИнтервалНачала.Конец <= ИнтервалКонца.Начало Тогда
			СвязьДобавленная.Цвет = WebЦвета.Синий;
		Иначе			
			СвязьДобавленная.Цвет = WebЦвета.Красный;
		КонецЕсли;			
		
	КонецЦикла;				
	
КонецПроцедуры // СоздатьСвязи(Связи, Диаграмма, Серия)

&НаСервере
Функция ПолучитьЭлементДляМеток(Диаграмма)
	
	// Ищем элемент шкалы времени с ОтображатьПериодическиеМетки = Ложь
	Для Каждого Элемент Из Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы Цикл
		
		Если Элемент.ОтображатьПериодическиеМетки = Ложь Тогда
			ЭлементМеток = Элемент;
			Возврат ЭлементМеток;
		КонецЕсли;			
		
	КонецЦикла;						
	
	ЭлементМеток = Диаграмма.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
	ЭлементМеток.Единица = ТипЕдиницыШкалыВремени.День;
	ЭлементМеток.ОтображатьПериодическиеМетки = Ложь;
	
	Возврат ЭлементМеток;
	
КонецФункции // ПолучитьЭлементДляМеток(Диаграмма)

&НаКлиенте
Процедура ДиаграммаГантаПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	Попытка
		Значение = Интервал.Значение.Точка.Значение;
		Начало = Интервал.Начало;
		Конец = Интервал.Конец;
		
		ИзменитьЗадачуИзДиаграммыГанта(Значение, Начало, Конец);
	Исключение	
		ОтменаРедактирования = Истина;
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗадачуИзДиаграммыГанта(Задача, ИнтервалНачало, ИнтервалКонец)
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.Заблокировать();
	
	
	Если ИнтервалНачало <> ЗадачаОбъект.ПлановаяДатаНачала ИЛИ ИнтервалКонец <> ЗадачаОбъект.ДатаОкончания Тогда // перенесли отрезок
		
		ЗадачаОбъект.ПлановаяДатаНачала = НачалоДня(ИнтервалНачало);
		ЗадачаОбъект.ПлановаяПродолжительность = ( КонецДня(ИнтервалКонец) - НачалоДня(ИнтервалНачало))/(3600*24);
		
	КонецЕсли;	
	
	
	ЗадачаОбъект.Записать();
	ЗадачаОбъект.Разблокировать();
	
	ЗаполнитьДеревоЗадач();
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
//Взаимодейсвия

&НаКлиенте
Процедура УстановитьФильтрВзаимодейсвия()
	ТекущиеДанные = Элементы.ДеревоЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекущаяЗадача = ПредопределенноеЗначение("Справочник.ЗадачиПроектов.ПустаяСсылка");
	иначе
		ТекущаяЗадача = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	
	СписокВзаимодействия.Отбор.Элементы.Очистить();	
	ЭлементОтбора = СписокВзаимодействия.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Предмет");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;                 
	ЭлементОтбора.Использование = ИСТИНА;
	ЭлементОтбора.ПравоеЗначение = ТекущаяЗадача;
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач)

	ОбновленныеЗадачи = Новый Массив;
	
	Для Каждого ИзмененнаяЗадача Из МассивИзмененныхЗадач Цикл
		
		Если ОбновленныеЗадачи.Найти(ИзмененнаяЗадача) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;	
		ОбновленныеЗадачи.Добавить(ИзмененнаяЗадача);
		
		Индекс = -1;
		АК_РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоЗадач.ПолучитьЭлементы(), ИзмененнаяЗадача, Индекс);
		Если Индекс > -1 Тогда 
			СтрокаДерева = ДеревоЗадач.НайтиПоИдентификатору(Индекс);
			ЗаполнитьСтрокуДереваИзПроектнойЗадачи(СтрокаДерева, ИзмененнаяЗадача);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ЗаполнитьДиаграммуГанта();
	
КонецПроцедуры

&НаСервере
Процедура ВверхСервер()
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивСсылок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;
		Индекс = Неопределено;
		Для Каждого Элемент Из МассивСсылок Цикл
			Если Элемент.НомерЗадачиВУровне > Ссылка.НомерЗадачиВУровне Тогда
				Индекс = МассивСсылок.Найти(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Индекс = Неопределено Тогда
			МассивСсылок.Добавить(Ссылка);
		Иначе
			МассивСсылок.Вставить(Индекс, Ссылка); 
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		// Получение задачи с номером в уровне, меньшим на 1, чем текущий
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроектныеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ЗадачиПроектов КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Владелец
			|	И ПроектныеЗадачи.Родитель = &Родитель
			|	И Не ПометкаУдаления
			|	И ПроектныеЗадачи.акНомерЗадачиВУровне = &НомерЗадачиВУровне";
		Запрос.УстановитьПараметр("Владелец", Ссылка.Владелец);
		Запрос.УстановитьПараметр("Родитель", Ссылка.Родитель);
		Запрос.УстановитьПараметр("НомерЗадачиВУровне", Ссылка.акНомерЗадачиВУровне - 1);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			// сдвиг строк в дереве
			Идентификатор = -1;
			АК_РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
				ДеревоЗадач.ПолучитьЭлементы(),
				Ссылка,
				Идентификатор);
				
			СтрокаТекущейЗадачи = ДеревоЗадач.НайтиПоИдентификатору(Идентификатор);
			СтрокаРодительскойЗадачи = СтрокаТекущейЗадачи.ПолучитьРодителя();
			Если СтрокаРодительскойЗадачи = Неопределено Тогда
				СтрокаРодительскойЗадачи = ДеревоЗадач;	
			КонецЕсли;
			
			ИндексТекущейЗадачи = СтрокаРодительскойЗадачи.ПолучитьЭлементы().Индекс(СтрокаТекущейЗадачи);
			СтрокаРодительскойЗадачи.ПолучитьЭлементы().Сдвинуть(ИндексТекущейЗадачи, -1);
			
			// изменение реквизитов объектов
			ТекущаяЗадачаОбъект = Ссылка.ПолучитьОбъект();
			ПредыдущаяЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Буфер = ТекущаяЗадачаОбъект.акНомерЗадачиВУровне;
			ТекущаяЗадачаОбъект.акНомерЗадачиВУровне = ПредыдущаяЗадачаОбъект.акНомерЗадачиВУровне;
			ПредыдущаяЗадачаОбъект.акНомерЗадачиВУровне = Буфер;

			БуферСДР = ТекущаяЗадачаОбъект.акКодСДР;
			ТекущаяЗадачаОбъект.акКодСДР = ПредыдущаяЗадачаОбъект.акКодСДР;
			ПредыдущаяЗадачаОбъект.акКодСДР = БуферСДР;
			
			ТекущаяЗадачаОбъект.Записать();
			ПредыдущаяЗадачаОбъект.Записать();
			
			ИзмененныеЗадачи = Новый Массив;
			ИзмененныеЗадачи.Добавить(ТекущаяЗадачаОбъект.Ссылка);
			ИзмененныеЗадачи.Добавить(ПредыдущаяЗадачаОбъект.Ссылка);
			
			// заполнение кодов СДР
			АК_РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(ТекущаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			АК_РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(ПредыдущаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			
			// обновление последователей
			//ЗаполнитьДанныеОПоследователяхСпискаЗадач(ИзмененныеЗадачи, ИзмененныеЗадачи);
			ОбновитьИзмененныеСтрокиЗадач(ИзмененныеЗадачи);
			
 		КонецЕсли;
	КонецЦикла;
	УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	ЗаполнитьДиаграммуГанта();

	 
КонецПроцедуры

&НаКлиенте
Процедура Вверх(Команда)
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МассивВыделенныхзадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;
	
	ВверхСервер();
КонецПроцедуры

&НаСервере
Процедура ВнизСервер()
	
	МассивСсылок = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;
		Индекс = Неопределено;
		Для Каждого Элемент Из МассивСсылок Цикл
			Если Элемент.акНомерЗадачиВУровне < Ссылка.акНомерЗадачиВУровне Тогда
				Индекс = МассивСсылок.Найти(Элемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Индекс = Неопределено Тогда
			МассивСсылок.Добавить(Ссылка);
		Иначе
			МассивСсылок.Вставить(Индекс, Ссылка); 
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		// Получение задачи с номером в уровне, меньшим на 1, чем текущий
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроектныеЗадачи.Ссылка
			|ИЗ
			|	Справочник.ЗадачиПроектов КАК ПроектныеЗадачи
			|ГДЕ
			|	ПроектныеЗадачи.Владелец = &Владелец
			|	И ПроектныеЗадачи.Родитель = &Родитель
			|	И Не ПометкаУдаления
			|	И ПроектныеЗадачи.акНомерЗадачиВУровне = &НомерЗадачиВУровне";
			
		Запрос.УстановитьПараметр("Владелец", Ссылка.Владелец);
		Запрос.УстановитьПараметр("Родитель", Ссылка.Родитель);
		Запрос.УстановитьПараметр("НомерЗадачиВУровне", Ссылка.акНомерЗадачиВУровне + 1);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			// сдвиг строк в дереве	
			Идентификатор = -1;
			АК_РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(
				ДеревоЗадач.ПолучитьЭлементы(),
				Ссылка,
				Идентификатор);
			СтрокаТекущейЗадачи = ДеревоЗадач.НайтиПоИдентификатору(Идентификатор);
			СтрокаРодительскойЗадачи = СтрокаТекущейЗадачи.ПолучитьРодителя();
			Если СтрокаРодительскойЗадачи = Неопределено Тогда
				СтрокаРодительскойЗадачи = ДеревоЗадач;	
			КонецЕсли;
			ИндексТекущейзадачи = СтрокаРодительскойЗадачи.ПолучитьЭлементы().Индекс(СтрокаТекущейЗадачи);
			СтрокаРодительскойЗадачи.ПолучитьЭлементы().Сдвинуть(ИндексТекущейЗадачи, 1);
			
			// изменение реквизитов объектов
			ТекущаяЗадачаОбъект = Ссылка.ПолучитьОбъект();
			СледующаяЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			Буфер = ТекущаяЗадачаОбъект.акНомерЗадачиВУровне;
			ТекущаяЗадачаОбъект.акНомерЗадачиВУровне = СледующаяЗадачаОбъект.акНомерЗадачиВУровне;
			СледующаяЗадачаОбъект.акНомерЗадачиВУровне = Буфер;

			БуферСДР = ТекущаяЗадачаОбъект.акКодСДР;
			ТекущаяЗадачаОбъект.акКодСДР = СледующаяЗадачаОбъект.акКодСДР;
			СледующаяЗадачаОбъект.акКодСДР = БуферСДР;

			ТекущаяЗадачаОбъект.Записать();
			СледующаяЗадачаОбъект.Записать();
			
			ИзмененныеЗадачи = Новый Массив;
			ИзмененныеЗадачи.Добавить(ТекущаяЗадачаОбъект.Ссылка);
			ИзмененныеЗадачи.Добавить(СледующаяЗадачаОбъект.Ссылка);
			
			// заполнение кодов СДР
			АК_РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(ТекущаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			АК_РаботаСПроектами.ЗаполнитьКодыСДРПодчиненныхЗадач(СледующаяЗадачаОбъект.Ссылка, ИзмененныеЗадачи);
			
			// обновление последователей
			//ЗаполнитьДанныеОПоследователяхСпискаЗадач(ИзмененныеЗадачи, ИзмененныеЗадачи);
			ОбновитьИзмененныеСтрокиЗадач(ИзмененныеЗадачи);
			
		КонецЕсли;
	КонецЦикла;
	УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);	
	ЗаполнитьДиаграммуГанта();
	
КонецПроцедуры

&НаКлиенте
Процедура Вниз(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхзадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;
	
	ВнизСервер();
		
КонецПроцедуры

&НаСервере
Процедура НаУровеньВышеСервер(Ссылка, Родитель)
	
	// Выбор всех задачи одного с родителем уровня и сдвигаем номера на один вниз
	МассивЗадачУровняРодителя = 
		АК_РаботаСПроектами.ПолучитьМассивЗадачОдногоУровняСУказанной(Ссылка.Владелец, Родитель);
		
	// Подготовка номера для вставки подчиненной задачи на один уровень вверх
	КоличествоЭлементов = МассивЗадачУровняРодителя.Количество(); 
	Для Счетчик = 0 по КоличествоЭлементов - 1 Цикл
		Индекс = КоличествоЭлементов - Счетчик - 1;
		Задача = МассивЗадачУровняРодителя[Индекс];
		Если Задача.акНомерЗадачиВУровне > Родитель.акНомерЗадачиВУровне Тогда
			ЗадачаОбъект = Задача.ПолучитьОбъект();
			ЗадачаОбъект.акНомерЗадачиВУровне = ЗадачаОбъект.акНомерЗадачиВУровне + 1;
		Конецесли;
	КонецЦикла;
		
	ЗадачаОбъект = Ссылка.ПолучитьОбъект();
	РодительЗадачи = ЗадачаОбъект.Родитель;
	ЗадачаОбъект.Родитель = Родитель.Родитель;
	ЗадачаОбъект.акНомерЗадачиВУровне = Родитель.акНомерЗадачиВУровне + 1;
	ЗадачаОбъект.Записать();
		
	АК_РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(Ссылка.Владелец);
		
	ЗаполнитьДеревоЗадач();

КонецПроцедуры


&НаКлиенте
Процедура НаУровеньВыше(Команда)
	
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.ДеревоЗадач.ТекущиеДанные.ЗадачаРодитель) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхзадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;

	НаУровеньВышеСервер(
		Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка, 
		Элементы.ДеревоЗадач.ТекущиеДанные.ЗадачаРодитель);
		
    УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	РазвернутьДерево();
	АК_РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);

КонецПроцедуры

&НаСервере
Процедура НаУровеньНижеСервер(Ссылка, Родитель)
	
	// Вычисляем наличие соседней задачи, в которую помещается текущая задача
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроектныеЗадачи.Ссылка
		|ИЗ
		|	Справочник.ЗадачиПроектов КАК ПроектныеЗадачи
		|ГДЕ
		|	ПроектныеЗадачи.Родитель = &Родитель
		|	И ПроектныеЗадачи.Владелец = &Проект
		|	И НЕ ПроектныеЗадачи.ПометкаУдаления
		|	И ПроектныеЗадачи.акНомерЗадачиВУровне = &НомерВУровне - 1";
		
	Запрос.УстановитьПараметр("Родитель", Родитель);
	Запрос.УстановитьПараметр("НомерВУровне", Ссылка.акНомерЗадачиВУровне);
	Запрос.УстановитьПараметр("Проект", Ссылка.Владелец);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ОбъектЗадача = Ссылка.ПолучитьОбъект();
		РодительЗадачи = ОбъектЗадача.Родитель;
		ОбъектЗадача.Родитель = Выборка.Ссылка;
		ОбъектЗадача.акНомерЗадачиВУровне = АК_РаботаСПроектами.ПолучитьМаксимальныйНомерЗадачиУровня(
			Ссылка.Владелец,
			ОбъектЗадача.Родитель) + 1;
		ОбъектЗадача.Записать();
		
		АК_РаботаСПроектами.ЗаполнитьКодыСДРПроектныхЗадач(Ссылка.Владелец);
				
		ЗаполнитьДеревоЗадач();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаУровеньНиже(Команда)
	Если Элементы.ДеревоЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяЗадачаДоПеремещения = ТекущаяПроектнаяЗадача;
	МассивВыделенныхзадач = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
		Ссылка = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока).Ссылка;	
		МассивВыделенныхЗадач.Добавить(Ссылка);
	КонецЦикла;
	
	НаУровеньНижеСервер(
		Элементы.ДеревоЗадач.ТекущиеДанные.Ссылка, 
		Элементы.ДеревоЗадач.ТекущиеДанные.ЗадачаРодитель);
		
	Элементы.ДеревоЗадач.ВыделенныеСтроки.Очистить();
	
	УстановитьДоступностьКомандПеремещения(ТекущаяПроектнаяЗадача, ДеревоЗадач, Элементы);
	РазвернутьДерево();
	АК_РаботаСПроектамиКлиент.УстановитьТекущуюЗадачуВДеревеПоСсылке(Элементы.ДеревоЗадач, ДеревоЗадач, ТекущаяЗадачаДоПеремещения);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененаПроектнаяЗадача" И Параметр.Проект = Сделка Тогда 
		
		Индекс = -1;
		АК_РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоЗадач.ПолучитьЭлементы(), Параметр.ПроектнаяЗадача, Индекс);
		
		НайденнаяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Индекс);
		Если Параметр.Родитель <> НайденнаяСтрока.ЗадачаРодитель Тогда 
			ЗаполнитьДеревоЗадач();
			РазвернутьДерево();
		Иначе	
			ОбновитьИзмененныеСтрокиЗадач(Параметр.МассивИзмененныхЗадач);
		КонецЕсли;	
		
	КонецЕсли;	
		
	Если ИмяСобытия = "СозданаПроектнаяЗадача" И Параметр.Проект = Сделка Тогда  	
		
		Если ЗначениеЗаполнено(Параметр.Родитель) Тогда 
			Индекс = -1;
			АК_РаботаСПроектамиКлиентСервер.НайтиЗадачуВДеревеПоСсылке(ДеревоЗадач.ПолучитьЭлементы(), Параметр.Родитель, Индекс);
			
			НоваяСтрока = ДеревоЗадач.НайтиПоИдентификатору(Индекс).ПолучитьЭлементы().Добавить();
		Иначе
			НоваяСтрока = ДеревоЗадач.ПолучитьЭлементы().Добавить();
		КонецЕсли;	
		НоваяСтрока.Ссылка = Параметр.ПроектнаяЗадача;
		Элементы.ДеревоЗадач.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		
		МассивИзмененныхЗадач = Новый Массив;
		МассивИзмененныхЗадач.Добавить(Параметр.ПроектнаяЗадача);
		
		Для Каждого Строка Из Параметр.МассивИзмененныхЗадач Цикл
			МассивИзмененныхЗадач.Добавить(Строка);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Параметр.Родитель) Тогда 
			МассивИзмененныхЗадач.Добавить(Параметр.Родитель);	
		КонецЕсли;	
		
		ОбновитьИзмененныеСтрокиЗадач(МассивИзмененныхЗадач);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВзаимодействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ОткрытьЗначение(ТекущиеДанные.Ссылка);
КонецПроцедуры













