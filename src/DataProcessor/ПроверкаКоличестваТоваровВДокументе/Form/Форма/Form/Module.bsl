
&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаКлиенте
Перем ТекущиеДанныеИдентификатор; //используется для передачи текущей строки в обработчик ожидания

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	Объект.Ордер     	= Параметры.Ордер;
	Объект.Склад		= Параметры.Склад;
	Объект.Помещение	= Параметры.Помещение;
	ИспользуетсяАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Объект.Склад, Объект.Помещение);
	
	Если Не ЗначениеЗаполнено(Объект.Ордер) Тогда
		ТекстИсключения = НСтр("ru='Не предусмотрено непосредственное открытие формы обработки.'");
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	СтатусОрдера = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ордер, "Статус");
	
	Если НЕ Параметры.Свойство("РежимИсправления",РежимИсправления) Тогда
		РежимИсправления = Ложь;
	КонецЕсли;
	Если РежимИсправления Тогда
		Если ТипЗнч(Параметры.Ордер) = Тип("ДокументСсылка.РасходныйОрдерНаТовары")
		  И СтатусОрдера <> Перечисления.СтатусыРасходныхОрдеров.КОтгрузке
		  И СтатусОрдера <> Перечисления.СтатусыРасходныхОрдеров.Отгружен Тогда
			ТекстИсключения = НСтр("ru='Исправление количества в расходном ордере возможно, если он находится в статусе ""К отгрузке"" или ""Отгружен"".'");
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли ТипЗнч(Параметры.Ордер) = Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров")
		  И СтатусОрдера <> Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке Тогда
			ТекстИсключения = НСтр("ru='Исправление количества в ордере на перемещение товаров возможно, если он находится в статусе ""К отгрузке"".'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	Иначе
		Если ?(ТипЗнч(Параметры.Ордер) = Тип("ДокументСсылка.РасходныйОрдерНаТовары"),
			СтатусОрдера <> Перечисления.СтатусыРасходныхОрдеров.КПроверке,
			СтатусОрдера <> Перечисления.СтатусыОрдеровНаПеремещение.КПроверке) Тогда
			ТекстИсключения = НСтр("ru='Проверять количество можно только в ордере, находящемся в статусе ""К проверке"".'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения,"%Статус%",СтатусОрдера);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
	КонецЕсли;
	Если ИспользуетсяАдресноеХранение Тогда
		Элементы.ЗаданиеНаДобор.Видимость = Ложь;
		Элементы.ДекорацияКартинкаВнимание.Высота = 1;
		Элементы.ДекорацияИзлишкиПредупреждение.Высота = 1;
	Иначе
		Элементы.РаспоряжениеНаИнвентаризацию.Видимость = Ложь;
	КонецЕсли;
	
	ТаблицаТовары = Объект.Ордер.Товары.Выгрузить();
	ТаблицаТовары.Колонки.Количество.Имя         = "КоличествоВДокументе";
	ТаблицаТовары.Колонки.КоличествоУпаковок.Имя = "КоличествоУпаковокВДокументе";
	ТаблицаТовары.Колонки.Добавить("ЕстьНедобор");
	ТаблицаТовары.ЗаполнитьЗначения(Истина, "ЕстьНедобор");
	ТаблицаТовары.Колонки.Добавить("СтрокаИзДокумента");
	ТаблицаТовары.ЗаполнитьЗначения(Истина, "СтрокаИзДокумента");
	Объект.Товары.Загрузить(ТаблицаТовары);
	
	ТаблицаСерии = Объект.Ордер.Серии.Выгрузить();
	ТаблицаСерии.Колонки.Количество.Имя         = "КоличествоВДокументе";
	ТаблицаСерии.Колонки.КоличествоУпаковок.Имя = "КоличествоУпаковокВДокументе";
	Объект.Серии.Загрузить(ТаблицаСерии);
	
	Заголовок 		= Параметры.Заголовок;
	ОтборСтрок		= "Все";
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад,Помещение",Объект.Склад,Объект.Помещение));
	
	ПараметрыУказанияСерий = Новый ФиксированнаяСтруктура(НоменклатураСервер.ПараметрыУказанияСерий(Объект, Обработки.ПроверкаКоличестваТоваровВДокументе));
	УстановитьВидимостьЭлементовСерий();
	ЗаполнитьСтатусыУказанияСерийСервер();
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
		Объект.Товары,
		Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
			Новый Структура("Номенклатура", "ХарактеристикиИспользуются")
		)
	);
	ВариантУчетаНедобора = "Добрать";
	Если РежимИсправления Тогда
		Элементы.ЗавершитьПроверку.Заголовок = НСтр("ru='Завершить исправление >>'");
		Элементы.ВернутьсяКПроверке.Заголовок = НСтр("ru='<< Вернуться к исправлению'");
		ЗаполнитьФактПоУчетуСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВМассив(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// Неизвестные штрихкоды
	Если Источник = "ПодключаемоеОборудование"
		И ИмяСобытия = "НеизвестныеШтрихкоды"
		И Параметр.ФормаВладелец = УникальныйИдентификатор Тогда
		
		КэшированныеЗначения.Штрихкоды.Очистить();
		ДанныеШтрихкодов = Новый Массив;
		Для Каждого ПолученныйШтрихкод Из Параметр.ПолученыНовыеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		Для Каждого ПолученныйШтрихкод Из Параметр.ЗарегистрированныеШтрихкоды Цикл
			ДанныеШтрихкодов.Добавить(ПолученныйШтрихкод);
		КонецЦикла;
		
		ОбработатьШтрихкоды(ДанныеШтрихкодов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ПроверкаЗавершена Тогда
		Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОшибки Тогда
			
			ОтветНаВопрос = Вопрос(НСтр("ru = 'Отразить расхождения в учете перед закрытием обработки?'"), РежимДиалогаВопрос.ДаНетОтмена);
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
			ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				ОтразитьРасхожденияВУчетеКлиент(Ложь);
			КонецЕсли;
			
		Иначе
			ТекстВопроса = ?(РежимИсправления, НСтр("ru = 'Завершить исправление перед закрытием обработки?'"), НСтр("ru = 'Завершить проверку перед закрытием обработки?'"));
			ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
			Если ОтветНаВопрос = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
			ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				ЗавершитьПроверкуКлиент(Ложь);
				Если Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОшибки Тогда
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()

	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
	Если ИспользуетсяАдресноеХранение Тогда
		СохранитьНастройки();
	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтборСтрокПриИзменении(Элемент)
	Если ОтборСтрок = "ТолькоНедобор" Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьНедобор",Истина);
	ИначеЕсли ОтборСтрок = "ТолькоНеотгружаемые" Тогда
		Элементы.Товары.ОтборСтрок = Новый ФиксированнаяСтруктура("ЕстьНеотгружаемые",Истина);
	Иначе
		Элементы.Товары.ОтборСтрок = Неопределено;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	Перем ТекущаяСтрока;
	Перем СтруктураДействий;

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;

	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущаяСтрока.Характеристика);
	СтруктураДействий.Вставить("ПроверитьЗаполнитьУпаковкуПоВладельцу"      , ТекущаяСтрока.Упаковка);
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");

	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыУпаковкаПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура();
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий,	КэшированныеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокПриИзменении(Элемент)

	ТекущаяСтрока = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
 	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока,СтруктураДействий,КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Отказ = Истина;
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ОчиститьСообщения();
	
	УдаляемыеСтроки = Новый Массив;
	НеудаляемыеСтроки = Новый Массив;
	Для Каждого Идентификатор из Элементы.Товары.ВыделенныеСтроки Цикл
		СтрокаТаблицы = Элементы.Товары.ДанныеСтроки(Идентификатор);
		Если Не СтрокаТаблицы.СтрокаИзДокумента Тогда
			УдаляемыеСтроки.Добавить(СтрокаТаблицы);
			Если Идентификатор = ИдентификаторТекущейСтроки Тогда
				
				// Текущая строка удаляется - нужно перепозиционироваться.
				ИдентификаторПредыдущейСтроки = Неопределено;
				НайденаТекущаяСтрока = Ложь;
				НайденаНоваяТекущаяСтрока = Ложь;
				Для Каждого СтрокаТЧ Из Объект.Товары Цикл
					Если СтрокаТЧ.ПолучитьИдентификатор() = ИдентификаторТекущейСтроки Тогда
						НайденаТекущаяСтрока = Истина;
					Иначе
						Если НайденаТекущаяСтрока Тогда
							Если УдаляемыеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
								Элементы.Товары.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
								НайденаНоваяТекущаяСтрока = Истина;
								Прервать;
							КонецЕсли;
						Иначе
							Если УдаляемыеСтроки.Найти(СтрокаТЧ) = Неопределено Тогда
								ИдентификаторПредыдущейСтроки = СтрокаТЧ.ПолучитьИдентификатор();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если Не НайденаНоваяТекущаяСтрока Тогда
					Элементы.Товары.ТекущаяСтрока = ИдентификаторПредыдущейСтроки;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			НеудаляемыеСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТЧ из УдаляемыеСтроки Цикл
		Объект.Товары.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	Для Каждого СтрокаТЧ Из НеудаляемыеСтроки Цикл
			ТекстСообщения = НСтр("ru = 'Строку %НомерСтроки% удалить нельзя, т.к. она присутствует в ордере.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%НомерСтроки%", СтрокаТЧ.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", СтрокаТЧ.НомерСтроки, "НомерСтроки");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
	КонецЦикла;
	
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Копирование Тогда
		ТекущиеДанные.СтрокаИзДокумента = Ложь;
		ТекущиеДанные.КоличествоВДокументе = 0;
		ТекущиеДанные.КоличествоУпаковокВДокументе = 0;
	КонецЕсли;
	
	МожноРедактировать = (ТекущиеДанные.КоличествоВДокументе = 0);
	
	Элементы.ТоварыНоменклатура.ТолькоПросмотр = Не МожноРедактировать;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр = Не МожноРедактировать;
	Элементы.ТоварыУпаковка.ТолькоПросмотр = Не МожноРедактировать;
	
	НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
				Элемент,КэшированныеЗначения,ПараметрыУказанияСерий, Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий) Тогда
		
		ТекущаяСтрокаИдентификатор = ТекущиеДанные.ПолучитьИдентификатор();
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	Если НоменклатураКлиент.НеобходимоОбновитьСтатусыСерий(
		Элемент,КэшированныеЗначения,ПараметрыУказанияСерий,Истина) Тогда
		
		ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Неопределено, КэшированныеЗначения);
		НоменклатураКлиент.ОбновитьКешированныеЗначенияДляУчетаСерий(
					Элемент,КэшированныеЗначения,ПараметрыУказанияСерий);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущаяСтрокаИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
	МожноРедактировать = (ТекущиеДанные.КоличествоВДокументе = 0);
	
	Элементы.ТоварыНоменклатура.ТолькоПросмотр = Не МожноРедактировать;
	Элементы.ТоварыХарактеристика.ТолькоПросмотр = Не МожноРедактировать;
	Элементы.ТоварыУпаковка.ТолькоПросмотр = Не МожноРедактировать;
	
	Если Поле = Элементы.ТоварыСтатусУказанияСерий
		Или ((Поле = Элементы.ТоварыКоличествоУпаковок
		Или Поле = Элементы.ТоварыКоличествоУпаковокНеОтгружать)
		И Элементы.Товары.ТекущиеДанные.СтатусУказанияСерий <> 0) Тогда
		СтандартнаяОбработка = Ложь;
		Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
			ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
			ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
			
			ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
			
			Если ЗначениеВозврата <> Неопределено Тогда
				ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий,ТекущиеДанныеИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоУпаковокНеОтгружатьПриИзменении(Элемент)

	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьКоличествоНеОтгружать");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "НеОтгружать");
	СтруктураДействий.Вставить("ЗаполнитьФлагиНедоборНеотгружаемые");
	
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные,СтруктураДействий,КэшированныеЗначения);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗавершитьПроверку(Команда)
	ЗавершитьПроверкуКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ВернутьсяКПроверке(Команда)
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаТовары;
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВУчете(Команда)
	ОтразитьРасхожденияВУчетеКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить()
	
	ОчиститьСообщения();
	ТекШтрихкод = "";
	Если ШтрихкодированиеНоменклатурыКлиент.ВвестиШтрихкод(ТекШтрихкод) Тогда
		ОбработатьШтрихкоды(ШтрихкодированиеНоменклатурыКлиент.ПолучитьСтруктуруДанныхШтрихкода(ТекШтрихкод, 1));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзТСД(Команда)
	Перем ТаблицаЗагрузкиИзТСД;
	
	МенеджерОборудованияКлиент.ЗагрузитьДанныеИзТСД(УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД);
	
	ОбработатьШтрихкоды(ТаблицаЗагрузкиИзТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПоПлану(Команда)
	НайденныеСтроки		= Объект.Товары.НайтиСтроки(Новый Структура("Количество, СтрокаИзДокумента", 0, Истина));
	ДобавленныеСтроки	= Объект.Товары.НайтиСтроки(Новый Структура("СтрокаИзДокумента", Ложь));
	Если НайденныеСтроки.Количество() <> Объект.Товары.Количество() - ДобавленныеСтроки.Количество() Тогда
		
		ТекстВопроса = НСтр("ru='В табличной части присутствуют строки, в которых заполнена колонка ""В наличии"".
		                    |При автоматическом заполнении эти данные будут утеряны. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьФактПоУчетуСервер();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКачество(Команда)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru='Выберите строку табличной части'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	ИначеЕсли ТекущиеДанные.СтрокаИзДокумента Тогда
		ОчиститьСообщения();
		ТекстСообщения = НСтр("ru='Невозможно изменить качество в строке, которая есть в ордере. Воспользуйтесь командой ""Разбить строку"".'");
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", ТекущиеДанные.НомерСтроки, "НомерСтроки");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект");
		Возврат
	КонецЕсли;
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПроверитьХарактеристикуПоВладельцу", ТекущиеДанные.Характеристика);
	СтруктураДействий.Вставить("ПроверитьУпаковкуПоВладельцу", ТекущиеДанные.Упаковка);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Характеристика) Тогда
		СтруктураДействий.Вставить("ЗаполнитьХарактеристикуНекачественногоТовара", ТекущиеДанные.Характеристика);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Упаковка) Тогда
		СтруктураДействий.Вставить("ЗаполнитьУпаковкуНекачественногоТовара", ТекущиеДанные.Упаковка);
	КонецЕсли;	
	
	ИзменениеКачества = СкладыКлиент.ИзменитьКачество(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
	
	Если ИзменениеКачества Тогда
		ЗаполнитьСтатусыУказанияСерийСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьСтроку(Команда)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	ТаблицаФормы  = Элементы.Товары;
	ДанныеТаблицы = Объект.Товары;
	
	НоваяСтрока = ОбщегоНазначенияУТКлиент.РазбитьСтрокуТЧ(ДанныеТаблицы, ТаблицаФормы,,,Истина);
	
	Если НоваяСтрока <> Неопределено Тогда
		НоваяСтрока.СтрокаИзДокумента       = Ложь;
		НоваяСтрока.ЕстьНеотгружаемые       = Истина;
		НоваяСтрока.КоличествоВДокументе         = 0;
		НоваяСтрока.КоличествоУпаковокВДокументе = 0;
		НоваяСтрока.КоличествоУпаковокНеОтгружать 	= НоваяСтрока.КоличествоУпаковок;
		НоваяСтрока.КоличествоНеОтгружать 			= НоваяСтрока.Количество;
		
		СтруктураДействий = Новый Структура;
		ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);	
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, КэшированныеЗначения);
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущиеДанные, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНаДобор(Команда)
	ОчиститьСообщения();
	
	СтрокиНедобора = Объект.Недостачи.НайтиСтроки(Новый Структура("КоличествоУпаковокНедобор", 0));
	Если СтрокиНедобора.Количество() = Объект.Недостачи.Количество() Тогда
		ТекстСообщения = НСтр("ru='Невозможно напечатать задание на добор. Количество товаров в ордере соответствует количеству товаров к отгрузке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(Объект.Ордер);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
	"Обработка.ПроверкаКоличестваТоваровВДокументе",
	"ЗаданиеНаДоборТоваров",
	ПараметрКоманды,
	ЭтаФорма, // Форма владелец
	Новый Структура("ИмяФормы, ТаблицаТоваров, Ордер",
	"ЗаданиеНаДобор", Объект.Недостачи, Объект.Ордер)
	);
КонецПроцедуры

&НаКлиенте
Процедура ВариантУчетаПриИзменении(Элемент)
	
	Элементы.ЗаданиеНаДобор.Доступность = (ВариантУчетаНедобора = "Добрать");
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьСерии(Команда)
	
	Если НоменклатураКлиент.ПроверитьВозможностьУказанияСерий(ЭтаФорма,ПараметрыУказанияСерий) Тогда
		ТекущиеДанныеИдентификатор = Элементы.Товары.ТекущиеДанные.ПолучитьИдентификатор();
		ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
		
		ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы,ПараметрыФормыУказанияСерий,ЭтаФорма);
		
		Если ЗначениеВозврата <> Неопределено Тогда
			ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ТекущиеДанныеИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Процедура ОбработатьШтрихкоды(ДанныеШтрихкодов)
	Модифицированность = Истина;
	
	СтруктураДействийСДобавленнымиСтроками = Новый Структура;
 	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСДобавленнымиСтроками);

	СтруктураДействийСИзмененнымиСтроками = Новый Структура;
 	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействийСИзмененнымиСтроками);

	СтруктураДействий = ШтрихкодированиеНоменклатурыКлиент.ПараметрыОбработкиШтрихкодов();

	СтруктураДействий.Штрихкоды                              = ДанныеШтрихкодов;
	СтруктураДействий.СтруктураДействийСДобавленнымиСтроками = СтруктураДействийСДобавленнымиСтроками;
	СтруктураДействий.СтруктураДействийСИзмененнымиСтроками  = СтруктураДействийСИзмененнымиСтроками;
	СтруктураДействий.ПараметрыУказанияСерий                 = ПараметрыУказанияСерий;
	СтруктураДействий.БлокироватьДанныеФормы                 = Ложь;
	СтруктураДействий.ТолькоТовары                           = Истина;
	
	ОбработатьШтрихкодыСервер(СтруктураДействий,КэшированныеЗначения);
	
	ШтрихкодированиеНоменклатурыКлиент.ОбработатьНеизвестныеШтрихкоды(СтруктураДействий,КэшированныеЗначения,ЭтаФорма);
	
	Если СтруктураДействий.МассивСтрокССериями.Количество() = 1
		И НоменклатураКлиентСервер.НеобходимоРегистрироватьСерии(ПараметрыУказанияСерий) Тогда
		
		ТекущиеДанныеИдентификатор = СтруктураДействий.МассивСтрокССериями[0];
		
		ПодключитьОбработчикОжидания("ОткрытьФормуУказанияСерий",0.1,Истина);
		
	КонецЕсли;

	Если СтруктураДействий.ТекущаяСтрока <> Неопределено Тогда
		Элементы.Товары.ТекущаяСтрока = СтруктураДействий.ТекущаяСтрока;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкодыСервер(СтруктураПараметровДействия,КэшированныеЗначения)
	ШтрихкодированиеНоменклатурыСервер.ОбработатьШтрихкоды(ЭтаФорма,Объект,СтруктураПараметровДействия,КэшированныеЗначения);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Серии

&НаСервере
Процедура ОбработатьУказаниеСерийНаСервере(ПараметрыУказанияСерий,ПараметрыФормыУказанияСерий, ТекущаяСтрокаТовары) Экспорт
	
	ИмяТЧТовары = "Товары";
	ИмяТЧСерии = "Серии";
	
	ТекстПоляСвязи = "";
	
	Для Каждого СтрМас из ПараметрыУказанияСерий.ПоляСвязи Цикл
		ТекстПоляСвязи = ТекстПоляСвязи + "," + СтрМас  ;
	КонецЦикла;
	
	ЕстьУпаковки = ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено; 
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(ПараметрыФормыУказанияСерий.АдресВоВременномХранилище);
	ТаблицаСерий = СтруктураПараметров.ТаблицаВозврата;
	
	ТекущиеДанные = Объект.Товары.НайтиПоИдентификатору(ТекущаяСтрокаТовары);
	ТекущиеДанные.КоличествоУпаковок            = ТаблицаСерий.Итог("КоличествоУпаковок");
	ТекущиеДанные.Количество                    = ТаблицаСерий.Итог("Количество");
	ТекущиеДанные.КоличествоУпаковокНеОтгружать = ТаблицаСерий.Итог("КоличествоУпаковокНеОтгружать");
	ТекущиеДанные.КоличествоНеОтгружать         = ТаблицаСерий.Итог("КоличествоНеОтгружать");
	ТекущиеДанные.ЕстьРасхожденияПоСериям       = СтруктураПараметров.ЕстьРасхожденияПоСериям;
	
	ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущиеДанные, Новый Структура("ЗаполнитьФлагиНедоборНеотгружаемые"), Неопределено);
	
	СерииУказаныПолностью = ТекущиеДанные.Количество > 0;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика"+ТекстПоляСвязи);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска,ПараметрыФормыУказанияСерий);
	
	НайденныеСтрокиСерий = Объект[ИмяТЧСерии].НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрМас из НайденныеСтрокиСерий Цикл
		
		Объект[ИмяТЧСерии].Удалить(СтрМас);
		
	КонецЦикла;
	
	Для Каждого СтрТабл из ТаблицаСерий Цикл
		
		НоваяСтрока = Объект[ИмяТЧСерии].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ПараметрыФормыУказанияСерий);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
	
	КонецЦикла;
	

	НайденныеСтрокиТоваров = Объект[ИмяТЧТовары].НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрМас из НайденныеСтрокиТоваров Цикл
		
		ЧетныйСтатус = СтрМас.СтатусУказанияСерий % 2 = 0;
		
		Если Не ЧетныйСтатус
			И СерииУказаныПолностью Тогда
			СтрМас.СтатусУказанияСерий = СтрМас.СтатусУказанияСерий + 1;
		ИначеЕсли ЧетныйСтатус
			И Не СерииУказаныПолностью Тогда
			СтрМас.СтатусУказанияСерий = СтрМас.СтатусУказанияСерий - 1;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовСерий ()
	Элементы.ТоварыСтатусУказанияСерий.Видимость = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
	Элементы.ТоварыУказатьСерии.Видимость        = ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий, ТекущаяСтрокаТовары)
	
	ОбработатьУказаниеСерийНаСервере(ПараметрыУказанияСерий, ПараметрыФормыУказанияСерий, ТекущаяСтрокаТовары);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(ТекущаяСтрокаИдентификатор, КэшированныеЗначения)
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерийПриОкончанииРедактированияСтрокиТЧ(Объект, 
				ПараметрыУказанияСерий, ТекущаяСтрокаИдентификатор, КэшированныеЗначения);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыУказанияСерийСервер()
	
	НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(Объект,ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор)
	
	Возврат НоменклатураСервер.ПоместитьСерииВХранилище(Объект, ПараметрыУказанияСерий, ТекущиеДанныеИдентификатор, ЭтаФорма);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуУказанияСерий()
	Если ТекущиеДанныеИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыУказанияСерий = ПараметрыФормыУказанияСерий(ТекущиеДанныеИдентификатор);
	
	ЗначениеВозврата = ОткрытьФормуМодально(ПараметрыФормыУказанияСерий.ИмяФормы ,ПараметрыФормыУказанияСерий,ЭтаФорма);
	
	Если ЗначениеВозврата <> Неопределено Тогда
		ОбработатьУказаниеСерийСервер(ПараметрыФормыУказанияСерий,ТекущиеДанныеИдентификатор);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура СохранитьНастройки()
	
	Перем Настройки;
	
	Настройки = Новый Структура;
	Настройки.Вставить("РаспоряжениеНаИнвентаризацию",Объект.РаспоряжениеНаИнвентаризацию);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработки.ПроверкаКоличестваТоваровВДокументе", "Форма", Настройки);
	
КонецПроцедуры // ()

&НаСервере
Процедура ЗагрузитьНастройки()
	
	Перем ЗначениеНастроек;
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработки.ПроверкаКоличестваТоваровВДокументе", "Форма");
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗначениеНастроек.Свойство("РаспоряжениеНаИнвентаризацию",Объект.РаспоряжениеНаИнвентаризацию);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ЗавершитьПроверкуСервер()
	
	Отказ = Ложь;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Результат = ОбработкаОбъект.ЗавершитьПроверку(ПараметрыУказанияСерий, ИспользуетсяАдресноеХранение);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Элементы.ГруппаИзлишки.Видимость = Объект.Излишки.Количество() <> 0;
	Элементы.ГруппаНедостачи.Видимость = Объект.Недостачи.Количество() <> 0;
	Если Объект.Излишки.Количество() <> 0
		Или Объект.Недостачи.Количество() <> 0 Тогда
		НадписьОбОшибках = ?(РежимИсправления, НСтр("ru='При исправлении обнаружены расхождения товаров по ордеру'"), НСтр("ru='При проверке обнаружены расхождения товаров по ордеру'"));
	КонецЕсли;
	
	Если ИспользуетсяАдресноеХранение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.КоличествоУпаковокВДокументе - ТаблицаТовары.КоличествоУпаковок > 0
		|			ТОГДА ТаблицаТовары.КоличествоУпаковокВДокументе - ТаблицаТовары.КоличествоУпаковок
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоУпаковокНедостача,
		|	ВЫБОР
		|		КОГДА ТаблицаТовары.КоличествоУпаковокВДокументе - ТаблицаТовары.КоличествоУпаковок < 0
		|			ТОГДА -(ТаблицаТовары.КоличествоУпаковокВДокументе - ТаблицаТовары.КоличествоУпаковок)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоУпаковокИзлишек
		|ПОМЕСТИТЬ ВТТовары
		|ИЗ
		|	&ТаблицаТовары КАК ТаблицаТовары
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ТаблицаТовары.КоличествоУпаковокНедостача) КАК КоличествоУпаковокНедостача,
		|	СУММА(ТаблицаТовары.КоличествоУпаковокИзлишек) КАК КоличествоУпаковокИзлишек
		|ИЗ
		|	ВТТовары КАК ТаблицаТовары
		|
		|ИМЕЮЩИЕ
		|	(СУММА(ТаблицаТовары.КоличествоУпаковокНедостача) > 0
		|		ИЛИ СУММА(ТаблицаТовары.КоличествоУпаковокИзлишек) > 0)";
		Запрос.УстановитьПараметр("ТаблицаТовары", Объект.Товары.Выгрузить());
		ЕстьНедостачиИзлишки = НЕ Запрос.Выполнить().Пустой();
		Если НЕ ЕстьНедостачиИзлишки Тогда
			Объект.РаспоряжениеНаИнвентаризацию = Документы.РаспоряжениеНаИнвентаризациюТоваров.ПустаяСсылка();
			Элементы.РаспоряжениеНаИнвентаризацию.Видимость = Ложь;
		Иначе
			ЗагрузитьНастройки();
			Объект.РаспоряжениеНаИнвентаризацию = Документы.РаспоряжениеНаИнвентаризациюТоваров.РаспоряжениеПоУмолчанию(Объект.Склад, Объект.РаспоряжениеНаИнвентаризацию);
			Элементы.РаспоряжениеНаИнвентаризацию.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФактПоУчетуСервер()
	Для Каждого СтрТабл из Объект.Товары Цикл
		//Если СтрТабл.СтрокаИзДокумента
		//	//Если серии указываются по факту отбора, то заполнять количество по факту,
		//	//можно только указывая серии
		//	И СтрТабл.СтатусУказанияСерий <> 1 
		//	И СтрТабл.СтатусУказанияСерий <> 2 
		//	И СтрТабл.СтатусУказанияСерий <> 3 
		//	И СтрТабл.СтатусУказанияСерий <> 4 Тогда
			СтрТабл.Количество				= СтрТабл.КоличествоВДокументе;
			СтрТабл.КоличествоУпаковок		= СтрТабл.КоличествоУпаковокВДокументе;
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(СтрТабл,Новый Структура("ЗаполнитьФлагиНедоборНеотгружаемые"),Неопределено);
		//КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрТабл из Объект.Серии Цикл
		Если СтрТабл.КоличествоУпаковокВДокументе <> 0 Тогда
			СтрТабл.Количество				= СтрТабл.КоличествоВДокументе;
			СтрТабл.КоличествоУпаковок		= СтрТабл.КоличествоУпаковокВДокументе;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьСтатусыУказанияСерийСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверкуКлиент(Закрывать = Истина)
	ОчиститьСообщения();
	
	ЗавершитьПроверку = ЗавершитьПроверкуСервер();
	
	Если ЗавершитьПроверку = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Отказ = ЗавершитьПроверку;
	
	Если Не Отказ Тогда
		Если Объект.Излишки.Количество() > 0
			Или Объект.Недостачи.Количество() > 0 Тогда
			
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаОшибки;
			Возврат;
		КонецЕсли;
	Иначе
		
		Если ТипЗнч(Объект.Ордер) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			Оповестить("Запись_РасходныйОрдерНаТовары",Новый Структура,Объект.Ордер);
		Иначе
			Оповестить("Запись_ОрдерНаПеремещениеТоваров",Новый Структура,Объект.Ордер);
		КонецЕсли;
		
		ПроверкаЗавершена = Истина;
		Если Закрывать Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьРасхожденияВУчетеКлиент(Закрывать = Истина)
	ОчиститьСообщения();
	Отказ = Ложь;
	ОтразитьРасхожденияВУчетеСервер(Отказ);
	
	Если Не Отказ Тогда
		Если ИспользуетсяАдресноеХранение Тогда
			Оповестить("Запись_ОтражениеРезультатовПроверкиОрдераНаТовары",Новый Структура,РезультатПроверкиОрдераНаТовары);
		КонецЕсли;
		
		Если ТипЗнч(Объект.Ордер) = Тип("ДокументСсылка.РасходныйОрдерНаТовары") Тогда
			Оповестить("Запись_РасходныйОрдерНаТовары",Новый Структура,Объект.Ордер);
		Иначе
			Оповестить("Запись_ОрдерНаПеремещениеТоваров",Новый Структура,Объект.Ордер);
		КонецЕсли;
		
		Текст = НСтр("ru='Создание:'");
		
		ПоказатьОповещениеПользователя(Текст, ПолучитьНавигационнуюСсылку(РезультатПроверкиОрдераНаТовары),РезультатПроверкиОрдераНаТовары,БиблиотекаКартинок.Информация32);
		
		ПроверкаЗавершена = Истина;
		Если Закрывать Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтразитьРасхожденияВУчетеСервер(Отказ)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыУказанияСерий", ПараметрыУказанияСерий);
	СтруктураПараметров.Вставить("ИспользуетсяАдресноеХранение", ИспользуетсяАдресноеХранение);
	СтруктураПараметров.Вставить("РежимИсправления", РежимИсправления);
	СтруктураПараметров.Вставить("ВариантУчетаНедобора", ВариантУчетаНедобора);
	СтруктураПараметров.Вставить("ЕстьНедостачиИзлишки", ЕстьНедостачиИзлишки);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Отказ = НЕ ОбработкаОбъект.ОтразитьРасхожденияВУчете(СтруктураПараметров, РезультатПроверкиОрдераНаТовары);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	СтруктураДействий.Вставить("ПересчитатьКоличествоНеОтгружать");
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиницСуффикс", "НеОтгружать");
	СтруктураДействий.Вставить("ЗаполнитьФлагиНедоборНеотгружаемые");
	
КонецПроцедуры
