&НаКлиенте
Перем КэшируемыеЗначения;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
	
		Возврат;
	
	КонецЕсли;

	//Заполним параметры используемые в запросах
	Объект.Параметры.Очистить();
	ПараметрыОбработки = Объект.Параметры.Добавить();
	
	ПараметрыОбработки.ИспользоватьХарактеристикиНоменклатуры
		= ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
	ПараметрыОбработки.НачалоПериода = НачалоДня(ТекущаяДатаСеанса());
	ПараметрыОбработки.ИспользоватьОбособленноеОбеспечениеЗаказов
		= ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	ПараметрыОбработки.РассчитыватьРекомендуемыйМетод = 
		ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВаловойПрибыли")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоВыручке")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьABCXYZКлассификациюНоменклатурыПоКоличествуПродаж");
	
	ПараметрыОбработки.ПолучатьАльтернативныеСпособыКонтекст = Ложь;
	ПараметрыОбработки.УмолчаниеКалендарь = Константы.ОсновнойКалендарьПредприятия.Получить();
	
	КлючевыеДаты = 
		Обработки.ОбеспечениеПотребностей.ПолучитьДатыЗаказаПоКалендарю(
			ПараметрыОбработки.УмолчаниеКалендарь, ПараметрыОбработки.НачалоПериода);
	ПараметрыОбработки.УмолчаниеДатаЗаказа           = КлючевыеДаты.ДатаЗаказа;
	ПараметрыОбработки.УмолчаниеДатаСледующегоЗаказа = КлючевыеДаты.ДатаСледующегоЗаказа;
	
	//Константы, используемые для выбора метода вычисления количества к заказу
	
	//Заполнение заголовков колонок корзины заказов.
	ЕдиницаИзмеренияВеса                    = Константы.ЕдиницаИзмеренияВеса.Получить();
	Элементы.ВесЗаказа.Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = ""Вес (%1)"""), Строка(ЕдиницаИзмеренияВеса)); 

	ВалютаУправленческогоУчета              = Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.ГруппаСуммаЗаказа.Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = ""Сумма (%1)"""), Строка(ВалютаУправленческогоУчета)); 
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	АвтоЗаголовокФормы = ОбработкаОбъект.Метаданные().Синоним;
	
	//Инициализация компоновщика настроек для отображения таблицы с отборами на первом шаге помощника.
	ИнициализироватьКомпоновщикНастроекДляОтборов();
	
	ИмяНастройкиОтборов = "Настройка";
	
	ВосстановитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ПолучитьПодтверждениеПриСменеСтраницыПомощника() Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройки();
	
КонецПроцедуры 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда 
		
		Элементы.СтраницыВариантыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
		
	Иначе 
		
		Элементы.СтраницыВариантыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныеОтборы;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	СтрокаТаблицыОбъекты = Элементы.Объекты.ТекущиеДанные;
	Если СтрокаТаблицыОбъекты = Неопределено Тогда 
		Возврат;
	Конецесли;
	
	//Получены отмеченные поставки из формы заказов другими способами.
	Если ВыбранноеЗначение.Свойство("МассивПоставок") Тогда 

		//Отменим поставки, которые действовали до открытия формы поставок другими сопособами.
		ОтразитьПоставкуВИтогах(ЭтаФорма, СтрокаТаблицыОбъекты, 0);
		ПоставкиРучнойНастройки = СтрокаТаблицыОбъекты.ПоставкиРучнойНастройки;
		
		Для Каждого Поставка Из ПоставкиРучнойНастройки Цикл
			
			ОтразитьПоставкуВИтогах(ЭтаФорма, Поставка, 0, СтрокаТаблицыОбъекты);
			
		КонецЦикла;
		ПоставкиРучнойНастройки.Очистить();
		
		//Добавим введенные пользователем поставки.
		Для Индекс = 0 По ВыбранноеЗначение.МассивПоставок.Количество() - 1 Цикл
			
			НоваяПоставка = ВыбранноеЗначение.МассивПоставок[Индекс];
			Если НоваяПоставка.СпособЯвляетсяОсновным Тогда
				
				ОсновнаяПоставка = НоваяПоставка;
				
			Иначе
				
				Поставка = ПоставкиРучнойНастройки.Добавить();
				ЗаполнитьЗначенияСвойств(Поставка, НоваяПоставка, );
				ОтразитьПоставкуВИтогах(ЭтаФорма, Поставка, Поставка.КоличествоКЗаказу, СтрокаТаблицыОбъекты);
				
			КонецЕсли;
			
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбъекты, ОсновнаяПоставка); 
		//Внесем изменения в данные итоговые показатели прогноза остатка всвязи с изменением ручных поставок.
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбъекты, ВыбранноеЗначение.ПрогнозОстатка);
		
		Если СтрокаТаблицыОбъекты.ОтметитьКЗаказу Тогда 
			
			ОтразитьПоставкуВИтогах(ЭтаФорма, СтрокаТаблицыОбъекты, СтрокаТаблицыОбъекты.КоличествоКЗаказу);
			
		Иначе 
			
			СтрокаТаблицыОбъекты.КоличествоКЗаказу = РассчитатьРекомендацииСТекстомНаКлиенте(СтрокаТаблицыОбъекты);
			
		КонецЕсли;
		
		ОбъектыПриАктивизацииСтроки(0);
		УстановитьОтборСтрок();
		
	КонецЕсли;
	
	Если ВыбранноеЗначение.Свойство("ПараметрыПоставкиОптимальные") Тогда 
		
		Если СтрокаТаблицыОбъекты.ОтметитьКЗаказу Тогда 
		
			//Отразить отмену поставки в таблицах итогов.
			ОтразитьПоставкуВИтогах(ЭтаФорма, СтрокаТаблицыОбъекты, 0);
			
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбъекты, ВыбранноеЗначение.ПараметрыПоставкиОптимальные);
		
		Если СтрокаТаблицыОбъекты.ОтметитьКЗаказу Тогда 
		
			//Отразить поставку в таблице итогов с новыми параметрами
			ОтразитьПоставкуВИтогах(ЭтаФорма, СтрокаТаблицыОбъекты, СтрокаТаблицыОбъекты.КоличествоКЗаказу);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение.Свойство("ИзменениеОсновногоСпособаОбеспечения") Тогда 
		
		Если ВыбранноеЗначение.ИзменениеОсновногоСпособаОбеспечения.Количество() > 0 
			ИЛИ ВыбранноеЗначение.ИзменениеРеквизитовСпособаОбеспечения.Количество() > 0 Тогда
			
			АналитикаСтроки = 
				Новый Структура(
					"Номенклатура, Характеристика, Склад", 
					СтрокаТаблицыОбъекты.Номенклатура, СтрокаТаблицыОбъекты.Характеристика, СтрокаТаблицыОбъекты.Склад
				);
				
			КоличествоИзмененныхСтрок = 
				ОбновитьОбъектыСИзменениемСпособа(
					ВыбранноеЗначение.ИзменениеОсновногоСпособаОбеспечения,
					ВыбранноеЗначение.ИзменениеРеквизитовСпособаОбеспечения,
					АналитикаСтроки
			);
			
			СтрокаТаблицыОбъекты.ВнесеныИзменения = Ложь;
			Если КоличествоИзмененныхСтрок > 0 Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ""Обновлено строк: %1."""), КоличествоИзмененныхСтрок);
				ПоказатьОповещениеПользователя(Текст, , 
					?(КоличествоИзмененныхСтрок > 1, 
						Нстр("ru = ""Подсвечены обновленные строки, в которых ранее были зафиксированы объемы заказов."""), 
						""
					), БиблиотекаКартинок.Информация32);
			КонецЕсли;
			ОбъектыПриАктивизацииСтроки(0);
			УстановитьОтборСтрок();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет станадртную картинку состояния документа при закрытии формы документа заказа.

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия    = "Запись_ЗаказНаПеремещение" 
		ИЛИ ИмяСобытия = "Запись_ЗаказНаСборку" 
		ИЛИ ИмяСобытия = "Запись_ЗаказПоставщику" Тогда
		
		ПараметрыОтбора = Новый Структура("Документ", Источник);
		ОбновитьРеквизитыТаблицыДокументов(ПараметрыОтбора, Источник);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
//Серверные отборы.

&НаКлиенте
Процедура ОтборПоНазначениюПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоНазначению);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "Назначение", ОтборПоНазначению, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПодразделениюПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоПодразделению);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "Подразделение", ОтборПоПодразделению, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСкладуПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоСкладу);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "Склад", ОтборПоСкладу, ЭтоОтборПоГруппе);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоМетодуУправленияЗапасамиПриИзменении(Элемент)
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "МетодУправленияЗапасами", ОтборПоМетодуУправленияЗапасами, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСегментуПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоСегменту);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "СегментНоменклатуры", ОтборПоСегменту, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСпособуОбеспеченияПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоСпособуОбеспечения);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "СпособОбеспечения", ОтборПоСпособуОбеспечения, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНоменклатуреПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоНоменклатуре);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "Номенклатура", ОтборПоНоменклатуре, ЭтоОтборПоГруппе);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТипуОбеспеченияПриИзменении(Элемент)
	
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "ТипОбеспечения", ОтборПоТипуОбеспечения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоИсточникуОбеспеченияПриИзменении(Элемент)
	
	ЭтоОтборПоГруппе = ЭтоОтборПоГруппе(ОтборПоИсточникуОбеспечения);
	ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, "ИсточникОбеспечения", ОтборПоИсточникуОбеспечения, ЭтоОтборПоГруппе);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Гиперссылки.

&НаКлиенте
Процедура ИспользоватьПроизвольныеОтборыНажатие(Элемент)
	
	Элементы.СтраницыВариантыОтборов.ТекущаяСтраница = Элементы.СтраницаПроизвольныеОтборы;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПростыеОтборыНажатие(Элемент)
	
	Если ОтразитьОтборКомпоновкиВПростыхОтборах() Тогда	
		
		Элементы.СтраницыВариантыОтборов.ТекущаяСтраница = Элементы.СтраницаПростыеОтборы;
		
	Иначе
		
		Предупреждение("ru = ""Установлены сложные отборы, вариант использования простых отборов недоступен.""");
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ОБЪЕКТЫ

////////////////////////////////////////////////////////////////////////////////
//Ограничивающие действия пользователя с полями таблицы.

&НаКлиенте
Процедура СпособОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НазначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПоставкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура КалендарьПоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияПриИзменении(Элемент)
	
	Поставка = Элементы.Объекты.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(Поставка.СпособОбеспечения) Тогда
		
		Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка");
		Если ТипЗнч(Поставка.ИсточникОбеспечения) <> Тип("СправочникСсылка.Партнеры") Тогда
			
			Поставка.ИсточникОбеспечения = ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Открытие вспомогательных форм.

// Открытие формы редактирования альтернативных поставок.

&НаКлиенте
Процедура ОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаТаблицыОбъекты = Элементы.Объекты.ТекущиеДанные;
	
	Если Поле = Элементы.КоличествоДругиеСпособы Тогда
		
		ПараметрыФормы = Новый Структура("МассивПоставок");
		
		ПараметрыФормы.МассивПоставок = Новый Массив();
		
		ОсновнаяПоставка = 
			Новый Структура("
				| СпособОбеспечения,
				| ТипОбеспечения,
				| ЦенаВВалютеУправленческогоУчета,
				| ЦенаВВалютеСоглашения,
				| ИсточникОбеспечения,
				| Соглашение,
				| УсловиеЦены,
				| ВалютаСоглашения,
				| НачалоПериода,
				| ВНаличииОстаток,
				| Номенклатура,
				| Подразделение,
				| Характеристика,
				| Склад,
				| КоличествоКЗаказу,
				| СтраховойЗапас,
				| МаксимальныйЗапас,
				| МетодУправленияЗапасами,
				| ДатаПоставки,
				| ДатаСледующейПоставки,
				| ОтметитьКЗаказу,
				| РасходСНачалаДня,
				| Назначение,
				| ЭтоРабота,
				| КалендарьРаботы"
			);
		ПараметрыФормы.МассивПоставок.Добавить(ОсновнаяПоставка);
		ЗаполнитьЗначенияСвойств(ОсновнаяПоставка, СтрокаТаблицыОбъекты);
		ОсновнаяПоставка.НачалоПериода = Объект.Параметры[0].НачалоПериода;
		
		ПоставкиРучнойНастройки = СтрокаТаблицыОбъекты.ПоставкиРучнойНастройки;
		Для Каждого СтрокаПоставки ИЗ ПоставкиРучнойНастройки Цикл
		
			Поставка = 
				Новый Структура("
				| СпособОбеспечения,
				| ТипОбеспечения,
				| ЦенаВВалютеУправленческогоУчета,
				| ЦенаВВалютеСоглашения,
				| ИсточникОбеспечения,
				| Соглашение,
				| ВалютаСоглашения,
				| КоличествоКЗаказу,
				| УсловиеЦены,
				| ДатаПоставки"
			);
			ПараметрыФормы.МассивПоставок.Добавить(Поставка);
			ЗаполнитьЗначенияСвойств(Поставка, СтрокаПоставки);
			
		КонецЦикла;
		
		ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаЗаказаДругимиСпособамиОбеспечения", 
			ПараметрыФормы, ЭтаФорма);
	
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы редактирования вариантов обеспечения.

&НаКлиенте
Процедура СпособОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы       = Новый Структура("Номенклатура, Характеристика, Склад");
	СтрокаТаблицыОбъекты = Элементы.Объекты.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокатаблицыОбъекты);
	
	Если НЕ СтрокаТаблицыОбъекты.ЭтоРабота Тогда
		ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаРедактированияВариантовОбеспеченияТоварами",
			ПараметрыФормы, ЭтаФорма);
	Иначе 
		ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаРедактированияВариантовОбеспеченияРаботами",
			ПараметрыФормы, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы выбора условий поставки.

&НаКлиенте
Процедура ИсточникОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Поставка = Элементы.Объекты.ТекущиеДанные;
	Если Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка") Тогда
		Элементы.ИсточникОбеспечения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
	Иначе 
		Элементы.ИсточникОбеспечения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли;
	
	Если Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка") Тогда
	
		СписокВариантовВыбораПоставщика = Новый СписокЗначений();
		СписокВариантовВыбораПоставщика.Добавить("СтандартнаяОбработка",            НСтр("ru = ""Выбрать поставщика"""));
		СписокВариантовВыбораПоставщика.Добавить("ФормаВыбораПоставщикаПоУсловиям", 
			НСтр("ru = ""Подобрать поставщика по условиям"""));
		
		ЭлементСписка = ВыбратьИзСписка(СписокВариантовВыбораПоставщика, Элемент);
		
		Если ЭлементСписка = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;	
		
		Если ЭлементСписка.Значение = "ФормаВыбораПоставщикаПоУсловиям" Тогда
			
			ПараметрыФормы = Новый Структура("ДатаЦены, Склад, Номенклатура, Характеристика",
				Объект.Параметры[0].НачалоПериода);
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, Поставка);
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаВыбораПоставщикаПоУсловиям", ПараметрыФормы, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открытие формы редактирования календаря.

&НаКлиенте
Процедура КалендарьПоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КалендарьПоставки = Элементы.Объекты.ТекущиеДанные.КалендарьПоставки;

	Если ЗначениеЗаполнено(КалендарьПоставки) Тогда
		
		ПараметрыФормы = Новый Структура("Ключ", КалендарьПоставки);
		ОткрытьФормуМодально("Справочник.Календари.ФормаОбъекта", ПараметрыФормы);
		
		КоличествоИзмененныхСтрок = ОбновитьСтрокиСВыбраннымКалендарем(КалендарьПоставки);
		Элементы.Объекты.ТекущиеДанные.ВнесеныИзменения = Ложь;
			Если КоличествоИзмененныхСтрок > 0 Тогда
				Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ""Обновлено строк: %1."""), КоличествоИзмененныхСтрок);
				ПоказатьОповещениеПользователя(Текст, , 
					?(КоличествоИзмененныхСтрок > 1, 
						Нстр("ru = ""Подсвечены обновленные строки, в которых ранее были зафиксированы объемы заказов."""), 
						""
					), БиблиотекаКартинок.Информация32);
			КонецЕсли;
		
		ОбъектыПриАктивизацииСтроки(0);
		УстановитьОтборСтрок();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Действия требующие обновления корзины заказов.

&НаКлиенте
Процедура КоличествоКЗаказуПриИзменении(Элемент)
	
	Поставка = Элементы.Объекты.ТекущиеДанные;
	
	Поставка.ОтметитьКЗаказу = (Поставка.КоличествоКЗаказу > 0);

	ОтразитьПоставкуВИтогах(ЭтаФорма, Поставка, Поставка.КоличествоКЗаказу);
	РассчитатьРекомендацииСТекстомНаКлиенте(Поставка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКЗаказуПриИзменении(Элемент)
	
	Поставка = Элементы.Объекты.ТекущиеДанные;
	
	КоличествоКЗаказуСУчетомОтметки = ?(Поставка.ОтметитьКЗаказу, Поставка.КоличествоКЗаказу, 0);
	
	ОтразитьПоставкуВИтогах(ЭтаФорма, Поставка, КоличествоКЗаказуСУчетомОтметки);
	РассчитатьРекомендацииСТекстомНаКлиенте(Поставка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
		СтрокаТаблицыОбъекты = Элементы.Объекты.ТекущиеДанные;
	
		Если СтрокаТаблицыОбъекты.ОтметитьКЗаказу Тогда 
		
			//Отразить отмену поставки в таблице итогов.
			ОтразитьПоставкуВИтогах(ЭтаФорма, СтрокаТаблицыОбъекты, 0);
			
		КонецЕсли;
		СтрокаТаблицыОбъекты.ИсточникОбеспечения = ВыбранноеЗначение;
		
		Если СтрокаТаблицыОбъекты.ОтметитьКЗаказу Тогда 
		
			//Отразить поставку в таблице итогов с новыми параметрами.
			ОтразитьПоставкуВИтогах(ЭтаФорма, СтрокаТаблицыОбъекты, СтрокаТаблицыОбъекты.КоличествоКЗаказу);
			
		КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Прочие.

&НаКлиенте
Процедура ОбъектыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбъектыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ КАЛЕНДАРИ

//Открытие формы редактирования календаря поставки на шаге 1.

&НаКлиенте
Процедура КалендариВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Календарь = Элементы.Календари.ТекущиеДанные.Календарь;
	Если Календарь <> Объект.Параметры[0].УмолчаниеКалендарь Тогда
		ПараметрыФормы = Новый Структура("Ключ", Календарь);
		ОткрытьФормуМодально("Справочник.Календари.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ СФОРМИРОВАННЫЕ ЗАКАЗЫ

//Открытие формы созданного заказа.

&НаКлиенте
Процедура ДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДокумента = Элементы.СформированныеЗаказы.ТекущиеДанные;
	ДокументСсылка = СтрокаДокумента.Документ;
	Если ТипЗнч(ДокументСсылка)      = Тип("ДокументСсылка.ЗаказНаСборку") Тогда 
		
		ИмяФормыДокумента = "Документ.ЗаказНаСборку.ФормаОбъекта";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
		
		ИмяФормыДокумента = "Документ.ЗаказНаПеремещение.ФормаОбъекта";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ИмяФормыДокумента = "Документ.ЗаказПоставщику.ФормаОбъекта";
		
	КонецЕсли;
	
	ОткрытьЗначение(ДокументСсылка);
	
КонецПроцедуры //ДокументыВыбор()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура АктуализацияГраницКонтроля(Команда)
	
	ПараметрыФормы = 
		Новый Структура("Склад, СпособОбеспечения, Номенклатура", 
		ОтборПоСкладу, ОтборПоСпособуОбеспечения, ОтборПоНоменклатуре);
		
	ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаАктуализацияГраницКонтроля", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		Если ТаблицаДокументы.Количество() > 0 Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос(НСтр(
				"ru = ""Список созданных заказов не пуст. Созданные заказы будут удалены. Продолжить выполнение операции?"""),
				Режим, 0);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;

			СсылкиНаУдаление = Новый Массив();
			Для Каждого Строка Из ТаблицаДокументы Цикл
				
				СсылкиНаУдаление.Добавить(Строка.Документ);
				
			КонецЦикла;
			
			УдалитьЗаказыНаСервере(СсылкиНаУдаление);
			ТаблицаДокументы.Очистить();
			
		КонецЕсли;

		ОчиститьСообщения();
		Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	ИначеЕсли Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Если ПолучитьПодтверждениеПриСменеСтраницыПомощника() Тогда
			
			КорзинаЗаказов.ПолучитьЭлементы().Очистить();
			Объект.Объекты.Очистить();
			Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
	
		ЗагрузитьОбъекты();
		
		УстановитьОтборСтрок();
		УстановитьВидимостьСтраницРасшифровки();
		Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг2;
		
	ИначеЕсли Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда 
		
		Если КорзинаЗаказов.ПолучитьЭлементы().Количество() = 0 Тогда
			
			ТекстОшибки = НСтр("ru = ""Нет заказов к оформлению. Отметьте флажком количество в колонке 
				|'К заказу основным способом' для номенклатуры которую необходимо заказать.""");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			
			Возврат;
			
		КонецЕсли;
		
		СоздатьЗаказыНаСервере();
		Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг3;
		УстановитьЗаголовокФормы(Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница);
		
	КонецЕсли;
	
	УстановитьЗаголовокФормы(Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьФормированиеЗаказов(Команда)
	
	КорзинаЗаказов.ПолучитьЭлементы().Очистить();
	
	Объект.Объекты.Очистить();
	
	Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг1;
	УстановитьЗаголовокФормы(Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница);
	УстановитьВидимостьКнопокКоманднойПанели(Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиОбъемовЗаказов(Команда)
	
	ИзменитьФлажкиОбъемовЗаказов(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиОбъемовЗаказов(Команда)
	
	ИзменитьФлажкиОбъемовЗаказов(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьЗаполнениеКалендарей(Команда)
	
	ПоказатьКалендариНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрНезаполненныйКалендарьПоставки(Команда)
	
	УстановитьПометкиРекомендаций(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрРекомендацииБезОграничений(Команда)
	
	УстановитьПометкиРекомендаций(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрРекомендацииКЗаказу(Команда)
	
	УстановитьПометкиРекомендаций(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрРекомендацииПрогнозируемыйДефицит(Команда)
	
	УстановитьПометкиРекомендаций(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрДнейДоЗаказаБезОграничений(Команда)
	
	УстановитьПометкиДнейДоЗаказа(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрДнейДоЗаказа0(Команда)
	
	УстановитьПометкиДнейДоЗаказа(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрДнейДоЗаказа3(Команда)
	
	УстановитьПометкиДнейДоЗаказа(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьФильтрДнейДоЗаказа7(Команда)
	
	УстановитьПометкиДнейДоЗаказа(3);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
//Обеспечивающие обновление Корзины заказов

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьПоставкуВИтогах(ЭтаФорма, Поставка, КоличествоКЗаказу, ПараметрыОсновнойПоставки = Неопределено)
	
	Если ПараметрыОсновнойПоставки = Неопределено Тогда
		
		ПараметрыОсновнойПоставки = Новый Структура();
		ПараметрыОсновнойПоставки.Вставить("ЭтоРабота", Поставка.ЭтоРабота);
		ПараметрыОсновнойПоставки.Вставить("Вес", Поставка.Вес);
		
	КонецЕсли;
	
	СуммаВалютаСоглашения   = Поставка.ЦенаВВалютеСоглашения            * КоличествоКЗаказу;
	СуммаУпрУчет            = Поставка.ЦенаВВалютеУправленческогоУчета  * КоличествоКЗаказу;
	ОбщийВес                = ПараметрыОсновнойПоставки.Вес             * КоличествоКЗаказу;
	
	ПриращениеСуммыУпрУчет          = СуммаУпрУчет          - Поставка.СуммаУпрУчет;
	ПриращениеСуммыВалютаСоглашения = СуммаВалютаСоглашения - Поставка.СуммаВалютаСоглашения;
	ПриращениеОбщегоВеса            = ОбщийВес              - Поставка.ОбщийВес;
	ПриращениеКоличества            = КоличествоКЗаказу     - Поставка.КоличествоСтарое;
	
	ДобавлениеУдалениеСтроки = ?(Поставка.КоличествоСтарое = 0, 1, ?(КоличествоКЗаказу = 0, -1, 0));
	
	Поставка.СуммаУпрУчет           = СуммаУпрУчет;
	Поставка.СуммаВалютаСоглашения  = СуммаВалютаСоглашения;
	Поставка.ОбщийВес               = ОбщийВес;
	Поставка.КоличествоСтарое       = КоличествоКЗаказу;
	
	Если ПриращениеКоличества = 0 Тогда 
		Возврат;
	КонецЕсли;

	//Формируем ключ поставки, для поиска позиции в  в иерархии дерева, в которую необходимо добавлять новую строку.
	КлючОбъектаВКорзинеЗаказов = Новый Массив();
	КлючОбъектаВКорзинеЗаказов.Добавить(
		Новый Структура("ИсточникОбеспечения", 
			?(НЕ ЗначениеЗаполнено(Поставка.ИсточникОбеспечения), 
				ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"), 
				Поставка.ИсточникОбеспечения)));
		
	КлючОбъектаВКорзинеЗаказов.Добавить(
		Новый Структура("СпособОбеспечения, ТипОбеспечения, ДатаПоставки, Соглашение",
			Поставка.СпособОбеспечения, Поставка.ТипОбеспечения, Поставка.ДатаПоставки, Поставка.Соглашение ));
			
	//Инициализируем поиск с головы дерева.
	ЭлементДерева           = ЭтаФорма.КорзинаЗаказов;
	ВсегоГруппировокВДереве = КлючОбъектаВКорзинеЗаказов.Количество();
	
	ГруппировкаНайдена      = Ложь;
	Для ИндексГруппировки = 0 По ВсегоГруппировокВДереве - 1 Цикл
		
		КлючОбъектаДляГруппировки = КлючОбъектаВКорзинеЗаказов[ИндексГруппировки];
		
		//Получаем все элементы на текущем уровне иерархии дерева.
		КоллекцияЭлементовДерева = ЭлементДерева.ПолучитьЭлементы();
		ВсегоЭлементов           = КоллекцияЭлементовДерева.Количество();
		
		//Сверяем ключ строки поставки с полями группировки.
		Для Индекс = 0 По ВсегоЭлементов - 1 Цикл
		
			ЭлементДерева = КоллекцияЭлементовДерева[Индекс];
			ГруппировкаНайдена = Истина;
			Для Каждого КлючОбъектаДляПоляГруппировки Из КлючОбъектаДляГруппировки Цикл
			
				Если ЭлементДерева[КлючОбъектаДляПоляГруппировки.Ключ] <> КлючОбъектаДляПоляГруппировки.Значение Тогда
					
					ГруппировкаНайдена = Ложь;
					Прервать;
				
				КонецЕсли;
		
			КонецЦикла;
		
			Если ГруппировкаНайдена Тогда
				Прервать;
			КонецЕсли;
		
		КонецЦикла;
		
		//Ключ поставки не был обнаружен на текущем уровне иерархии, в данном уровне необходимо добавлять строку с новыми
		//значениями ключа, заданными в поставке.
		Если Не ГруппировкаНайдена Тогда 
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	//Создаем новую ветвь в дереве согласно ключу поставки, заполняем строки данными поставки. 
	//Поля показателей оставляем нулевыми.
	Для Счетчик = ИндексГруппировки По ВсегоГруппировокВДереве - 1 Цикл
		
		ЭлементДерева = КоллекцияЭлементовДерева.Вставить(Индекс);
		
		ЗаполнитьЗначенияСвойств(ЭлементДерева, Поставка, , "СуммаУпрУчет, ОбщийВес");
		ЭлементДерева.ИсточникОбеспечения = 
			?(НЕ ЗначениеЗаполнено(Поставка.ИсточникОбеспечения), 
				ПредопределенноеЗначение("Справочник.Партнеры.ПустаяСсылка"), 
				Поставка.ИсточникОбеспечения);
		КоллекцияЭлементовДерева = ЭлементДерева.ПолучитьЭлементы();
		
		ЭлементДерева.УровеньВДереве = Счетчик;
		
		Индекс = 0;
		
	КонецЦикла;
	
//Пересчитаем показатели вверх по иерархии дерева в связи с обновлением поставки.
	ЭлементДереваНаУдаление = Неопределено;
	
	Пока ЭлементДерева <> Неопределено Цикл
		
		ЭлементДерева.СуммаУпрУчет  = ЭлементДерева.СуммаУпрУчет + ПриращениеСуммыУпрУчет;
		ЭлементДерева.Сумма         = ЭлементДерева.Сумма        + ПриращениеСуммыВалютаСоглашения;
		ЭлементДерева.ОбщийВес      = ЭлементДерева.ОбщийВес     + ПриращениеОбщегоВеса;
		ЭлементДерева.Количество    = ЭлементДерева.Количество   + ПриращениеКоличества;
		
		//Расчет статистики верного заполнения веса и цены в строке корзины заказов.
		Если Поставка.ЦенаВВалютеСоглашения = 0 
			И Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка") Тогда
			
			ЭлементДерева.СтрокБезЦены = ЭлементДерева.СтрокБезЦены + ДобавлениеУдалениеСтроки; 
			
		КонецЕсли;
		
		Если ПараметрыОсновнойПоставки.Вес = 0 И Не ПараметрыОсновнойПоставки.ЭтоРабота Тогда
			
			ЭлементДерева.СтрокБезВеса = ЭлементДерева.СтрокБезВеса + ДобавлениеУдалениеСтроки; 
			
		КонецЕсли;
		
		ЭлементДерева.ВсегоСтрок            = ЭлементДерева.ВсегоСтрок + ДобавлениеУдалениеСтроки; 
		ЭлементДерева.СуммаПосчитанаВерно   = (ЭлементДерева.СтрокБезЦены = 0); 
		ЭлементДерева.ВесПосчитанВерно      = (ЭлементДерева.СтрокБезВеса = 0); 
		
		//Запоминаем, если строка подлежит удалению.
		Если ЭлементДерева.Количество = 0 Тогда
			
			ЭлементДереваНаУдаление = ЭлементДерева;
			
		КонецЕсли;
		
		ЭлементДерева = ЭлементДерева.ПолучитьРодителя();
			
	КонецЦикла;
	
	//Удаляем ветку, при необходимости.
	Если ЭлементДереваНаУдаление <> Неопределено Тогда
		
		Родитель = ЭлементДереваНаУдаление.ПолучитьРодителя();
		Родитель = ?(Родитель <> Неопределено, Родитель, ЭтаФорма.КорзинаЗаказов);
		Родитель.ПолучитьЭлементы().Удалить(ЭлементДереваНаУдаление);
	
	КонецЕсли;
	
	//Пересчитваем итоги подвала корзины заказов.
	ЭтаФорма.КорзинаЗаказовИтогПолеОбщийВес    = ЭтаФорма.КорзинаЗаказовИтогПолеОбщийВес   + ПриращениеОбщегоВеса;
	ЭтаФорма.КорзинаЗаказовИтогПолеСумма       = ЭтаФорма.КорзинаЗаказовИтогПолеСумма      + ПриращениеСуммыУпрУчет;
	ЭтаФорма.КорзинаЗаказовИтогПолеСтрокВсего  = ЭтаФорма.КорзинаЗаказовИтогПолеСтрокВсего + ДобавлениеУдалениеСтроки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьРекомендации(
			Поставка, 
			ПревышениеОжидаемойОтгрузкиНадРасчетнымПотреблением = Неопределено, 
			ПриведенныйСтраховойЗапас = Неопределено
		)
		
	ПревышениеОжидаемойОтгрузкиНадРасчетнымПотреблением = Макс(0,                          Поставка.ОжидаемаяОтгрузка -
		?(Поставка.МетодУправленияЗапасами = ПредопределенноеЗначение(
			"Перечисление.МетодыУправленияЗапасами.ЗаказПодЗаказ"),                        Поставка.ОжидаемаяОтгрузка,
		?(Поставка.МетодУправленияЗапасами = ПредопределенноеЗначение(
			"Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал"), Поставка.ПотреблениеПоСтатистике,
		?(Поставка.МетодУправленияЗапасами = ПредопределенноеЗначение(
			"Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер"),   Поставка.ПотреблениеПоСтатистике,
		?(Поставка.МетодУправленияЗапасами = ПредопределенноеЗначение(
			"Перечисление.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование"),       Поставка.ПотреблениеПоПланам,
			                                                                               Поставка.ОжидаемаяОтгрузка)))));
			
	ПриведенныйСтраховойЗапас = 
		?(Поставка.МетодУправленияЗапасами = ПредопределенноеЗначение(
			"Перечисление.МетодыУправленияЗапасами.ЗаказПодЗаказ"), 0,
		?(Поставка.МетодУправленияЗапасами = ПредопределенноеЗначение(
			"Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал"), 
				Макс(0, Поставка.СтраховойЗапас - ПревышениеОжидаемойОтгрузкиНадРасчетнымПотреблением),
		?(Поставка.МетодУправленияЗапасами = ПредопределенноеЗначение(
			"Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер"),
				Макс(0, Поставка.СтраховойЗапас - ПревышениеОжидаемойОтгрузкиНадРасчетнымПотреблением),
		?(Поставка.МетодУправленияЗапасами = 
			ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование"),
				0, 
				0)))); 

	КоличествоКЗаказу = 0;
	Если Поставка.ПрогнозныйОстаток < ПриведенныйСтраховойЗапас Тогда
			
		Если Поставка.МетодУправленияЗапасами = ПредопределенноеЗначение(
			"Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер") Тогда
			КоличествоКЗаказу = Макс(Поставка.МаксимальныйЗапас
				- Поставка.ОжидаемоеПоступление - Поставка.КоличествоДругиеСпособы, 0); 
		Иначе
			КоличествоКЗаказу = ПриведенныйСтраховойЗапас - Поставка.ПрогнозныйОстаток;
		КонецЕсли;

	КонецЕсли;
	
	//Для обособленных потребностей ограничим количество к заказу общей величиной потребности
	Если Поставка.ЭтаПотребностьОбособлена Тогда
		
		КоличествоКЗаказу = Мин(Поставка.НеОбеспеченоВсего, КоличествоКЗаказу);
		
	КонецЕсли;
	
	//Если товар штучный - округляем в большую сторону до целого
	Если ЗначениеЗаполнено(Поставка.ШтучныйТовар) И Поставка.ШтучныйТовар И Цел(КоличествоКЗаказу) < КоличествоКЗаказу Тогда
		
		КоличествоКЗаказу = Цел(КоличествоКЗаказу) + 1;
		
	КонецЕсли;
	
	//Минимальный остаток между поставками рассчитывается без учета поставки по основному способу.
	Поставка.НетДефицита = 
		НЕ Поставка.ЭтоРабота
		//Считаем признак наличия дефицита для товаров:
			И (Поставка.МинимальныйПрогнозныйОстатокДоПоставки >= 0)
			И (Поставка.МинимальныйПрогнозныйОстатокМеждуПоставками
				+ ?(Поставка.ОтметитьКЗаказу, Поставка.КоличествоКЗаказу, 0) >= 0)
		ИЛИ Поставка.ЭтоРабота
		//Считаем признак нарушения сроков исполнения работ
			И НЕ Поставка.ЭтоИзбытокОбеспечения
			И (Поставка.ОбеспечитьПоставкой - ?(Поставка.ОтметитьКЗаказу, Поставка.КоличествоКЗаказу, 0)) >= 0;
		
	Поставка.ФильтрКЗаказу = (Поставка.КоличествоКЗаказу > 0);
	
	Возврат КоличествоКЗаказу;
	
КонецФункции

&НаСервере
Функция ОтразитьПоставкуВДеревеЗаказов(
	Установить,
	Поставка,
	КлючОбъектаВКорзинеЗаказов,
	ИменаКолонокПоставщик,
	ИменаКолонокСпособыИДаты,
	Поставщики, ПараметрыОсновнойПоставки = Неопределено)

	Если Установить И Поставка.КоличествоКЗаказу > 0 Тогда
		
		Если ПараметрыОсновнойПоставки = Неопределено Тогда
			
			ПараметрыОсновнойПоставки = Новый Структура();
			ПараметрыОсновнойПоставки.Вставить("ЭтоРабота", Поставка.ЭтоРабота);
			ПараметрыОсновнойПоставки.Вставить("Вес", Поставка.Вес);
			
		КонецЕсли;
		
		//Ошибок нет, можно отмечать поставку.
		Если НЕ ЗначениеЗаполнено(Поставка.ИсточникОбеспечения) Тогда
			КлючОбъектаВКорзинеЗаказов[0].ИсточникОбеспечения = Справочники.Партнеры.ПустаяСсылка();
		Иначе 
			ЗаполнитьЗначенияСвойств(КлючОбъектаВКорзинеЗаказов[0], Поставка);
		КонецЕсли;
		
		МассивСтрок = Поставщики.НайтиСтроки(КлючОбъектаВКорзинеЗаказов[0]);
		Если МассивСтрок.Количество() = 0 Тогда
			
			Поставщик = Поставщики.Добавить();
			Поставщик.УровеньВДереве = 0;
			ЗаполнитьЗначенияСвойств(Поставщик, КлючОбъектаВКорзинеЗаказов[0]); 
			Поставщик.ТипОбеспечения = Поставка.ТипОбеспечения;
			
		Иначе //Поставщик уже есть в дереве.
			Поставщик = МассивСтрок[0];
		КонецЕсли;
		
		СпособыИДатыПоставок = Поставщик.Строки;
		ЗаполнитьЗначенияСвойств(КлючОбъектаВКорзинеЗаказов[1], Поставка);
		МассивСтрок = СпособыИДатыПоставок.НайтиСтроки(КлючОбъектаВКорзинеЗаказов[1]);
		Если МассивСтрок.Количество() = 0 Тогда
			
			СпособИДатаПоставки = СпособыИДатыПоставок.Добавить();
			СпособИДатаПоставки.УровеньВДереве = 1;
			ЗаполнитьЗначенияСвойств(СпособИДатаПоставки, КлючОбъектаВКорзинеЗаказов[1]); 
			
		Иначе //Такой способ и дата уже есть в дереве.
			СпособИДатаПоставки = МассивСтрок[0];
		КонецЕсли;
		
		//Добавим ресурсы (суммы, количества поставки) в строку дерева.
		
		Поставка.СуммаВалютаСоглашения = Поставка.ЦенаВВалютеСоглашения           * Поставка.КоличествоКЗаказу;
		Поставка.СуммаУпрУчет          = Поставка.ЦенаВВалютеУправленческогоУчета * Поставка.КоличествоКЗаказу;
		Поставка.ОбщийВес              = ПараметрыОсновнойПоставки.Вес            * Поставка.КоличествоКЗаказу;
		Поставка.КоличествоСтарое      = Поставка.КоличествоКЗаказу;
	
		СпособИДатаПоставки.Сумма        = СпособИДатаПоставки.Сумма        + Поставка.СуммаВалютаСоглашения;
		СпособИДатаПоставки.СуммаУпрУчет = СпособИДатаПоставки.СуммаУпрУчет + Поставка.СуммаУпрУчет;
		СпособИДатаПоставки.ОбщийВес     = СпособИДатаПоставки.ОбщийВес     + Поставка.ОбщийВес;
		СпособИДатаПоставки.Количество   = СпособИДатаПоставки.Количество   + Поставка.КоличествоКЗаказу;
		
		СпособИДатаПоставки.ВсегоСтрок          = СпособИДатаПоставки.ВсегоСтрок   + 1;
		СпособИДатаПоставки.СтрокБезВеса =
			СпособИДатаПоставки.СтрокБезВеса 
			+ ?(ПараметрыОсновнойПоставки.Вес = 0 И НЕ ПараметрыОсновнойПоставки.ЭтоРабота, 1, 0);
		СпособИДатаПоставки.СтрокБезЦены = 
			СпособИДатаПоставки.СтрокБезЦены 
			+ ?(Поставка.ЦенаВВалютеУправленческогоУчета = 0 
				И Поставка.ТипОбеспечения = Перечисления.ТипыОбеспечения.Покупка, 1, 0);
		СпособИДатаПоставки.СуммаПосчитанаВерно = (СпособИДатаПоставки.СтрокБезЦены = 0);
		СпособИДатаПоставки.ВесПосчитанВерно    = (СпособИДатаПоставки.СтрокБезВеса = 0);
		
		Поставщик.Сумма        = Поставщик.Сумма        + Поставка.СуммаВалютаСоглашения;
		Поставщик.СуммаУпрУчет = Поставщик.СуммаУпрУчет + Поставка.СуммаУпрУчет;
		Поставщик.ОбщийВес     = Поставщик.ОбщийВес     + Поставка.ОбщийВес;
		
		Поставщик.ВсегоСтрок          = Поставщик.ВсегоСтрок + 1;
		Поставщик.СтрокБезВеса        = Поставщик.СтрокБезВеса + ?(ПараметрыОсновнойПоставки.Вес = 0 
			И НЕ ПараметрыОсновнойПоставки.ЭтоРабота, 1, 0);
		Поставщик.СтрокБезЦены        = Поставщик.СтрокБезЦены + ?(Поставка.ЦенаВВалютеУправленческогоУчета = 0, 1, 0);
		Поставщик.СуммаПосчитанаВерно = (Поставщик.СтрокБезЦены = 0);
		Поставщик.ВесПосчитанВерно    = (Поставщик.СтрокБезВеса = 0);
		Поставщик.Количество          = Поставщик.Количество + Поставка.КоличествоКЗаказу;
		
		Возврат 1;
		
	Иначе 
		
		Поставка.ОтметитьКЗаказу        = Ложь;
		Поставка.КоличествоСтарое       = 0;
		Поставка.СуммаУпрУчет           = 0;
		Поставка.СуммаВалютаСоглашения  = 0;
		Поставка.ОбщийВес               = 0;
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

//Рассчитвает рекомендации в строке таблицы Объекты по методу управления запасами.

&НаКлиенте
Функция РассчитатьРекомендацииСТекстомНаКлиенте(Поставка)
	
	ПревышениеОжидаемойОтгрузкиНадРасчетнымПотреблением = Неопределено;
	ПриведенныйСтраховойЗапас                           = Неопределено;
	
	КоличествоКЗаказу = РассчитатьРекомендации(
		Поставка,
		ПревышениеОжидаемойОтгрузкиНадРасчетнымПотреблением,
		ПриведенныйСтраховойЗапас
	);
	
	//Сформируем текст рекомендации.
	ИнфоТекстРекомендации = "";
	Если Поставка.ПрогнозныйОстаток < ПриведенныйСтраховойЗапас Тогда
			
		Если Поставка.МетодУправленияЗапасами 
			= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер") Тогда
			
			ИнфоТекстРекомендации = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ""Страховой запас %1 """) +
					НСтр("ru = ""не обеспечен остатком на дату следующей поставки. """) + 
					НСтр("ru = ""В ближайшую поставку рекомендуется заказать величину максимального """) + 
					НСтр("ru = ""запаса (за вычетом ранее запланированных поступлений)."""),
					?(Поставка.ПотреблениеПоСтатистике < Поставка.ОжидаемаяОтгрузка,
						НСтр("ru = ""(с учетом превышения ожидаемой отгрузки над потреблением по статистике) """),
						"")
				)
		ИначеЕсли Поставка.МетодУправленияЗапасами 
			= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал") Тогда
				
			Если Поставка.ПотреблениеПоСтатистике < Поставка.ОжидаемаяОтгрузка Тогда
				ИнфоТекстРекомендации = 
					НСтр("ru = ""В ближайшую поставку рекомендуется заказать объем """) +
					НСтр("ru = ""для обеспечения страхового запаса, """) +
					НСтр("ru = ""за вычетом превышения ожидаемой отгрузки над потреблением по статистике.""");
			Иначе
				ИнфоТекстРекомендации = 
					НСтр("ru = ""В ближайшую поставку рекомендуется заказать объем для обеспечения страхового запаса.""");
			КонецЕсли;
				
		Иначе
			
			Если Не Поставка.ЭтаПотребностьОбособлена Тогда
				ИнфоТекстРекомендации =
					НСтр("ru = ""Потребности на дату следующей поставки не обеспечены. """) + 
					НСтр("ru = ""В ближайшую поставку рекомендуется заказать объем, """) +
					НСтр("ru = ""необходимый для исключения отрицательного остатка на дату следующей поставки.""");
			ИначеЕсли Поставка.ЭтоРабота Тогда
				
				Если - Поставка.ПрогнозныйОстаток <= Поставка.НеОбеспеченоВсего Тогда
					ИнфоТекстРекомендации =
						НСтр("ru = ""Потребности на дату следующей поставки не обеспечены. """) + 
						НСтр("ru = ""В ближайшую поставку рекомендуется заказать работы, """) +
						НСтр("ru = ""необходимые для обеспечения ожидаемых потребностей в работах.""");
				Иначе
					ИнфоТекстРекомендации =
						НСтр("ru = ""В ближайшую поставку рекомендуется заказать работы, """) +
						НСтр("ru = ""необходимые для обеспечения ожидаемых потребностей в работах, """) + 
						НСтр("ru = ""за исключением работ, обеспеченных поступлением в более поздние даты.""");
				КонецЕсли;
					
			Иначе //Обособленное обеспечение товарами
				
				Если - Поставка.ПрогнозныйОстаток <= Поставка.НеОбеспеченоВсего Тогда
					ИнфоТекстРекомендации =
						НСтр("ru = ""Потребности на дату следующей поставки не обеспечены. """) + 
						НСтр("ru = ""В ближайшую поставку рекомендуется заказать объем, """) +
						НСтр("ru = ""необходимый для исключения отрицательного остатка """) +
						НСтр("ru = ""на дату следующей поставки.""");
				Иначе
					ИнфоТекстРекомендации =
						НСтр("ru = ""В ближайшую поставку рекомендуется заказать количество, """) +
						НСтр("ru = ""необходимое для исключения отрицательного остатка на дату следующей поставки, """) + 
						НСтр("ru = ""за вычетом потребностей, обеспеченных поступлением в более поздние даты.""");
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
			
	Иначе 
			
		Если Поставка.МетодУправленияЗапасами
			= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер") 
			ИЛИ Поставка.МетодУправленияЗапасами 
				= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал") Тогда 
				
			Если Поставка.ПотреблениеПоСтатистике < Поставка.ОжидаемаяОтгрузка Тогда
				ИнфоТекстРекомендации =
					НСтр("ru = ""Страховой запас (с учетом превышения ожидаемой отгрузки над """) +
					НСтр("ru = ""потреблением по статистике) обеспечен остатком на дату следующей поставки.""");
			Иначе 
				ИнфоТекстРекомендации = НСтр("ru = ""Страховой запас на дату следующей поставки обеспечен остатком.""");
			КонецЕсли;
			
		Иначе
				
			Если Не Поставка.ЭтоРабота Тогда
				ИнфоТекстРекомендации = НСтр("ru = ""Потребности на дату следующей поставки обеспечены остатком.""");
			Иначе //рекомендация по работам.
				ИнфоТекстРекомендации = НСтр("ru = ""Потребности на дату следующей поставки обеспечены.""");
			КонецЕсли;
				
		КонецЕсли;
	
	КонецЕсли;
	
	ТекстПредупреждения = "";
	ВсегоПредупреждений = 0;
	Если Поставка.ЭтоНетРабочихДней И Поставка.ЭтоПотребностиПоМетоду Тогда
		
		ВсегоПредупреждений = ВсегоПредупреждений + 1;
		ТекстПредупреждения = ТекстПредупреждения + Строка(ВсегоПредупреждений) + 
		?(Поставка.МетодУправленияЗапасами 
			= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование"),
			
			НСтр("ru = "". Нет рабочих дней склада до даты следующей поставки (потребление по планам игнорируется)."""),
			НСтр("ru = "". Нет рабочих дней склада до даты следующей поставки (потребление по статистике игнорируется).""")
		);
		
	КонецЕсли;
	
	Если Не Поставка.ДатаПоставкиОпределена Тогда 
		
		ТекстПредупреждения = ТекстПредупреждения + ?(ВсегоПредупреждений > 0, Символы.ПС, "");
		ВсегоПредупреждений = ВсегоПредупреждений + 1;
		ТекстПредупреждения = ТекстПредупреждения + Строка(ВсегоПредупреждений) + 
			НСтр("ru = "". Не удалось рассчитать даты ближайшей и следующей поставок. """) + 
			НСтр("ru = ""Проверьте заполнение календаря поставки.""");
		
	КонецЕсли;
	
	Если Не Поставка.ЭтоПотребностиПоМетоду Тогда
		
		ТекстПредупреждения = ТекстПредупреждения + ?(ВсегоПредупреждений > 0, Символы.ПС, "");
		ВсегоПредупреждений = ВсегоПредупреждений + 1;
		Если Поставка.МетодУправленияЗапасами
			= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование") Тогда
			ТекстПредупреждения = ТекстПредупреждения + Строка(ВсегоПредупреждений) +
				НСтр("ru = "". Потребность не отражена в плане продаж.""");
		Иначе	
			ТекстПредупреждения = ТекстПредупреждения + Строка(ВсегоПредупреждений) +
				НСтр("ru = "". Не рассчитано товарное ограничение.""");
		КонецЕсли;
			
	КонецЕсли;
	
	Если ВсегоПредупреждений > 0 Тогда
		
		ИнфоТекстРекомендации = НСтр("ru = ""ВНИМАНИЕ:""") + Символы.ПС + ТекстПредупреждения;
		
	КонецЕсли;
	
	//Заполним все поля на панели информации.
	ИнфоМетодОбеспечения = 
		?(Поставка.ЭтаПотребностьОбособлена, НСтр("ru = ""Обособленное обеспечение"""),
			Поставка.МетодУправленияЗапасами);
	
	ИнфоПодразделение               = Поставка.Подразделение;
		
	ИнфоСпособОбеспечения           = Поставка.СпособОбеспечения;
	ИнфоКалендарьПоставки           = Поставка.КалендарьПоставки;
	ИнфоДатаПоставки                = Поставка.ДатаПоставки;
	ИнфоСрокИсполненияЗаказа        = Поставка.СрокИсполненияЗаказа;
	ИнфоДатаЗаказа                  = Поставка.ДатаЗаказа;
	
	ИнфоСтраховойЗапас              = Поставка.СтраховойЗапас;
	ИнфоМаксимальныйЗапас           = Поставка.МаксимальныйЗапас;
	ИнфоСреднедневноеПотребление    = Поставка.СреднедневноеПотребление;
	
	ИнфоВНаличииОстаток             = Поставка.ВНаличииОстаток;
	ИнфоОстатокНеОбособленный       = Поставка.ОстатокБезОбособления;
	ИнфоКоличествоДругиеСпособы     = Поставка.КоличествоДругиеСпособы;
	ИнфоОжидаемоеПоступление        = Поставка.ОжидаемоеПоступление;
	ИнфоОжидаемаяОтгрузка           = Поставка.ОжидаемаяОтгрузка;
	ИнфоПотреблениеПоСтатистике     = Поставка.ПотреблениеПоСтатистике;
	ИнфоПотреблениеПоПланам         = Поставка.ПотреблениеПоПланам;
	ИнфоПрогнозныйОстаток           = ?(НЕ Поставка.ЭтаПотребностьОбособлена,
		Поставка.ПрогнозныйОстаток, 
		- Поставка.ПрогнозныйОстаток
	);
	ИнфоПодразделение               = Поставка.Подразделение;
	ИнфоОбеспечено                  = Поставка.Обеспечено;
	ИнфоНеОбеспеченоВсего           = Макс(0, Поставка.НеОбеспеченоВсего -  Поставка.КоличествоДругиеСпособы);
	ИнфоПотребность                 = Поставка.Потребность;
	ИнфоКоличествоКЗаказуРекомендуемое = КоличествоКЗаказу;
	
	Возврат КоличествоКЗаказу; 
	
КонецФункции //РассчитатьРекомендацииНаКлиенте()

////////////////////////////////////////////////////////////////////////////////
//Обеспечивающие создание/обновление Таблицы документов

&НаСервере
Процедура ОбновитьРеквизитыТаблицыДокументов(ПараметрыОтбора, Источник)
	
	МассивНайденныхСтрок = ТаблицаДокументы.НайтиСтроки(ПараметрыОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда
			
		НовыеЗначенияРеквизитов = ПолучитьЗначенияРеквизитовДокументаИзСсылки(Источник);
		ЗаполнитьЗначенияСвойств(МассивНайденныхСтрок[0], НовыеЗначенияРеквизитов);
			
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьЗначенияРеквизитовДокумента(ДокументОбъект)

	ЗначенияРеквизитов = Новый Структура();
	
	ЗначенияРеквизитов.Вставить("Документ",            ДокументОбъект.Ссылка); 
	ЗначенияРеквизитов.Вставить("СтандартнаяКартинка", ?(ДокументОбъект.Проведен, 0, ?(ДокументОбъект.ПометкаУдаления, 1, 2))); 
	ЗначенияРеквизитов.Вставить("Статус",              ДокументОбъект.Статус); 
	ЗначенияРеквизитов.Вставить("Организация",         ДокументОбъект.Организация); 
	
	ДатаПоставки = '00010101';
	ИмяТабЧасти = "";
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаСборку") Тогда
		
		ЗначенияРеквизитов.Вставить("ИсточникОбеспечения", ДокументОбъект.Склад); 
		ЗначенияРеквизитов.Вставить("ДатаПоставки",        ДокументОбъект.ЖелаемаяДатаПоступления); 
		ДатаПоставки = ДокументОбъект.ОкончаниеСборкиРазборки;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказНаПеремещение") Тогда
		
		ЗначенияРеквизитов.Вставить("ИсточникОбеспечения", ДокументОбъект.СкладОтправитель); 
		ИмяТабЧасти = "Товары";
		ИмяРеквизитаДатыПоставки = "ОкончаниеПоступления";
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		
		ЗначенияРеквизитов.Вставить("ИсточникОбеспечения", ДокументОбъект.Партнер); 
		ЗначенияРеквизитов.Вставить("Сумма",               ДокументОбъект.СуммаДокумента); 
		ЗначенияРеквизитов.Вставить("Валюта",              ДокументОбъект.Валюта); 
		ИмяТабЧасти = "Товары";
		ИмяРеквизитаДатыПоставки = "ДатаПоступления";
	
	КонецЕсли;
	
	Если ИмяТабЧасти <> "" Тогда
		
		Для каждого Строка Из ДокументОбъект[ИмяТабЧасти] Цикл
				
			Если ДатаПоставки <> Строка[ИмяРеквизитаДатыПоставки] Тогда
					
				Если ДатаПоставки <> '00010101' Тогда
					
					//Если в документе более одной строки и разные даты поставок, то дату поставки не заполняем.
					ДатаПоставки = '00010101';
					Прервать;
						
				КонецЕсли;
						
				ДатаПоставки = Строка[ИмяРеквизитаДатыПоставки];
					
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЕсли;
	ЗначенияРеквизитов.Вставить("ДатаПоставки", ДатаПоставки);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитовДокументаИзСсылки(ДокументСсылка)

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Ссылка                                  КАК Документ,
		|	МАКСИМУМ(Заказ.Статус)                   КАК Статус,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА Заказ.Проведен
		|			ТОГДА 0
		|		КОГДА Заказ.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ)                                   КАК СтандартнаяКартинка,
		|	МАКСИМУМ(Заказ.Организация)              КАК Организация,";

	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаСборку") Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|	МАКСИМУМ(Заказ.Склад)                    КАК ИсточникОбеспечения,
		|	МАКСИМУМ(Заказ.ОкончаниеСборкиРазборки)  КАК ДатаПоставки
		|ИЗ
		|	Документ.ЗаказНаСборку КАК Заказ";
	
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказНаПеремещение") Тогда
	
		ТекстЗапроса = ТекстЗапроса + "
		|	МАКСИМУМ(Заказ.СкладОтправитель)         КАК ИсточникОбеспечения,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ЗаказТовары.ДатаПоступления)
		|			 = МИНИМУМ(ЗаказТовары.ДатаПоступления) 
		|		ТОГДА
		|			МАКСИМУМ(ЗаказТовары.ДатаПоступления)
		|		ИНАЧЕ 
		|			ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ                                    КАК ДатаПоставки
		|ИЗ
		|	Документ.ЗаказНаПеремещение КАК Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказНаПеремещение.Товары КАК ЗаказТовары
		|		ПО ЗаказТовары.Ссылка = &Ссылка";
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	МАКСИМУМ(Заказ.Партнер)                  КАК ИсточникОбеспечения,
		|	МАКСИМУМ(Заказ.СуммаДокумента)           КАК Сумма,
		|	МАКСИМУМ(Заказ.Валюта)                   КАК Валюта,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ЗаказТовары.ДатаПоступления)
		|			 = МИНИМУМ(ЗаказТовары.ДатаПоступления) 
		|		ТОГДА
		|			МАКСИМУМ(ЗаказТовары.ДатаПоступления)
		|		ИНАЧЕ 
		|			ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ                                    КАК ДатаПоставки
		|ИЗ
		|	Документ.ЗаказПоставщику КАК Заказ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказТовары
		|		ПО ЗаказТовары.Ссылка = &Ссылка";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ 
		|	Заказ.Ссылка = &Ссылка
		|СГРУППИРОВАТЬ ПО 
		|	Заказ.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ЗначенияРеквизитов = Новый Структура("
		| Документ,
		| Статус,
		| СтандартнаяКартинка,
		| Организация,
		| ИсточникОбеспечения,
		| ДатаПоставки,
		| Сумма,
		| Валюта"
	);
	
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитов, Выборка);
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

//Создает заказы в информационной базе по имеющейся таблице заказов, зафиксированных пользователем.

&НаСервере
Процедура СоздатьЗаказыНаСервере()
	
	ПереопределенныеСообщения = Новый Массив();
	ПараметрыОтбора = Новый Структура("ОтметитьКЗаказу", Истина);
	ТаблицаЗаказов = Объект.Объекты.Выгрузить(ПараметрыОтбора, "
		| Номенклатура, 
		| Характеристика, 
		| Склад, 
		| ИсточникОбеспечения, 
		| ТипОбеспечения, 
		| Соглашение, 
		| УсловиеЦены, 
		| ДатаПоставки, 
		| КоличествоКЗаказу, 
		| ЦенаВВалютеСоглашения, 
		| ВалютаСоглашения, 
		| ЭтоРабота, 
		| ДлительностьВДнях, 
		| Организация, 
		| СпособОбеспечения, 
		| Назначение"
	);
	Для Каждого Строка Из Объект.Объекты Цикл
		
		Если Строка.КоличествоДругиеСпособы > 0 Тогда
			
			Для Каждого ПоставкаРучная Из Строка.ПоставкиРучнойНастройки Цикл
				
				Поставка = ТаблицаЗаказов.Добавить();
				ЗаполнитьЗначенияСвойств(Поставка, Строка, 
					"Номенклатура,
					|Характеристика,
					|Склад,
					|Назначение,
					|Организация,
					|ЭтоРабота,
					|ДлительностьВДнях");
				ЗаполнитьЗначенияСвойств(Поставка, ПоставкаРучная);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДокументы.Очистить();
	
	//Упорядочиваем таблицу заказов.
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗаказов.Номенклатура                 КАК Номенклатура,
		|	ТаблицаЗаказов.Характеристика               КАК Характеристика,
		|	ТаблицаЗаказов.Склад                        КАК Склад,
		|	ТаблицаЗаказов.Назначение                   КАК Назначение,
		|	ТаблицаЗаказов.ДатаПоставки                 КАК ДатаПоставки,
		|	ТаблицаЗаказов.КоличествоКЗаказу            КАК КоличествоКЗаказу,
		|	ТаблицаЗаказов.СпособОбеспечения            КАК СпособОбеспечения,
		|	ТаблицаЗаказов.КоличествоКЗаказу            КАК Количество,
		|	ТаблицаЗаказов.ИсточникОбеспечения          КАК ИсточникОбеспечения,
		|	ТаблицаЗаказов.ТипОбеспечения               КАК ТипОбеспечения,
		|	ТаблицаЗаказов.Организация                  КАК Организация,
		|	ТаблицаЗаказов.ДлительностьВДнях            КАК ДлительностьВДнях,
		|	ТаблицаЗаказов.ЭтоРабота                    КАК ЭтоРабота,
		|	ТаблицаЗаказов.Соглашение                   КАК Соглашение,
		|	ТаблицаЗаказов.УсловиеЦены                  КАК УсловиеЦены
		|ПОМЕСТИТЬ ТаблицаЗаказов
		|ИЗ
		|	&ТаблицаЗаказов КАК ТаблицаЗаказов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗаказов.Номенклатура                 КАК Номенклатура,
		|	ТаблицаЗаказов.Характеристика               КАК Характеристика,
		|	ТаблицаЗаказов.Склад                        КАК Склад,
		|	ТаблицаЗаказов.Назначение                   КАК Назначение,
		|	ТаблицаЗаказов.СпособОбеспечения            КАК СпособОбеспечения,
		|	ТаблицаЗаказов.ДатаПоставки                 КАК ДатаПоставки,
		|	СУММА(ТаблицаЗаказов.Количество)            КАК Количество,
		|	ТаблицаЗаказов.ИсточникОбеспечения          КАК ИсточникОбеспечения,
		|	ТаблицаЗаказов.ТипОбеспечения               КАК ТипОбеспечения,
		|	ТаблицаЗаказов.Организация                  КАК Организация,
		|	ТаблицаЗаказов.ДлительностьВДнях            КАК ДлительностьВДнях,
		|	ТаблицаЗаказов.ЭтоРабота                    КАК ЭтоРабота,
		|	ТаблицаЗаказов.Соглашение                   КАК Соглашение,
		|	ТаблицаЗаказов.УсловиеЦены                  КАК УсловиеЦены
		|ИЗ
		|	ТаблицаЗаказов КАК ТаблицаЗаказов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаЗаказов.Номенклатура,
		|	ТаблицаЗаказов.Характеристика,
		|	ТаблицаЗаказов.Склад,
		|	ТаблицаЗаказов.Назначение,
		|	ТаблицаЗаказов.СпособОбеспечения,
		|	ТаблицаЗаказов.ДатаПоставки,
		|	ТаблицаЗаказов.ИсточникОбеспечения,
		|	ТаблицаЗаказов.ТипОбеспечения,
		|	ТаблицаЗаказов.Соглашение,
		|	ТаблицаЗаказов.Организация,
		|	ТаблицаЗаказов.ДлительностьВДнях,
		|	ТаблицаЗаказов.ЭтоРабота,
		|	ТаблицаЗаказов.УсловиеЦены
		|
		|УПОРЯДОЧИТЬ ПО
		|	Склад,
		|	ТипОбеспечения,
		|	ИсточникОбеспечения,
		|	Соглашение,
		|	Организация,
		|	ЭтоРабота,
		|	ДатаПоставки,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	СпособОбеспечения,
		|	УсловиеЦены";

	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов);
	ЗаказыУпорядоченные = Запрос.Выполнить().Выгрузить();
	
	СтрокиОдногоЗаказа = ЗаказыУпорядоченные.СкопироватьКолонки();
	
	//Формируем ключ строк таблицы заказов. Строки с одинаковым значением в ключе попадут в один и тот же документ заказа.
	КлючСтроки = Новый Структура("Склад, ТипОбеспечения, ИсточникОбеспечения, Соглашение, ДатаПоставки, Назначение");
	
	//Дополнительный ключ позволит разделить заказы на сборку по одной номенклатуре в каждом.
	СборкаРазборка = Перечисления.ТипыОбеспечения.СборкаРазборка;
	ДопКлючПоНоменклатуре = Новый Структура("Номенклатура, Характеристика");
	
	Для Каждого СтрокаЗаказа Из ЗаказыУпорядоченные Цикл
		
		ИзмениласьАналитика = Ложь;
		//Проверяем необходимость заполнения ключа.
		Для Каждого Элемент Из КлючСтроки Цикл
			
			Если Элемент.Значение <> СтрокаЗаказа[Элемент.Ключ] Тогда
				
				//Назначение и даты поставки можно фиксировать в строках табличной части создаваемого заказа, кроме сборки.
				Если (СтрокаЗаказа.ТипОбеспечения = Перечисления.ТипыОбеспечения.Перемещение
						ИЛИ СтрокаЗаказа.ТипОбеспечения = Перечисления.ТипыОбеспечения.Покупка)
					И (Элемент.Ключ = "ДатаПоставки"
						ИЛИ Элемент.Ключ = "Назначение") Тогда
					
					Продолжить;
					
				КонецЕсли;
					
				//Для работ соответствие по складу не проверяется.
				Если Элемент.Ключ = "Склад" И СтрокаЗаказа.ЭтоРабота Тогда
					Продолжить;
				КонецЕсли;
				
				Если Элемент.Ключ = "Склад" И Не ЗначениеЗаполнено(Элемент.Значение) Тогда
					КлючСтроки.Склад = СтрокаЗаказа.Склад;
					Продолжить;
				КонецЕсли;
				
				ИзмениласьАналитика = Истина;
				ЗаполнитьЗначенияСвойств(КлючСтроки, СтрокаЗаказа);
				ЗаполнитьЗначенияСвойств(ДопКлючПоНоменклатуре, СтрокаЗаказа);
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ИзмениласьАналитика И СтрокаЗаказа.ТипОбеспечения = СборкаРазборка Тогда
			
			Если ДопКлючПоНоменклатуре.Номенклатура <> СтрокаЗаказа.Номенклатура 
				ИЛИ ДопКлючПоНоменклатуре.Характеристика <> СтрокаЗаказа.Характеристика Тогда
				
				ИзмениласьАналитика = Истина;
				ЗаполнитьЗначенияСвойств(ДопКлючПоНоменклатуре, СтрокаЗаказа);
				
			КонецЕсли;
				
		КонецЕсли;
		
		//Формируем строки одного заказа, если ключ строки не поменялся.
		Если Не ИзмениласьАналитика Тогда 
			
			СтрокаОдногоЗаказа = СтрокиОдногоЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОдногоЗаказа, СтрокаЗаказа);
			
		КонецЕсли;
		
		//Если же ключ строки изменился, записываем заказ и переходим к обработке строк с новым ключом.
		Если ИзмениласьАналитика Тогда
			
			Если СтрокиОдногоЗаказа.Количество() > 0 Тогда
				
				СоздатьЗаказНаСервере(СтрокиОдногоЗаказа, ПереопределенныеСообщения, КлючСтроки.Склад);
				
			КонецЕсли;
			
			СтрокиОдногоЗаказа.Очистить();
			СтрокаОдногоЗаказа = СтрокиОдногоЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОдногоЗаказа, СтрокаЗаказа);
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Запись заказа по последниму ключу таблицы заказов.
	Если СтрокиОдногоЗаказа.Количество() > 0 Тогда
		
		СоздатьЗаказНаСервере(СтрокиОдногоЗаказа, ПереопределенныеСообщения, КлючСтроки.Склад);
		
	КонецЕсли;
	
	Для Каждого Сообщение Из ПереопределенныеСообщения Цикл
		
		Сообщение.Сообщить();
		
	КонецЦикла;
	
КонецПроцедуры // СоздатьЗаказыНаСервере()

//Создает и заполняет документ в базе по имеющимся строкам.
//
//Важные параметры:
//
// СтрокиЗаказа 	- 	ТаблицаЗначений.
//					    Содержит данные, необходимые для заполнения шапки заказа и табличной части Товары.

&НаСервере
Процедура СоздатьЗаказНаСервере(СтрокиЗаказа, ПереопределенныеСообщения, Склад)
	
	Перем ДокументОбъект;
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	ИспользоватьЗаказыПоставщикам   = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыПоставщикам");
	ИспользоватьЗаказыНаПеремещение = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаПеремещение");
	ИспользоватьЗаказыНаСборку      = ПолучитьФункциональнуюОпцию("ИспользоватьЗаказыНаСборку");
	
	ТипОбеспеченияЗаказа            = СтрокиЗаказа[0].ТипОбеспечения;
	Если Не ЗначениеЗаполнено(ТипОбеспеченияЗаказа) Тогда
		
		ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.Покупка;
		
	КонецЕсли;
	
	Если 	(НЕ ИспользоватьЗаказыПоставщикам        И ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.Покупка) 
			ИЛИ (НЕ ИспользоватьЗаказыНаПеремещение  И ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.Перемещение) 
			ИЛИ (НЕ ИспользоватьЗаказыНаСборку       И ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.СборкаРазборка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("КоэффициентыУпаковок", Новый Соответствие);
	КэшированныеЗначения.Вставить("ПроцентыСтавокНДС",    Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",            Новый Соответствие);
	
	СкладПолучатель = Склад;
	
	Если ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.Перемещение Тогда
		
		ДокументОбъект = Документы.ЗаказНаПеремещение.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ДокументОбъект.Заполнить(Неопределено);
		ДокументОбъект.Комментарий = НСтр("ru = 'Сформирован автоматически обработкой Обеспечение потребностей.'");
		
		ДокументОбъект.СкладОтправитель = СтрокиЗаказа[0].ИсточникОбеспечения;
		ДокументОбъект.Организация      = ?(ЗначениеЗаполнено(СтрокиЗаказа[0].Организация), 
			СтрокиЗаказа[0].Организация, Организация);
		ДокументОбъект.СкладПолучатель  = СкладПолучатель;
		ДокументОбъект.ЖелаемаяДатаПоступления = СтрокиЗаказа[0].ДатаПоставки;
		ДокументОбъект.ДлительностьПеремещения = СтрокиЗаказа[0].ДлительностьВДнях;
		
		ДокументОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;
		
		СтруктураДействий = Новый Структура("ПересчитатьКоличествоЕдиниц");
		
		ТабЧастьТовары = ДокументОбъект.Товары;
		
	ИначеЕсли ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.СборкаРазборка Тогда
		
		ДокументОбъект = Документы.ЗаказНаСборку.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		ДокументОбъект.Заполнить(Неопределено);
		
		ДокументОбъект.Организация      = ?(ЗначениеЗаполнено(СтрокиЗаказа[0].Организация), 
			СтрокиЗаказа[0].Организация, Организация);
		ДокументОбъект.Склад            = Склад;
		
		ДокументОбъект.ОкончаниеСборкиРазборки = СтрокиЗаказа[0].ДатаПоставки;
		ДокументОбъект.ЖелаемаяДатаПоступления = СтрокиЗаказа[0].ДатаПоставки;
		
		ДлительностьСборкиРазборки             = СтрокиЗаказа[0].ДлительностьВДнях;
		ДокументОбъект.НачалоСборкиРазборки    = ДокументОбъект.ОкончаниеСборкиРазборки - 
			СтрокиЗаказа[0].ДлительностьВДнях * 86400;
		
		ДокументОбъект.Статус = Перечисления.СтатусыВнутреннихЗаказов.КОбеспечению;
		
		ДокументОбъект.Номенклатура       = СтрокиЗаказа[0].Номенклатура;
		ДокументОбъект.Назначение         = СтрокиЗаказа[0].Назначение;
		ДокументОбъект.Характеристика     = СтрокиЗаказа[0].Характеристика;
		ДокументОбъект.КоличествоУпаковок = СтрокиЗаказа.Итог("Количество");
		ДокументОбъект.Количество         = ДокументОбъект.КоличествоУпаковок;
		ДокументОбъект.ТипОперации        = Перечисления.ТипыОперацийЗаказаНаСборку.СборкаИзКомплектующих;
			
		ДокументОбъект.ЗаполнитьПоОсновномуВариантуКомплектации();
			
		ДокументОбъект.Комментарий = НСтр("ru = 'Сформирован автоматически обработкой Обеспечение потребностей.'");
			
		ОшибокНеОбнаружено = ДокументОбъект.ПроверитьЗаполнение();
		Если Не ОшибокНеОбнаружено Тогда
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		Иначе //нет ошибок, проводим документ
			
			Попытка 
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецПопытки;
			
		КонецЕсли;
		
		СтрокаТЗДокументы = ТаблицаДокументы.Добавить();
		НовыеЗначенияРеквизитов = ПолучитьЗначенияРеквизитовДокумента(ДокументОбъект);
		ЗаполнитьЗначенияСвойств(СтрокаТЗДокументы, НовыеЗначенияРеквизитов);
		
	ИначеЕсли ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.Покупка Тогда
		
		ДокументОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
		ДокументОбъект.Дата = ТекущаяДатаСеанса();
		
		СтруктураДействий = Новый Структура;
		
		Если ЗначениеЗаполнено(СтрокиЗаказа[0].Соглашение) Тогда
			
			// Заполнение по соглашению
			ДокументОбъект.Заполнить(СтрокиЗаказа[0].Соглашение);
			
			СтруктураДействий.Вставить("ЗаполнитьУсловияЗакупок", 
				Новый Структура("Дата, Валюта, Соглашение",
					ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.Соглашение)
				);
			ПараметрыДействия = 
				Новый Структура("Партнер, Дата, Валюта, Соглашение ", 
					ДокументОбъект.Партнер, ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.Соглашение);
			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПараметрыДействия);
		
		ИначеЕсли ЗначениеЗаполнено(СтрокиЗаказа[0].ИсточникОбеспечения) Тогда
			
			// Заполнение по партнеру
			ДокументОбъект.Заполнить(СтрокиЗаказа[0].ИсточникОбеспечения);
			
			ПараметрыДействия = 
				Новый Структура("Партнер, Дата, Валюта, Соглашение", 
					ДокументОбъект.Партнер, ДокументОбъект.Дата, ДокументОбъект.Валюта, ДокументОбъект.Соглашение);
			СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", ПараметрыДействия);
			
		Иначе
			
			//Заполнение
			ДокументОбъект.Заполнить(Неопределено);
			ДокументОбъект.Комментарий = НСтр("ru = 'Сформирован автоматически обработкой Обеспечение потребностей.'");

		КонецЕсли;

		ДокументОбъект.Организация      = ?(ЗначениеЗаполнено(СтрокиЗаказа[0].Организация), 
			СтрокиЗаказа[0].Организация, Организация);
		ДокументОбъект.Склад       = СкладПолучатель;
		
		ДокументОбъект.ЖелаемаяДатаПоступления = СтрокиЗаказа[0].ДатаПоставки;
		
		ДокументОбъект.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
		
		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
		СтруктураДействий.Вставить("ЗаполнитьЦенуЗакупки", 
			ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруЗаполненияЦеныЗакупкиВСтрокеТЧ(ДокументОбъект));
		СтруктураДействий.Вставить("ЗаполнитьСтавкуНДС",   ДокументОбъект.НалогообложениеНДС);
		СтруктураПересчетаНДС = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруПересчетаСуммыНДСВСтрокеТЧ(ДокументОбъект);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",  СтруктураПересчетаНДС);
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаНДС);
		СтруктураДействий.Вставить("ПересчитатьСумму");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать", Истина));
		
		ТабЧастьТовары = ДокументОбъект.Товары;
		
	КонецЕсли;
	
	Если ТипОбеспеченияЗаказа <> Перечисления.ТипыОбеспечения.СборкаРазборка 
	Тогда
		
		Для Каждого СтрокаНоменклатурыЗаказа Из СтрокиЗаказа Цикл
			
			НоваяСтрокаТовары = ТабЧастьТовары.Добавить();
			
			НоваяСтрокаТовары.Номенклатура   = СтрокаНоменклатурыЗаказа.Номенклатура;
			НоваяСтрокаТовары.Характеристика = СтрокаНоменклатурыЗаказа.Характеристика;
			НоваяСтрокаТовары.Назначение     = СтрокаНоменклатурыЗаказа.Назначение;
			
			НоваяСтрокаТовары.КоличествоУпаковок = СтрокаНоменклатурыЗаказа.Количество;
			
			Если ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.Перемещение Тогда
		
				НоваяСтрокаТовары.ОкончаниеПоступления = СтрокаНоменклатурыЗаказа.ДатаПоставки;
				НоваяСтрокаТовары.НачалоОтгрузки       = СтрокаНоменклатурыЗаказа.ДатаПоставки 
					- СтрокаНоменклатурыЗаказа.ДлительностьВДнях * 86400;
			
			ИначеЕсли ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.Покупка Тогда
				
				НоваяСтрокаТовары.ДатаПоступления       = СтрокаНоменклатурыЗаказа.ДатаПоставки;
				НоваяСтрокаТовары.Склад                 = СкладПолучатель;
				НоваяСтрокаТовары.УсловиеЦеныПоставщика = СтрокаНоменклатурыЗаказа.УсловиеЦены;
				
			КонецЕсли;
			
			ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрокаТовары, СтруктураДействий, КэшированныеЗначения);
			
		КонецЦикла;
		
		Если ТипОбеспеченияЗаказа = Перечисления.ТипыОбеспечения.Покупка Тогда
		
			Если ТабЧастьТовары.Итог("СуммаСНДС") > 0 Тогда
				ДокументОбъект.ЗаполнитьЭтапыГрафикаОплаты();
			КонецЕсли;
			
		КонецЕсли;		
			
		ОшибокНеОбнаружено = ДокументОбъект.ПроверитьЗаполнение();
		Если Не ОшибокНеОбнаружено Тогда
			
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			
		Иначе //нет ошибок, проводим документ
			
			Попытка 
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение	
				
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
				
			КонецПопытки;
			
		КонецЕсли;
		
		СтрокаТЗДокументы       = ТаблицаДокументы.Добавить();
		НовыеЗначенияРеквизитов = ПолучитьЗначенияРеквизитовДокумента(ДокументОбъект);
		ЗаполнитьЗначенияСвойств(СтрокаТЗДокументы, НовыеЗначенияРеквизитов);
		
	КонецЕсли;
	
	ОшибкиФормированияДокументов = ПолучитьСообщенияПользователю(Истина);
	Для Каждого ОшибкаФормированияДокумента Из ОшибкиФормированияДокументов Цикл
		
		ОшибкаФормированияДокумента.КлючДанных = ДокументОбъект.Ссылка;
		ПереопределенныеСообщения.Добавить(ОшибкаФормированияДокумента);
		
	КонецЦикла;
	
КонецПроцедуры //СоздатьЗаказНаСервере()

//Удаляет заказы на сервере с контролем ссылочной целостности.

&НаСервереБезКонтекста
Функция УдалитьЗаказыНаСервере(СсылкиНаУдаление)
	
	ТабСсылок = НайтиПоСсылкам(СсылкиНаУдаление);
	
	Сообщение = Новый СообщениеПользователю();
	ТекстСообщения = "ru = ""Имеются ссылки на объект %1  %2. Документ не удален""";
	Для Каждого Ссылка из ТабСсылок Цикл
		
		Если Ссылка[0] <> Ссылка[1] Тогда
			
			Сообщение.Текст = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СокрЛП(Ссылка[0]), СокрЛП(Ссылка[1])); 
			Сообщение.Сообщить();
			
			Индекс = СсылкиНаУдаление.Найти(Ссылка[0]);
			Если Индекс <> Неопределено Тогда
			
				СсылкиНаУдаление.Удалить(Индекс);
			
			КонецЕсли;
		
	КонецЕсли;
		
		
	КонецЦикла;

	УдалитьОбъекты(СсылкиНаУдаление, Ложь);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Обеспечивающие загрузку данных объектов управления запасами с сервера.

//Загрузка таблицы Объекты целиком. Заполняет табличную часть Объекты.

&НаСервере 
Процедура ЗагрузитьОбъекты()

	//Получаем данные подсистемы управления запасами
	ЕстьОтборПоСегментам = ПроверитьНаличиеОтбораПоСегментам();
	ТекстЗапроса = 
		СформироватьТекстЗапросаКлючейПотребности(Ложь, ЕстьОтборПоСегментам)
		+ СформироватьТекстЗапросаМетодовУправленияЗапасами()
		+ СформироватьТекстЗапросаПорядкаОбеспечения()
		+ СформироватьТекстЗапросаКлючевыхДат()
		+ СформироватьТекстЗапросаРасчетаПоказателей();
		
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(ТекстЗапроса);
	ЗаполнитьПараметрыЗапросаИзОбработки(Запрос);
	Запрос.УстановитьПараметр("КоэффициентВалютыУпрУчета", 
		Обработки.ОбеспечениеПотребностей.ПолучитьКурсВалютыУправленческогоУчета(Объект.Параметры[0].НачалоПериода));
		
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		ВыборкаДвиженийОбъектов = Результат.Выбрать();
		//Заполняем таблицу Объекты
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ТаблицаОбъектов = ОбработкаОбъект.Объекты;
		СформироватьТаблицуОбъектов(ВыборкаДвиженийОбъектов, ТаблицаОбъектов, Истина);
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьОбъекты() 

//Сворачивает данные движений запаса по периодам до даты ближайшей поставки и даты следующей поставки,
//получая суммарные потребности и поступления, отображаемые на вкладке рекомендаций.

&НаСервере
Функция СформироватьТаблицуОбъектов(Выборка, ТаблицаОбъектов, ЗагрузкаТаблицыЦеликом)
	
	АналитикаСтроки              = Новый Структура("Номенклатура, Характеристика, Склад, Назначение, Подразделение");
	СтрокаТаблицыОбъектов        = Неопределено;
	НачалоПериода                = Объект.Параметры[0].НачалоПериода;
	
	//Если не ЗагрузкаТаблицыЦеликом.
	КоличествоИзмененныхСтрок    = 0;
	ПараметрыПоставкиДоИзменения = Новый Структура("
		| ДатаСледующейПоставки,
		| ИсточникОбеспечения,
		| Соглашение,
		| ТипОбеспечения,
		| МетодУправленияЗапасами"
	);
	
	Пока Выборка.Следующий() Цикл
		
		ИзмениласьАналитика = 
			Выборка.Номенклатура       <> АналитикаСтроки.Номенклатура 
			ИЛИ Выборка.Характеристика <> АналитикаСтроки.Характеристика 
			ИЛИ Выборка.Склад          <> АналитикаСтроки.Склад 
			ИЛИ Выборка.Назначение     <> АналитикаСтроки.Назначение
			ИЛИ Выборка.Подразделение  <> АналитикаСтроки.Подразделение;
			
		Если ИзмениласьАналитика Тогда
			
			//Изменилась аналитика строки таблицы движений потребностей. 
			//Добавляем новую строку в таблицу объектов и подготавливаем новый объект к обходу движений его потребностей.
			ЗаполнитьЗначенияСвойств(АналитикаСтроки, Выборка);
			
			//Досчитаем ранее добавленную строку.
			ДосчитатьКЗаказуВПоставке(СтрокаТаблицыОбъектов, ЗагрузкаТаблицыЦеликом, 
				ПараметрыПоставкиДоИзменения, КоличествоИзмененныхСтрок);
			
			//Добавим новую строку.
			Если ЗагрузкаТаблицыЦеликом Тогда 
				СтрокаТаблицыОбъектов = ТаблицаОбъектов.Добавить();
			Иначе 
				СтрокаТаблицыОбъектов = ТаблицаОбъектов[Выборка.Индекс];
				ЗаполнитьЗначенияСвойств(ПараметрыПоставкиДоИзменения, СтрокаТаблицыОбъектов);
			КонецЕсли;
				
			//Заполняем поля объекта, не зависящие от движений по дням.
			НеЗаполняемыеКолонки = "ПотреблениеПоПланам, ПотреблениеПоСтатистике, ОжидаемаяОтгрузка, ОжидаемоеПоступление";
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбъектов, Выборка, , НеЗаполняемыеКолонки);
			СтрокаТаблицыОбъектов.ДнейДоЗаказа = (СтрокаТаблицыОбъектов.ДатаЗаказа - НачалоПериода) / 86400;
			
			СтрокаТаблицыОбъектов.ЭтоПотребностиПоМетоду = 
				(Выборка.ЭтоПотребностьВПродаже ИЛИ НЕ СтрокаТаблицыОбъектов.МетодУправленияЗапасами 
					= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование"))
				И (Выборка.ЭтоПотребностьВЗапасе 
					ИЛИ НЕ Выборка.МетодУправленияЗапасами
						= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер") 
						И НЕ Выборка.МетодУправленияЗапасами
							= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал"));
			
			СтрокаТаблицыОбъектов.ОстатокБезОбособления = 
				?(СтрокаТаблицыОбъектов.ЭтаПотребностьОбособлена, Выборка.Остаток, 0);
				
			СтрокаТаблицыОбъектов.ВНаличииОстаток = 
				?(СтрокаТаблицыОбъектов.ЭтаПотребностьОбособлена, Выборка.ОстатокОбособленный, Выборка.Остаток);
				
			СтрокаТаблицыОбъектов.ИсточникРедактируется = Не ЗначениеЗаполнено(СтрокаТаблицыОбъектов.ИсточникОбеспечения);
			
			СтрокаТаблицыОбъектов.ДатаПоставкиОпределена = (НЕ Выборка.ДатаСледующейПоставки = NULL);
			
			СтрокаТаблицыОбъектов.НеОбеспеченоВсего = СтрокаТаблицыОбъектов.Потребность - СтрокаТаблицыОбъектов.Обеспечено;
			
			Если Не СтрокаТаблицыОбъектов.ДатаПоставкиОпределена Тогда
				Продолжить;
			КонецЕсли;
			
			//Инициализируем переменные, зависящие от движений.
			ОстатокРасчетныеПотребности = СтрокаТаблицыОбъектов.ВНаличииОстаток;
			ОстатокОжидаемыеОтгрузки    = СтрокаТаблицыОбъектов.ВНаличииОстаток;
				
			СтрокаТаблицыОбъектов.МинимальныйПрогнозныйОстатокДоПоставки      = СтрокаТаблицыОбъектов.ВНаличииОстаток;
			СтрокаТаблицыОбъектов.МинимальныйПрогнозныйОстатокМеждуПоставками = СтрокаТаблицыОбъектов.ВНаличииОстаток;
			
			СтрокаТаблицыОбъектов.ПотреблениеПоПланам      = 0;
			СтрокаТаблицыОбъектов.ПотреблениеПоСтатистике  = 0;
			СтрокаТаблицыОбъектов.ОжидаемаяОтгрузка        = 0;
			СтрокаТаблицыОбъектов.ОжидаемоеПоступление     = 0;
			СтрокаТаблицыОбъектов.СреднедневноеПотребление = 0;
			СтрокаТаблицыОбъектов.ОбеспечитьПоставкой      = 0;
			СтрокаТаблицыОбъектов.ЭтоИзбытокОбеспечения    = Ложь;
			СтрокаТаблицыОбъектов.ЭтоНетРабочихДней        = 
				(СтрокаТаблицыОбъектов.МетодУправленияЗапасами 
					<> ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ЗаказПодЗаказ"));
			
		КонецЕсли;
				
		Если Не СтрокаТаблицыОбъектов.ДатаПоставкиОпределена Тогда
			Продолжить;
		КонецЕсли;
		
		//Обрабатываем очередное движение по дням:
		СтрокаТаблицыОбъектов.СтраховойЗапас           = Макс(СтрокаТаблицыОбъектов.СтраховойЗапас,
			Выборка.СтраховойЗапас);
		СтрокаТаблицыОбъектов.МаксимальныйЗапас        = Макс(СтрокаТаблицыОбъектов.МаксимальныйЗапас,
			Выборка.МаксимальныйЗапас);
		СтрокаТаблицыОбъектов.СреднедневноеПотребление = Макс(СтрокаТаблицыОбъектов.СреднедневноеПотребление,
			Выборка.СреднедневноеПотребление);
		
		Если Выборка.ДатаСобытия = NULL Тогда
			Продолжить;
		КонецЕсли;
		
		//Если есть хотя бы одна строка с датой для расчета потребности по статистике/плану,
		//тогда обнуляем признак ЭтоНетРабочихДней.
		Если СтрокаТаблицыОбъектов.ЭтоНетРабочихДней 
			И (Выборка.ИсточникДаты = 0 И СтрокаТаблицыОбъектов.МетодУправленияЗапасами
				= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование") 
				ИЛИ Выборка.ИсточникДаты = 2 И СтрокаТаблицыОбъектов.МетодУправленияЗапасами 
					= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер")
				ИЛИ Выборка.ИсточникДаты = 2 И СтрокаТаблицыОбъектов.МетодУправленияЗапасами
					= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал")) Тогда
			СтрокаТаблицыОбъектов.ЭтоНетРабочихДней = Ложь;
		КонецЕсли;
		
		//Накапливаем информацию о потребностях и поступлениях.
		СтрокаТаблицыОбъектов.ОжидаемоеПоступление = СтрокаТаблицыОбъектов.ОжидаемоеПоступление + Выборка.ОжидаемоеПоступление;
		СтрокаТаблицыОбъектов.ОжидаемаяОтгрузка    = СтрокаТаблицыОбъектов.ОжидаемаяОтгрузка    + Выборка.ОжидаемаяОтгрузка;
		
		ПотреблениеПоПланамЗаДень     = Выборка.ПотреблениеПоПланам;
		ПотреблениеПоСтатистикеЗаДень = Выборка.ПотреблениеПоСтатистике;
		
		Если Выборка.ДатаСобытия = НачалоПериода Тогда
			//прогноз потребления на сегодня небходимо скорректировать на величину отгрузок уже зафиксированных в базе.
			ПотреблениеПоПланамЗаДень     = ПотреблениеПоПланамЗаДень     
				- Мин(СтрокаТаблицыОбъектов.РасходСНачалаДня, Выборка.ПотреблениеПоПланам);
			ПотреблениеПоСтатистикеЗаДень = ПотреблениеПоСтатистикеЗаДень 
				- Мин(СтрокаТаблицыОбъектов.РасходСНачалаДня, Выборка.ПотреблениеПоСтатистике);
			
		КонецЕсли;
		
		СтрокаТаблицыОбъектов.ПотреблениеПоПланам     = СтрокаТаблицыОбъектов.ПотреблениеПоПланам
			+ ПотреблениеПоПланамЗаДень;
		СтрокаТаблицыОбъектов.ПотреблениеПоСтатистике = СтрокаТаблицыОбъектов.ПотреблениеПоСтатистике
			+ ПотреблениеПоСтатистикеЗаДень;
		
		//Рассчитываем Прогноз остатка.
		ОстатокОжидаемыеОтгрузки = ОстатокОжидаемыеОтгрузки + Выборка.ОжидаемоеПоступление - Выборка.ОжидаемаяОтгрузка;
		
		Если СтрокаТаблицыОбъектов.МетодУправленияЗапасами 
				= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование") Тогда
			
			ОстатокРасчетныеПотребности = ОстатокРасчетныеПотребности + Выборка.ОжидаемоеПоступление
				- ПотреблениеПоПланамЗаДень;
			
		ИначеЕсли СтрокаТаблицыОбъектов.МетодУправленияЗапасами 
			= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал") 
			ИЛИ СтрокаТаблицыОбъектов.МетодУправленияЗапасами 
				= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер") Тогда
			
			ОстатокРасчетныеПотребности = ОстатокРасчетныеПотребности + Выборка.ОжидаемоеПоступление
				- ПотреблениеПоСтатистикеЗаДень;
			
		КонецЕсли;
			
		СтрокаТаблицыОбъектов.ПрогнозныйОстаток = Мин(ОстатокРасчетныеПотребности, ОстатокОжидаемыеОтгрузки);
			
		//Ошибки в датах для работ.
		Если СтрокаТаблицыОбъектов.ЭтоРабота И Выборка.ОжидаемаяОтгрузка < Выборка.ОжидаемоеПоступление Тогда
			СтрокаТаблицыОбъектов.ЭтоИзбытокОбеспечения = Истина;
		КонецЕсли;
				
		Если СтрокаТаблицыОбъектов.ЭтоРабота И СтрокаТаблицыОбъектов.ДатаПоставки = Выборка.ДатаСобытия Тогда
			СтрокаТаблицыОбъектов.ОбеспечитьПоставкой = Макс(0, Выборка.ОжидаемаяОтгрузка - Выборка.ОжидаемоеПоступление);
		КонецЕсли;
			
		//Дефицит для товаров.
		Если Выборка.ДатаСобытия < СтрокаТаблицыОбъектов.ДатаПоставки Тогда
			СтрокаТаблицыОбъектов.МинимальныйПрогнозныйОстатокДоПоставки
				= Мин(СтрокаТаблицыОбъектов.МинимальныйПрогнозныйОстатокДоПоставки, СтрокаТаблицыОбъектов.ПрогнозныйОстаток);
			СтрокаТаблицыОбъектов.МинимальныйПрогнозныйОстатокМеждуПоставками 
				= СтрокаТаблицыОбъектов.МинимальныйПрогнозныйОстатокДоПоставки;
		ИначеЕсли Выборка.ДатаСобытия < СтрокаТаблицыОбъектов.ДатаСледующейПоставки Тогда
			СтрокаТаблицыОбъектов.МинимальныйПрогнозныйОстатокМеждуПоставками
				= Мин(СтрокаТаблицыОбъектов.МинимальныйПрогнозныйОстатокМеждуПоставками,
					СтрокаТаблицыОбъектов.ПрогнозныйОстаток);
		КонецЕсли;
		
	КонецЦикла;
	
	ДосчитатьКЗаказуВПоставке(СтрокаТаблицыОбъектов, ЗагрузкаТаблицыЦеликом,
		ПараметрыПоставкиДоИзменения, КоличествоИзмененныхСтрок);
	
	Возврат КоличествоИзмененныхСтрок;
	
КонецФункции // СформироватьТаблицуОбъектов()

&НаСервере
Функция ОбновитьСтрокиСВыбраннымКалендарем(КалендарьПоставки)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаОбъекты = 
		ОбработкаОбъект.Объекты.Выгрузить(, "
		| НомерСтроки,
		| Склад,
		| Номенклатура,
		| МетодУправленияЗапасами,
		| Характеристика,
		| Назначение,
		| Подразделение,
		| КалендарьПоставки,
		| КалендарьРаботы"
	);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаОбъекты",               ТаблицаОбъекты);
	Запрос.УстановитьПараметр("Календарь",                    КалендарьПоставки);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки - 1          КАК Индекс,
	|	Таблица.Склад                    КАК Склад,
	|	Таблица.Номенклатура             КАК Номенклатура,
	|	Таблица.Характеристика           КАК Характеристика,
	|	Таблица.Назначение               КАК Назначение,
	|	Таблица.Подразделение            КАК Подразделение
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	&ТаблицаОбъекты КАК Таблица
	|ГДЕ 
	|	Таблица.КалендарьПоставки   = &Календарь 
	|	ИЛИ Таблица.КалендарьРаботы = &Календарь 
	|		И Таблица.МетодУправленияЗапасами 
	|		= ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ТочкаперезаказаФиксированныйРазмер)
	|	ИЛИ Таблица.КалендарьРаботы = &Календарь 
	|		И Таблица.МетодУправленияЗапасами
	|			= ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ТочкаперезаказаФиксированныйИнтервал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Индекс         КАК Индекс,
	|	ТаблицаОтбора.Склад          КАК Склад,
	|	ТаблицаОтбора.Номенклатура   КАК Номенклатура,
	|	ТаблицаОтбора.Характеристика КАК Характеристика,
	|	ТаблицаОтбора.Назначение     КАК Назначение,
	|	ТаблицаОтбора.Подразделение  КАК Подразделение
	|ИЗ
	|	ТаблицаОтбора КАК ТаблицаОтбора";
	
	КоличествоИзмененныхСтрок = ОбновитьСтрокиВыборочно(Запрос);
	
	Возврат КоличествоИзмененныхСтрок;
	
КонецФункции
	
&НаСервере
Функция ОбновитьОбъектыСИзменениемСпособа(ИзменениеОсновногоСпособа, СпособыСИзменениемРеквизитов, АналитикаСтроки)

	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ТаблицаОбъекты = 
		ОбработкаОбъект.Объекты.Выгрузить(, "
		| НомерСтроки,
		| Склад,
		| Номенклатура,
		| Характеристика,
		| Назначение,
		| Подразделение,
		| СпособОбеспечения,
		| ИсточникПолученияСпособа,
		| ИсточникОбеспечения,
		| Организация,
		| Соглашение,
		| СрокИсполненияЗаказа,
		| КалендарьСпособа,
		| ТипОбеспечения,
		| УсловиеЦены"
	);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаОбъекты",               ТаблицаОбъекты);
	Запрос.УстановитьПараметр("Склад",                        АналитикаСтроки.Склад);
	Запрос.УстановитьПараметр("Номенклатура",                 АналитикаСтроки.Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",               АналитикаСтроки.Характеристика);
	Запрос.УстановитьПараметр("ИзменениеОсновногоСпособа",    ИзменениеОсновногоСпособа);
	Запрос.УстановитьПараметр("СпособыСИзменениемРеквизитов", СпособыСИзменениемРеквизитов);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки - 1          КАК Индекс,
	|	Таблица.Склад                    КАК Склад,
	|	Таблица.Номенклатура             КАК Номенклатура,
	|	Таблица.Характеристика           КАК Характеристика,
	|	Таблица.Назначение               КАК Назначение,
	|	Таблица.Подразделение            КАК Подразделение,
	|	Таблица.СпособОбеспечения        КАК СпособОбеспечения,
	|	Таблица.ИсточникОбеспечения      КАК ИсточникОбеспечения,
	|	Таблица.ИсточникПолученияСпособа КАК ИсточникПолученияСпособа,
	|	Таблица.Организация              КАК Организация,
	|	Таблица.Соглашение               КАК Соглашение,
	|	Таблица.КалендарьСпособа         КАК Календарь,
	|	Таблица.СрокИсполненияЗаказа     КАК СрокИсполненияЗаказа,
	|	Таблица.ТипОбеспечения           КАК ТипОбеспечения,
	|	Таблица.УсловиеЦены              КАК УсловиеЦены
	|ПОМЕСТИТЬ ТаблицаОбъекты
	|ИЗ
	|	&ТаблицаОбъекты КАК Таблица
	|;
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Индекс                   КАК Индекс,
	|	Таблица.Склад                    КАК Склад,
	|	Таблица.Номенклатура             КАК Номенклатура,
	|	Таблица.Характеристика           КАК Характеристика,
	|	Таблица.Назначение               КАК Назначение,
	|	Таблица.Подразделение            КАК Подразделение
	|ПОМЕСТИТЬ ТаблицаОтбора
	|ИЗ
	|	ТаблицаОбъекты КАК Таблица
	|ГДЕ 
	|	ВЫБОР
	|		КОГДА 0 В(&ИзменениеОсновногоСпособа) //Основной способ для товара задан для склада.
	|			И Таблица.Склад = &Склад 
	|			И (Таблица.ИсточникПолученияСпособа = 0 
	|				ИЛИ Таблица.ИсточникПолученияСпособа = 5)
	|		ТОГДА
	|			ИСТИНА
	|		КОГДА 1 В(&ИзменениеОсновногоСпособа) //Основной способ для товара задан для склада и номенклатуры.
	|			И Таблица.Склад = &Склад И Таблица.Номенклатура = &Номенклатура
	|			И (Таблица.ИсточникПолученияСпособа = 0 
	|				ИЛИ Таблица.ИсточникПолученияСпособа = 1 
	|				ИЛИ Таблица.ИсточникПолученияСпособа = 5)
	|		ТОГДА
	|			ИСТИНА
	|		КОГДА 2 В(&ИзменениеОсновногоСпособа) //Основной способ для товара задан для склада - номенклатуры - характеристики.
	|			И Таблица.Склад = &Склад И Таблица.Номенклатура = &Номенклатура И Таблица.Характеристика = &Характеристика
	|			И (Таблица.ИсточникПолученияСпособа = 0 
	|				ИЛИ Таблица.ИсточникПолученияСпособа = 1 
	|				ИЛИ Таблица.ИсточникПолученияСпособа = 2 
	|				ИЛИ Таблица.ИсточникПолученияСпособа = 5)
	|		ТОГДА
	|			ИСТИНА
	|		КОГДА 3 В(&ИзменениеОсновногоСпособа) //Основной способ для работы задан для номенклатуры.
	|			И Таблица.Номенклатура = &Номенклатура
	|			И (Таблица.ИсточникПолученияСпособа = 3 
	|				ИЛИ Таблица.ИсточникПолученияСпособа = 5)
	|		ТОГДА
	|			ИСТИНА
	|		КОГДА 4 В(&ИзменениеОсновногоСпособа) //Основной способ для работы задан для номенклатуры и характеристики.
	|			И Таблица.Номенклатура = &Номенклатура И Таблица.Характеристика = &Характеристика
	|			И (Таблица.ИсточникПолученияСпособа = 3 
	|				ИЛИ Таблица.ИсточникПолученияСпособа = 4 
	|				ИЛИ Таблица.ИсточникПолученияСпособа = 5)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ 
	|	ИЛИ (
	|		Таблица.СпособОбеспечения,
	|		Таблица.ИсточникОбеспечения,
	|		Таблица.Организация,
	|		Таблица.Соглашение,
	|		Таблица.СрокИсполненияЗаказа,
	|		Таблица.ТипОбеспечения,
	|		Таблица.Календарь,
	|		Таблица.УсловиеЦены)
	|		НЕ В(
	|			ВЫБРАТЬ 
	|				СпрСпособы.Ссылка                          КАК СпособОбеспечения, 
	|				СпрСпособы.ИсточникОбеспеченияПотребностей КАК ИсточникОбеспечения,
	|				СпрСпособы.Организация                     КАК Организация,
	|				СпрСпособы.Соглашение                      КАК Соглашение,
	|				СпрСпособы.СрокИсполненияЗаказа            КАК СрокИсполненияЗаказа,
	|				СпрСпособы.ТипОбеспечения                  КАК ТипОбеспечения,
	|				СпрСпособы.Календарь                       КАК Календарь,
	|				СпрСпособы.УсловиеЦеныПоставщика           КАК УсловиеЦены
	|			ИЗ 
	|				Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособы 
	|			ГДЕ 
	|				СпрСпособы.Ссылка В (&СпособыСИзменениемРеквизитов)
	|		)
	|	И Таблица.СпособОбеспечения В (&СпособыСИзменениемРеквизитов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОтбора.Индекс         КАК Индекс,
	|	ТаблицаОтбора.Склад          КАК Склад,
	|	ТаблицаОтбора.Номенклатура   КАК Номенклатура,
	|	ТаблицаОтбора.Характеристика КАК Характеристика,
	|	ТаблицаОтбора.Назначение     КАК Назначение,
	|	ТаблицаОтбора.Подразделение  КАК Подразделение
	|ИЗ
	|	ТаблицаОтбора КАК ТаблицаОтбора";
	
	КоличествоИзмененныхСтрок = ОбновитьСтрокиВыборочно(Запрос);
	
	Возврат КоличествоИзмененныхСтрок;
	
КонецФункции

&НаСервере
Функция ОбновитьСтрокиВыборочно(Запрос)
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыОбъекты = Объект.Объекты[Выборка.Индекс];
			ОтразитьПоставкуВИтогах(ЭтаФорма, СтрокаТаблицыОбъекты, 0);
			
			Для Каждого РучнаяПоставка Из СтрокаТаблицыОбъекты.ПоставкиРучнойНастройки Цикл
				
				ОтразитьПоставкуВИтогах(ЭтаФорма, РучнаяПоставка, 0);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
	//Получаем данные подсистемы управления запасами для выбранных объектов.
	Запрос.Текст =
		СформироватьТекстЗапросаКлючейПотребности(Истина, Ложь)
		+ СформироватьТекстЗапросаМетодовУправленияЗапасами()
		+ СформироватьТекстЗапросаПорядкаОбеспечения()
		+ СформироватьТекстЗапросаКлючевыхДат()
		+ СформироватьТекстЗапросаРасчетаПоказателей();
		
	ЗаполнитьПараметрыЗапросаИзОбработки(Запрос);
	Запрос.УстановитьПараметр("КоэффициентВалютыУпрУчета", 
		Обработки.ОбеспечениеПотребностей.ПолучитьКурсВалютыУправленческогоУчета(Объект.Параметры[0].НачалоПериода));
	
	Результат = Запрос.Выполнить();
	
	КоличествоИзмененныхСтрок = 0;
	Если Не Результат.Пустой() Тогда
		
		КоличествоИзмененныхСтрок = СформироватьТаблицуОбъектов(Результат.Выбрать(), Объект.Объекты, Ложь);
		
	КонецЕсли;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицыОбъекты = Объект.Объекты[Выборка.Индекс];
			Если СтрокаТаблицыОбъекты.ОтметитьКЗаказу Тогда
				
				ОтразитьПоставкуВИтогах(ЭтаФорма, СтрокаТаблицыОбъекты, СтрокаТаблицыОбъекты.КоличествоКЗаказу);
				
			КонецЕсли;
			
			Для Каждого РучнаяПоставка Из СтрокаТаблицыОбъекты.ПоставкиРучнойНастройки Цикл
				
				ОтразитьПоставкуВИтогах(ЭтаФорма, РучнаяПоставка, РучнаяПоставка.КоличествоКЗаказу);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КоличествоИзмененныхСтрок;
	
КонецФункции

&НаСервере
Процедура ДосчитатьКЗаказуВПоставке(Поставка, ЗагрузкаТаблицыЦеликом, ПараметрыПоставкиДоИзменения, КоличествоИзмененныхСтрок)
	
	Если Поставка <> Неопределено Тогда
		
		Если Не ЗагрузкаТаблицыЦеликом Тогда
			
			ЕстьИзмененияПараметров = ПроверитьИзмененияПараметровПоставки(Поставка, ПараметрыПоставкиДоИзменения, Ложь);
			Поставка.ВнесеныИзменения = 
				(Поставка.ОтметитьКЗаказу ИЛИ Поставка.КоличествоДругиеСпособы > 0) 
				И ЕстьИзмененияПараметров; 
				
			Если Поставка.ВнесеныИзменения И ПроверитьИзмененияПараметровПоставки(Поставка, ПараметрыПоставкиДоИзменения, Истина) Тогда 
				Поставка.ОтметитьКЗаказу = Ложь;
				Поставка.ПоставкиРучнойНастройки.Очистить();
				Поставка.КоличествоДругиеСпособы = 0;
			КонецЕсли;
			
			Если ЕстьИзмененияПараметров Тогда
				КоличествоИзмененныхСтрок = КоличествоИзмененныхСтрок + 1;
			КонецЕсли;
			
		КонецЕсли;
		
		КоличествоКЗаказу = РассчитатьРекомендации(Поставка);
		
		Если Не Поставка.ОтметитьКЗаказу И (ЗагрузкаТаблицыЦеликом ИЛИ Не Поставка.ВнесеныИзменения) Тогда 
			Поставка.КоличествоКЗаказу = КоличествоКЗаказу;
		КонецЕсли;
		
		Поставка.ФильтрКЗаказу       = (Поставка.КоличествоКЗаказу > 0);
		Поставка.ФильтрДнейдоЗаказа3 = (Поставка.ДнейдоЗаказа < 3);
		Поставка.ФильтрДнейдоЗаказа7 = (Поставка.ДнейдоЗаказа < 7);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьИзмененияПараметровПоставки(СтрокаТаблицыОбъектов, СтарыеПараметрыПоставки, ПроверятьТолькоВажные)

	ЕстьВажныеИзменения = 
		СтрокаТаблицыОбъектов.ДатаСледующейПоставки <> СтарыеПараметрыПоставки.ДатаСледующейПоставки 
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыОбъектов.ДатаСледующейПоставки)
			ИЛИ НЕ ЗначениеЗаполнено(СтарыеПараметрыПоставки.ДатаСледующейПоставки)
			ИЛИ СтрокаТаблицыОбъектов.ТипОбеспечения <> СтарыеПараметрыПоставки.ТипОбеспечения
			ИЛИ СтрокаТаблицыОбъектов.МетодУправленияЗапасами <> СтарыеПараметрыПоставки.МетодУправленияЗапасами;
			
	Если ПроверятьТолькоВажные Тогда
		
		Возврат ЕстьВажныеИзменения;
	
	Иначе
			
		Возврат 
			ЕстьВажныеИзменения
			ИЛИ СтрокаТаблицыОбъектов.ИсточникОбеспечения <> СтарыеПараметрыПоставки.ИсточникОбеспечения
			ИЛИ СтрокаТаблицыОбъектов.Соглашение <> СтарыеПараметрыПоставки.Соглашение;
			
	КонецЕсли;
		
КонецФункции // ПроверитьИзмененияПараметровПоставки()

////////////////////////////////////////////////////////////////////////////////
//Тексты запросов.

//Функция СформироватьТекстЗапросаКлючейПотребности.
//
//	Описание: формирует текст запроса получения таблицы, содержащей 
//		1) наборы Номенклатура - Характеристика - Склад по которым имеются данные о 
//			потребностях из планов продаж, среднедневного потребления, планируемых отгрузок по заказам,
//		2) наборы Номенклатура - Характеристика - Назначение - Склад по которым имеются данные об 
//			обособленных потребностях в товарах из планируемых отгрузок по заказам,
//		3) наборы Номенклатура - Характеристика - Назначение - Подразделение по которым имеются данные об 
//			обособленных потребностях в работах из планируемых отгрузок по заказам
//
//	Параметры:
//		ИспользоватьТаблицуОтбора - Булево - будут выбраны только наборы, соотвествтующие отбору, 
//			указанному во временной таблице ТаблицаОтбора
//
//	Возвращаемое значение: 
//		Строка - текст запроса временной таблицы КлючиПотребности.
//

&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаКлючейПотребности(ИспользоватьТаблицуОтбора, УстанавливатьОтборПоСегментам)
	
	ТекстЗапроса = "";
	Если УстанавливатьОтборПоСегментам Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураСегмента.Номенклатура    КАК Номенклатура,
		|	НоменклатураСегмента.Характеристика  КАК Характеристика
		|ПОМЕСТИТЬ ОтборПоСегментам
		|ИЗ
		|	РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|		{ГДЕ
		|			НоменклатураСегмента.Номенклатура.*                            КАК Номенклатура,
		|			НоменклатураСегмента.Характеристика.*                          КАК Характеристика,
		|			НоменклатураСегмента.Сегмент.*                                 КАК СегментНоменклатуры}
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	
	ТекстЗапроса = ТекстЗапроса + 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(НаборДанных.Индекс)                   КАК Индекс,
		|	НаборДанных.Номенклатура                       КАК Номенклатура,
		|	ВЫБОР 
		|	 	КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА 
		|			НаборДанных.Характеристика
		|		ИНАЧЕ 
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) 
		|	КОНЕЦ                                          КАК Характеристика,
		|	НаборДанных.Назначение                         КАК Назначение,
		|	НаборДанных.Склад                              КАК Склад,
		|	НаборДанных.Подразделение                      КАК Подразделение,
		|	МАКСИМУМ(НаборДанных.ЭтоРабота)                КАК ЭтоРабота,
		|	МАКСИМУМ(НаборДанных.ЭтаПотребностьОбособлена) КАК ЭтаПотребностьОбособлена,
		|	МАКСИМУМ(НаборДанных.ЭтоПотребностьВПродаже)   КАК ЭтоПотребностьВПродаже,
		|	МАКСИМУМ(НаборДанных.ЭтоПотребностьВЗапасе)    КАК ЭтоПотребностьВЗапасе,
		|	МАКСИМУМ(НаборДанных.ЭтоПотребностьВОтгрузке)  КАК ЭтоПотребностьВОтгрузке
		|ПОМЕСТИТЬ КлючиПотребностей
		|ИЗ
		|	(ВЫБРАТЬ
		|		ДействующиеПланы.Индекс                                КАК Индекс,
		|		ДействующиеПланы.Номенклатура                          КАК Номенклатура,
		|		ДействующиеПланы.Характеристика                        КАК Характеристика,
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)           КАК Назначение,
		|		ДействующиеПланы.Склад                                 КАК Склад,
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|		ЛОЖЬ                                                   КАК ЭтоРабота,
		|		ЛОЖЬ                                                   КАК ЭтаПотребностьОбособлена,
		|		ИСТИНА                                                 КАК ЭтоПотребностьВПродаже,
		|		ЛОЖЬ                                                   КАК ЭтоПотребностьВЗапасе,
		|		ЛОЖЬ                                                   КАК ЭтоПотребностьВОтгрузке
		|	ИЗ
		|		(ВЫБРАТЬ" +
		?(ИспользоватьТаблицуОтбора, "
		|			МАКСИМУМ(ТаблицаОтбора.Индекс)                                 КАК Индекс,", "
		|			0                                                              КАК Индекс,") + "
		|			МАКСИМУМ(КлючиАналитики.Номенклатура)                          КАК Номенклатура,
		|			МАКСИМУМ(КлючиАналитики.Характеристика)                        КАК Характеристика,
		|			МАКСИМУМ(ВЫРАЗИТЬ(КлючиАналитики.Склад КАК Справочник.Склады)) КАК Склад
		|		ИЗ
		|			РегистрНакопления.ПланыПродажИВнутреннегоПотребления КАК Планы
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
		|				ПО Планы.АналитикаУчетаНоменклатуры = КлючиАналитики.Ссылка
		|				{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|				ПО (КлючиАналитики.Номенклатура     = НоменклатураСегмента.Номенклатура
		|					И КлючиАналитики.Характеристика = НоменклатураСегмента.Характеристика)} " + 
		?(ИспользоватьТаблицуОтбора, "
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора 
		|			ПО КлючиАналитики.Номенклатура      = ТаблицаОтбора.Номенклатура
		|				И КлючиАналитики.Характеристика = ТаблицаОтбора.Характеристика 
		|				И КлючиАналитики.Склад          = ТаблицаОтбора.Склад
		|				И ТаблицаОтбора.Назначение      = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)", "") + "
		|		ГДЕ
		|			Планы.Активность 
		|				И (
		|					Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|					И (Планы.Период   >= НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД))
		|				ИЛИ
		|					Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|					И (Планы.Период   >= НАЧАЛОПЕРИОДА(&НачалоПериода, ПОЛУГОДИЕ))
		|				ИЛИ
		|					Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|					И (Планы.Период   >= НАЧАЛОПЕРИОДА(&НачалоПериода, КВАРТАЛ))
		|				ИЛИ
		|					Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|					И (Планы.Период   >= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ))
		|				ИЛИ
		|					Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|					И (Планы.Период   >= НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕКАДА))
		|				ИЛИ
		|					Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|					И (Планы.Период   >= НАЧАЛОПЕРИОДА(&НачалоПериода, НЕДЕЛЯ))
		|				ИЛИ
		|					Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|					И (Планы.Период   >= НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ))
		|				)
		|		{ГДЕ
		|			КлючиАналитики.Номенклатура.*                                  КАК Номенклатура,
		|			КлючиАналитики.Характеристика.*                                КАК Характеристика,
		|			(ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)).*               КАК Назначение,
		|			(ВЫРАЗИТЬ(КлючиАналитики.Склад КАК Справочник.Склады)).*       КАК Склад,
		|			(ЕстьNULL(НоменклатураСегмента.Сегмент, 
		|				ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))).* КАК СегментНоменклатуры}
		|		СГРУППИРОВАТЬ ПО
		|			КлючиАналитики.Ссылка) КАК ДействующиеПланы
		|		
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ" +
		?(ИспользоватьТаблицуОтбора, "
		|		ТаблицаОтбора.Индекс                                   КАК Индекс,", "
		|		0                                                      КАК Индекс,") + "
		|		ТоварныеОграничения.Номенклатура                       КАК Номенклатура,
		|		ТоварныеОграничения.Характеристика                     КАК Характеристика,
		|		ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)           КАК Назначение,
		|		ТоварныеОграничения.Склад                              КАК Склад,
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|		ЛОЖЬ                                                   КАК ЭтоРабота,
		|		ЛОЖЬ                                                   КАК ЭтаПотребностьОбособлена,
		|		ЛОЖЬ                                                   КАК ЭтоПотребностьВПродаже,
		|		ИСТИНА                                                 КАК ЭтоПотребностьВЗапасе,
		|		ЛОЖЬ                                                   КАК ЭтоПотребностьВОтгрузке
		|	ИЗ
		|		РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|			{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|			ПО (ТоварныеОграничения.Номенклатура     = НоменклатураСегмента.Номенклатура
		|				И ТоварныеОграничения.Характеристика = НоменклатураСегмента.Характеристика)} " +
		?(ИспользоватьТаблицуОтбора, "
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора 
		|			ПО ТоварныеОграничения.Номенклатура      = ТаблицаОтбора.Номенклатура
		|				И ТоварныеОграничения.Характеристика = ТаблицаОтбора.Характеристика 
		|				И ТоварныеОграничения.Склад          = ТаблицаОтбора.Склад
		|				И ТаблицаОтбора.Назначение           = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)", "") + "
		|	ГДЕ
		|		ТоварныеОграничения.СреднедневноеПотребление > 0
		|		И (&ИспользоватьХарактеристикиНоменклатуры 
		|			ИЛИ ТоварныеОграничения.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|	{ГДЕ
		|		ТоварныеОграничения.Номенклатура.*                             КАК Номенклатура,
		|		ТоварныеОграничения.Характеристика.*                           КАК Характеристика,
		|		(ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)).*               КАК Назначение,
		|		ТоварныеОграничения.Склад.*                                    КАК Склад,
		|		(ЕстьNULL(НоменклатураСегмента.Сегмент, 
		|			ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))).* КАК СегментНоменклатуры}
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ" +
		?(ИспользоватьТаблицуОтбора, "
		|		ТаблицаОтбора.Индекс                                   КАК Индекс,", "
		|		0                                                      КАК Индекс,") + "
		|		График.Номенклатура                                    КАК Номенклатура,
		|		График.Характеристика                                  КАК Характеристика,
		|		График.Назначение                                      КАК Назначение,
		|		График.Склад                                           КАК Склад,
		|		ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
		|		ЛОЖЬ                                                   КАК ЭтоРабота,
		|		ВЫБОР
		|			КОГДА График.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                                                  КАК ЭтаПотребностьОбособлена,
		|		ЛОЖЬ                                                   КАК ЭтоПотребностьВПродаже,
		|		ЛОЖЬ                                                   КАК ЭтоПотребностьВЗапасе,
		|		ИСТИНА                                                 КАК ЭтоПотребностьВОтгрузке
		|	ИЗ
		|		РегистрНакопления.ГрафикДвиженияТоваров КАК График
		|			{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|			ПО (График.Номенклатура     = НоменклатураСегмента.Номенклатура
		|				И График.Характеристика = НоменклатураСегмента.Характеристика)} " +
		?(ИспользоватьТаблицуОтбора, "
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора 
		|			ПО График.Номенклатура      = ТаблицаОтбора.Номенклатура
		|				И График.Характеристика = ТаблицаОтбора.Характеристика 
		|				И График.Склад          = ТаблицаОтбора.Склад
		|				И График.Назначение     = ТаблицаОтбора.Назначение", "") + "
		|	ГДЕ
		|		График.Активность
		|			И График.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			И (&ИспользоватьОбособленноеОбеспечениеЗаказов 
		|				ИЛИ График.Назначение = ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка))
		|	{ГДЕ
		|		График.Номенклатура.*                                          КАК Номенклатура,
		|		График.Характеристика.*                                        КАК Характеристика,
		|		График.Назначение.*                                            КАК Назначение,
		|		График.Склад.*                                                 КАК Склад,
		|		(ЕстьNULL(НоменклатураСегмента.Сегмент, 
		|			ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))).* КАК СегментНоменклатуры} 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ" +
		?(ИспользоватьТаблицуОтбора, "
		|		ТаблицаОтбора.Индекс                     КАК Индекс,", "
		|		0                                        КАК Индекс,") + "
		|		Работы.Номенклатура                      КАК Номенклатура,
		|		Работы.Характеристика                    КАК Характеристика,
		|		Работы.Назначение                        КАК Назначение,
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
		|		Работы.Подразделение                     КАК Подразделение,
		|		ИСТИНА                                   КАК ЭтоРабота,
		|		ВЫБОР
		|			КОГДА Работы.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                                    КАК ЭтаПотребностьОбособлена,
		|		ЛОЖЬ                                     КАК ЭтоПотребностьВПродаже,
		|		ЛОЖЬ                                     КАК ЭтоПотребностьВЗапасе,
		|		ИСТИНА                                   КАК ЭтоПотребностьВОтгрузке
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказовРаботами КАК Работы
		|			{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
		|			ПО (Работы.Номенклатура     = НоменклатураСегмента.Номенклатура
		|				И Работы.Характеристика = НоменклатураСегмента.Характеристика)} " +
		?(ИспользоватьТаблицуОтбора, "
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора 
		|			ПО Работы.Номенклатура      = ТаблицаОтбора.Номенклатура
		|				И Работы.Характеристика = ТаблицаОтбора.Характеристика 
		|				И Работы.Подразделение  = ТаблицаОтбора.Подразделение
		|				И Работы.Назначение     = ТаблицаОтбора.Назначение", "") + "
		|	ГДЕ
		|		Работы.Активность
		|			И Работы.ВидДвижения  =  ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|			И Работы.Период       >= &НачалоПериода
		|			И &ИспользоватьОбособленноеОбеспечениеЗаказов
		|	{ГДЕ
		|		Работы.Номенклатура.*                                          КАК Номенклатура,
		|		Работы.Характеристика.*                                        КАК Характеристика,
		|		Работы.Подразделение.*                                         КАК Подразделение,
		|		Работы.Назначение.*                                            КАК Назначение,
		|		(ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)).*                   КАК Склад,
		|		(ЕстьNULL(НоменклатураСегмента.Сегмент, 
		|			ЗНАЧЕНИЕ(Справочник.СегментыНоменклатуры.ПустаяСсылка))).* КАК СегментНоменклатуры} 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ" + 
		?(ИспользоватьТаблицуОтбора, "
		|		ТаблицаОтбора.Индекс                     КАК Индекс,", "
		|		0                                        КАК Индекс,") + "
		|		Работы.Номенклатура                      КАК Номенклатура,
		|		Работы.Характеристика                    КАК Характеристика,
		|		Работы.Назначение                        КАК Назначение,
		|		ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка) КАК Склад,
		|		Работы.Подразделение                     КАК Подразделение,
		|		ИСТИНА                                   КАК ЭтоРабота,
		|		ВЫБОР
		|			КОГДА Работы.Назначение <> ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) ТОГДА
		|				ИСТИНА
		|			ИНАЧЕ
		|				ЛОЖЬ
		|		КОНЕЦ                                    КАК ЭтаПотребностьОбособлена,
		|		ЛОЖЬ                                     КАК ЭтоПотребностьВПродаже,
		|		ЛОЖЬ                                     КАК ЭтоПотребностьВЗапасе,
		|		ИСТИНА                                   КАК ЭтоПотребностьВОтгрузке
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказовРаботами.Остатки(
		|			, &ИспользоватьОбособленноеОбеспечениеЗаказов" + 
		?(ИспользоватьТаблицуОтбора, "
		|				И (Номенклатура, Характеристика, Назначение, Подразделение)
		|					В(
		|						ВЫБРАТЬ 
		|							ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|							ТаблицаОтбора.Характеристика КАК Характеристика,
		|							ТаблицаОтбора.Назначение     КАК Назначение,
		|							ТаблицаОтбора.Подразделение  КАК Подразделение
		|						ИЗ
		|							ТаблицаОтбора КАК ТаблицаОтбора
		|					)",
		?(УстанавливатьОтборПоСегментам, "
		|				И (Номенклатура, Характеристика)
		|					В(
		|						ВЫБРАТЬ 
		|							ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|							ТаблицаОтбора.Характеристика КАК Характеристика
		|						ИЗ
		|							ОтборПоСегментам КАК ТаблицаОтбора
		|					)
		|				{Подразделение.*, Назначение.*}","
		|				{Номенклатура.*,Характеристика.*, Подразделение.*, Назначение.*}")) + "
		|		) КАК Работы" +
		?(ИспользоватьТаблицуОтбора, "
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОтбора КАК ТаблицаОтбора 
		|			ПО Работы.Номенклатура      = ТаблицаОтбора.Номенклатура
		|				И Работы.Характеристика = ТаблицаОтбора.Характеристика 
		|				И Работы.Подразделение  = ТаблицаОтбора.Подразделение
		|				И Работы.Назначение     = ТаблицаОтбора.Назначение", "") + "
		|	{ГДЕ
		|		(ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)).* КАК Склад} 
		|	) КАК НаборДанных
		|
		|СГРУППИРОВАТЬ ПО
		|	НаборДанных.Номенклатура,
		|	ВЫБОР 
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА 
		|			НаборДанных.Характеристика
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) 
		|	КОНЕЦ,
		|	НаборДанных.Назначение,
		|	НаборДанных.Склад,
		|	НаборДанных.Подразделение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Назначение,
		|	Склад,
		|	Подразделение
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Возврат ТекстЗапроса;

КонецФункции // СформироватьТекстЗапросаКлючейПотребности()

//Функция СформироватьТекстЗапросаМетодовУправленияЗапасами.
//
//	Описание: формирует текст запроса получения таблицы, содержащей 
//		действующий метод управления запасами для набора Номенклатура - Характеристика - Склад
//
//	Возвращаемое значение: 
//		Строка - текст запроса временной таблицы МетодыУправленияЗапасами.
//

&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаМетодовУправленияЗапасами() 
	
	//Объединяем:
	//Рекомендуемый метод управления запасами для троек Склад - Номенклатура - Характеристика, исходя из
	//данных ABCXYZ классификации.
	//Рекомендуемый метод управления запасами для пар Склад - Номенклатура, исходя из
	//данных ABCXYZ классификации (Получаем отдельно для верного функционирования отборов по Характеристике)
	// Заданный для троек Склад - Номенклатура - Характеристика пользователем, метод управления запасами.
	// Заданный для пар Склад - Номенклатура пользователем, метод управления запасами.
	// Заданный для Склада пользователем, метод управления запасами.
	//Если метод задан пользователем, то используется именно он, если нет то используется рекомендуемый.
	
	ТекстВычисленияМетодаПоКлассификации = "
	|			ВЫБОР
	|				КОГДА МАКСИМУМ(ВЫБОР
	|						КОГДА Классификация.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.ABC) ТОГДА
	|							Классификация.Класс
	|						ИНАЧЕ 
	|							НЕОПРЕДЕЛЕНО
	|					КОНЕЦ) В(
	|							                    ЗНАЧЕНИЕ(Перечисление.ABCКлассификация.AКласс), 
	|							                    ЗНАЧЕНИЕ(Перечисление.ABCКлассификация.BКласс))
	|					И МАКСИМУМ(ВЫБОР
	|						КОГДА Классификация.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.XYZ) ТОГДА
	|							Классификация.Класс
	|						ИНАЧЕ
	|							НЕОПРЕДЕЛЕНО
	|					КОНЕЦ) В(
	|						                        ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.XКласс), 
	|						                        ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.YКласс))
	|				ТОГДА 
	|					                            ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование)
	|
	|				КОГДА МАКСИМУМ(ВЫБОР
	|						КОГДА Классификация.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.ABC) ТОГДА
	|							Классификация.Класс
	|						ИНАЧЕ 
	|							НЕОПРЕДЕЛЕНО
	|					КОНЕЦ) В(
	|						                       ЗНАЧЕНИЕ(Перечисление.ABCКлассификация.CКласс), 
	|						                       ЗНАЧЕНИЕ(Перечисление.ABCКлассификация.НеКлассифицирован))
	|					И МАКСИМУМ(ВЫБОР
	|						КОГДА Классификация.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.XYZ) ТОГДА
	|							Классификация.Класс
	|						ИНАЧЕ
	|							НЕОПРЕДЕЛЕНО
	|					КОНЕЦ) =
	|						                       ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.XКласс)
	|				ТОГДА 
	|					ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал)
	|
	|				КОГДА МАКСИМУМ(ВЫБОР
	|						КОГДА Классификация.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.ABC) ТОГДА
	|							Классификация.Класс
	|						ИНАЧЕ 
	|							НЕОПРЕДЕЛЕНО
	|					КОНЕЦ) В(
	|						                       ЗНАЧЕНИЕ(Перечисление.ABCКлассификация.CКласс), 
	|						                       ЗНАЧЕНИЕ(Перечисление.ABCКлассификация.НеКлассифицирован))
	|					И МАКСИМУМ(ВЫБОР
	|						КОГДА Классификация.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.XYZ) ТОГДА
	|							Классификация.Класс
	|						ИНАЧЕ
	|							НЕОПРЕДЕЛЕНО
	|					КОНЕЦ) =
	|						                       ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.YКласс)
	|				ТОГДА 
	|					ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер)
	|
	|				КОГДА МАКСИМУМ(ВЫБОР
	|						КОГДА Классификация.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.ABC) ТОГДА
	|							Классификация.Класс
	|						ИНАЧЕ 
	|							НЕОПРЕДЕЛЕНО
	|					КОНЕЦ) В(
	|						                       ЗНАЧЕНИЕ(Перечисление.ABCКлассификация.AКласс), 
	|						                       ЗНАЧЕНИЕ(Перечисление.ABCКлассификация.BКласс))
	|					И МАКСИМУМ(ВЫБОР
	|						КОГДА Классификация.ТипКлассификации = ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.XYZ) ТОГДА
	|							Классификация.Класс
	|						ИНАЧЕ
	|							НЕОПРЕДЕЛЕНО
	|					КОНЕЦ) В(
	|						                       ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.ZКласс), 
	|						                       ЗНАЧЕНИЕ(Перечисление.XYZКлассификация.НеКлассифицирован))
	|				ТОГДА 
	|					                           ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ЗаказПодЗаказ)
	|
	|			КОНЕЦ                                                                  КАК МетодУправленияЗапасами
	|";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(МАКСИМУМ(Методы.МетодЗаданный), 
	|		МАКСИМУМ(Методы.МетодРекомендуемый)) КАК МетодУправления,
	|//ТекстГруппировкиАссортимент
	|	Методы.Склад                             КАК Склад,
	|	Методы.Номенклатура                      КАК Номенклатура,
	|	Методы.Характеристика                    КАК Характеристика
	|ПОМЕСТИТЬ МетодыУправленияЗапасами
	|ИЗ
	|	(ВЫБРАТЬ
	|		РекомендуемыеМетоды.МетодУправленияЗапасами КАК МетодРекомендуемый,
	|		NULL                                        КАК МетодЗаданный,
	|		РекомендуемыеМетоды.Склад                   КАК Склад,
	|		РекомендуемыеМетоды.Номенклатура            КАК Номенклатура,
	|		РекомендуемыеМетоды.Характеристика          КАК Характеристика
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(Классификация.РазделКлассификации КАК Справочник.Склады)      КАК Склад,
	|			Классификация.Номенклатура                                             КАК Номенклатура,
	|			Классификация.Характеристика                                           КАК Характеристика,
	|//МЕТОД_УПРАВЛЕНИЯ_ПО_КЛАССИФИКАЦИИ//
	|		ИЗ
	|			РегистрСведений.ABCXYZКлассификацияНоменклатуры.СрезПоследних(
	|					,
	|					&ИспользоватьХарактеристикиНоменклатуры
	|						И Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|						И &РассчитыватьРекомендуемыйМетод
	|						И ТИПЗНАЧЕНИЯ(РазделКлассификации) =  ТИП(Справочник.Склады)
	|						И РазделКлассификации              <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|						И (ТипПараметраКлассификации       =  ЗНАЧЕНИЕ(Перечисление.ТипыПараметровКлассификации.Выручка)
	|								И ТипКлассификации         =  ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.ABC)
	|							ИЛИ ТипПараметраКлассификации  =  ЗНАЧЕНИЕ(Перечисление.ТипыПараметровКлассификации.Количество)
	|								И ТипКлассификации         =  ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.XYZ)) 
	|					{(ВЫРАЗИТЬ(РазделКлассификации КАК Справочник.Склады)).* КАК Склад, 
	|					Номенклатура.*                                           КАК Номенклатура, 
	|					Характеристика.*                                         КАК Характеристика}
	|			) КАК Классификация
	|		СГРУППИРОВАТЬ ПО
	|			ВЫРАЗИТЬ(Классификация.РазделКлассификации КАК Справочник.Склады),
	|			Классификация.Номенклатура,
	|			Классификация.Характеристика
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫРАЗИТЬ(Классификация.РазделКлассификации КАК Справочник.Склады)      КАК Склад,
	|			Классификация.Номенклатура                                             КАК Номенклатура,
	|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)           КАК Характеристика,
	|//МЕТОД_УПРАВЛЕНИЯ_ПО_КЛАССИФИКАЦИИ//
	|		ИЗ
	|			РегистрСведений.ABCXYZКлассификацияНоменклатуры.СрезПоследних(
	|					,
	|					Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|						И &РассчитыватьРекомендуемыйМетод
	|						И ТИПЗНАЧЕНИЯ(РазделКлассификации) =  ТИП(Справочник.Склады)
	|						И РазделКлассификации              <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
	|						И (ТипПараметраКлассификации       =  ЗНАЧЕНИЕ(Перечисление.ТипыПараметровКлассификации.Выручка)
	|								И ТипКлассификации         =  ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.ABC)
	|							ИЛИ ТипПараметраКлассификации  =  ЗНАЧЕНИЕ(Перечисление.ТипыПараметровКлассификации.Количество)
	|								И ТипКлассификации         =  ЗНАЧЕНИЕ(Перечисление.ТипыКлассификации.XYZ)) 
	|					{(ВЫРАЗИТЬ(РазделКлассификации КАК Справочник.Склады)).* КАК Склад, 
	|					Номенклатура.*                                           КАК Номенклатура}
	|			) КАК Классификация
	|		СГРУППИРОВАТЬ ПО
	|			ВЫРАЗИТЬ(Классификация.РазделКлассификации КАК Справочник.Склады),
	|			Классификация.Номенклатура
	|		) КАК РекомендуемыеМетоды
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL                                    КАК МетодРекомендуемый,
	|		НастройкаХарактеристики.МетодУправления  КАК МетодЗаданный,
	|		НастройкаХарактеристики.Склад            КАК Склад,
	|		НастройкаХарактеристики.Номенклатура     КАК Номенклатура,
	|		НастройкаХарактеристики.Характеристика   КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ПараметрыОбеспеченияТоварами КАК НастройкаХарактеристики
	|	ГДЕ
	|		&ИспользоватьХарактеристикиНоменклатуры
	|			И НастройкаХарактеристики.Номенклатура    <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НастройкаХарактеристики.Характеристика  <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И НастройкаХарактеристики.МетодУправления <> ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ПустаяСсылка)
	|			
	|	{ГДЕ
	|		НастройкаХарактеристики.Склад.*          КАК Склад,
	|		НастройкаХарактеристики.Номенклатура.*   КАК Номенклатура,
	|		НастройкаХарактеристики.Характеристика.* КАК Характеристика}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL                                                          КАК МетодРекомендуемый,
	|		НастройкаНоменклатуры.МетодУправления                         КАК МетодЗаданный,
	|		НастройкаНоменклатуры.Склад                                   КАК Склад,
	|		НастройкаНоменклатуры.Номенклатура                            КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)  КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ПараметрыОбеспеченияТоварами КАК НастройкаНоменклатуры
	|	ГДЕ
	|		НастройкаНоменклатуры.Номенклатура          <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НастройкаНоменклатуры.Характеристика  =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И НастройкаНоменклатуры.МетодУправления <> ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ПустаяСсылка)
	|			
	|	{ГДЕ
	|		НастройкаНоменклатуры.Склад.*          КАК Склад,
	|		НастройкаНоменклатуры.Номенклатура.*   КАК Номенклатура}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		NULL                                                          КАК МетодРекомендуемый,
	|		НастройкаСклада.МетодУправления                         КАК МетодЗаданный,
	|		НастройкаСклада.Склад                                   КАК Склад,
	|		ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)                КАК Номенклатура,
	|		ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)  КАК Характеристика
	|	ИЗ
	|		РегистрСведений.ПараметрыОбеспеченияТоварами КАК НастройкаСклада
	|	ГДЕ
	|		НастройкаСклада.Номенклатура          =  ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И НастройкаСклада.Характеристика  =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И НастройкаСклада.МетодУправления <> ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ПустаяСсылка)
	|			
	|	{ГДЕ
	|		НастройкаСклада.Склад.*          КАК Склад}
	|	) КАК Методы
	|
	|СГРУППИРОВАТЬ ПО
	|	Методы.Склад,
	|	Методы.Номенклатура,
	|	Методы.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Склад
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//МЕТОД_УПРАВЛЕНИЯ_ПО_КЛАССИФИКАЦИИ//", ТекстВычисленияМетодаПоКлассификации);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") Тогда
		ТекстГруппировкиАссортимент = "		Истина КАК РазрешеныЗакупки,
		|		ЗНАЧЕНИЕ(Справочник.ТоварныеКатегории.ПустаяСсылка) КАК ТоварнаяКатегория,
		|		ЗНАЧЕНИЕ(Справочник.Марки.ПустаяСсылка) КАК Марка,
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстГруппировкиАссортимент", ТекстГруппировкиАссортимент);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции //СформироватьТекстЗапросаМетодовУправленияЗапасами()

//Функция СформироватьТекстЗапросаПорядкаОбеспечения.
//
//	Описание: формирует текст запроса получения таблицы, содержащей 
//		данные НСИ для строк таблицы КлючиПотребностей, а именно
//		основной способ обеспечения, обеспечивающее подразделение и метод обеспечения.
//
//	Возвращаемое значение:
//		Строка - текст запроса временной таблицы ПорядокОбеспечения.
//

&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаПорядкаОбеспечения()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КлючиПотребностей.Индекс                                        КАК Индекс,
	|	КлючиПотребностей.Номенклатура                                  КАК Номенклатура,
	|	КлючиПотребностей.Характеристика                                КАК Характеристика,
	|	КлючиПотребностей.Назначение                                    КАК Назначение,
	|	КлючиПотребностей.Склад                                         КАК Склад,
	|	ВЫБОР
	|		КОГДА КлючиПотребностей.ЭтоРабота ТОГДА
	|			 КлючиПотребностей.Подразделение
	|		ИНАЧЕ
	|			(ЕСТЬNULL(ПодразделениеДляХарактеристики.Подразделение,
	|				ЕСТЬNULL(ПодразделениеДляНоменклатуры.Подразделение,
	|					ЕСТЬNULL(ПодразделениеДляСклада.Подразделение,
	|						КлючиПотребностей.Склад.Подразделение))))
	|	КОНЕЦ                                                           КАК Подразделение,
	|
	|	КлючиПотребностей.ЭтаПотребностьОбособлена                      КАК ЭтаПотребностьОбособлена,
	|	КлючиПотребностей.ЭтоПотребностьВПродаже                        КАК ЭтоПотребностьВПродаже,
	|	КлючиПотребностей.ЭтоПотребностьВЗапасе                         КАК ЭтоПотребностьВЗапасе,
	|	КлючиПотребностей.ЭтоПотребностьВОтгрузке                       КАК ЭтоПотребностьВОтгрузке,
	|	КлючиПотребностей.ЭтоРабота                                     КАК ЭтоРабота,
	|
	|	КлючиПотребностей.Склад.Календарь                               КАК КалендарьСклада,
	|	СпрСпособ.Календарь                                             КАК КалендарьСпособа,
	|	СпрСпособ.ДлительностьВДнях                                     КАК ДлительностьВДнях,
	|	ВЫБОР
	|		КОГДА НЕ СпособДляСклада.Склад ЕСТЬ NULL ТОГДА
	|			0
	|		КОГДА НЕ СпособДляНоменклатуры.Склад ЕСТЬ NULL ТОГДА
	|			1
	|		КОГДА НЕ СпособДляХарактеристики.Склад ЕСТЬ NULL ТОГДА
	|			2
	|		КОГДА НЕ СпособДляРаботы.Номенклатура ЕСТЬ NULL ТОГДА
	|			3
	|		КОГДА НЕ СпособДляХарактеристикиРаботы.Номенклатура ЕСТЬ NULL ТОГДА
	|			4
	|		ИНАЧЕ
	|			5
	|	КОНЕЦ                                                           КАК ИсточникПолученияСпособа,
	|	ЕСТЬNULL(СпрСпособ.СрокИсполненияЗаказа, 0)                     КАК СрокИсполненияЗаказа,
	|	СпрСпособ.Ссылка                                                КАК СпособОбеспечения,
	|	ЕСТЬNULL(СпособДляХарактеристикиРаботы.РеквизитДопУпорядочивания,
	|		ЕСТЬNULL(СпособДляРаботы.РеквизитДопУпорядочивания,
	|			ЕСТЬNULL(СпособДляХарактеристики.РеквизитДопУпорядочивания,
	|				ЕСТЬNULL(СпособДляНоменклатуры.РеквизитДопУпорядочивания,
	|					СпособДляСклада.РеквизитДопУпорядочивания))))   КАК ПорядокПримененияСпособа,
	|	ВЫБОР
	|		КОГДА КлючиПотребностей.ЭтаПотребностьОбособлена ТОГДА
	|			 ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ЗаказПодЗаказ)
	|		ИНАЧЕ
	|			ЕСТЬNULL(МетодДляХарактеристики.МетодУправления, 
	|				ЕСТЬNULL(МетодДляНоменклатуры.МетодУправления,
	|					ЕСТЬNULL(МетодДляСклада.МетодУправления,
	|						ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ЗаказПодЗаказ))))
	|	КОНЕЦ                                                           КАК МетодУправленияЗапасами,
	|	ВЫБОР
	|		КОГДА КлючиПотребностей.ЭтаПотребностьОбособлена ТОГДА
	|			0
	|		КОГДА НЕ СпособДляСклада.Склад ЕСТЬ NULL ТОГДА
	|			1
	|		КОГДА НЕ СпособДляНоменклатуры.Склад ЕСТЬ NULL ТОГДА
	|			2
	|		КОГДА НЕ СпособДляХарактеристики.Склад ЕСТЬ NULL ТОГДА
	|			3
	|		ИНАЧЕ
	|			4
	|	КОНЕЦ                                                           КАК ИсточникПолученияМетода
	|ПОМЕСТИТЬ ПорядокОбеспечения
	|ИЗ
	|	КлючиПотребностей КАК КлючиПотребностей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Склады КАК СпрСклад
	|		ПО КлючиПотребностей.Склад = СпрСклад.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК СпособДляХарактеристики
	|		ПО НЕ КлючиПотребностей.ЭтоРабота
	|			И &ИспользоватьХарактеристикиНоменклатуры
	|			И КлючиПотребностей.Номенклатура   = СпособДляХарактеристики.Номенклатура
	|			И КлючиПотребностей.Характеристика = СпособДляХарактеристики.Характеристика
	|			И КлючиПотребностей.Склад          = СпособДляХарактеристики.Склад
	|			И СпособДляХарактеристики.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И СпособДляХарактеристики.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И (СпособДляХарактеристики.РеквизитДопУпорядочивания = 1 ИЛИ &ПолучатьАльтернативныеСпособыКонтекст)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК СпособДляНоменклатуры
	|		ПО НЕ КлючиПотребностей.ЭтоРабота
	|			И СпособДляХарактеристики.Склад ЕСТЬ NULL
	|			И КлючиПотребностей.Номенклатура   = СпособДляНоменклатуры.Номенклатура
	|			И КлючиПотребностей.Склад          = СпособДляНоменклатуры.Склад
	|			И СпособДляНоменклатуры.Характеристика   =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И СпособДляНоменклатуры.Номенклатура     <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И (СпособДляНоменклатуры.РеквизитДопУпорядочивания = 1 ИЛИ &ПолучатьАльтернативныеСпособыКонтекст)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияТоварами КАК СпособДляСклада
	|		ПО НЕ КлючиПотребностей.ЭтоРабота
	|			И СпособДляХарактеристики.Склад ЕСТЬ NULL
	|			И СпособДляНоменклатуры.Склад   ЕСТЬ NULL
	|			И КлючиПотребностей.Склад          = СпособДляСклада.Склад
	|			И СпособДляСклада.Характеристика         = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И СпособДляСклада.Номенклатура           = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И (СпособДляСклада.РеквизитДопУпорядочивания = 1 ИЛИ &ПолучатьАльтернативныеСпособыКонтекст)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияРаботами КАК СпособДляХарактеристикиРаботы
	|		ПО КлючиПотребностей.ЭтоРабота
	|			И &ИспользоватьХарактеристикиНоменклатуры 
	|			И КлючиПотребностей.Номенклатура   = СпособДляХарактеристикиРаботы.Номенклатура
	|			И КлючиПотребностей.Характеристика = СпособДляХарактеристикиРаботы.Характеристика
	|			И СпособДляХарактеристикиРаботы.Характеристика  <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И (СпособДляХарактеристикиРаботы.РеквизитДопУпорядочивания = 1 ИЛИ &ПолучатьАльтернативныеСпособыКонтекст)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВариантыОбеспеченияРаботами КАК СпособДляРаботы
	|		ПО КлючиПотребностей.ЭтоРабота
	|			И СпособДляХарактеристикиРаботы.Номенклатура ЕСТЬ NULL
	|			И КлючиПотребностей.Номенклатура   = СпособДляРаботы.Номенклатура
	|			И КлючиПотребностей.Характеристика = СпособДляРаботы.Характеристика
	|			И СпособДляРаботы.Характеристика                =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И (СпособДляРаботы.РеквизитДопУпорядочивания = 1 ИЛИ &ПолучатьАльтернативныеСпособыКонтекст)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
	|		ПО ЕСТЬNULL(СпособДляХарактеристикиРаботы.СпособОбеспеченияПотребностей,
	|			ЕСТЬNULL(СпособДляРаботы.СпособОбеспеченияПотребностей,
	|				ЕСТЬNULL(СпособДляХарактеристики.СпособОбеспеченияПотребностей,
	|				ЕСТЬNULL(СпособДляНоменклатуры.СпособОбеспеченияПотребностей,
	|					СпособДляСклада.СпособОбеспеченияПотребностей))))
	|			= СпрСпособ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ МетодыУправленияЗапасами КАК МетодДляХарактеристики
	|		ПО  НЕ КлючиПотребностей.ЭтоРабота
	|			И &ИспользоватьХарактеристикиНоменклатуры
	|			И КлючиПотребностей.Номенклатура   = МетодДляХарактеристики.Номенклатура
	|			И КлючиПотребностей.Характеристика = МетодДляХарактеристики.Характеристика
	|			И КлючиПотребностей.Склад          = МетодДляХарактеристики.Склад
	|			И МетодДляХарактеристики.Характеристика  <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И МетодДляХарактеристики.Номенклатура    <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ МетодыУправленияЗапасами КАК МетодДляНоменклатуры
	|		ПО НЕ КлючиПотребностей.ЭтоРабота
	|			И МетодДляХарактеристики.Склад ЕСТЬ NULL
	|			И КлючиПотребностей.Номенклатура   =  МетодДляНоменклатуры.Номенклатура
	|			И КлючиПотребностей.Склад          =  МетодДляНоменклатуры.Склад
	|			И МетодДляНоменклатуры.Характеристика    =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И МетодДляНоменклатуры.Номенклатура      <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ МетодыУправленияЗапасами КАК МетодДляСклада
	|		ПО НЕ КлючиПотребностей.ЭтоРабота
	|			И МетодДляХарактеристики.Склад ЕСТЬ NULL
	|			И МетодДляНоменклатуры.Склад   ЕСТЬ NULL
	|			И КлючиПотребностей.Склад          = МетодДляСклада.Склад
	|			И МетодДляСклада.Характеристика          = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И МетодДляСклада.Номенклатура            = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияТоварами КАК ПодразделениеДляХарактеристики
	|		ПО НЕ КлючиПотребностей.ЭтоРабота
	|			И &ИспользоватьХарактеристикиНоменклатуры
	|			И КлючиПотребностей.Номенклатура   = ПодразделениеДляХарактеристики.Номенклатура
	|			И КлючиПотребностей.Характеристика = ПодразделениеДляХарактеристики.Характеристика
	|			И КлючиПотребностей.Склад          = ПодразделениеДляХарактеристики.Склад
	|			И ПодразделениеДляХарактеристики.Характеристика <> ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И ПодразделениеДляХарактеристики.Номенклатура   <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И ПодразделениеДляХарактеристики.Подразделение  <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияТоварами КАК ПодразделениеДляНоменклатуры
	|		ПО НЕ КлючиПотребностей.ЭтоРабота
	|			И ПодразделениеДляХарактеристики.Склад ЕСТЬ NULL
	|			И КлючиПотребностей.Номенклатура   = ПодразделениеДляНоменклатуры.Номенклатура
	|			И КлючиПотребностей.Склад          = ПодразделениеДляНоменклатуры.Склад
	|			И ПодразделениеДляНоменклатуры.Характеристика   =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И ПодразделениеДляНоменклатуры.Номенклатура     <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И ПодразделениеДляНоменклатуры.Подразделение    <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОбеспеченияТоварами КАК ПодразделениеДляСклада
	|		ПО НЕ КлючиПотребностей.ЭтоРабота
	|			И ПодразделениеДляХарактеристики.Склад ЕСТЬ NULL
	|			И ПодразделениеДляНоменклатуры.Склад   ЕСТЬ NULL
	|			И КлючиПотребностей.Склад          = ПодразделениеДляСклада.Склад
	|			И ПодразделениеДляСклада.Характеристика         =  ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			И ПодразделениеДляСклада.Номенклатура           =  ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			И ПодразделениеДляСклада.Подразделение          <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	{ГДЕ
	|		(ВЫБОР
	|			КОГДА КлючиПотребностей.ЭтаПотребностьОбособлена ТОГДА
	|				 ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ЗаказПодЗаказ)
	|			ИНАЧЕ
	|				ЕСТЬNULL(МетодДляХарактеристики.МетодУправления, 
	|					ЕСТЬNULL(МетодДляНоменклатуры.МетодУправления,
	|						ЕСТЬNULL(МетодДляСклада.МетодУправления,
	|							ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ЗаказПодЗаказ))))
	|		КОНЕЦ).*                                                                         КАК МетодУправленияЗапасами,
	|		(ВЫБОР
	|			КОГДА КлючиПотребностей.ЭтоРабота ТОГДА
	|				 КлючиПотребностей.Подразделение
	|			ИНАЧЕ
	|				(ЕСТЬNULL(ПодразделениеДляХарактеристики.Подразделение,
	|					ЕСТЬNULL(ПодразделениеДляНоменклатуры.Подразделение,
	|						ЕСТЬNULL(ПодразделениеДляСклада.Подразделение,
	|							КлючиПотребностей.Склад.Подразделение))))
	|		КОНЕЦ).*                                                                         КАК Подразделение,
	|		(ЕСТЬNULL(СпрСпособ.Ссылка,
	|			ЗНАЧЕНИЕ(Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка))).*         КАК СпособОбеспечения,
	|		ЕСТЬNULL(СпрСпособ.ТипОбеспечения,
	|			ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка))                              КАК ТипОбеспечения,
	|		(ЕСТЬNULL(СпрСпособ.Ссылка,НЕОПРЕДЕЛЕНО)).*                                      КАК ИсточникОбеспечения}
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции //СформироватьТекстЗапросаПорядкаОбеспечения()

//Функция СформироватьТекстЗапросаПроверкиЗаполненияКалендарей.
//
//	Описание: формирует текст запроса получения таблицы, содержащей 
//		Календари с информацией о том где они используются и по какую дату заполнены.
//
//	Возвращаемое значение:
//		Строка - текст запроса выборки данных.
//

&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаПроверкиЗаполненияКалендарей()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборКалендарей.Календарь                                    КАК Календарь,
	|	МАКСИМУМ(НаборКалендарей.ЭтоКалендарьРабочихДней)            КАК ЭтоКалендарьРабочихДней,
	|	МАКСИМУМ(НаборКалендарей.ЭтоКалендарьОсновногоСпособа)       КАК ЭтоКалендарьОсновногоСпособа,
	|	МАКСИМУМ(НаборКалендарей.ЭтоКалендарьАльтернативногоСпособа) КАК ЭтоКалендарьАльтернативногоСпособа,
	|	МАКСИМУМ(КалендарныеГрафики.ДатаГрафика)                     КАК ДатаЗаполненияКалендаря
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ПорядокОбеспечения.КалендарьСклада <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
	|				ПорядокОбеспечения.КалендарьСклада
	|			ИНАЧЕ 
	|				&УмолчаниеКалендарь
	|		КОНЕЦ                                    КАК Календарь,
	|		ИСТИНА                                   КАК ЭтоКалендарьРабочихДней,
	|		ЛОЖЬ                                     КАК ЭтоКалендарьОсновногоСпособа,
	|		ЛОЖЬ                                     КАК ЭтоКалендарьАльтернативногоСпособа
	|	ИЗ
	|		ПорядокОбеспечения КАК ПорядокОбеспечения
	|	ГДЕ 
	|		ПорядокОбеспечения.МетодУправленияЗапасами <> ЗНАЧЕНИЕ(Перечисление.МетодыУправленияЗапасами.ЗаказПодЗаказ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВЫБОР 
	|			КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСпособа, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|					<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) 
	|			ТОГДА ПорядокОбеспечения.КалендарьСпособа
	|			ИНАЧЕ
	|				ВЫБОР 
	|					КОГДА ПорядокОбеспечения.КалендарьСклада <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
	|						ПорядокОбеспечения.КалендарьСклада
	|					ИНАЧЕ
	|						&УмолчаниеКалендарь
	|				КОНЕЦ
	|		КОНЕЦ                                     КАК Календарь,
	|		ЛОЖЬ                                      КАК ЭтоКалендарьРабочихДней,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ПорядокОбеспечения.ПорядокПримененияСпособа, 1) = 1 ТОГДА
	|				ИСТИНА
	|			ИНАЧЕ
	|				ЛОЖЬ
	|		КОНЕЦ                                     КАК ЭтоКалендарьОсновногоСпособа,
	|		ВЫБОР
	|			КОГДА ЕСТЬNULL(ПорядокОбеспечения.ПорядокПримененияСпособа, 1) = 1 ТОГДА
	|				ЛОЖЬ
	|			ИНАЧЕ
	|				ИСТИНА
	|		КОНЕЦ                                     КАК ЭтоКалендарьАльтернативногоСпособа
	|	ИЗ
	|		ПорядокОбеспечения КАК ПорядокОбеспечения
	|	) КАК НаборКалендарей
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО НаборКалендарей.Календарь = КалендарныеГрафики.Календарь
	|			И КалендарныеГрафики.ДеньВключенВГрафик
	|ГДЕ
	|	НЕ НаборКалендарей.Календарь = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	НаборКалендарей.Календарь";
	
	Возврат ТекстЗапроса;
	
КонецФункции //ПроверкиЗаполненияКалендарей()

&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаКлючевыхДат()
	
	//Получаем:
	//Для вычисления ключевых дат:
	// Получаем дату в календаре способа обеспечения, отсчитывая от первой рабочей даты после текущей 
	//(&НачалоПериодаРабочийДень) срок исполнения заказа.
	// Эта дата может выпасть на выходной, тогда берем следующий рабочий день календаря в качестве даты ближайшей поставки,
	//иначе берем саму дату.
	// Берем также первый рабочий день следующего года, на случай если выше дата не найдется.
	// Получаем дату следующей поставки в текущем году и если таковой нет, принимаем за нее второй рабочий день следующего года.
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ПорядокОбеспечения.КалендарьСпособа,
	|		ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))        КАК КалендарьСпособа,
	|	&УмолчаниеКалендарь                                     КАК КалендарьЗаказа,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСпособа, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) 
	|		ТОГДА 
	|			ПорядокОбеспечения.КалендарьСпособа
	|		ИНАЧЕ
	|			ВЫБОР 
	|				КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСклада, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|					<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|				ТОГДА
	|					ПорядокОбеспечения.КалендарьСклада
	|				ИНАЧЕ
	|					&УмолчаниеКалендарь
	|			КОНЕЦ
	|	КОНЕЦ                                                    КАК КалендарьПоставки,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСклада, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|		ТОГДА
	|			ПорядокОбеспечения.КалендарьСклада
	|		ИНАЧЕ
	|			&УмолчаниеКалендарь
	|	КОНЕЦ                                                    КАК КалендарьРаботы,
	|	ВЫБОР 
	|		КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСпособа, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) 
	|		ТОГДА 
	|			0
	|		ИНАЧЕ
	|			ВЫБОР 
	|				КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСклада, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|					<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|				ТОГДА
	|					1
	|				ИНАЧЕ
	|					2
	|			КОНЕЦ
	|	КОНЕЦ                                                    КАК ИсточникКалендаряПоставки,
	|	ПорядокОбеспечения.СрокИсполненияЗаказа                  КАК СрокИсполненияЗаказа
	|ПОМЕСТИТЬ ПараметрыРасчетаКлючевыхДат
	|ИЗ 
	|	ПорядокОбеспечения КАК ПорядокОбеспечения
	|;
	|///////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыРасчета.КалендарьСпособа                    КАК КалендарьСпособа,
	|	ПараметрыРасчета.СрокИсполненияЗаказа                КАК СрокИсполненияЗаказа,
	|	МАКСИМУМ(ПараметрыРасчета.КалендарьПоставки)         КАК КалендарьПоставки,
	|	МАКСИМУМ(ПараметрыРасчета.ИсточникКалендаряПоставки) КАК ИсточникКалендаряПоставки,
	|	ДатыПоставок.ДатаГрафика                             КАК ДатаПоставки,
	|	МАКСИМУМ(ВЫБОР 
	|		КОГДА ПараметрыРасчета.КалендарьЗаказа = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) 
	|			И ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ, 
	|				-ПараметрыРасчета.СрокИсполненияЗаказа) >= &НачалоПериода 
	|		ТОГДА
	|			ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ, 
	|				-ПараметрыРасчета.СрокИсполненияЗаказа)
	|		ИНАЧЕ
	|			ДатыЗаказа.ДатаГрафика
	|	КОНЕЦ)                                               КАК ДатаЗаказа
	|ПОМЕСТИТЬ ДатыПоставок
	|ИЗ
	|	ПараметрыРасчетаКлючевыхДат КАК ПараметрыРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатыПоставок
	|		ПО ПараметрыРасчета.КалендарьПоставки = ДатыПоставок.Календарь
	|			И ДатыПоставок.Год           >= ГОД(&НачалоПериода)
	|			И ДатыПоставок.ДатаГрафика   >= &НачалоПериода
	|			И ДатыПоставок.ДеньВключенВГрафик = ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатыЗаказа
	|			ПО ПараметрыРасчета.КалендарьЗаказа = ДатыЗаказа.Календарь
	|			И ДатыЗаказа.Год         >= ГОД(&НачалоПериода)
	|			И ДатыЗаказа.ДатаГрафика >= &НачалоПериода
	|			И ДатыЗаказа.ДеньВключенВГрафик = ИСТИНА
	|			И ДатыЗаказа.ДатаГрафика <= ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ,- ПараметрыРасчета.СрокИсполненияЗаказа)
	|
	|СГРУППИРОВАТЬ ПО 
	|	ПараметрыРасчета.КалендарьСпособа,
	|	ПараметрыРасчета.СрокИсполненияЗаказа,
	|	ДатыПоставок.ДатаГрафика
	|ИМЕЮЩИЕ 
	|	НЕ МАКСИМУМ(ВЫБОР 
	|		КОГДА ПараметрыРасчета.КалендарьЗаказа = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) 
	|			И ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ, 
	|				-ПараметрыРасчета.СрокИсполненияЗаказа) >=&НачалоПериода 
	|		ТОГДА
	|			ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ, 
	|				-ПараметрыРасчета.СрокИсполненияЗаказа)	
	|		ИНАЧЕ
	|			ДатыЗаказа.ДатаГрафика
	|	КОНЕЦ) ЕСТЬ NULL
	|	ИЛИ МАКСИМУМ(ПараметрыРасчета.КалендарьПоставки) = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДатыПоставок.КалендарьСпособа                     КАК КалендарьСпособа,
	|	ДатыПоставок.СрокИсполненияЗаказа                 КАК СрокИсполненияЗаказа,
	|	МАКСИМУМ(ДатыПоставок.КалендарьПоставки)          КАК КалендарьПоставки,
	|	МАКСИМУМ(ДатыПоставок.ИсточникКалендаряПоставки)  КАК ИсточникКалендаряПоставки,
	|	МИНИМУМ(ДатыПоставок.ДатаПоставки)                КАК ДатаПоставки,
	|	МИНИМУМ(ДатыПоставок.ДатаЗаказа)                  КАК ДатаЗаказа
	|ПОМЕСТИТЬ БлижайшиеПоставки
	|ИЗ
	|	ДатыПоставок КАК ДатыПоставок
	|СГРУППИРОВАТЬ ПО 
	|	ДатыПоставок.КалендарьСпособа,
	|	ДатыПоставок.СрокИсполненияЗаказа
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ПорядокОбеспечения.Индекс)                              КАК Индекс,
	|	
	|	ПорядокОбеспечения.Номенклатура                                  КАК Номенклатура,
	|	ПорядокОбеспечения.Характеристика                                КАК Характеристика,
	|	ПорядокОбеспечения.Назначение                                    КАК Назначение,
	|	ПорядокОбеспечения.Склад                                         КАК Склад,
	|	ПорядокОбеспечения.Подразделение                                 КАК Подразделение,
	|
	|	МАКСИМУМ(ПорядокОбеспечения.ЭтаПотребностьОбособлена)            КАК ЭтаПотребностьОбособлена,
	|	МАКСИМУМ(ПорядокОбеспечения.ЭтоПотребностьВПродаже)              КАК ЭтоПотребностьВПродаже,
	|	МАКСИМУМ(ПорядокОбеспечения.ЭтоПотребностьВЗапасе)               КАК ЭтоПотребностьВЗапасе,
	|	МАКСИМУМ(ПорядокОбеспечения.ЭтоПотребностьВОтгрузке)             КАК ЭтоПотребностьВОтгрузке,
	|	МАКСИМУМ(ПорядокОбеспечения.ЭтоРабота)                           КАК ЭтоРабота,
	|
	|	МАКСИМУМ(ПорядокОбеспечения.КалендарьСклада)                     КАК КалендарьСклада,
	|	МАКСИМУМ(ПорядокОбеспечения.КалендарьСпособа)                    КАК КалендарьСпособа,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ПорядокОбеспечения.КалендарьСклада = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
	|			&УмолчаниеКалендарь
	|		ИНАЧЕ
	|			ПорядокОбеспечения.КалендарьСклада
	|	КОНЕЦ)                                                           КАК КалендарьРаботы,
	|	МАКСИМУМ(ВЫБОР 
	|		КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСпособа, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) 
	|		ТОГДА 
	|			ПорядокОбеспечения.КалендарьСпособа
	|		ИНАЧЕ
	|			ВЫБОР 
	|				КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСклада, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|					<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|				ТОГДА
	|					ПорядокОбеспечения.КалендарьСклада
	|				ИНАЧЕ
	|					&УмолчаниеКалендарь
	|			КОНЕЦ
	|	КОНЕЦ)                                                           КАК КалендарьПоставки,
	|	МАКСИМУМ(ВЫБОР 
	|		КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСпособа, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|			<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) 
	|		ТОГДА 
	|			0
	|		ИНАЧЕ
	|			ВЫБОР 
	|				КОГДА ЕСТЬNULL(ПорядокОбеспечения.КалендарьСклада, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|					<> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|				ТОГДА
	|					1
	|				ИНАЧЕ
	|					2
	|			КОНЕЦ
	|	КОНЕЦ)                                                           КАК ИсточникКалендаряПоставки,
	|
	|	МАКСИМУМ(ПорядокОбеспечения.ИсточникПолученияСпособа)            КАК ИсточникПолученияСпособа,
	|	МАКСИМУМ(ПорядокОбеспечения.СрокИсполненияЗаказа)                КАК СрокИсполненияЗаказа,
	|	МАКСИМУМ(ПорядокОбеспечения.ДлительностьВДнях)                   КАК ДлительностьВДнях,
	|	МАКСИМУМ(ПорядокОбеспечения.СпособОбеспечения)                   КАК СпособОбеспечения,
	|	МАКСИМУМ(ПорядокОбеспечения.МетодУправленияЗапасами)             КАК МетодУправленияЗапасами,
	|	МАКСИМУМ(ПорядокОбеспечения.ИсточникПолученияМетода)             КАК ИсточникПолученияМетода,
	|
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА БлижайшиеПоставки.КалендарьПоставки 
	|			= ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|		ТОГДА
	|			ВЫБОР 
	|				КОГДА &УмолчаниеДатаЗаказа = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|					NULL
	|				ИНАЧЕ 
	|					ДОБАВИТЬКДАТЕ(&УмолчаниеДатаЗаказа, ДЕНЬ,
	|						ПорядокОбеспечения.СрокИсполненияЗаказа)
	|			КОНЕЦ
	|		ИНАЧЕ 
	|			БлижайшиеПоставки.ДатаПоставки
	|	КОНЕЦ)                                                           КАК ДатаБлижайшейПоставки,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА БлижайшиеПоставки.КалендарьПоставки 
	|			= ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|		ТОГДА
	|			ВЫБОР 
	|				КОГДА &УмолчаниеДатаЗаказа = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|					NULL
	|				ИНАЧЕ 
	|					&УмолчаниеДатаЗаказа
	|			КОНЕЦ
	|		ИНАЧЕ 
	|			БлижайшиеПоставки.ДатаЗаказа
	|	КОНЕЦ)                                                           КАК ДатаЗаказа,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(БлижайшиеПоставки.КалендарьПоставки) 
	|			= ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
	|		ТОГДА
	|			ВЫБОР 
	|				КОГДА &УмолчаниеДатаСледующегоЗаказа = ДАТАВРЕМЯ(1, 1, 1) ТОГДА
	|					NULL
	|				ИНАЧЕ 
	|					ДОБАВИТЬКДАТЕ(&УмолчаниеДатаСледующегоЗаказа, ДЕНЬ,
	|						МАКСИМУМ(ПорядокОбеспечения.СрокИсполненияЗаказа))
	|			КОНЕЦ
	|		ИНАЧЕ 
	|			МИНИМУМ(СледующиеПоставки.ДатаПоставки)
	|	КОНЕЦ                                                           КАК ДатаСледующейПоставки
	|ПОМЕСТИТЬ КлючевыеДаты
	|ИЗ 
	|	ПорядокОбеспечения КАК ПорядокОбеспечения
	|		ЛЕВОЕ СОЕДИНЕНИЕ БлижайшиеПоставки КАК БлижайшиеПоставки 
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДатыПоставок КАК СледующиеПоставки 
	|			ПО БлижайшиеПоставки.КалендарьСпособа        = СледующиеПоставки.КалендарьСпособа
	|				И БлижайшиеПоставки.СрокИсполненияЗаказа = СледующиеПоставки.СрокИсполненияЗаказа
	|				И БлижайшиеПоставки.ДатаЗаказа < СледующиеПоставки.ДатаЗаказа
	|		ПО ЕСТЬNULL(ПорядокОбеспечения.КалендарьСпособа, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))        
	|			= БлижайшиеПоставки.КалендарьСпособа
	|			И ЕСТЬNULL(ПорядокОбеспечения.СрокИсполненияЗаказа, ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка))
	|			= БлижайшиеПоставки.СрокИсполненияЗаказа
	|СГРУППИРОВАТЬ ПО 
	|	ПорядокОбеспечения.Номенклатура,
	|	ПорядокОбеспечения.Характеристика,
	|	ПорядокОбеспечения.Назначение,
	|	ПорядокОбеспечения.Склад,
	|	ПорядокОбеспечения.Подразделение
	|;
	|////////////////////////////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;

КонецФункции //СформироватьТекстЗапросаКлючевыхДат()

&НаСервереБезКонтекста
Функция СформироватьТекстЗапросаРасчетаПоказателей()
	
	ТекстЗапроса = 
		//Свободные остатки.
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ОстаткиОбщие.Склад           КАК Склад,
		|	ОстаткиОбщие.Номенклатура    КАК Номенклатура,
		|	ОстаткиОбщие.Характеристика  КАК Характеристика,
		|	ОстаткиОбщие.ВНаличииОстаток КАК ВНаличииОстаток
		|ПОМЕСТИТЬ ОстаткиОбщие
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Остатки(,
		|		(Склад, Номенклатура, Характеристика)
		|			В(
		|				ВЫБРАТЬ 
		|					ТаблицаОтбора.Склад          КАК Склад,
		|					ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика КАК Характеристика
		|				ИЗ
		|					КлючевыеДаты КАК ТаблицаОтбора
		|				ГДЕ
		|					ТаблицаОтбора.ЭтоРабота = ЛОЖЬ
		|			)
		|	) КАК ОстаткиОбщие
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//Остатки обособленные.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ОстаткиОбособленные.Склад                  КАК Склад,
		|	ОстаткиОбособленные.Номенклатура           КАК Номенклатура,
		|	ОстаткиОбособленные.Характеристика         КАК Характеристика,
		|	ОстаткиОбособленные.Назначение             КАК Назначение,
		|	ОстаткиОбособленные.НаличиеПодЗаказОстаток КАК НаличиеПодЗаказОстаток,
		|	ОстаткиОбособленные.НаличиеСоСкладаОстаток КАК НаличиеСоСкладаОстаток,
		|	ОстаткиОбособленные.ПотребностьОстаток     КАК ПотребностьОстаток,
		|	ОстаткиОбособленные.ЗаказаноОстаток        КАК ЗаказаноОстаток
		|ПОМЕСТИТЬ ОстаткиОбособленные
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказов.Остатки(,
		|		(Склад, Номенклатура, Характеристика, Назначение)
		|			В(
		|				ВЫБРАТЬ 
		|					ТаблицаОтбора.Склад          КАК Склад,
		|					ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика КАК Характеристика,
		|					ТаблицаОтбора.Назначение     КАК Назначение
		|				ИЗ
		|					КлючевыеДаты КАК ТаблицаОтбора
		|				ГДЕ
		|					ТаблицаОтбора.ЭтаПотребностьОбособлена = ИСТИНА
		|					И ТаблицаОтбора.ЭтоРабота = ЛОЖЬ
		|			)
		|	) КАК ОстаткиОбособленные
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//Расход свободного остатка за текущий день.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	ОборотыСНачалаПериода.Склад           КАК Склад,
		|	ОборотыСНачалаПериода.Номенклатура    КАК Номенклатура,
		|	ОборотыСНачалаПериода.Характеристика  КАК Характеристика,
		|	ОборотыСНачалаПериода.ВНаличииРасход  КАК ВНаличииРасход
		|ПОМЕСТИТЬ ОборотыСНачалаПериода
		|ИЗ
		|	РегистрНакопления.СвободныеОстатки.Обороты(&НачалоПериода, , , 
		|		(Склад, Номенклатура, Характеристика)
		|			В(
		|				ВЫБРАТЬ 
		|					ТаблицаОтбора.Склад          КАК Склад,
		|					ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика КАК Характеристика
		|				ИЗ
		|					КлючевыеДаты КАК ТаблицаОтбора
		|				ГДЕ
		|					ТаблицаОтбора.ЭтоРабота = ЛОЖЬ
		|			)
		|	) КАК ОборотыСНачалаПериода
		|ИНДЕКСИРОВАТЬ ПО
		|	Склад,
		|	Номенклатура,
		|	Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//Обороты обеспечения работ по назначению.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОборотыРабот.Подразделение   КАК Подразделение,
		|	ОборотыРабот.Номенклатура    КАК Номенклатура,
		|	ОборотыРабот.Характеристика  КАК Характеристика,
		|	ОборотыРабот.Назначение      КАК Назначение,
		|	ОборотыРабот.КОбеспечениюПриход КАК КОбеспечениюПриход,
		|	ОборотыРабот.КОбеспечениюРасход КАК КОбеспечениюРасход
		|ПОМЕСТИТЬ ОборотыРабот
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказовРаботами.Обороты(, , , 
		|		(Номенклатура, Характеристика, Назначение)
		|			В(
		|				ВЫБРАТЬ 
		|					ТаблицаОтбора.Номенклатура   КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика КАК Характеристика,
		|					ТаблицаОтбора.Назначение     КАК Назначение
		|				ИЗ
		|					КлючевыеДаты КАК ТаблицаОтбора
		|				ГДЕ
		|					ТаблицаОтбора.ЭтоРабота = ИСТИНА
		|			)
		|	) КАК ОборотыРабот
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение,
		|	Номенклатура,
		|	Характеристика,
		|	Назначение
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//Цены номенклатуры.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		ЦеныПоставщиков.Номенклатура           КАК Номенклатура,
		|		ЦеныПоставщиков.Характеристика         КАК Характеристика,
		|		ЦеныПоставщиков.Соглашение             КАК Соглашение,
		|		ЦеныПоставщиков.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика,
		|		ЦеныПоставщиков.Цена                   КАК Цена,
		|		ЦеныПоставщиков.Упаковка               КАК Упаковка,
		|		ЦеныПоставщиков.Валюта                 КАК Валюта
		|ПОМЕСТИТЬ ЦеныПоставщиков
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|		КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ),
		|		(Номенклатура, Характеристика, Соглашение, УсловиеЦеныПоставщика)
		|			В (
		|				ВЫБРАТЬ 
		|					ТаблицаОтбора.Номенклатура                               КАК Номенклатура,
		|					ТаблицаОтбора.Характеристика                             КАК Характеристика,
		|					ТаблицаОтбора.СпособОбеспечения.Соглашение             КАК Соглашение,
		|					ТаблицаОтбора.СпособОбеспечения.УсловиеЦеныПоставщика  КАК УсловиеЦеныПоставщика
		|				ИЗ
		|					КлючевыеДаты КАК ТаблицаОтбора
		|			)
		|	) КАК ЦеныПоставщиков
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Соглашение,
		|	УсловиеЦеныПоставщика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//Курсы валют.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|		КурсыВалют.Валюта                      КАК Валюта,
		|		КурсыВалют.Курс * КурсыВалют.Кратность КАК Коэффициент
		|ПОМЕСТИТЬ КурсыВалют
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(КОНЕЦПЕРИОДА(&НачалоПериода, ДЕНЬ), ) КАК КурсыВалют
		|	
		|ИНДЕКСИРОВАТЬ ПО
		|	Валюта
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//Данные из планов продаж.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ВЫРАЗИТЬ(КлючиАналитики.Склад КАК Справочник.Склады))       КАК Склад,
		|	МАКСИМУМ(КлючиАналитики.Номенклатура)                                КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|			МАКСИМУМ(КлючиАналитики.Характеристика)
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                                                КАК Характеристика,
		|	КлючиАналитики.Ссылка                                                КАК КлючАналитики,
		|	Планы.ПериодПлана                                                    КАК ПериодПлана,
		|	Планы.Период                                                         КАК ПервыйДеньПериодаПлана,
		|	НАЧАЛОПЕРИОДА(
		|		МАКСИМУМ(ВЫБОР
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, ГОД)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, ПОЛУГОДИЕ)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, КВАРТАЛ)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, МЕСЯЦ)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, ДЕКАДА)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, НЕДЕЛЯ)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, ДЕНЬ)
		|			КОНЕЦ),
		|	ДЕНЬ)                                                                КАК ПоследнийДеньПериодаПлана,
		|	МАКСИМУМ(ВЫБОР 
		|		КОГДА КлючиАналитики.Склад.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|			КлючиАналитики.Склад.Календарь
		|		ИНАЧЕ 
		|			&УмолчаниеКалендарь
		|	КОНЕЦ)                                                                КАК Календарь,
		|	СУММА(Планы.Количество)                                              КАК ОборотПлана,
		|	ВЫБОР
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|			ТОГДА 7
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|			ТОГДА 6
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|			ТОГДА 5
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|			ТОГДА 4
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|			ТОГДА 3
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|			ТОГДА 2
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|			ТОГДА 1
		|	КОНЕЦ                                                                КАК ПриоритетПлана,
		|	МАКСИМУМ(ТаблицаОтбора.ДатаСледующейПоставки)                        КАК ДатаСледующейПоставки
		|ПОМЕСТИТЬ ОборотыПланов
		|ИЗ
		|	РегистрНакопления.ПланыПродажИВнутреннегоПотребления КАК Планы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
		|		ПО Планы.АналитикаУчетаНоменклатуры = КлючиАналитики.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючевыеДаты КАК ТаблицаОтбора
		|		ПО ТаблицаОтбора.Склад             = КлючиАналитики.Склад
		|			И ТаблицаОтбора.Номенклатура   = КлючиАналитики.Номенклатура
		|			И ТаблицаОтбора.Характеристика = КлючиАналитики.Характеристика
		|			И ТаблицаОтбора.ЭтаПотребностьОбособлена = ЛОЖЬ
		|			И ТаблицаОтбора.ЭтоРабота = ЛОЖЬ
		|ГДЕ
		|	Планы.Активность
		|	И (Планы.ПериодПлана      =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, ПОЛУГОДИЕ)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, КВАРТАЛ)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕКАДА)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, НЕДЕЛЯ)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ))
		|СГРУППИРОВАТЬ ПО
		|	Планы.ПериодПлана,
		|	Планы.Период,
		|	КлючиАналитики.Ссылка
		|	
		|ИМЕЮЩИЕ 
		|	СУММА(Планы.Количество) > 0
		|;
		//Данные из планов продаж, разнесенные по рабочим дням склада/предприятия.
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОборотыПланов.КлючАналитики                              КАК КлючАналитики,
		|	ОборотыПланов.Склад                                      КАК Склад,
		|	ОборотыПланов.Номенклатура                               КАК Номенклатура,
		|	ОборотыПланов.Характеристика                             КАК Характеристика,
		|	ОборотыПланов.ПериодПлана                                КАК ПериодПлана,
		|	ОборотыПланов.ПервыйДеньПериодаПлана                     КАК ПервыйДеньПериодаПлана,
		|	ОборотыПланов.ПоследнийДеньПериодаПлана                  КАК ПоследнийДеньПериодаПлана,
		|	ОборотыПланов.ОборотПлана                                КАК ОборотПлана,
		|	ОборотыПланов.ПриоритетПлана                             КАК ПриоритетПлана,
		|	ВЫБОР 
		|		КОГДА ОборотыПланов.Календарь 
		|			= ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|		ТОГДА
		|			РАЗНОСТЬДАТ(ОборотыПланов.ПервыйДеньПериодаПлана, 
		|				ОборотыПланов.ПоследнийДеньПериодаПлана, ДЕНЬ) + 1
		|		ИНАЧЕ
		|			ПоследнийДень.КоличествоДнейВГрафикеСНачалаГода 
		|				- ПервыйДень.КоличествоДнейВГрафикеСНачалаГода
		|				+ ВЫБОР 
		|					КОГДА ПервыйДень.ДеньВключенВГрафик ТОГДА
		|						1
		|					ИНАЧЕ 
		|						0
		|				КОНЕЦ
		|	КОНЕЦ                                                    КАК ВсегоДней,
		|	ВЫБОР 
		|		КОГДА НЕ ПоследнийДень.ДатаГрафика ЕСТЬ NULL
		|			И НЕ ПервыйДень.ДатаГрафика ЕСТЬ NULL
		|		ТОГДА
		|			0
		|		КОГДА ОборотыПланов.Календарь 
		|			= ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|		ТОГДА 
		|			1
		|		ИНАЧЕ 
		|			2
		|	КОНЕЦ                                                    КАК ИсточникДатПотребленияПоПлану,
		|	ДниГрафика.ДатаГрафика                                   КАК ДатаСобытия,
		|	ВЫБОР 
		|		КОГДА ДниГрафика.ДеньВключенВГрафик ЕСТЬ NULL ТОГДА 
		|			ИСТИНА
		|		ИНАЧЕ 
		|			ЛОЖЬ 
		|	КОНЕЦ                                    КАК НетРабочихДнейСреднедневного 
		|ПОМЕСТИТЬ ОборотыПлановПоДням
		|ИЗ
		|	ОборотыПланов КАК ОборотыПланов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПервыйДень
		|		ПО ОборотыПланов.Календарь                         = ПервыйДень.Календарь
		|			И ГОД(ОборотыПланов.ПервыйДеньПериодаПлана)    = ПервыйДень.Год
		|			И ОборотыПланов.ПервыйДеньПериодаПлана         = ПервыйДень.ДатаГрафика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоследнийДень
		|		ПО ОборотыПланов.Календарь                         = ПоследнийДень.Календарь
		|			И ГОД(ОборотыПланов.ПоследнийДеньПериодаПлана) = ПоследнийДень.Год
		|			И ОборотыПланов.ПоследнийДеньПериодаПлана      = ПоследнийДень.ДатаГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДниГрафика
		|		ПО ОборотыПланов.Календарь = ДниГрафика.Календарь
		|			И ДниГрафика.ДеньВключенВГрафик = ИСТИНА
		|			И ГОД(ДниГрафика.ДатаГрафика) = ГОД(&НачалоПериода)
		|			И ДниГрафика.ДатаГрафика >= &НачалоПериода
		|			И ДниГрафика.ДатаГрафика >= ОборотыПланов.ПервыйДеньПериодаПлана
		|			И ДниГрафика.ДатаГрафика <= ОборотыПланов.ПоследнийДеньПериодаПлана
		|ГДЕ
		|	ДниГрафика.ДатаГрафика ЕСТЬ NULL
		|	ИЛИ ОборотыПланов.ДатаСледующейПоставки > ДниГрафика.ДатаГрафика
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//Приоритет выбесняющего плана в каждую дату
		|ВЫБРАТЬ
		|	ОборотыПлановПоДням.КлючАналитики           КАК КлючАналитики,
		|	ОборотыПлановПоДням.ДатаСобытия             КАК ДатаСобытия,
		|	МИНИМУМ(ОборотыПлановПоДням.ПриоритетПлана) КАК Приоритет,
		|	НАЧАЛОПЕРИОДА(МИНИМУМ(ВЫБОР 
		|		КОГДА ОборотыПлановПоДням.ИсточникДатПотребленияПоПлану = 2 ТОГДА
		|			ОборотыПлановПоДням.ПервыйДеньПериодаПлана
		|		ИНАЧЕ 
		|			NULL
		|	КОНЕЦ), ГОД)                                КАК ГодБезДат
		|ПОМЕСТИТЬ ВытесняющийПлан
		|ИЗ
		|	ОборотыПлановПоДням КАК ОборотыПлановПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыПлановПоДням.КлючАналитики,
		|	ОборотыПлановПоДням.ДатаСобытия
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//Потребности из планов продаж и внутреннего потребления.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	0                                                                     КАК ИсточникДаты,
		|	ОборотыПлановПоДням.Номенклатура                                      КАК Номенклатура,
		|	ВЫБОР 
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|			ОборотыПлановПоДням.Характеристика
		|		ИНАЧЕ 
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                                                 КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                          КАК Назначение,
		|	ОборотыПлановПоДням.Склад                                             КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                КАК Подразделение,
		|	ОборотыПлановПоДням.ДатаСобытия                                       КАК ДатаСобытия,
		|	ВЫБОР 
		|		КОГДА ОборотыПлановПоДням.ВсегоДней > 0 ТОГДА
		|			ОборотыПлановПоДням.ОборотПлана
		|			/ ОборотыПлановПоДням.ВсегоДней
		|		ИНАЧЕ 
		|			0
		|	КОНЕЦ                                                                 КАК ПотреблениеПоПланам,
		|	0                                                                     КАК ОжидаемаяОтгрузка,
		|	0                                                                     КАК ОжидаемоеПоступление,
		|	0                                                                     КАК СтраховойЗапас,
		|	0                                                                     КАК МаксимальныйЗапас,
		|	0                                                                     КАК ПотреблениеПоСтатистике,
		|	0                                                                     КАК СреднедневноеПотребление
		|ПОМЕСТИТЬ ПотребностиПоДням
		|ИЗ
		|	ВытесняющийПлан КАК ВытесняющийПлан
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПлановПоДням КАК ОборотыПлановПоДням
		|		ПО ВытесняющийПлан.Приоритет = ОборотыПлановПоДням.ПриоритетПлана
		|		И (ВытесняющийПлан.ДатаСобытия ЕСТЬ NULL И ОборотыПлановПоДням.ДатаСобытия ЕСТЬ NULL
		|			ИЛИ ВытесняющийПлан.ДатаСобытия = ОборотыПлановПоДням.ДатаСобытия)
		|		И ВытесняющийПлан.КлючАналитики = ОборотыПлановПоДням.КлючАналитики
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		//Потребности по графику движения товаров.
		|ВЫБРАТЬ
		|	1                                                                     КАК ИсточникДаты,
		|	График.Номенклатура                                                   КАК Номенклатура,
		|	ВЫБОР 
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|			График.Характеристика
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                                                 КАК Характеристика,
		|	График.Назначение                                                     КАК Назначение,
		|	График.Склад                                                          КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                КАК Подразделение,
		|	График.ДатаСобытия                                                    КАК ДатаСобытия,
		|	0                                                                     КАК ПотреблениеПоПланам,
		|	СУММА(
		|		ВЫБОР
		|			КОГДА График.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|				График.Количество
		|				+ График.КоличествоПодЗаказ
		|				+ График.КоличествоСоСклада
		|			ИНАЧЕ 
		|				0
		|		КОНЕЦ)                                                            КАК ОжидаемаяОтгрузка,
		|	СУММА(
		|		ВЫБОР
		|			КОГДА График.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|				График.Количество
		|				+ График.КоличествоПодЗаказ
		|			ИНАЧЕ 
		|				0
		|		КОНЕЦ)                                                            КАК ОжидаемоеПоступление,
		|	0                                                                     КАК СтраховойЗапас,
		|	0                                                                     КАК МаксимальныйЗапас,
		|	0                                                                     КАК ПотреблениеПоСтатистике,
		|	0                                                                     КАК СреднедневноеПотребление
		|ИЗ
		|	РегистрНакопления.ГрафикДвиженияТоваров КАК График
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючевыеДаты КАК ТаблицаОтбора
		|		ПО ТаблицаОтбора.Склад             = График.Склад
		|			И ТаблицаОтбора.Номенклатура   = График.Номенклатура
		|			И ТаблицаОтбора.Характеристика = График.Характеристика
		|			И ТаблицаОтбора.Назначение     = График.Назначение
		|			И График.ДатаСобытия < ТаблицаОтбора.ДатаСледующейПоставки
		|			И ТаблицаОтбора.ЭтоРабота = ЛОЖЬ
		|	ГДЕ
		|		График.Активность
		|СГРУППИРОВАТЬ ПО
		|	График.Склад,
		|	График.Номенклатура,
		|	ВЫБОР 
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|			График.Характеристика
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ,
		|	График.Назначение,
		|	График.ДатаСобытия
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		//Потребности по графику обеспечения работ
		|ВЫБРАТЬ
		|	1                                                                     КАК ИсточникДаты,
		|	ГрафикРабот.Номенклатура                                              КАК Номенклатура,
		|	ВЫБОР 
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|			ГрафикРабот.Характеристика
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ                                                                 КАК Характеристика,
		|	ГрафикРабот.Назначение                                                КАК Назначение,
		|	ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)                              КАК Склад,
		|	ГрафикРабот.Подразделение                                             КАК Подразделение,
		|	ГрафикРабот.Период                                                    КАК ДатаСобытия,
		|	0                                                                     КАК ПотреблениеПоПланам,
		|	СУММА(
		|		ВЫБОР
		|			КОГДА ГрафикРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 
		|				ГрафикРабот.КОбеспечению
		|			ИНАЧЕ 
		|				0
		|		КОНЕЦ)                                                            КАК ОжидаемаяОтгрузка,
		|	СУММА(
		|		ВЫБОР
		|			КОГДА ГрафикРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|				ГрафикРабот.КОбеспечению
		|			ИНАЧЕ 
		|				0
		|		КОНЕЦ)                                                            КАК ОжидаемоеПоступление,
		|	0                                                                     КАК СтраховойЗапас,
		|	0                                                                     КАК МаксимальныйЗапас,
		|	0                                                                     КАК ПотреблениеПоСтатистике,
		|	0                                                                     КАК СреднедневноеПотребление
		|ИЗ
		|	РегистрНакопления.ОбеспечениеЗаказовРаботами КАК ГрафикРабот
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючевыеДаты КАК ТаблицаОтбора
		|		ПО ТаблицаОтбора.Подразделение     = ГрафикРабот.Подразделение
		|			И ТаблицаОтбора.Номенклатура   = ГрафикРабот.Номенклатура
		|			И ТаблицаОтбора.Характеристика = ГрафикРабот.Характеристика
		|			И ТаблицаОтбора.Назначение     = ГрафикРабот.Назначение
		|			И ГрафикРабот.Период < ТаблицаОтбора.ДатаСледующейПоставки
		|			И ТаблицаОтбора.ЭтоРабота = ИСТИНА
		|	ГДЕ
		|		ГрафикРабот.Активность
		|СГРУППИРОВАТЬ ПО
		|	ГрафикРабот.Подразделение,
		|	ГрафикРабот.Номенклатура,
		|	ВЫБОР 
		|		КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|			ГрафикРабот.Характеристика
		|		ИНАЧЕ
		|			ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ,
		|	ГрафикРабот.Назначение,
		|	ГрафикРабот.Период
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		//Потребности согласно данных товарных ограничений.
		|ВЫБРАТЬ
		|	2                                                                     КАК ИсточникДаты,
		|	ТоварныеОграничения.Номенклатура                                      КАК Номенклатура,
		|	ТоварныеОграничения.Характеристика                                    КАК Характеристика,
		|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)                          КАК Назначение,
		|	ТоварныеОграничения.Склад                                             КАК Склад,
		|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)                КАК Подразделение,
		|	КалендарныеГрафики.ДатаГрафика                                        КАК ДатаСобытия,
		|	0                                                                     КАК ПотреблениеПоПланам,
		|	0                                                                     КАК ОжидаемаяОтгрузка,
		|	0                                                                     КАК ОжидаемоеПоступление,
		|	ВЫБОР
		|		КОГДА ТоварныеОграничения.СтраховоеКоличествоЗапаса > 0 ТОГДА
		|			ТоварныеОграничения.СтраховоеКоличествоЗапаса
		|		КОГДА ТоварныеОграничения.НормативноеКоличествоЗапаса > 0
		|			И ТоварныеОграничения.МинимальноеКоличествоЗапаса > 0
		|		ТОГДА ТоварныеОграничения.НормативноеКоличествоЗапаса 
		|			- ТоварныеОграничения.МинимальноеКоличествоЗапаса
		|		ИНАЧЕ 
		|			ТоварныеОграничения.СтраховоеКоличествоЗапасаРекомендуемое
		|	КОНЕЦ                                                                 КАК СтраховойЗапас,
		|	ВЫБОР
		|		КОГДА ТоварныеОграничения.МаксимальноеКоличествоЗапаса > 0 ТОГДА
		|			ТоварныеОграничения.МаксимальноеКоличествоЗапаса
		|		КОГДА ТоварныеОграничения.НормативноеКоличествоЗапаса > 0 ТОГДА
		|			ТоварныеОграничения.НормативноеКоличествоЗапаса
		|		КОГДА ТоварныеОграничения.СтраховоеКоличествоЗапаса > 0
		|			ИЛИ ТоварныеОграничения.МинимальноеКоличествоЗапаса > 0
		|		ТОГДА
		|			ТоварныеОграничения.СтраховоеКоличествоЗапаса
		|			+ ТоварныеОграничения.МинимальноеКоличествоЗапаса
		|		ИНАЧЕ
		|			ТоварныеОграничения.НормативноеКоличествоЗапасаРекомендуемое
		|	КОНЕЦ                                                                 КАК МаксимальныйЗапас,
		|	ТоварныеОграничения.СреднедневноеПотребление                          КАК ПотреблениеПоСтатистике,
		|	ТоварныеОграничения.СреднедневноеПотребление                          КАК СреднедневноеПотребление
		|ИЗ
		|	РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючевыеДаты КАК ТаблицаОтбора
		|		ПО ТоварныеОграничения.Номенклатура      = ТаблицаОтбора.Номенклатура
		|			И ТоварныеОграничения.Характеристика = ТаблицаОтбора.Характеристика
		|			И ТоварныеОграничения.Склад          = ТаблицаОтбора.Склад
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|		ПО (ТаблицаОтбора.КалендарьРаботы = КалендарныеГрафики.Календарь)
		|			И КалендарныеГрафики.ДеньВключенВГрафик = ИСТИНА
		|			И &НачалоПериода <= КалендарныеГрафики.ДатаГрафика
		|			И КалендарныеГрафики.ДатаГрафика < ТаблицаОтбора.ДатаСледующейПоставки
		|		ГДЕ
		|			НЕ ТаблицаОтбора.ЭтаПотребностьОбособлена
		|			И ТоварныеОграничения.СреднедневноеПотребление > 0
		|			И (&ИспользоватьХарактеристикиНоменклатуры
		|				ИЛИ ТоварныеОграничения.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|
		|ИНДЕКСИРОВАТЬ ПО 
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Назначение
		|;
		|////////////////////////////////////////////////////////////////////////////////
		//Соединение всех полученных данных о потребонстях.
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НСИОбеспечения.Индекс                                                      КАК Индекс,
		|	НСИОбеспечения.Номенклатура                                                КАК Номенклатура,
		|	НСИОбеспечения.Характеристика                                              КАК Характеристика,
		|	НСИОбеспечения.Назначение                                                  КАК Назначение,
		|	НСИОбеспечения.Склад                                                       КАК Склад,
		|	ВЫБОР
		|		КОГДА НСИОбеспечения.ЭтоРабота ТОГДА
		|			ПотребностиПоДням.Подразделение
		|		ИНАЧЕ
		|			НСИОбеспечения.Подразделение
		|	КОНЕЦ                                                                      КАК Подразделение,
		|
		|	НСИОбеспечения.ЭтаПотребностьОбособлена                                    КАК ЭтаПотребностьОбособлена,
		|	НСИОбеспечения.ЭтоПотребностьВПродаже                                      КАК ЭтоПотребностьВПродаже,
		|	НСИОбеспечения.ЭтоПотребностьВЗапасе                                       КАК ЭтоПотребностьВЗапасе,
		|	НСИОбеспечения.ЭтоПотребностьВОтгрузке                                     КАК ЭтоПотребностьВОтгрузке,
		|	НСИОбеспечения.ЭтоРабота                                                   КАК ЭтоРабота,
		|
		|	НСИОбеспечения.СпособОбеспечения                                           КАК СпособОбеспечения,
		|	НСИОбеспечения.ИсточникПолученияСпособа                                    КАК ИсточникПолученияСпособа,
		|	НСИОбеспечения.СрокИсполненияЗаказа                                        КАК СрокИсполненияЗаказа,
		|	НСИОбеспечения.ДлительностьВДнях                                           КАК ДлительностьВДнях,
		|	НСИОбеспечения.КалендарьСклада                                             КАК КалендарьСклада,
		|	НСИОбеспечения.КалендарьСпособа                                            КАК КалендарьСпособа,
		|	НСИОбеспечения.КалендарьПоставки                                           КАК КалендарьПоставки,
		|	НСИОбеспечения.КалендарьРаботы                                             КАК КалендарьРаботы,
		|	НСИОбеспечения.ИсточникКалендаряПоставки                                   КАК ИсточникКалендаряПоставки,
		|
		|	НСИОбеспечения.ДатаБлижайшейПоставки                                       КАК ДатаПоставки,
		|	НСИОбеспечения.ДатаСледующейПоставки                                       КАК ДатаСледующейПоставки,
		|	НСИОбеспечения.ДатаЗаказа                                                  КАК ДатаЗаказа,
		|
		|	НСИОбеспечения.МетодУправленияЗапасами                                     КАК МетодУправленияЗапасами,
		|	НСИОбеспечения.ИсточникПолученияМетода                                     КАК ИсточникПолученияМетода,
		|
		|	СпрНоменклатура.Вес                                                        КАК Вес,
		|	СпрНоменклатура.ЕдиницаИзмерения                                           КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА СпрНоменклатура.ЕдиницаИзмерения.ТипЕдиницыИзмерения 
		|			= ЗНАЧЕНИЕ(Перечисление.ТипыЕдиницИзмерения.Штучная)
		|		ТОГДА 
		|			ИСТИНА
		|		ИНАЧЕ 
		|			ЛОЖЬ
		|	КОНЕЦ                                                                      КАК ШтучныйТовар,
		|	СпрНоменклатура.Код                                                        КАК Код,
		|	СпрНоменклатура.Артикул                                                    КАК Артикул,
		|
		|	ЕСТЬNULL(Способы.ТипОбеспечения,
		|		ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.Покупка))                        КАК ТипОбеспечения,
		|	Способы.Соглашение                                                         КАК Соглашение,
		|	Способы.ИсточникОбеспеченияПотребностей                                    КАК ИсточникОбеспечения,
		|	Способы.Организация                                                        КАК Организация,
		|	Способы.УсловиеЦеныПоставщика                                              КАК УсловиеЦены,
		|	Способы.Соглашение.Валюта                                                  КАК ВалютаСоглашения,
		
		|	ВЫБОР
		|		КОГДА Способы.Соглашение.НалогообложениеНДС
		|				= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|			И НЕ Способы.Соглашение.ЦенаВключаетНДС
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА СпрНоменклатура.СтавкаНДС 
		|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), 
		|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|					)
		|				ТОГДА
		|					1.1
		|				КОГДА СпрНоменклатура.СтавкаНДС
		|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
		|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|					)
		|				ТОГДА
		|					1.18
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ
		|		* ЦеныПоставщиков.Цена 
		|		* КурсыВалют.Коэффициент
		|		/ КурсВалютаСоглашения.Коэффициент
		|		/ ЕСТЬNULL(ЦеныПоставщиков.Упаковка.Коэффициент, 1)                    КАК ЦенаВВалютеСоглашения,
		|	ВЫБОР
		|		КОГДА Способы.Соглашение.НалогообложениеНДС
		|				= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|			И НЕ Способы.Соглашение.ЦенаВключаетНДС
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА СпрНоменклатура.СтавкаНДС 
		|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), 
		|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|					)
		|				ТОГДА
		|					1.1
		|				КОГДА СпрНоменклатура.СтавкаНДС
		|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
		|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|					)
		|				ТОГДА
		|					1.18
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ
		|		* ЦеныПоставщиков.Цена
		|		* КурсыВалют.Коэффициент
		|		/ &КоэффициентВалютыУпрУчета
		|		/ ЕСТЬNULL(ЦеныПоставщиков.Упаковка.Коэффициент, 1)                    КАК ЦенаВВалютеУправленческогоУчета,
		
		|	ЕСТЬNULL(ОстаткиОбщие.ВНаличииОстаток, 0)                                  КАК Остаток,
		|	ЕСТЬNULL(ОборотыСНачалаПериода.ВНаличииРасход, 0)                          КАК РасходСНачалаДня,
		|	ЕСТЬNULL(ОстаткиОбособленные.НаличиеПодЗаказОстаток
		|		+ ОстаткиОбособленные.НаличиеСоСкладаОстаток, 0)                       КАК ОстатокОбособленный,
		|	ЕСТЬNULL(ОборотыРабот.КОбеспечениюПриход, 
		|		ОстаткиОбособленные.ПотребностьОстаток
		|		+ ОстаткиОбособленные.НаличиеСоСкладаОстаток)                          КАК Потребность,
		|	ЕСТЬNULL(ОборотыРабот.КОбеспечениюРасход, 
		|		ОстаткиОбособленные.ЗаказаноОстаток 
		|		+ ОстаткиОбособленные.НаличиеПодЗаказОстаток
		|		+ ОстаткиОбособленные.НаличиеСоСкладаОстаток)                          КАК Обеспечено,
		|
		|	ЕСТЬNULL(ПотребностиПоДням.ПотреблениеПоПланам, 0)                         КАК ПотреблениеПоПланам,
		|	ЕСТЬNULL(ПотребностиПоДням.ПотреблениеПоСтатистике, 0)                     КАК ПотреблениеПоСтатистике,
		|	ЕСТЬNULL(ПотребностиПоДням.ОжидаемаяОтгрузка, 0)                           КАК ОжидаемаяОтгрузка,
		|	ЕСТЬNULL(ПотребностиПоДням.ОжидаемоеПоступление, 0)                        КАК ОжидаемоеПоступление,
		|
		|	ЕстьNULL(ПотребностиПоДням.СтраховойЗапас, 0)                              КАК СтраховойЗапас,
		|	ЕстьNULL(ПотребностиПоДням.МаксимальныйЗапас, 0)                           КАК МаксимальныйЗапас,
		|	ЕстьNULL(ПотребностиПоДням.СреднедневноеПотребление, 0)                    КАК СреднедневноеПотребление,
		|	ПотребностиПоДням.ИсточникДаты                                             КАК ИсточникДаты,
		|
		|	//ТекстГруппировкиАссортимент
		|
		|	ПотребностиПоДням.ДатаСобытия                                              КАК ДатаСобытия
		|
		|ИЗ
		|	КлючевыеДаты КАК НСИОбеспечения
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиОбщие КАК ОстаткиОбщие
		|			ПО НЕ НСИОбеспечения.ЭтоРабота 
		|				И НСИОбеспечения.Склад            = ОстаткиОбщие.Склад
		|				И НСИОбеспечения.Номенклатура     = ОстаткиОбщие.Номенклатура
		|				И НСИОбеспечения.Характеристика   = ОстаткиОбщие.Характеристика
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиОбособленные КАК ОстаткиОбособленные
		|			ПО НСИОбеспечения.ЭтаПотребностьОбособлена
		|				И НСИОбеспечения.Склад            = ОстаткиОбособленные.Склад
		|				И НСИОбеспечения.Номенклатура     = ОстаткиОбособленные.Номенклатура
		|				И НСИОбеспечения.Характеристика   = ОстаткиОбособленные.Характеристика
		|				И НСИОбеспечения.Назначение       = ОстаткиОбособленные.Назначение
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыСНачалаПериода КАК ОборотыСНачалаПериода
		|			ПО НЕ НСИОбеспечения.ЭтоРабота
		|				И НСИОбеспечения.Склад             = ОборотыСНачалаПериода.Склад
		|				И НСИОбеспечения.Номенклатура      = ОборотыСНачалаПериода.Номенклатура
		|				И НСИОбеспечения.Характеристика    = ОборотыСНачалаПериода.Характеристика
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыРабот КАК ОборотыРабот
		|			ПО НСИОбеспечения.ЭтоРабота
		|				И НСИОбеспечения.Подразделение  = ОборотыРабот.Подразделение
		|				И НСИОбеспечения.Номенклатура   = ОборотыРабот.Номенклатура
		|				И НСИОбеспечения.Характеристика = ОборотыРабот.Характеристика
		|				И НСИОбеспечения.Назначение     = ОборотыРабот.Назначение
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СпособыОбеспеченияПотребностей КАК Способы
		|			ПО НСИОбеспечения.СпособОбеспечения = Способы.Ссылка
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныПоставщиков КАК ЦеныПоставщиков
		|			ПО НСИОбеспечения.Номенклатура      = ЦеныПоставщиков.Номенклатура
		|				И НСИОбеспечения.Характеристика = ЦеныПоставщиков.Характеристика
		|				И Способы.Соглашение            = ЦеныПоставщиков.Соглашение
		|				И Способы.УсловиеЦеныПоставщика = ЦеныПоставщиков.УсловиеЦеныПоставщика
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|			ПО НСИОбеспечения.Номенклатура = СпрНоменклатура.Ссылка
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалют
		|			ПО ЦеныПоставщиков.Валюта = КурсыВалют.Валюта
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсВалютаСоглашения
		|			ПО Способы.Соглашение.Валюта = КурсВалютаСоглашения.Валюта
		|			
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПотребностиПоДням КАК ПотребностиПоДням
		|		ПО НСИОбеспечения.Номенклатура      = ПотребностиПоДням.Номенклатура
		|			И НСИОбеспечения.Характеристика = ПотребностиПоДням.Характеристика
		|			И НСИОбеспечения.Склад          = ПотребностиПоДням.Склад
		|			И НСИОбеспечения.Назначение     = ПотребностиПоДням.Назначение
		|			И (НСИОбеспечения.ЭтоРабота = ЛОЖЬ 
		|				ИЛИ НСИОбеспечения.Подразделение = ПотребностиПоДням.Подразделение)
		|//ТекстЗапросаАссортимент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	Склад,
		|	Назначение,
		|	Подразделение,
		|	ДатаСобытия";
		
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") Тогда
		ТекстЗапросаАссортимент = "
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент КАК Ассортимент
		|		ПО (Ассортимент.Номенклатура = НСИОбеспечения.Номенклатура)
		|			И (Ассортимент.ОбъектПланирования = НСИОбеспечения.Склад.ФорматМагазина)
		|			И (Ассортимент.РазрешеныЗакупки)
		|			И (Ассортимент.Регистратор В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					Ассорти.Регистратор
		|				ИЗ
		|					РегистрСведений.Ассортимент КАК Ассорти
		|				ГДЕ
		|					Ассорти.Номенклатура = Ассортимент.Номенклатура
		|					И Ассорти.ОбъектПланирования = Ассортимент.ОбъектПланирования
		|					И Ассорти.Период <= НСИОбеспечения.ДатаБлижайшейПоставки
		|				УПОРЯДОЧИТЬ ПО
		|					Ассорти.Период УБЫВ,
		|					Ассорти.ДатаРегистратора УБЫВ,
		|					Ассорти.Регистратор УБЫВ))
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстЗапросаАссортимент", ТекстЗапросаАссортимент);
		ТекстГруппировкиАссортимент = "
		|		Ассортимент.РазрешеныЗакупки КАК РазрешеныЗакупки,
		|		НСИОбеспечения.Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|		НСИОбеспечения.Номенклатура.Марка КАК Марка,
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "//ТекстГруппировкиАссортимент", ТекстГруппировкиАссортимент);
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции // СформироватьТекстЗапросаРасчетаПоказателей()

////////////////////////////////////////////////////////////////////////////////
//Обеспечивающие управление видимостью элементов формы.

&НаКлиенте
Функция ПолучитьПодтверждениеПриСменеСтраницыПомощника()
	
	Если Элементы.ПанельПомощникаУправленияЗапасами.ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Если КорзинаЗаказов.ПолучитьЭлементы().Количество() > 0 Тогда
			
			Режим = РежимДиалогаВопрос.ДаНет;
			Ответ = Вопрос(
				НСтр("ru = ""В списке Заказы к оформлению имеются строки. Выполнение операции приведет к очистке списка. """) +
				НСтр("ru = ""Продолжить выполнение операции?""")
			, Режим, 0);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

&НаКлиенте
Процедура УстановитьЗаголовокФормы(Страница)
	
	Если Страница = Элементы.СтраницаШаг1 Тогда
		
		Заголовок = АвтоЗаголовокФормы + НСтр("ru = '. Шаг 1. Отбор потребностей'");
		
	ИначеЕсли Страница = Элементы.СтраницаШаг2 Тогда
		
		Заголовок = АвтоЗаголовокФормы + НСтр("ru = '. Шаг 2. Определение состава и объема заказа'"); 
		
	ИначеЕсли Страница = Элементы.СтраницаШаг3 Тогда
		
		Заголовок = АвтоЗаголовокФормы + НСтр("ru = '. Шаг 3. Уточнение сформированных заказов'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКнопокКоманднойПанели(ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаШаг1 Тогда
		
		Элементы.СтраницыКомандыВерх.ТекущаяСтраница = Элементы.СтраницаКомандыВерхСтраница;
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг1;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг2 Тогда
		
		Элементы.СтраницыКомандыВерх.ТекущаяСтраница = Элементы.СтраницаКомандыВерхСтраницаШаг2;
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг2;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаШаг3 Тогда
		
		Элементы.СтраницыКомандыВерх.ТекущаяСтраница = Элементы.СтраницаКомандыВерхСтраница;
		Элементы.СтраницыКомандыНиз.ТекущаяСтраница  = Элементы.СтраницаКомандыНизШаг3;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьСтраницРасшифровки()
	Перем МетодУправленияЗапасами;
	
	ТекСтрока = Элементы.Объекты.ТекущиеДанные;
	
	Если ТекСтрока <> Неопределено Тогда
	
		МетодУправленияЗапасами = ТекСтрока.МетодУправленияЗапасами;
		
		Если ТекСтрока.ЭтоРабота Тогда
			
			Элементы.СтраницыКонтекстнаяИнформация.ТекущаяСтраница = Элементы.СтраницаРаботы;
			
		ИначеЕсли ТекСтрока.ЭтаПотребностьОбособлена Тогда
			
			Элементы.СтраницыКонтекстнаяИнформация.ТекущаяСтраница = Элементы.СтраницаТоварыОбособленные;
			
		ИначеЕсли МетодУправленияЗапасами
			= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер") Тогда
			
			Элементы.СтраницыКонтекстнаяИнформация.ТекущаяСтраница = Элементы.СтраницаФиксированныйРазмер;
			
		ИначеЕсли МетодУправленияЗапасами
			= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал") Тогда
			
			Элементы.СтраницыКонтекстнаяИнформация.ТекущаяСтраница = Элементы.СтраницаФиксированныйИнтервал;
			
		ИначеЕсли МетодУправленияЗапасами
			= ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование") Тогда
			
			Элементы.СтраницыКонтекстнаяИнформация.ТекущаяСтраница = Элементы.СтраницаПланирование;
			
		Иначе //Метод управления запасами - Заказ под заказ
			
			Элементы.СтраницыКонтекстнаяИнформация.ТекущаяСтраница = Элементы.СтраницаЗаказПодЗаказ;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Обслуживающие серверные отборы.

//Инициализирует компоновщик настроек текстом запроса, указанным в параметре ТекстЗапроса.
//Полученный компоновщик настроек используется для получения
//данных подсистемы управления запасами c интерактивно заполненными отборами.

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроекДляОтборов()
	
	Обработка = РеквизитФормыВЗначение("Объект");
	Если ПолучитьФункциональнуюОпцию("ИспользоватьАссортимент") Тогда
		СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("МакетКомпоновкиДляСерверныхОтборовАссортимент");
	Иначе
		СхемаКомпоновкиДанных = Обработка.ПолучитьМакет("МакетКомпоновкиДляСерверныхОтборов");
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных); 
	КомпоновщикНастроекДляОтборов.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроекДляОтборов.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры //ИнициализироватьКомпоновщикНастроекДляОтборов()

&НаСервере
Функция ПолучитьЗапросСОтборамиКомпоновкиДанных(ТекстЗапроса)
	
	КомпоновщикМакетаКомпоновкиДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
	СхемаКомпоновкиДанных.НаборыДанных["ЗапросОбъектовУправленияЗапасами"].Запрос = ТекстЗапроса;
	
	МакетКомпоновкиДанных = КомпоновщикМакетаКомпоновкиДанных.Выполнить(СхемаКомпоновкиДанных,
		КомпоновщикНастроекДляОтборов.ПолучитьНастройки(), , , , Ложь, );
	
	Запрос = Новый Запрос(МакетКомпоновкиДанных.НаборыДанных.ЗапросОбъектовУправленияЗапасами.Запрос);
	
	Для каждого ПараметрКомпоновки из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		
		Запрос.УстановитьПараметр(ПараметрКомпоновки.Имя, ПараметрКомпоновки.Значение);
		
	КонецЦикла;
	
	Возврат Запрос;
	
КонецФункции // ПолучитьЗапросСОтборамиКомпоновкиДанных()

&НаСервере
Процедура СохранитьНастройки()
	
	Настройки = Новый Структура("ПользовательскиеНастройки", КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ОбработкаОбеспечениеПотребностей", ИмяНастройкиОтборов, Настройки);

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ОбработкаОбеспечениеПотребностей",
		ИмяНастройкиОтборов);
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда

		КомпоновщикНастроекДляОтборов.ЗагрузитьПользовательскиеНастройки(ЗначениеНастроек.ПользовательскиеНастройки);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьПростойОтборВОтборахКомпоновки(КомпоновщикНастроекДляОтборов, ИмяПоля, Значение, ЭтоОтборПоГруппе)

	ЗначениеПоиска = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекДляОтборов.Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
			
			ЭлементПользовательскойНастройки 
				= КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки.Элементы.Найти(
					ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
				
				ЭлементПользовательскойНастройки.Использование = (Значение <> Неопределено) И Не Значение.Пустая();
				Если ЭлементПользовательскойНастройки.Использование Тогда
					
					ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.Равно;
					
					Если ЭтоОтборПоГруппе Тогда
						
						ВариантВидаСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
						
					КонецЕсли;
					
					ЭлементПользовательскойНастройки.ВидСравнения  = ВариантВидаСравнения;
					ЭлементПользовательскойНастройки.ПравоеЗначение = Значение;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПростойОтбор(РеквизитФормы, ИмяПоля, ЗначениеПоУмолчанию, ЭлементОтбора, ЭлементПользовательскойНастройки)
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Если ПолеКомпоновки = ЭлементОтбора.ЛевоеЗначение Тогда
		
		Если ЭлементПользовательскойНастройки.Использование Тогда
			
			РеквизитФормы = ЭлементПользовательскойНастройки.ПравоеЗначение;
			
		Иначе 
			
			РеквизитФормы = ЗначениеПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОтразитьОтборКомпоновкиВПростыхОтборах()
	
	ОтражениеНедопустимо = Ложь;
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			
			ОтборПоГруппеДоступен = 
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Склады") ИЛИ
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Партнеры") ИЛИ
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.Номенклатура") ИЛИ
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.СегментыНоменклатуры") ИЛИ
				ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СправочникСсылка.СтруктураПредприятия");
				
			ОтражениеНедопустимо = 
				НЕ ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно 
				И НЕ (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии И ОтборПоГруппеДоступен) 
				ИЛИ ЭлементОтбора.ПравоеЗначение = Неопределено 
				ИЛИ ЭлементОтбора.ПравоеЗначение.Пустая();
				
			Если ОтражениеНедопустимо Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	Если Не ОтражениеНедопустимо Тогда
		Для Каждого ЭлементОтбора Из КомпоновщикНастроекДляОтборов.Настройки.Отбор.Элементы Цикл
			
			ЭлементПользовательскойНастройки = КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если Не ЭлементПользовательскойНастройки = Неопределено Тогда
				
				ЗаполнитьПростойОтбор(
					ОтборПоСкладу,
					"Склад",
					ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка"), 
					ЭлементОтбора,
					ЭлементПользовательскойНастройки
				);
				ЗаполнитьПростойОтбор(
					ОтборПоНоменклатуре,
					"Номенклатура",
					ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки
				);
				ЗаполнитьПростойОтбор(
					ОтборПоТипуОбеспечения,
					"ТипОбеспечения",
					ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки
				);
				ЗаполнитьПростойОтбор(
					ОтборПоСпособуОбеспечения,
					"СпособОбеспечения",
					ПредопределенноеЗначение("Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки
				);
				ЗаполнитьПростойОтбор(
					ОтборПоМетодуУправленияЗапасами,
					"МетодУправленияЗапасами",
					ПредопределенноеЗначение("Перечисление.МетодыУправленияЗапасами.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки
				);
				ЗаполнитьПростойОтбор(ОтборПоСегменту,
					"СегментНоменклатуры",
					ПредопределенноеЗначение("Справочник.СегментыНоменклатуры.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки
				);
				ЗаполнитьПростойОтбор(
					ОтборПоИсточникуОбеспечения,
					"ИсточникОбеспечения",
					Неопределено,
					ЭлементОтбора,
					ЭлементПользовательскойНастройки
				);
				ЗаполнитьПростойОтбор(ОтборПоПодразделению,
					"Подразделение",
					ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки
				);
				ЗаполнитьПростойОтбор(
					ОтборПоНазначению,
					"Назначение",
					ПредопределенноеЗначение("Справочник.Назначения.ПустаяСсылка"),
					ЭлементОтбора,
					ЭлементПользовательскойНастройки
				);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Не ОтражениеНедопустимо;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоОтборПоГруппеНаСервере(ЗначениеОтбора)
	
	Если ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Склады") Тогда
		ИмяСправочника = "Склады";
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Номенклатура") Тогда
		ИмяСправочника = "Номенклатура";
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.Партнеры") Тогда
		ИмяСправочника = "Партнеры";
	ИначеЕсли ТипЗнч(ЗначениеОтбора) = Тип("СправочникСсылка.СегментыНоменклатуры") Тогда
		ИмяСправочника = "СегментыНоменклатуры";
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаСправочника.ЭтоГруппа КАК ЭтоГруппа
		|ИЗ
		|	Справочник." + ИмяСправочника + " КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ЗначениеОтбора);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.ЭтоГруппа;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЭтоОтборПоГруппе(Ключ)
	
	Если КэшируемыеЗначения = Неопределено Тогда 
		
		КэшируемыеЗначения = Новый Структура("ОтборПоГруппе");
		КэшируемыеЗначения.ОтборПоГруппе = Новый Соответствие();
		
	КонецЕсли;
	
	ПризнакОтбораПоГруппе = КэшируемыеЗначения.ОтборПоГруппе.Получить(Ключ);
	Если ПризнакОтбораПоГруппе = Неопределено Тогда
		
		ПризнакОтбораПоГруппе = ЭтоОтборПоГруппеНаСервере(Ключ);
		КэшируемыеЗначения.ОтборПоГруппе.Вставить(Ключ, ПризнакОтбораПоГруппе);
		
	КонецЕсли;
	
	Возврат ПризнакОтбораПоГруппе;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеОтбораПоСегментам()
	
	ЗначениеПоиска = Новый ПолеКомпоновкиДанных("СегментНоменклатуры");
	Для Каждого ЭлементОтбора Из КомпоновщикНастроекДляОтборов.Настройки.Отбор.Элементы Цикл
		
		Если ЭлементОтбора.ЛевоеЗначение = ЗначениеПоиска Тогда
			
			ЭлементПользовательскойНастройки 
				= КомпоновщикНастроекДляОтборов.ПользовательскиеНастройки.Элементы.Найти(
					ЭлементОтбора.ИдентификаторПользовательскойНастройки);
					
			Если Не ЭлементПользовательскойНастройки = Неопределено 
				И ЭлементПользовательскойНастройки.Использование Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
//Обслуживающие клиентские фильтры.

&НаКлиенте
Процедура УстановитьПометкиРекомендаций(НомерСтрокиПодменю)
	
	ФильтрПоРекомендации = НомерСтрокиПодменю;
	Элементы.ПрименитьФильтрРекомендацииБезОграничений.Пометка = (НомерСтрокиПодменю = 0);
	Элементы.ПрименитьФильтрРекомендацииКЗаказу.Пометка        = (НомерСтрокиПодменю = 1);
	Элементы.ПрименитьФильтрРекомендацииПрогнозируемыйДефицит.Пометка = (НомерСтрокиПодменю = 2);
	Элементы.ПрименитьФильтрНезаполненныйКалендарьПоставки.Пометка    = (НомерСтрокиПодменю = 3);
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиДнейДоЗаказа(НомерСтрокиПодменю)
	
	ФильтрДнейДоЗаказа = НомерСтрокиПодменю;
	Элементы.ПрименитьФильтрДнейДоЗаказаБезОграничений.Пометка = (НомерСтрокиПодменю = 0);
	Элементы.ПрименитьФильтрДнейДоЗаказа0.Пометка = (НомерСтрокиПодменю = 1);
	Элементы.ПрименитьФильтрДнейДоЗаказа3.Пометка = (НомерСтрокиПодменю = 2);
	Элементы.ПрименитьФильтрДнейДоЗаказа7.Пометка = (НомерСтрокиПодменю = 3);
	
	УстановитьОтборСтрок();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСтрок()
	
	Если ФильтрПоРекомендации = 0 Тогда 
		ИмяПоляОтбораРекомендации = "";
		ЗначениеПоляОтбораРекомендации = Неопределено;
	ИначеЕсли ФильтрПоРекомендации = 1 Тогда
		ИмяПоляОтбораРекомендации = "ФильтрКЗаказу";
		ЗначениеПоляОтбораРекомендации = Истина;
	ИначеЕсли ФильтрПоРекомендации = 2 Тогда	
		ИмяПоляОтбораРекомендации = "НетДефицита";
		ЗначениеПоляОтбораРекомендации = 0;
	ИначеЕсли ФильтрПоРекомендации = 3 Тогда	
		ИмяПоляОтбораРекомендации = "ДатаПоставкиОпределена";
		ЗначениеПоляОтбораРекомендации = Ложь;
	КонецЕсли;
	
	Если ФильтрДнейДоЗаказа = 0 Тогда 
		ИмяПоляОтбораДнейдоЗаказа = "";
		ЗначениеПоляОтбораДнейдоЗаказа = Неопределено;
	ИначеЕсли ФильтрДнейДоЗаказа = 1 Тогда
		ИмяПоляОтбораДнейдоЗаказа = "ДнейДоЗаказа";
		ЗначениеПоляОтбораДнейдоЗаказа = 0;
	ИначеЕсли ФильтрДнейДоЗаказа = 2 Тогда
		ИмяПоляОтбораДнейдоЗаказа = "ФильтрДнейДоЗаказа3";
		ЗначениеПоляОтбораДнейдоЗаказа = Истина;
	ИначеЕсли ФильтрДнейДоЗаказа = 3 Тогда
		ИмяПоляОтбораДнейдоЗаказа = "ФильтрДнейДоЗаказа7";
		ЗначениеПоляОтбораДнейдоЗаказа = Истина;
	КонецЕсли;
	
	Если ИмяПоляОтбораРекомендации <> "" И ИмяПоляОтбораДнейдоЗаказа <> "" Тогда
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура(ИмяПоляОтбораРекомендации + ", " + ИмяПоляОтбораДнейдоЗаказа, 
			ЗначениеПоляОтбораРекомендации, ЗначениеПоляОтбораДнейдоЗаказа);
		
	ИначеЕсли ИмяПоляОтбораРекомендации <> "" Тогда
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура(ИмяПоляОтбораРекомендации, ЗначениеПоляОтбораРекомендации);
		
	ИначеЕсли ИмяПоляОтбораДнейдоЗаказа <> "" Тогда
		
		ПараметрыОтбора = Новый ФиксированнаяСтруктура(ИмяПоляОтбораДнейдоЗаказа, ЗначениеПоляОтбораДнейдоЗаказа);
		
	Иначе
		
		ПараметрыОтбора = Неопределено;
		
	КонецЕсли;
	
	Элементы.Объекты.ОтборСтрок = ПараметрыОтбора;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Инициализация формы.

&НаСервере
Процедура ЗаполнитьПараметрыЗапросаИзОбработки(Запрос)
	
	ПараметрыОбработки = Объект.Параметры[0];
	
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры",
		ПараметрыОбработки.ИспользоватьХарактеристикиНоменклатуры);
	Запрос.УстановитьПараметр("ИспользоватьОбособленноеОбеспечениеЗаказов",
		ПараметрыОбработки.ИспользоватьОбособленноеОбеспечениеЗаказов);
	Запрос.УстановитьПараметр("РассчитыватьРекомендуемыйМетод",
		ПараметрыОбработки.РассчитыватьРекомендуемыйМетод);
	Запрос.УстановитьПараметр("ПолучатьАльтернативныеСпособыКонтекст",
		ПараметрыОбработки.ПолучатьАльтернативныеСпособыКонтекст);
		
	Запрос.УстановитьПараметр("НачалоПериода", ПараметрыОбработки.НачалоПериода);
	Запрос.УстановитьПараметр("УмолчаниеКалендарь",                         ПараметрыОбработки.УмолчаниеКалендарь);
	Запрос.УстановитьПараметр("УмолчаниеДатаЗаказа",                        ПараметрыОбработки.УмолчаниеДатаЗаказа);
	Запрос.УстановитьПараметр("УмолчаниеДатаСледующегоЗаказа",              ПараметрыОбработки.УмолчаниеДатаСледующегоЗаказа);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//Прочие процедуры и функции.

&НаКлиенте
Процедура ОбъектыПриАктивизацииСтрокиОбработчикОжидания()

	СтрокаТаблицыОбъекты = Элементы.Объекты.ТекущиеДанные;
	Если СтрокаТаблицыОбъекты = Неопределено Тогда 
		Возврат;
	Конецесли;
	
	Элементы.ФормаАктуализацияГраницКонтроля.Доступность = Не СтрокаТаблицыОбъекты.ЭтоРабота;
	СтрокаТаблицыОбъекты.ВнесеныИзменения = Ложь;
	Если СтрокаТаблицыОбъекты <> Неопределено Тогда
		
		РассчитатьРекомендацииСТекстомНаКлиенте(СтрокаТаблицыОбъекты);
		УстановитьВидимостьСтраницРасшифровки();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьКалендариНаСервере()
	
	ПараметрыОбработки = Объект.Параметры[0];
	ПараметрыОбработки.ПолучатьАльтернативныеСпособыКонтекст = Истина;
	ЕстьОтборПоСегментам = ПроверитьНаличиеОтбораПоСегментам();
	ТекстЗапроса =
		СформироватьТекстЗапросаКлючейПотребности(Ложь, ЕстьОтборПоСегментам)
		+ СформироватьТекстЗапросаМетодовУправленияЗапасами()
		+ СформироватьТекстЗапросаПорядкаОбеспечения()
		+ СформироватьТекстЗапросаПроверкиЗаполненияКалендарей();
		
	
	Запрос = ПолучитьЗапросСОтборамиКомпоновкиДанных(ТекстЗапроса);
	ЗаполнитьПараметрыЗапросаИзОбработки(Запрос);

	Объект.Календари.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьФлажкиОбъемовЗаказов(Установить)
	
	ОсновнойКалендарьУказан = Объект.Параметры[0].УмолчаниеКалендарь.Пустая();
	КореньКорзиныЗаказов = КорзинаЗаказов.ПолучитьЭлементы();
	КореньКорзиныЗаказов.Очистить();
	
	ДеревоКорзиныЗаказов = РеквизитФормыВЗначение("КорзинаЗаказов");
		
	//Установить = Истина, необходимо отметить все поставки
	Индекс = 0;
	КлючОбъектаВКорзинеЗаказов  = Новый Массив();
	ИменаКолонокПоставщик       = "ИсточникОбеспечения";
	ИменаКолонокСпособыИДаты    = "СпособОбеспечения, ТипОбеспечения, ДатаПоставки, Соглашение";
	КлючОбъектаВКорзинеЗаказов.Добавить(Новый Структура(ИменаКолонокПоставщик));
	КлючОбъектаВКорзинеЗаказов.Добавить(Новый Структура(ИменаКолонокСпособыИДаты));
	
	КорзинаЗаказовИтогПолеСтрокВсего = 0;
	
	Поставщики = ДеревоКорзиныЗаказов.Строки;
	Для Каждого Поставка ИЗ Объект.Объекты Цикл
		
		УстанавливатьПоставку = 
			Поставка.ДатаПоставкиОпределена
				И НЕ Поставка.ЭтоНетРабочихДней 
				И Установить;
				
		КорзинаЗаказовИтогПолеСтрокВсего = 
			КорзинаЗаказовИтогПолеСтрокВсего 
			+ ОтразитьПоставкуВДеревеЗаказов(
				УстанавливатьПоставку, 
				Поставка, 
				КлючОбъектаВКорзинеЗаказов, 
				ИменаКолонокПоставщик, 
				ИменаКолонокСпособыИДаты, 
				Поставщики
			);
		Поставка.ОтметитьКЗаказу = (Поставка.КоличествоКЗаказу > 0) И УстанавливатьПоставку;
		Для Каждого ПоставкаРучнойНастройки Из Поставка.ПоставкиРучнойНастройки Цикл 
			
			ОтразитьПоставкуВДеревеЗаказов(
				Истина, 
				ПоставкаРучнойНастройки, 
				КлючОбъектаВКорзинеЗаказов, 
				ИменаКолонокПоставщик, 
				ИменаКолонокСпособыИДаты, 
				Поставщики, Поставка
			);
			КорзинаЗаказовИтогПолеСтрокВсего = КорзинаЗаказовИтогПолеСтрокВсего + 1;
			
		КонецЦикла;
		
		КоличествоКЗаказу = РассчитатьРекомендации(Поставка);
		Если Не Поставка.ОтметитьКЗаказу Тогда
			Поставка.КоличествоКЗаказу = КоличествоКЗаказу;
		КонецЕсли;
		
	КонецЦикла;
	
	КорзинаЗаказовИтогПолеОбщийВес = 0;
	КорзинаЗаказовИтогПолеСумма    = 0;
	
	Для Каждого Поставщик Из Поставщики Цикл
		
		СпособыИДатыПоставок = Поставщик.Строки;
		СпособыИДатыПоставок.Сортировать(ИменаКолонокСпособыИДаты);
		
	КонецЦикла;
	
	Поставщики.Сортировать(ИменаКолонокПоставщик);
	
	КорзинаЗаказовИтогПолеСумма    = Поставщики.Итог("Сумма");
	КорзинаЗаказовИтогПолеОбщийВес = Поставщики.Итог("ОбщийВес");
	
	ЗначениеВРеквизитФормы(ДеревоКорзиныЗаказов, "КорзинаЗаказов");
	
КонецПроцедуры

