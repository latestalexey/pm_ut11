////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
	
		Возврат;
	
	КонецЕсли;

	ОсновнаяПоставка = Параметры.МассивПоставок[0];
	
	Если ОсновнаяПоставка.ЭтоРабота Тогда
		
		Элементы.РасчетнаяПотребность.Видимость = Ложь;
		Элементы.НачальныйОстаток.Видимость     = Ложь;
		Элементы.КонечныйОстаток.Видимость      = Ложь;
		Элементы.ТекстПредупреждения.Видимость  = Истина;
		
		Элементы.ГруппаПрогнозОстатков.Заголовок = НСтр("ru = ""Состояние обеспечения работами по дням""");
		
	ИначеЕсли ОсновнаяПоставка.МетодУправленияЗапасами = Перечисления.МетодыУправленияЗапасами.ЗаказПодЗаказ Тогда
		
		Элементы.РасчетнаяПотребность.Видимость = Ложь;
		
	ИначеЕсли ОсновнаяПоставка.МетодУправленияЗапасами
		= Перечисления.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование Тогда
		
		Элементы.РасчетнаяПотребность.Заголовок = НСтр("ru = ""Потребление по планам""");
		
	ИначеЕсли ОсновнаяПоставка.МетодУправленияЗапасами 
		= Перечисления.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал 
		ИЛИ ОсновнаяПоставка.МетодУправленияЗапасами 
			= Перечисления.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер Тогда
		
		Элементы.РасчетнаяПотребность.Заголовок = НСтр("ru = ""Потребление по статистике""");
		
	КонецЕсли;
	
	ИнициализироватьТаблицуНастраиваемыеПоставки(
		ОсновнаяПоставка.НачалоПериода,
		ОсновнаяПоставка.Номенклатура,
		ОсновнаяПоставка.Характеристика,
		ОсновнаяПоставка.Склад
	);

	Для Индекс = 0 По Параметры.МассивПоставок.Количество() - 1 Цикл
		
		Поставка = Параметры.МассивПоставок[Индекс];
		ПараметрыОтбора = 
			Новый Структура("
				| СпособОбеспечения,
				| ИсточникОбеспечения,
				| УсловиеЦены,
				| ТипОбеспечения,
				| Соглашение,
				| ОтметитьКЗаказу"
			);
		ЗаполнитьЗначенияСвойств(ПараметрыОтбора, Поставка);
		ПараметрыОтбора.ОтметитьКЗаказу = Ложь;
		МассивСтрок = НастраиваемыеПоставки.НайтиСтроки(ПараметрыОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			ДобавленнаяПоставка = МассивСтрок[0];
		Иначе
			ДобавленнаяПоставка = НастраиваемыеПоставки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДобавленнаяПоставка, Поставка);
		
		Если Индекс = 0 Тогда
			ДобавленнаяПоставка.СпособЯвляетсяОсновным = Истина;
		Иначе 
			ДобавленнаяПоставка.ОтметитьКЗаказу = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	НастраиваемыеПоставки.Сортировать("
		|СпособЯвляетсяОсновным Убыв, 
		|ОтметитьКЗаказу Убыв,
		|Приоритет,
		|ПорядокПрименения,
		|ДатаПоставки"); 
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ОсновнаяПоставка, "
		| ВНаличииОстаток,
		| РасходСНачалаДня,
		| ДатаПоставки,
		| ДатаСледующейПоставки,
		| МетодУправленияЗапасами,
		| СтраховойЗапас,
		| МаксимальныйЗапас,
		| НачалоПериода,
		| Склад,
		| Номенклатура,
		| Подразделение,
		| Характеристика,
		| Назначение,
		| ЭтоРабота"
	);
	
	Для Каждого Поставка Из НастраиваемыеПоставки Цикл
		
		УстановитьЗначенияСлужебныхРеквизитов(Поставка, Склад);
		
	КонецЦикла;
	
	ОсновнойСпособОтмечен = ОсновнаяПоставка.ОтметитьКЗаказу;

	КлючПотребности = Новый Структура("Номенклатура, Характеристика, Склад, Назначение, Подразделение");
	КлючевыеДаты    = Новый Структура("НачалоПериода, КалендарьРаботы, ДатаСледующейПоставки");
	ЗаполнитьЗначенияСвойств(КлючПотребности, ОсновнаяПоставка);
	ЗаполнитьЗначенияСвойств(КлючевыеДаты,    ОсновнаяПоставка);
	ЗаполнитьТаблицуДвижений(КлючПотребности, КлючевыеДаты, МетодУправленияЗапасами, РасходСНачалаДня);

	ВалютаУправленческогоУчета              = Константы.ВалютаУправленческогоУчета.Получить();
	Элементы.ЦенаВВалютеУправленческогоУчета.Заголовок = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = ""Цена (%1)"""), Строка(ВалютаУправленческогоУчета)); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьДвиженияПоДням();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение.Свойство("ПараметрыПоставкиОптимальные") Тогда 
		
		СтрокаТаблицыОбъекты = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбъекты, ВыбранноеЗначение.ПараметрыПоставкиОптимальные);
		
		Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
		Коэффциент = ПолучитьКоэффициентПересчетаЦен(Поставка.ВалютаСоглашения, НачалоПериода);
		Поставка.ЦенаВВалютеУправленческогоУчета = Поставка.ЦенаВВалютеСоглашения * Коэффциент;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НАСТРАИВАЕМЫЕ ПОСТАВКИ

&НаКлиенте
Процедура НастраиваемыеПоставкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование ИЛИ НоваяСтрока Тогда
		
		Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
		Поставка.ОтметитьКЗаказу        = Ложь;
		Поставка.КоличествоКЗаказу      = 0;
		Поставка.КурсыВалютНеПолучены   = Ложь;
		Поставка.СпособЯвляетсяОсновным = Ложь;
		Если Поставка.ТипОбеспечения.Пустая() Тогда
			
			Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка");
			
		КонецЕсли;
		Поставка.СпособОбеспечения        = ПредопределенноеЗначение("Справочник.СпособыОбеспеченияПотребностей.ПустаяСсылка");
		ОбработатьИзменениеРеквизитовСтроки(Поставка);
		
	КонецЕсли;
	
КонецПроцедуры

//Проверяет возможность изменения количества в поставке ручной настройки, фиксирует изменения в корзине заказов
//обновляет данные об объекте и рекомендации с учетом срочной поставки.
&НаКлиенте
Процедура КоличествоКЗаказуПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	Поставка.ОтметитьКЗаказу = (Поставка.КоличествоКЗаказу > 0);
	Если Не ПроверкаВозможностиОтметитьПоставку(Поставка) Тогда
		Поставка.ОтметитьКЗаказу = Ложь;
	КонецЕсли;
	ОбновитьДвиженияПоДням();
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	ОбработатьИзменениеРеквизитовСтроки(Поставка);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	ОбработатьИзменениеРеквизитовСтроки(Поставка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	ОбработатьИзменениеРеквизитовСтроки(Поставка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбеспеченияПриИзменении(Элемент)

	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	ОбработатьИзменениеРеквизитовСтроки(Поставка);
	
	Если Не Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка") Тогда
		
		Поставка.ЦенаВВалютеСоглашения = 0;
		Поставка.ЦенаВВалютеУправленческогоУчета = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаСоглашенияПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	Коэффциент = ПолучитьКоэффициентПересчетаЦен(Поставка.ВалютаСоглашения, НачалоПериода);
	Поставка.ЦенаВВалютеУправленческогоУчета = Поставка.ЦенаВВалютеСоглашения * Коэффциент;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	Если Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка") Тогда
		Элементы.ИсточникОбеспечения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
	Иначе 
		Элементы.ИсточникОбеспечения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли;	
	
	Если (Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.Покупка")) Тогда
		
		Элементы.ИсточникОбеспечения.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Партнеры");
		
		СписокВариантовВыбораПоставщика = Новый СписокЗначений();
		СписокВариантовВыбораПоставщика.Добавить("СтандартнаяОбработка",            НСтр("ru = ""Выбрать поставщика"""));
		СписокВариантовВыбораПоставщика.Добавить("ФормаВыбораПоставщикаПоУсловиям",
			НСтр("ru = ""Подобрать поставщика по условиям"""));
		
		ЭлементСписка = ВыбратьИзСписка(СписокВариантовВыбораПоставщика, Элемент);
		
		Если ЭлементСписка = Неопределено Тогда
			Возврат;
		КонецЕсли;	
		
		Если ЭлементСписка.Значение = "ФормаВыбораПоставщикаПоУсловиям" Тогда
			
			ПараметрыФормы = 
				Новый Структура("ДатаЦены, Склад, Номенклатура, Характеристика",
					НачалоПериода, Склад, Номенклатура, Характеристика);
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, Поставка);
			
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Обработка.ОбеспечениеПотребностей.Форма.ФормаВыбораПоставщикаПоУсловиям", ПараметрыФормы, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипОбеспеченияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьКЗаказуПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	Если Не ПроверкаВозможностиОтметитьПоставку(Поставка) Тогда	
		Поставка.ОтметитьКЗаказу = Ложь;
	КонецЕсли;
	ОбновитьДвиженияПоДням();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоставкиПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	Если Не ПроверкаВозможностиОтметитьПоставку(Поставка) Тогда
		Поставка.ОтметитьКЗаказу = Ложь;
	КонецЕсли;
	ОбновитьДвиженияПоДням();
	
КонецПроцедуры

&НаКлиенте
Процедура НастраиваемыеПоставкиПередУдалением(Элемент, Отказ)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособОбеспеченияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаСоглашенияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеЦеныОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ПринятьИзменения(Команда)
	
	МассивПоставок = Новый Массив();
	Параметры.ПрогнозОстатка.Вставить("КоличествоДругиеСпособы", 0);
	Для Каждого Поставка Из НастраиваемыеПоставки Цикл
		
		Если Поставка.ОтметитьКЗаказу И Поставка.КоличествоКЗаказу > 0 ИЛИ Поставка.СпособЯвляетсяОсновным Тогда 
			
			ОтмеченнаяПоставка = 
				Новый Структура("
					| СпособОбеспечения,
					| ТипОбеспечения,
					| ЦенаВВалютеУправленческогоУчета,
					| ЦенаВВалютеСоглашения, 
					| ИсточникОбеспечения,
					| Соглашение,
					| ВалютаСоглашения,
					| КоличествоКЗаказу,
					| УсловиеЦены,
					| ДатаПоставки,
					| СпособЯвляетсяОсновным,
					| ОтметитьКЗаказу"
				);
			МассивПоставок.Добавить(ОтмеченнаяПоставка);
			ЗаполнитьЗначенияСвойств(ОтмеченнаяПоставка, Поставка);
			
			Если Не Поставка.СпособЯвляетсяОсновным Тогда
				Параметры.ПрогнозОстатка.КоличествоДругиеСпособы 
					= Параметры.ПрогнозОстатка.КоличествоДругиеСпособы + Поставка.КоличествоКЗаказу;
			ИначеЕсли Поставка.ОтметитьКЗаказу Тогда
				Параметры.ПрогнозОстатка.ПрогнозныйОстаток = 
					Параметры.ПрогнозОстатка.ПрогнозныйОстаток - Поставка.КоличествоКЗаказу;
				Параметры.ПрогнозОстатка.МинимальныйПрогнозныйОстатокМеждуПоставками = 
					Параметры.ПрогнозОстатка.МинимальныйПрогнозныйОстатокМеждуПоставками - Поставка.КоличествоКЗаказу;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОповеститьОВыборе(Новый Структура("МассивПоставок, ПрогнозОстатка", МассивПоставок, Параметры.ПрогнозОстатка));
	
КонецПроцедуры

//Проверяет возможность изменения флага Зафиксировать в поставке ручной настройки, 
//фиксирует изменения в корзине заказов обновляет данные об объекте и рекомендации с учетом срочной поставки.
&НаКлиенте
Процедура ЦенаВВалютеСоглашенияПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	Коэффциент = ПолучитьКоэффициентПересчетаЦен(Поставка.ВалютаСоглашения, НачалоПериода);
	Поставка.ЦенаВВалютеУправленческогоУчета = Поставка.ЦенаВВалютеСоглашения * Коэффциент;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦенаВВалютеУправленческогоУчетаПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	Коэффциент = ПолучитьКоэффициентПересчетаЦен(Поставка.ВалютаСоглашения, НачалоПериода);
	Поставка.ЦенаВВалютеСоглашения = Поставка.ЦенаВВалютеУправленческогоУчета / Коэффциент;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсточникОбеспеченияПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	ОбработатьИзменениеРеквизитовСтроки(Поставка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	ЗакупкиКлиент.НачалоВыбораСоглашенияСПоставщиком(
		Элемент,
		СтандартнаяОбработка,
		Поставка.ИсточникОбеспечения,
		Поставка.Соглашение,
		Поставка.ДатаПоставки,
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура УсловиеЦеныПриИзменении(Элемент)
	
	Поставка = Элементы.НастраиваемыеПоставки.ТекущиеДанные;
	ОбработатьИзменениеРеквизитовСтроки(Поставка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ИнициализироватьТаблицуНастраиваемыеПоставки(НачалоПериода, Номенклатура, Характеристика, Склад)
	
	Запрос = Новый Запрос();
	Запрос.Текст = СформироватьТекстЗапросаСпособовОбеспечения();
	
	Запрос.УстановитьПараметр("НачалоПериода",      НачалоПериода);
	Запрос.УстановитьПараметр("УмолчаниеКалендарь", Константы.ОсновнойКалендарьПредприятия.Получить());
	
	Запрос.УстановитьПараметр("КоэффициентВалютыУпрУчета", 
		Обработки.ОбеспечениеПотребностей.ПолучитьКурсВалютыУправленческогоУчета(НачалоПериода));
	
	Запрос.УстановитьПараметр("Номенклатура",       Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",     Характеристика);
	Запрос.УстановитьПараметр("Склад",              Склад);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		НастраиваемыеПоставки.Загрузить(Результат.Выгрузить());
	
	КонецЕсли;
	
КонецПроцедуры

//Возвращает текст запроса получения всех способов пополнения запаса, 
//с датами ближайшей поставки, данными номенклатуры, ценами поставщика по указанным объектам управления запасами
//перечень которых ограничиваются только позициями указанными в таблице, поступающей в запрос в 
//параметре ТаблицаОтбора.
&НаСервере
Функция СформироватьТекстЗапросаСпособовОбеспечения()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НаборДанных.СпособОбеспечения                                               КАК СпособОбеспечения,
		|	МАКСИМУМ(НаборДанных.СпособОбеспечения.СрокИсполненияЗаказа)                КАК СрокИсполненияЗаказа,
		|	МАКСИМУМ(НаборДанных.СпособОбеспечения.УсловиеЦеныПоставщика)               КАК УсловиеЦены,
		|	МАКСИМУМ(НаборДанных.СпособОбеспечения.ТипОбеспечения)                      КАК ТипОбеспечения,
		|	МАКСИМУМ(НаборДанных.СпособОбеспечения.ИсточникОбеспеченияПотребностей)     КАК ИсточникОбеспечения,
		|	МАКСИМУМ(НаборДанных.СпособОбеспечения.Соглашение)                          КАК Соглашение,
		|	МИНИМУМ(НаборДанных.Порядок)                                                КАК ПорядокПрименения,
		|	МИНИМУМ(НаборДанных.Приоритет)                                              КАК Приоритет,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА НаборДанных.СпособОбеспечения.Календарь <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|		
		|			НаборДанных.СпособОбеспечения.Календарь
		|		КОГДА ЕСТЬNULL(ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).Календарь, 
		|				ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) ТОГДА
		|			ВЫРАЗИТЬ(&Склад КАК Справочник.Склады).Календарь
		|		ИНАЧЕ
		|			&УмолчаниеКалендарь
		|	КОНЕЦ)                                                                      КАК КалендарьПоставки,
		|	&УмолчаниеКалендарь                                                         КАК КалендарьЗаказа
		|ПОМЕСТИТЬ ПараметрыРасчетаКлючевыхДат
		|ИЗ";
		
	Если ЭтоРабота Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|	(ВЫБРАТЬ
		|		СпособыХарактеристики.СпособОбеспеченияПотребностей                           КАК СпособОбеспечения,
		|		СпособыХарактеристики.РеквизитДопУпорядочивания                               КАК Порядок,
		|		1                                                                             КАК Приоритет
		|	ИЗ
		|		РегистрСведений.ВариантыОбеспеченияРаботами КАК СпособыХарактеристики
		|	ГДЕ
		|		СпособыХарактеристики.Номенклатура     = &Номенклатура
		|		И СпособыХарактеристики.Характеристика = &Характеристика
		|		И НЕ &Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И НЕ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СпособыНоменклатуры.СпособОбеспеченияПотребностей                           КАК СпособОбеспечения,
		|		СпособыНоменклатуры.РеквизитДопУпорядочивания                               КАК Порядок,
		|		2                                                                           КАК Приоритет
		|	ИЗ
		|		РегистрСведений.ВариантыОбеспеченияРаботами КАК СпособыНоменклатуры
		|	ГДЕ
		|		СпособыНоменклатуры.Номенклатура     = &Номенклатура
		|		И НЕ &Номенклатура                   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И СпособыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	) КАК НаборДанных
		|СГРУППИРОВАТЬ ПО 
		|	НаборДанных.СпособОбеспечения
		|;
		|/////////////////////////////////////////////////////////////////////////////";
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|	(ВЫБРАТЬ
		|		СпособыХарактеристики.СпособОбеспеченияПотребностей                           КАК СпособОбеспечения,
		|		СпособыХарактеристики.РеквизитДопУпорядочивания                               КАК Порядок,
		|		1                                                                             КАК Приоритет
		|	ИЗ
		|		РегистрСведений.ВариантыОбеспеченияТоварами КАК СпособыХарактеристики
		|	ГДЕ
		|		СпособыХарактеристики.Номенклатура     = &Номенклатура
		|		И СпособыХарактеристики.Характеристика = &Характеристика
		|		И СпособыХарактеристики.Склад          = &Склад
		|		И НЕ &Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И НЕ &Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СпособыНоменклатуры.СпособОбеспеченияПотребностей                           КАК СпособОбеспечения,
		|		СпособыНоменклатуры.РеквизитДопУпорядочивания                               КАК Порядок,
		|		2                                                                           КАК Приоритет
		|	ИЗ
		|		РегистрСведений.ВариантыОбеспеченияТоварами КАК СпособыНоменклатуры
		|	ГДЕ
		|		СпособыНоменклатуры.Номенклатура     = &Номенклатура
		|		И СпособыНоменклатуры.Склад          = &Склад
		|		И НЕ &Номенклатура                   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И СпособыНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		СпособыСклада.СпособОбеспеченияПотребностей                           КАК СпособОбеспечения,
		|		СпособыСклада.РеквизитДопУпорядочивания                               КАК Порядок,
		|		3                                                                     КАК Приоритет
		|	ИЗ
		|		РегистрСведений.ВариантыОбеспеченияТоварами КАК СпособыСклада
		|	ГДЕ
		|		СпособыСклада.Склад            = &Склад
		|		И СпособыСклада.Номенклатура   = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		|		И СпособыСклада.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|	) КАК НаборДанных
		|СГРУППИРОВАТЬ ПО 
		|	НаборДанных.СпособОбеспечения
		|;
		|/////////////////////////////////////////////////////////////////////////////";

	КонецЕсли;
	
	//Данные о дате следующей поставки.
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПараметрыРасчета.СпособОбеспечения                   КАК СпособОбеспечения,
		|	ДатыПоставок.ДатаГрафика                             КАК ДатаПоставки,
		|	МАКСИМУМ(ВЫБОР 
		|		КОГДА ПараметрыРасчета.КалендарьЗаказа = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) 
		|			И ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ, 
		|				-ПараметрыРасчета.СрокИсполненияЗаказа) >= &НачалоПериода 
		|		ТОГДА
		|			ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ, 
		|				-ПараметрыРасчета.СрокИсполненияЗаказа)
		|		ИНАЧЕ
		|			ДатыЗаказа.ДатаГрафика
		|	КОНЕЦ)                                               КАК ДатаЗаказа
		|ПОМЕСТИТЬ ДатыПоставок
		|ИЗ
		|	ПараметрыРасчетаКлючевыхДат КАК ПараметрыРасчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатыПоставок
		|		ПО ПараметрыРасчета.КалендарьПоставки = ДатыПоставок.Календарь
		|			И ДатыПоставок.Год           >= ГОД(&НачалоПериода)
		|			И ДатыПоставок.ДатаГрафика   >= &НачалоПериода
		|			И ДатыПоставок.ДеньВключенВГрафик
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДатыЗаказа
		|			ПО ПараметрыРасчета.КалендарьЗаказа = ДатыЗаказа.Календарь
		|			И ДатыЗаказа.Год         >= ГОД(&НачалоПериода)
		|			И ДатыЗаказа.ДатаГрафика >= &НачалоПериода
		|			И ДатыЗаказа.ДеньВключенВГрафик
		|			И ДатыЗаказа.ДатаГрафика 
		|				<= ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ,- ПараметрыРасчета.СрокИсполненияЗаказа)
		|
		|СГРУППИРОВАТЬ ПО 
		|	ПараметрыРасчета.СпособОбеспечения,
		|	ДатыПоставок.ДатаГрафика
		|ИМЕЮЩИЕ 
		|	НЕ МАКСИМУМ(ВЫБОР 
		|		КОГДА ПараметрыРасчета.КалендарьЗаказа = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка) 
		|			И ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ, 
		|				-ПараметрыРасчета.СрокИсполненияЗаказа) >=&НачалоПериода 
		|		ТОГДА
		|			ДОБАВИТЬКДАТЕ(ДатыПоставок.ДатаГрафика, ДЕНЬ, 
		|				-ПараметрыРасчета.СрокИсполненияЗаказа)
		|		ИНАЧЕ
		|			ДатыЗаказа.ДатаГрафика
		|	КОНЕЦ) ЕСТЬ NULL
		|	ИЛИ МАКСИМУМ(ПараметрыРасчета.КалендарьПоставки) = ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|;
		|/////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатыПоставок.СпособОбеспечения                    КАК СпособОбеспечения,
		|	МИНИМУМ(ДатыПоставок.ДатаПоставки)                КАК ДатаПоставки,
		|	МИНИМУМ(ДатыПоставок.ДатаЗаказа)                  КАК ДатаЗаказа
		|ПОМЕСТИТЬ БлижайшиеПоставки
		|ИЗ
		|	ДатыПоставок КАК ДатыПоставок
		|СГРУППИРОВАТЬ ПО 
		|	ДатыПоставок.СпособОбеспечения
		|;
		|/////////////////////////////////////////////////////////////////////////////";
	
	ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпособыИПриоритеты.СпособОбеспечения                                             КАК СпособОбеспечения,
		|	МАКСИМУМ(БлижайшиеПоставки.ДатаПоставки)                                         КАК ДатаПоставки,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СпособыИПриоритеты.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.СборкаРазборка)
		|				ТОГДА &Склад
		|			ИНАЧЕ СпособыИПриоритеты.ИсточникОбеспечения
		|		КОНЕЦ)                                                                       КАК ИсточникОбеспечения,
		|	МАКСИМУМ(СпособыИПриоритеты.ТипОбеспечения)                                      КАК ТипОбеспечения,
		|	МАКСИМУМ(СпособыИПриоритеты.Приоритет)                                           КАК Приоритет,
		|	МАКСИМУМ(СпособыИПриоритеты.ПорядокПрименения)                                   КАК ПорядокПрименения,
		|	МАКСИМУМ(СпособыИПриоритеты.Соглашение)                                          КАК Соглашение,
		|	МАКСИМУМ(СпособыИПриоритеты.УсловиеЦены)                                         КАК УсловиеЦены,
		|	МАКСИМУМ(СпособыИПриоритеты.Соглашение.Валюта)                                   КАК ВалютаСоглашения,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА СпособыИПриоритеты.Соглашение.НалогообложениеНДС
		|				= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|			И НЕ СпособыИПриоритеты.Соглашение.ЦенаВключаетНДС
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА СпрНоменклатура.СтавкаНДС 
		|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), 
		|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|					)
		|				ТОГДА
		|					1.1
		|				КОГДА СпрНоменклатура.СтавкаНДС
		|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
		|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|					)
		|				ТОГДА
		|					1.18
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ
		|		* ЦеныПоставщиков.Цена 
		|		* (КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность)
		|		/ (КурсВалютаСоглашения.Курс * КурсВалютаСоглашения.Кратность)
		|		/ ЕСТЬNULL(ЦеныПоставщиков.Упаковка.Коэффициент, 1))                    КАК ЦенаВВалютеСоглашения,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА СпособыИПриоритеты.Соглашение.НалогообложениеНДС
		|				= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
		|			И НЕ СпособыИПриоритеты.Соглашение.ЦенаВключаетНДС
		|		ТОГДА
		|			ВЫБОР
		|				КОГДА СпрНоменклатура.СтавкаНДС 
		|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), 
		|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
		|					)
		|				ТОГДА
		|					1.1
		|				КОГДА СпрНоменклатура.СтавкаНДС
		|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
		|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
		|					)
		|				ТОГДА
		|					1.18
		|				ИНАЧЕ
		|					1
		|			КОНЕЦ
		|		ИНАЧЕ
		|			1
		|	КОНЕЦ
		|		* ЦеныПоставщиков.Цена
		|		* (КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность)
		|		/ &КоэффициентВалютыУпрУчета
		|		/ ЕСТЬNULL(ЦеныПоставщиков.Упаковка.Коэффициент, 1))                    КАК ЦенаВВалютеУправленческогоУчета,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА НЕ ЦеныПоставщиков.Цена ЕСТЬ NULL 
		|			И (КурсыВалютСрезПоследних.Курс + КурсВалютаСоглашения.Курс ЕСТЬ NULL 
		|				ИЛИ &КоэффициентВалютыУпрУчета = 0
		|			)
		|		ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ)                                                                      КАК КурсыВалютНеПолучены,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СпособыИПриоритеты.Соглашение = ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК СоглашениеРедактируется,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СпособыИПриоритеты.УсловиеЦены = ЗНАЧЕНИЕ(Справочник.УсловияЦенПоставщиков.ПустаяСсылка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК УсловиеЦеныРедактируется,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА СпособыИПриоритеты.ИсточникОбеспечения.Ссылка ЕСТЬ NULL 
		|					И НЕ СпособыИПриоритеты.ТипОбеспечения = ЗНАЧЕНИЕ(Перечисление.ТипыОбеспечения.СборкаРазборка)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ) КАК ИсточникРедактируется
		|ИЗ
		|	ПараметрыРасчетаКлючевыхДат КАК СпособыИПриоритеты
		|		ЛЕВОЕ СОЕДИНЕНИЕ БлижайшиеПоставки КАК БлижайшиеПоставки
		|		ПО СпособыИПриоритеты.СпособОбеспечения = БлижайшиеПоставки.СпособОбеспечения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|			КонецПериода(&НачалоПериода, ДЕНЬ),
		|			Номенклатура     = &Номенклатура
		|				И Характеристика = &Характеристика) КАК ЦеныПоставщиков
		|		ПО (СпособыИПриоритеты.Соглашение = ЦеныПоставщиков.Соглашение)
		|			И (СпособыИПриоритеты.УсловиеЦены = ЦеныПоставщиков.УсловиеЦеныПоставщика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|			КонецПериода(&НачалоПериода, ДЕНЬ), ) КАК КурсыВалютСрезПоследних
		|		ПО (ЦеныПоставщиков.Валюта = КурсыВалютСрезПоследних.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
		|			КонецПериода(&НачалоПериода, ДЕНЬ), ) КАК КурсВалютаСоглашения
		|		ПО (СпособыИПриоритеты.Соглашение.Валюта = КурсВалютаСоглашения.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
		|		ПО (СпрНоменклатура.Ссылка = &Номенклатура)
		|
		|СГРУППИРОВАТЬ ПО
		|	СпособыИПриоритеты.СпособОбеспечения";
		
	Возврат ТекстЗапроса;
	
КонецФункции //СформироватьТекстЗапросаСпособовОбеспечения()

&НаСервере
Процедура ЗаполнитьТаблицуДвижений(КлючПотребности, КлючевыеДаты, МетодУправленияЗапасами, РасходСНачалаДня)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Планы.ПериодПлана                                                    КАК ПериодПлана,
		|	Планы.Период                                                         КАК ПервыйДеньПериодаПлана,
		|	НАЧАЛОПЕРИОДА(
		|		МАКСИМУМ(ВЫБОР
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, ГОД)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, ПОЛУГОДИЕ)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, КВАРТАЛ)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, МЕСЯЦ)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, ДЕКАДА)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, НЕДЕЛЯ)
		|			КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|				ТОГДА КОНЕЦПЕРИОДА(Планы.Период, ДЕНЬ)
		|			КОНЕЦ),
		|	ДЕНЬ)                                                                КАК ПоследнийДеньПериодаПлана,
		|	СУММА(Планы.Количество)                                              КАК ОборотПлана,
		|	ВЫБОР
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|			ТОГДА 7
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|			ТОГДА 6
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|			ТОГДА 5
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|			ТОГДА 4
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|			ТОГДА 3
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|			ТОГДА 2
		|		КОГДА Планы.ПериодПлана = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|			ТОГДА 1
		|	КОНЕЦ                                                                КАК ПриоритетПлана
		|ПОМЕСТИТЬ ОборотыПланов
		|ИЗ
		|	РегистрНакопления.ПланыПродажИВнутреннегоПотребления КАК Планы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
		|		ПО Планы.АналитикаУчетаНоменклатуры = КлючиАналитики.Ссылка
		|ГДЕ
		|	&ИспользоватьПланы
		|	И Планы.Активность
		|	И (Планы.ПериодПлана      =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, ГОД)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, ПОЛУГОДИЕ)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, КВАРТАЛ)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, МЕСЯЦ)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕКАДА)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, НЕДЕЛЯ)
		|		ИЛИ Планы.ПериодПлана =  ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
		|			И Планы.Период    >= НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ))
		|		И КлючиАналитики.Номенклатура = &Номенклатура
		|		И ВЫБОР 
		|			КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|				КлючиАналитики.Характеристика
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ                         = &Характеристика
		|		И КлючиАналитики.Склад        = &Склад
		|СГРУППИРОВАТЬ ПО
		|	Планы.ПериодПлана,
		|	Планы.Период,
		|	КлючиАналитики.Ссылка
		|	
		|ИМЕЮЩИЕ 
		|	СУММА(Планы.Количество) > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОборотыПланов.ПериодПлана                                КАК ПериодПлана,
		|	ОборотыПланов.ПервыйДеньПериодаПлана                     КАК ПервыйДеньПериодаПлана,
		|	ОборотыПланов.ПоследнийДеньПериодаПлана                  КАК ПоследнийДеньПериодаПлана,
		|	ОборотыПланов.ОборотПлана                                КАК ОборотПлана,
		|	ОборотыПланов.ПриоритетПлана                             КАК ПриоритетПлана,
		|	ВЫБОР 
		|		КОГДА &КалендарьРаботы 
		|			= ЗНАЧЕНИЕ(Справочник.Календари.ПустаяСсылка)
		|		ТОГДА
		|			РАЗНОСТЬДАТ(ОборотыПланов.ПервыйДеньПериодаПлана, 
		|				ОборотыПланов.ПоследнийДеньПериодаПлана, ДЕНЬ) + 1
		|		ИНАЧЕ
		|			ПоследнийДень.КоличествоДнейВГрафикеСНачалаГода 
		|				- ПервыйДень.КоличествоДнейВГрафикеСНачалаГода
		|				+ ВЫБОР 
		|					КОГДА ПервыйДень.ДеньВключенВГрафик ТОГДА
		|						1
		|					ИНАЧЕ 
		|						0
		|				КОНЕЦ
		|	КОНЕЦ                                                    КАК ВсегоДней,
		|	ДниГрафика.ДатаГрафика                                   КАК ДатаСобытия
		|ПОМЕСТИТЬ ОборотыПлановПоДням
		|ИЗ
		|	ОборотыПланов КАК ОборотыПланов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПервыйДень
		|		ПО &КалендарьРаботы                               = ПервыйДень.Календарь
		|			И ГОД(ОборотыПланов.ПервыйДеньПериодаПлана)    = ПервыйДень.Год
		|			И ОборотыПланов.ПервыйДеньПериодаПлана         = ПервыйДень.ДатаГрафика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ПоследнийДень
		|		ПО &КалендарьРаботы                               = ПоследнийДень.Календарь
		|			И ГОД(ОборотыПланов.ПоследнийДеньПериодаПлана) = ПоследнийДень.Год
		|			И ОборотыПланов.ПоследнийДеньПериодаПлана      = ПоследнийДень.ДатаГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК ДниГрафика
		|		ПО &КалендарьРаботы = ДниГрафика.Календарь
		|			И ДниГрафика.ДеньВключенВГрафик
		|			И ГОД(ДниГрафика.ДатаГрафика) = ГОД(&НачалоПериода)
		|			И ДниГрафика.ДатаГрафика >= &НачалоПериода
		|			И ДниГрафика.ДатаГрафика >= ОборотыПланов.ПервыйДеньПериодаПлана
		|			И ДниГрафика.ДатаГрафика <= ОборотыПланов.ПоследнийДеньПериодаПлана
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОборотыПлановПоДням.ДатаСобытия             КАК ДатаСобытия,
		|	МИНИМУМ(ОборотыПлановПоДням.ПриоритетПлана) КАК Приоритет
		|ПОМЕСТИТЬ ВытесняющийПлан
		|ИЗ
		|	ОборотыПлановПоДням КАК ОборотыПлановПоДням
		|
		|СГРУППИРОВАТЬ ПО
		|	ОборотыПлановПоДням.ДатаСобытия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПотребностиВЗапасах.ДатаСобытия                              КАК ДатаДвижения,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ПотребностиВЗапасах.ДатаСобытия, ДЕНЬ) 
		|			= &НачалоПериода
		|		ТОГДА 
		|			СУММА(ЕСТЬNULL(ПотребностиВЗапасах.РасчетнаяПотребность, 0)) 
		|				- &РасходСНачалаДня
		|		ИНАЧЕ 
		|			СУММА(ЕСТЬNULL(ПотребностиВЗапасах.РасчетнаяПотребность, 0))
		|	КОНЕЦ                                                        КАК РасчетнаяПотребность,
		|	СУММА(ЕСТЬNULL(ПотребностиВЗапасах.ОжидаемаяОтгрузка, 0))    КАК ОжидаемаяОтгрузка,
		|	СУММА(ЕСТЬNULL(ПотребностиВЗапасах.ОжидаемоеПоступление, 0)) КАК ОжидаемоеПоступление
		|ИЗ
		//Потребности из планов продаж и внутреннего потребления.
		|	(ВЫБРАТЬ
		|		ОборотыПлановПоДням.ДатаСобытия        КАК ДатаСобытия,
		|		ВЫБОР 
		|			КОГДА ОборотыПлановПоДням.ВсегоДней > 0 ТОГДА
		|				ОборотыПлановПоДням.ОборотПлана /
		|					ОборотыПлановПоДням.ВсегоДней
		|			ИНАЧЕ 
		|				0
		|		КОНЕЦ                                  КАК РасчетнаяПотребность,
		|		0                                      КАК ОжидаемаяОтгрузка,
		|		0                                      КАК ОжидаемоеПоступление
		|	ИЗ
		|		ВытесняющийПлан КАК ВытесняющийПлан
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыПлановПоДням КАК ОборотыПлановПоДням
		|			ПО ВытесняющийПлан.Приоритет      = ОборотыПлановПоДням.ПриоритетПлана
		|				И ВытесняющийПлан.ДатаСобытия = ОборотыПлановПоДням.ДатаСобытия
		|			И ВытесняющийПлан.ДатаСобытия     < &ДатаСледующейПоставки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		//Потребности из графика движения товаров.
		|	ВЫБРАТЬ
		|		График.ДатаСобытия                     КАК ДатаСобытия,
		|		0                                      КАК РасчетнаяПотребность,
		|		ВЫБОР
		|			КОГДА График.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|				График.Количество + График.КоличествоПодЗаказ + График.КоличествоСоСклада
		|			ИНАЧЕ 
		|				0
		|		КОНЕЦ                                  КАК ОжидаемаяОтгрузка,
		|		ВЫБОР
		|			КОГДА График.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА
		|				График.Количество + График.КоличествоПодЗаказ
		|			ИНАЧЕ 
		|				0
		|		КОНЕЦ                                  КАК ОжидаемоеПоступление
		|	ИЗ
		|		РегистрНакопления.ГрафикДвиженияТоваров КАК График
		|	ГДЕ
		|		НЕ &ЭтоРабота
		|		И График.Активность
		|		И График.Номенклатура   = &Номенклатура
		|		И ВЫБОР 
		|			КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|				График.Характеристика
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ                = &Характеристика
		|		И График.Склад       = &Склад
		|		И График.Назначение  = &Назначение
		|		И График.ДатаСобытия < &ДатаСледующейПоставки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		//Потребности из графика обеспечения работами.
		|	ВЫБРАТЬ
		|		ГрафикРабот.Период                 КАК ДатаСобытия,
		|		0                                  КАК РасчетнаяПотребность,
		|		ВЫБОР
		|			КОГДА ГрафикРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) ТОГДА 
		|				ГрафикРабот.КОбеспечению
		|			ИНАЧЕ 
		|				0
		|		КОНЕЦ                              КАК ОжидаемаяОтгрузка,
		|		ВЫБОР
		|			КОГДА ГрафикРабот.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) ТОГДА
		|				ГрафикРабот.КОбеспечению
		|			ИНАЧЕ 
		|				0
		|		КОНЕЦ                              КАК ОжидаемоеПоступление
		|	ИЗ
		|		РегистрНакопления.ОбеспечениеЗаказовРаботами КАК ГрафикРабот
		|	ГДЕ
		|		&ЭтоРабота
		|		И ГрафикРабот.Активность
		|		И ГрафикРабот.Номенклатура   = &Номенклатура
		|		И ВЫБОР 
		|			КОГДА &ИспользоватьХарактеристикиНоменклатуры ТОГДА
		|				ГрафикРабот.Характеристика
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|		КОНЕЦ                        = &Характеристика
		|		И ГрафикРабот.Подразделение  = &Подразделение
		|		И ГрафикРабот.Назначение     = &Назначение
		|		И ГрафикРабот.Период         < &ДатаСледующейПоставки
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		//Потребности согласно данным товарных ограничений.
		|	ВЫБРАТЬ
		|		КалендарныеГрафики.ДатаГрафика     КАК ДатаСобытия,
		|		ТоварныеОграничения.СреднедневноеПотребление КАК РасчетнаяПотребность,
		|		0                                  КАК ОжидаемаяОтгрузка,
		|		0                                  КАК ОжидаемоеПоступление
		|	ИЗ
		|		РегистрСведений.ТоварныеОграничения КАК ТоварныеОграничения
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
		|			ПО &КалендарьРаботы = КалендарныеГрафики.Календарь
		|				И КалендарныеГрафики.ДеньВключенВГрафик
		|				И &НачалоПериода <= КалендарныеГрафики.ДатаГрафика
		|				И КалендарныеГрафики.ДатаГрафика < &ДатаСледующейПоставки
		|	ГДЕ
		|		ТоварныеОграничения.СреднедневноеПотребление > 0
		|		И &ИспользоватьТоварныеОграничения
		|		И ТоварныеОграничения.Номенклатура   = &Номенклатура
		|		И ТоварныеОграничения.Склад          = &Склад
		|		И ТоварныеОграничения.Характеристика = &Характеристика
		|	) КАК ПотребностиВЗапасах
		|
		|СГРУППИРОВАТЬ ПО
		|	ПотребностиВЗапасах.ДатаСобытия
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПотребностиВЗапасах.ДатаСобытия";
		
	Запрос.УстановитьПараметр("ИспользоватьТоварныеОграничения", 
		МетодУправленияЗапасами     = Перечисления.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйИнтервал 
		ИЛИ МетодУправленияЗапасами = Перечисления.МетодыУправленияЗапасами.ТочкаПерезаказаФиксированныйРазмер);
	Запрос.УстановитьПараметр("ЭтоРабота", ЭтоРабота);
	Запрос.УстановитьПараметр("ИспользоватьПланы", 
		МетодУправленияЗапасами = Перечисления.МетодыУправленияЗапасами.ОбъемноКалендарноеПланирование);
	Запрос.УстановитьПараметр("РасходСНачалаДня", РасходСНачалаДня);
	Запрос.УстановитьПараметр("Номенклатура",     КлючПотребности.Номенклатура);
	Запрос.УстановитьПараметр("Подразделение",    КлючПотребности.Подразделение);
	Запрос.УстановитьПараметр("Назначение",       КлючПотребности.Назначение);
	Запрос.УстановитьПараметр("Характеристика",   КлючПотребности.Характеристика);
	Запрос.УстановитьПараметр("Склад",            КлючПотребности.Склад);
	
	Запрос.УстановитьПараметр("НачалоПериода",         КлючевыеДаты.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаСледующейПоставки", КлючевыеДаты.ДатаСледующейПоставки);
	Запрос.УстановитьПараметр("КалендарьРаботы",       КлючевыеДаты.КалендарьРаботы);
	Запрос.УстановитьПараметр("ИспользоватьХарактеристикиНоменклатуры", 
		ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ДвиженияБезПоставок.Загрузить(Результат.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьДвиженияПоДням()
	
	ЗаполнитьДвиженияПоДням();
	РассчитатьОстаткиДвиженийпоДням();
	
КонецПроцедуры

//Заполняет таблицу Прогноза остатков.
//Движения набираются из таблицы движений без поставок и таблицы постаувок ручной настройки.
&НаКлиенте
Процедура ЗаполнитьДвиженияПоДням()

	ПрогнозОстатков.Очистить();
	Для Каждого ДвижениеБезПоставок Из ДвиженияБезПоставок Цикл
		
		Движение = ПрогнозОстатков.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ДвижениеБезПоставок);
		Движение.ДатаПрогноза = ДвижениеБезПоставок.ДатаДвижения;
		
	КонецЦикла;
	
	Для Каждого Поставка Из НастраиваемыеПоставки Цикл
		
		Если Поставка.ОтметитьКЗаказу Тогда
			
			ВсегоДвижений = ПрогнозОстатков.Количество();
			
			Индекс = 0;
			Пока Индекс < ВсегоДвижений Цикл 
				
				Движение = ПрогнозОстатков[Индекс];
				
				Если Движение.ДатаПрогноза < Поставка.ДатаПоставки Тогда
					Индекс = Индекс + 1;
				Иначе 
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Индекс = ВсегоДвижений ИЛИ Движение.ДатаПрогноза > Поставка.ДатаПоставки Тогда
				
				Движение = ПрогнозОстатков.Вставить(Индекс);
				Движение.ДатаПрогноза = Поставка.ДатаПоставки;
				
			КонецЕсли;
				
			Движение.КЗаказу = Движение.КЗаказу + Поставка.КоличествоКЗаказу;
				
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры //ЗаполнитьДвиженияПоДням()

//Рассчитывает поля остатков в таблице Прогноза остатков.
&НаКлиенте
Функция РассчитатьОстаткиДвиженийпоДням()

	ОстатокРасчетныеПотребности = ВНаличииОстаток;
	ОстатокОжидаемыеОтгрузки    = ВНаличииОстаток;
	ПрогнозныйОстаток           = ВНаличииОстаток;
	
	ОжидаемаяОтгрузка           = 0;
	ОжидаемоеПоступление        = 0;
	
	МинимальныйПрогнозныйОстатокДоПоставки      = ВНаличииОстаток;
	МинимальныйПрогнозныйОстатокМеждуПоставками = ВНаличииОстаток;
	ЭтоИзбытокОбеспечения = Ложь;
	ОбеспечитьПоставкой   = 0;
	
	Для Каждого Движение ИЗ ПрогнозОстатков Цикл
		
		Движение.НачальныйОстаток = ПрогнозныйОстаток;
		
		ОстатокРасчетныеПотребности = ОстатокРасчетныеПотребности 
			+ Движение.ОжидаемоеПоступление + Движение.КЗаказу - Движение.РасчетнаяПотребность;
		ОстатокОжидаемыеОтгрузки    = ОстатокОжидаемыеОтгрузки
			+ Движение.ОжидаемоеПоступление + Движение.КЗаказу - Движение.ОжидаемаяОтгрузка;
		
		ПрогнозныйОстаток = Мин(ОстатокРасчетныеПотребности, ОстатокОжидаемыеОтгрузки);
		
		Движение.КонечныйОстаток = ПрогнозныйОстаток;
		
		//Рассчитываем показатели ошибок
		Если Движение.ДатаПрогноза < ДатаПоставки Тогда
			
			МинимальныйПрогнозныйОстатокДоПоставки
				= ?(МинимальныйПрогнозныйОстатокДоПоставки < ПрогнозныйОстаток, 
					МинимальныйПрогнозныйОстатокДоПоставки, 
					ПрогнозныйОстаток);
			МинимальныйПрогнозныйОстатокМеждуПоставками 
				= МинимальныйПрогнозныйОстатокДоПоставки;
				
		ИначеЕсли Движение.ДатаПрогноза < ДатаСледующейПоставки Тогда
			
			Если ЭтоРабота И Движение.ДатаПрогноза = ДатаПоставки Тогда
				
				ОбеспечитьПоставкой = Макс(0, Движение.ОжидаемаяОтгрузка - Движение.ОжидаемоеПоступление - Движение.КЗаказу);
				
			КонецЕсли;
			
			МинимальныйПрогнозныйОстатокМеждуПоставками 
				= ?(МинимальныйПрогнозныйОстатокМеждуПоставками < ПрогнозныйОстаток, 
					МинимальныйПрогнозныйОстатокМеждуПоставками, 
					ПрогнозныйОстаток);
			
		КонецЕсли;
		
		ЭтоИзбытокОбеспеченияВДате = Движение.ОжидаемоеПоступление + Движение.КЗаказу - Движение.ОжидаемаяОтгрузка > 0;
		Движение.НетДефицита = ?(ЭтоРабота, НЕ ЭтоИзбытокОбеспеченияВДате, ПрогнозныйОстаток >= 0);
		
		Если ЭтоРабота Тогда
			
			Если ЭтоИзбытокОбеспеченияВДате Тогда
				Движение.ТекстПредупреждения = НСтр("ru = ""Обеспечено с избытком""");
			КонецЕсли;
			
			ЭтоИзбытокОбеспечения = ЭтоИзбытокОбеспечения ИЛИ ЭтоИзбытокОбеспеченияВДате;
			
		Иначе
			
			Если ПрогнозныйОстаток < 0 Тогда
				Движение.ТекстПредупреждения = НСтр("ru = ""Не обеспечено""");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Параметры.ПрогнозОстатка = Новый Структура();
	Параметры.ПрогнозОстатка.Вставить("ЭтоИзбытокОбеспечения", ЭтоИзбытокОбеспечения);
	Параметры.ПрогнозОстатка.Вставить("ОбеспечитьПоставкой",   ОбеспечитьПоставкой);
	Параметры.ПрогнозОстатка.Вставить("ПрогнозныйОстаток",     ПрогнозныйОстаток);
	
	Параметры.ПрогнозОстатка.Вставить("МинимальныйПрогнозныйОстатокДоПоставки",      МинимальныйПрогнозныйОстатокДоПоставки);
	Параметры.ПрогнозОстатка.Вставить("МинимальныйПрогнозныйОстатокМеждуПоставками",
		МинимальныйПрогнозныйОстатокМеждуПоставками);
	
	Возврат Параметры.ПрогнозОстатка;
	
КонецФункции //РассчитатьОстаткиДвиженийпоДням()

&НаСервереБезКонтекста
Функция ПолучитьРеквизитыСтроки(Поставка, НачалоПериода, Номенклатура, Характеристика)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НаборДанных.ТипОбеспечения       КАК ТипОбеспечения,
	|	НаборДанных.ИсточникОбеспечения  КАК ИсточникОбеспечения,
	|	НаборДанных.Соглашение           КАК Соглашение,
	|	НаборДанных.УсловиеЦены          КАК УсловиеЦены
	|ПОМЕСТИТЬ РеквизитыСпособа
	|ИЗ
	|	(ВЫБРАТЬ
	|		0                                          КАК Порядок,
	|		СпрСпособ.ТипОбеспечения                   КАК ТипОбеспечения,
	|		СпрСпособ.ИсточникОбеспеченияПотребностей  КАК ИсточникОбеспечения,
	|		СпрСпособ.Соглашение                       КАК Соглашение,
	|		СпрСпособ.УсловиеЦеныПоставщика            КАК УсловиеЦены
	|	ИЗ 
	|		Справочник.СпособыОбеспеченияПотребностей КАК СпрСпособ
	|	ГДЕ 
	|		СпрСпособ.Ссылка = &Ссылка
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		1                                          КАК Порядок,
	|		&ТипОбеспечения                            КАК ТипОбеспечения,
	|		&ИсточникОбеспечения                       КАК ИсточникОбеспечения,
	|		&Соглашение                                КАК Соглашение,
	|		&УсловиеЦены                               КАК УсловиеЦены
	|	) КАК НаборДанных
	|УПОРЯДОЧИТЬ ПО 
	|	НаборДанных.Порядок
	|;
	|/////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеквизитыСпособа.ТипОбеспечения       КАК ТипОбеспечения,
	|	РеквизитыСпособа.ИсточникОбеспечения  КАК ИсточникОбеспечения,
	|	РеквизитыСпособа.Соглашение           КАК Соглашение,
	|	РеквизитыСпособа.Соглашение.Валюта    КАК ВалютаСоглашения,
	|	РеквизитыСпособа.УсловиеЦены          КАК УсловиеЦены,
	|	ВЫБОР
	|		КОГДА РеквизитыСпособа.Соглашение.НалогообложениеНДС
	|				= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			И НЕ РеквизитыСпособа.Соглашение.ЦенаВключаетНДС
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА СпрНоменклатура.СтавкаНДС 
	|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), 
	|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|					)
	|				ТОГДА
	|					1.1
	|				КОГДА СпрНоменклатура.СтавкаНДС
	|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|					)
	|				ТОГДА
	|					1.18
	|				ИНАЧЕ
	|					1
	|			КОНЕЦ
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|		* ЦеныПоставщиков.Цена 
	|		* (КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность)
	|		/ (КурсВалютаСоглашения.Курс * КурсВалютаСоглашения.Кратность)
	|		/ ЕСТЬNULL(ЦеныПоставщиков.Упаковка.Коэффициент, 1)                     КАК ЦенаВВалютеСоглашения,
	|	ВЫБОР
	|		КОГДА РеквизитыСпособа.Соглашение.НалогообложениеНДС
	|				= ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС)
	|			И НЕ РеквизитыСпособа.Соглашение.ЦенаВключаетНДС
	|		ТОГДА
	|			ВЫБОР
	|				КОГДА СпрНоменклатура.СтавкаНДС 
	|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10), 
	|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110)
	|					)
	|				ТОГДА
	|					1.1
	|				КОГДА СпрНоменклатура.СтавкаНДС
	|					В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18),
	|						ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118)
	|					)
	|				ТОГДА
	|					1.18
	|				ИНАЧЕ
	|					1
	|			КОНЕЦ
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ
	|		* ЦеныПоставщиков.Цена
	|		* (КурсыВалютСрезПоследних.Курс * КурсыВалютСрезПоследних.Кратность)
	|		/ &КоэффициентВалютыУпрУчета
	|		/ ЕСТЬNULL(ЦеныПоставщиков.Упаковка.Коэффициент, 1)                     КАК ЦенаВВалютеУправленческогоУчета,
	|	ВЫБОР
	|		КОГДА НЕ ЦеныПоставщиков.Цена ЕСТЬ NULL 
	|			И (КурсыВалютСрезПоследних.Курс + КурсВалютаСоглашения.Курс ЕСТЬ NULL 
	|				ИЛИ &КоэффициентВалютыУпрУчета = 0
	|			)
	|		ТОГДА
	|			ИСТИНА
	|		ИНАЧЕ
	|			ЛОЖЬ
	|	КОНЕЦ                                                                       КАК КурсыВалютНеПолучены
	|ИЗ 
	|	РеквизитыСпособа КАК РеквизитыСпособа
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|			КонецПериода(&НачалоПериода, ДЕНЬ),
	|			Номенклатура = &Номенклатура
	|				И Характеристика = &Характеристика
	|				И (Соглашение, УсловиеЦеныПоставщика) 
	|				В (ВЫБРАТЬ
	|						РеквизитыСпособа.Соглашение  КАК Соглашение,
	|						РеквизитыСпособа.УсловиеЦены КАК УсловиеЦены
	|					ИЗ
	|						РеквизитыСпособа КАК РеквизитыСпособа
	|				)
	|			) КАК ЦеныПоставщиков
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|			КонецПериода(&НачалоПериода, ДЕНЬ), ) КАК КурсыВалютСрезПоследних
	|		ПО ЦеныПоставщиков.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(
	|			КонецПериода(&НачалоПериода, ДЕНЬ), 
	|			Валюта
	|				В (ВЫБРАТЬ
	|						РеквизитыСпособа.Соглашение.Валюта КАК Валюта
	|					ИЗ
	|						РеквизитыСпособа КАК РеквизитыСпособа
	|				)
	|			) КАК КурсВалютаСоглашения
	|		ПО ИСТИНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО СпрНоменклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Ссылка",               Поставка.СпособОбеспечения);
	Запрос.УстановитьПараметр("ТипОбеспечения",       Поставка.ТипОбеспечения);
	Запрос.УстановитьПараметр("ИсточникОбеспечения",  Поставка.ИсточникОбеспечения);
	Запрос.УстановитьПараметр("Соглашение",           Поставка.Соглашение);
	Запрос.УстановитьПараметр("УсловиеЦены",          Поставка.УсловиеЦены);
	Запрос.УстановитьПараметр("НачалоПериода",        НачалоПериода);
	Запрос.УстановитьПараметр("КоэффициентВалютыУпрУчета", 
		Обработки.ОбеспечениеПотребностей.ПолучитьКурсВалютыУправленческогоУчета(НачалоПериода));
	Запрос.УстановитьПараметр("Номенклатура",         Номенклатура);
	Запрос.УстановитьПараметр("Характеристика",       Характеристика);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура("
		| ТипОбеспечения,
		| ИсточникОбеспечения,
		| Соглашение,
		| ВалютаСоглашения,
		| УсловиеЦены,
		| ЦенаВВалютеСоглашения,
		| ЦенаВВалютеУправленческогоУчета,
		| КурсыВалютНеПолучены"
	);
	ЗаполнитьЗначенияСвойств(Результат, Выборка);

	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПересчетаЦен(Валюта, ДатаКурса)
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		Отбор                = Новый Структура("Валюта", Валюта);
		СтруктураКурса       = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Отбор);
		КоэффициентПересчета = СтруктураКурса.Курс * СтруктураКурса.Кратность;
		
	Иначе
		
		КоэффициентПересчета = 0;
		
	КонецЕсли;
	
	ВалютаУпрУчет =  Константы.ВалютаУправленческогоУчета.Получить();
	Если ЗначениеЗаполнено(Валюта) Тогда
		
		Отбор = Новый Структура("Валюта", ВалютаУпрУчет);
		СтруктураКурса = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Отбор);
		КоэффициентПересчетаУпрУчет = СтруктураКурса.Курс * СтруктураКурса.Кратность;
		КоэффициентПересчетаУпрУчет = ?(КоэффициентПересчетаУпрУчет = 0, 1, КоэффициентПересчетаУпрУчет);
		
	Иначе
		
		КоэффициентПересчетаУпрУчет =  1;
		
	КонецЕсли;
	
	Возврат КоэффициентПересчета / КоэффициентПересчетаУпрУчет;
	
КонецФункции

//Проверяет возможно ли зафиксировать срочную поставку с указанной в ней датой поставки.
//Возвращает текст ошибки, если поставка не может быть зафиксирована.
&НаКлиенте
Функция ПроверкаВозможностиОтметитьПоставку(Поставка)
	
	Если Не Поставка.ОтметитьКЗаказу Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Поставка.ДатаПоставки < НачалоПериода Тогда 
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Дата поставки должна быть не меньше %1'"),
			Формат(НачалоПериода, "ДЛФ=DD")
		);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстОшибки,
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"НастраиваемыеПоставки[%1].ДатаПоставки",
				НастраиваемыеПоставки.Индекс(Поставка))
		);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции //ПроверкаВозможностиОтметитьПоставку()

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗначенияСлужебныхРеквизитов(Поставка, Склад)
	
	СпособПуст = Не ЗначениеЗаполнено(Поставка.СпособОбеспечения);
	
	Поставка.СоглашениеРедактируется  = СпособПуст ИЛИ Не ЗначениеЗаполнено(Поставка.Соглашение);
	Поставка.УсловиеЦеныРедактируется = СпособПуст ИЛИ Не ЗначениеЗаполнено(Поставка.УсловиеЦены);
	Поставка.ИсточникРедактируется    = СпособПуст ИЛИ Не ЗначениеЗаполнено(Поставка.ИсточникОбеспечения);
		
	Если Поставка.ТипОбеспечения = ПредопределенноеЗначение("Перечисление.ТипыОбеспечения.СборкаРазборка") Тогда
		Поставка.ИсточникОбеспечения      = Склад;
		Поставка.ИсточникРедактируется    = Ложь;
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Поставка.Соглашение) Тогда
		Поставка.ВалютаСоглашения = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры
//Процедура ОбработатьИзменениеРеквизитовСтроки.
//Устанавливает служебные реквизиты регулировки доступности полей при изменении способа обеспечения.
//В строке таблицы НастраиваемыеПоставки.
//	Параметры:
//		Поставка - ДанныеФормыЭлементКоллекции - строка таблицы НастраиваемыеПоставки.

&НаКлиенте
Процедура ОбработатьИзменениеРеквизитовСтроки(Поставка)
	
	СтруктураРеквизитов = Новый Структура("
		| СпособОбеспечения,
		| ИсточникОбеспечения,
		| ТипОбеспечения,
		| Соглашение,
		| УсловиеЦены"
	);
	
	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Поставка);
	ПолученныеРеквизиты = ПолучитьРеквизитыСтроки(СтруктураРеквизитов, НачалоПериода, Номенклатура, Характеристика);
	ЗаполнитьЗначенияСвойств(Поставка, ПолученныеРеквизиты);
	
	УстановитьЗначенияСлужебныхРеквизитов(Поставка, Склад);
	
КонецПроцедуры // ОбработатьИзменениеРеквизитовСтроки()



