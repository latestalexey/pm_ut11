////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияУТ.НастроитьПодключаемоеОборудование(ЭтаФорма);
	
	ЗаполнитьСкладПоУмолчанию();
	
	ФильтрЗаданий = "Невыполненные";
	ФильтрОрдеров = "ВсеНепринятые";
	ФильтрРаспоряжений = "";
	
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Неопределено);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления", Неопределено);
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("МассивГруппСкладов", Новый Массив);
	
	ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Неопределено);
	ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("Распоряжение", Неопределено);
	
	ПулНоменклатурыРазмещение.Параметры.УстановитьЗначениеПараметра("ЗонаПриемки", Неопределено);
	
	УстановитьЗаголовкиКолонокВесОбъем();
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство("Склад", Склад) Тогда
			РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
			
			МассивГруппСкладов = ЗначениеНастроекПовтИсп.ИерархияГрупп(Склад);
			МассивГруппСкладов.Добавить(Склад);
			МассивГруппСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
			РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("МассивГруппСкладов", МассивГруппСкладов);
		КонецЕсли;
		
		Если СтруктураБыстрогоОтбора.Свойство("ЗонаПриемки", ЗонаПриемки) Тогда
			ПулНоменклатурыРазмещение.Параметры.УстановитьЗначениеПараметра("ЗонаПриемки", ЗонаПриемки);
		КонецЕсли;
		
	КонецЕсли;
	УстановитьОтборыВОсновныхСписках();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МенеджерОборудованияКлиент.ПодключитьОборудованиеПриОткрытииФормы(ЭтаФорма, "СканерШтрихкода");

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	МенеджерОборудованияКлиент.ОтключитьОборудованиеПриЗакрытииФормы(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкоды(МенеджерОборудованияКлиент.ПреобразоватьДанныеСоСканераВСтруктуру(Параметр));
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "Запись_ПриходныйОрдерНаТовары"
		Или ИмяСобытия = "Запись_СоглашенияСПоставщиками" 
		Или ИмяСобытия = "Запись_ОрдерНаПеремещениеТоваров" 
		Или ИмяСобытия = "Запись_ОтборРазмещениеТоваров"
		Или ИмяСобытия = "Запись_ЗаказПоставщику"
		Или ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента"
		Или ИмяСобытия = "Запись_ПеремещениеТоваров"
		Или ИмяСобытия = "Запись_ПоступлениеТоваровУслуг"
		Или ИмяСобытия = "Запись_СборкаТоваров"	Тогда
		ОбработкаОповещенияСервер(ИмяСобытия,РаспоряжениеНаПоступление(ЭтаФорма));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ПолучатьСкладИзНастроек =
		Склад = Настройки.Получить("Склад")
		ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладов");
	
	Если ПолучатьСкладИзНастроек Тогда
		Если СтруктураБыстрогоОтбора = Неопределено Тогда
			Склад 		= Настройки.Получить("Склад");
			Помещение 	= Настройки.Получить("Помещение");
			ЗонаПриемки = Настройки.Получить("ЗонаПриемки");
		Иначе
			
			Если Не СтруктураБыстрогоОтбора.Свойство("Склад") Тогда
				Склад = Настройки.Получить("Склад");
			КонецЕсли;
			
			Если Не СтруктураБыстрогоОтбора.Свойство("Помещение") Тогда
				Помещение = Настройки.Получить("Помещение");
			КонецЕсли;
			
			Если Не СтруктураБыстрогоОтбора.Свойство("ЗонаПриемки") Тогда
				ЗонаПриемки = Настройки.Получить("ЗонаПриемки");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Эти настройки мы уже загрузили
	Настройки.Удалить("Склад");
	Настройки.Удалить("Помещение");
	Настройки.Удалить("ЗонаПриемки");
	
	Если ЗначениеЗаполнено(Склад) Тогда
		
		ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Склад, Помещение);
		
		Если ИспользоватьАдресноеХранение Тогда
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
			Если Не ЗначениеЗаполнено(ЗонаПриемки) Тогда
				ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Склад, Помещение);
			КонецЕсли;
		Иначе
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
		
		СтруктураУстанавливаемыхПараметров = Новый Структура;
		СтруктураУстанавливаемыхПараметров.Вставить("Склад",Склад);
		СтруктураУстанавливаемыхПараметров.Вставить("Помещение",Помещение);
		
		УстановитьПараметрыФункциональныхОпцийФормы(СтруктураУстанавливаемыхПараметров);
		Элементы.ОрдераВРаботеСтатус.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПриходныхОрдеров", Новый Структура("Склад", Склад));
	
	Иначе
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	СкладПомещениеПриИзмененииСервер();
	УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление(ЭтаФорма));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЗонаПриемкиПриИзменении(Элемент)
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
	УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеПриИзменении(Элемент)
	СкладПомещениеПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоступленияПриИзменении(Элемент)
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрРаспоряженийПриИзменении(Элемент)
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

&НаКлиенте
Процедура ФильтрОрдеровПриИзменении(Элемент)
	УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ФильтрЗаданийПриИзменении(Элемент)
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ РАСПОРЯЖЕНИЯ НА ПОСТУПЛЕНИЕ

&НаКлиенте
Процедура РаспоряженияНаПоступлениеПриАктивизацииСтроки(Элемент)
	УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура РаспоряженияНаПоступлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьЗначение(Элемент.ТекущиеДанные.Распоряжение);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ПУЛ НОМЕКНЛАТУРЫ РАЗМЕЩЕНИЕ

&НаКлиенте
Процедура ПулНоменклатурыРазмещениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПулНоменклатурыРазмещение.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если Поле = Элементы.ПулНоменклатурыРазмещение.ПодчиненныеЭлементы.ГруппаКолонокПулНоменклатурыРазмещениеТовар.ПодчиненныеЭлементы.ПулНоменклатурыРазмещениеНоменклатура Тогда
			ОткрытьЗначение(ТекущиеДанные.Номенклатура);
		ИначеЕсли Поле = Элементы.ПулНоменклатурыРазмещение.ПодчиненныеЭлементы.ПулНоменклатурыРазмещениеУпаковка Тогда
			ОткрытьЗначение(ТекущиеДанные.Упаковка);
		ИначеЕсли Поле = Элементы.ПулНоменклатурыРазмещение.ПодчиненныеЭлементы.ПулНоменклатурыРазмещениеСкладскаяГруппаНоменклатуры Тогда
			ОткрытьЗначение(ТекущиеДанные.СкладскаяГруппаНоменклатуры);
		ИначеЕсли Поле = Элементы.ПулНоменклатурыРазмещение.ПодчиненныеЭлементы.ПулНоменклатурыРазмещениеСкладскаяГруппаУпаковок Тогда
			ОткрытьЗначение(ТекущиеДанные.СкладскаяГруппаУпаковок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ПУЛ НОМЕКНЛАТУРЫ ПОСТУПЛЕНИЕ

&НаКлиенте
Процедура ПулНоменклатурыПоступлениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ПулНоменклатурыПоступление.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ТекущиеДанные.Номенклатура);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СоздатьЗадания(Команда)
	ОчиститьСообщения();
	Отказ = Ложь;
	
	ПроверитьСкладПомещение(Отказ, Ложь);
	
	Если Не Отказ Тогда
		
		Структура = Новый Структура;
		Структура.Вставить("Помещение",Помещение);
		Структура.Вставить("Склад",Склад);
		
		ФормаПараметры = Новый Структура("Заголовок, Операция, ПараметрОбъект", "УправлениеПоступлением", "ФормированиеЗаданий",Структура);
		Ответ = ОткрытьФормуМодально("Документ.ОтборРазмещениеТоваров.Форма.ФормаНастроек",ФормаПараметры,ЭтаФорма);
		
		ВыделенныеСтроки = Новый Массив;
		
		Если ПоВсейНоменклатуре <> 0 Тогда
			
			Для Каждого СтрМас из Элементы.ПулНоменклатурыРазмещение.ВыделенныеСтроки Цикл
				ДанныеСтроки = Элементы.ПулНоменклатурыРазмещение.ДанныеСтроки(СтрМас);
				
				СтрТабл = Новый Структура;
				СтрТабл.Вставить("Номенклатура",ДанныеСтроки.Номенклатура);
				СтрТабл.Вставить("Характеристика",ДанныеСтроки.Характеристика);
				СтрТабл.Вставить("Серия",ДанныеСтроки.Серия);
				
				ВыделенныеСтроки.Добавить(СтрТабл);
				
			КонецЦикла;
		КонецЕсли;
			
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			СоздатьЗаданияСервер(ВыделенныеСтроки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВзятьЗаданияВРаботу(Команда)
	Если СкладыКлиент.ВзятьЗаданияВРаботу(ЭтаФорма, Элементы.ЗаданияВРаботе , "УправлениеПоступлением") Тогда
		УстановитьОтборыВОсновныхСписках();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗадания(Команда)
	Если СкладыКлиент.ОтметитьВыполненениеЗаданийБезОшибок(ЭтаФорма, Элементы.ЗаданияВРаботе, "ОтборРазмещение") Тогда
		УстановитьОтборыВОсновныхСписках();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОрдер(Команда)
	ОчиститьСообщения();
	ТекущиеДанные = Элементы.РаспоряженияНаПоступление.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда

		Основание = Новый Структура;
		Основание.Вставить("Распоряжение",ТекущиеДанные.Распоряжение);
		Основание.Вставить("Склад", Склад);
		Основание.Вставить("Помещение", Помещение);
		Основание.Вставить("ЗонаПриемки", ЗонаПриемки);
		Основание.Вставить("ДатаПоступления", ДатаПоступления);
		ОткрытьФорму("Документ.ПриходныйОрдерНаТовары.Форма.акФормаДокумента",
			Новый Структура("Основание",Основание));
				
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Выберите строку распоряжения на приемку товаров.'");			
  	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиПоступление(Команда)
	ОбновитьСпискиСервер("Поступление",РаспоряжениеНаПоступление(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиРазмещение(Команда)
	ОбновитьСпискиСервер("Размещение",РаспоряжениеНаПоступление(ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоСостояниюПриемки(Команда)
	ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования, КлючВарианта, СформироватьПриОткрытии",
			Новый Структура("Склад", Склад),
			"СостояниеПриемки",
			"СостояниеПриемки",
			Истина);

	ОткрытьФорму("Отчет.ТоварыКПоступлению.Форма",
			ПараметрыФормы,
			ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВТСД(Команда)
	
	ПараметрыФормы = Новый Структура("ВариантЗаполнения, СкладПриемки, ДатаПриемки", "ПоРаспоряжениямНаПриемку", Склад, ДатаПоступления);
	ОткрытьФорму("Обработка.ВыгрузкаБазыТоваровВТСД.Форма", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение и инициализация

&НаСервере
Процедура ЗаполнитьСкладПоУмолчанию()
	
	СтруктураЗаполнения = Новый Структура("Склад");
	ОбщегоНазначенияУТ.ОбработкаЗаполнения(СтруктураЗаполнения, Неопределено, Неопределено);
	Склад = СтруктураЗаполнения.Склад;
	
	Если НЕ ЗначениеЗаполнено(Склад) Тогда
		Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Склад);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Штрихкоды и торговое оборудование

&НаКлиенте
Функция СсылкаНаЭлементСпискаПоШтрихкоду(Штрихкод)
	
	Менеджеры = Новый Массив();
	Менеджеры.Добавить(ПредопределенноеЗначение("Документ.ОтборРазмещениеТоваров.ПустаяСсылка"));
	Возврат ШтрихкодированиеПечатныхФормКлиент.ПолучитьСсылкуПоШтрихкодуТабличногоДокумента(Штрихкод, Менеджеры);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьШтрихкоды(Данные)
	
	МассивСсылок = СсылкаНаЭлементСпискаПоШтрихкоду(Данные.Штрихкод);
	Если МассивСсылок.Количество() > 0 Тогда
		Ссылка = МассивСсылок[0];
		Элементы.ЗаданияВРаботе.ТекущаяСтрока = Ссылка;
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаРазмещение;
		ОткрытьЗначение(Ссылка);
	Иначе
		ШтрихкодированиеПечатныхФормКлиент.ОбъектНеНайден(Данные.Штрихкод);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаСервере
Процедура СоздатьЗаданияСервер(ВыделенныеСтроки)
	
	ТаблицаВыделеннойНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаВыделеннойНоменклатуры.Колонки.Добавить("Серия",Новый ОписаниеТипов("СправочникСсылка.СерииНоменклатуры"));
	
	Если ПоВсейНоменклатуре <> 0 Тогда
		Для Каждого СтрМас из ВыделенныеСтроки Цикл
			
			ЗаполнитьЗначенияСвойств(ТаблицаВыделеннойНоменклатуры.Добавить(), СтрМас);
			
		КонецЦикла;
	КонецЕсли;
	Менеджер = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Менеджер;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика,
	|	Таблица.Серия КАК Серия
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
	|ИЗ
	|	&ТаблицаВыделеннойНоменклатуры КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыВЯчейкахОстатки.Характеристика КАК Характеристика,
	|	ТоварыВЯчейкахОстатки.Серия,
	|	ЕСТЬNULL(ТоварыВЯчейкахОстатки.Серия.ГоденДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ГоденДо,
	|	ЕСТЬNULL(ПолитикиУчетСерий.ПолитикаУчетаСерий.УчетСерийПоFEFO, ЛОЖЬ) КАК УчетСерийПоFEFO,
	|	ТоварыВЯчейкахОстатки.Упаковка КАК Упаковка,
	|	ТоварыВЯчейкахОстатки.Ячейка КАК ЗонаПриемки,
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток КАК КоличествоУпаковок,
	|	ТоварыВЯчейкахОстатки.Упаковка.Коэффициент КАК КоличествоВУпаковке,
	|	ТоварыВЯчейкахОстатки.Упаковка.Вес КАК Вес,
	|	ТоварыВЯчейкахОстатки.Упаковка.Высота КАК Высота,
	|	ТоварыВЯчейкахОстатки.Упаковка.Ширина КАК Ширина,
	|	ТоварыВЯчейкахОстатки.Упаковка.Глубина КАК Глубина,
	|	ТоварыВЯчейкахОстатки.Упаковка.Объем КАК Объем,
	|	ТоварыВЯчейкахОстатки.Упаковка.Безразмерная КАК Безразмерная,
	|	ТоварыВЯчейкахОстатки.Номенклатура.СкладскаяГруппа КАК СкладскаяГруппаНоменклатуры,
	|	ТоварыВЯчейкахОстатки.Упаковка.СкладскаяГруппа КАК СкладскаяГруппаУпаковок
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	РегистрНакопления.ТоварыВЯчейках.Остатки(
	|			,
	|			(&ПоВсейНоменклатуре
	|				ИЛИ (Номенклатура, Характеристика, Серия) В
	|					(ВЫБРАТЬ
	|						Таблица.Номенклатура КАК Номенклатура,
	|						Таблица.Характеристика КАК Характеристика,
	|						Таблица.Серия КАК Серия
	|					ИЗ
	|						ТаблицаНоменклатурыДляЗапроса КАК Таблица))
	|				И Ячейка = &ЗоныПриемки) КАК ТоварыВЯчейкахОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыНоменклатуры.ПолитикиУчетаСерий КАК ПолитикиУчетСерий
	|		ПО (ТоварыВЯчейкахОстатки.Номенклатура.ВидНоменклатуры = ПолитикиУчетСерий.Ссылка
	|				И ПолитикиУчетСерий.Склад = &Склад)
	|ГДЕ
	|	ТоварыВЯчейкахОстатки.ВНаличииОстаток - ТоварыВЯчейкахОстатки.КОтборуОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыДляЗапроса";

	Запрос.УстановитьПараметр("ЗоныПриемки", ЗонаПриемки);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ТаблицаВыделеннойНоменклатуры", ТаблицаВыделеннойНоменклатуры);
	Запрос.УстановитьПараметр("ПоВсейНоменклатуре", ПоВсейНоменклатуре = 0);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	Выборка = Результаты[1].Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Количество = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Задания на размещение не сформированы: все товары или уже размещены, или по ним уже есть задания на размещение.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ОшибкаПроверки = Ложь;
	
	СтруктураВозврата = СкладыСервер.РазместитьТоварВЯчейках(Менеджер, Склад, Помещение,ОшибкаПроверки);
	
	Если ОшибкаПроверки Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураВозврата.ТаблицаРезультатов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Задания на размещение не сформированы: не удалось разместить номенклатуру согласно правилам размещения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;	
	КонецЕсли;
	
	     
	Если НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда
		
		ЗапросУчастки = Новый Запрос;
		ЗапросУчастки.Текст = "ВЫБРАТЬ
		|	РабочиеУчастки.Ссылка КАК РабочийУчасток,
		|	РабочиеУчастки.ОграничиватьПоВесу,
		|	РабочиеУчастки.ОграничениеПоВесу,
		|	РабочиеУчастки.ОграничиватьПоОбъему,
		|	РабочиеУчастки.ОграничениеПоОбъему
		|ИЗ
		|	Справочник.РабочиеУчастки КАК РабочиеУчастки
		|ГДЕ
		|	РабочиеУчастки.Владелец = &Склад
		|	И РабочиеУчастки.Помещение = &Помещение";
		
		ЗапросУчастки.УстановитьПараметр("Склад",Склад);
		ЗапросУчастки.УстановитьПараметр("Помещение",Помещение);
		
		ТаблицаРабочихУчастков = ЗапросУчастки.Выполнить().Выгрузить();
		
		НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
		НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
		НоваяСтрока.ОграничиватьПоОбъему = Ложь;
		НоваяСтрока.ОграничиватьПоВесу = Ложь;
		
	Иначе	
		ТаблицаРабочихУчастков = Новый ТаблицаЗначений;
		ТаблицаРабочихУчастков.Колонки.Добавить("РабочийУчасток", Новый ОписаниеТипов("СправочникСсылка.РабочиеУчастки"));
		НоваяСтрока = ТаблицаРабочихУчастков.Добавить();
		Если НастройкаФормированияПоРабочимУчасткам = "БезРазбиенияПоРабочимУчасткам" Тогда
			НоваяСтрока.РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
		Иначе
			НоваяСтрока.РабочийУчасток = РабочийУчасток;
		КонецЕсли;                       
		
	КонецЕсли;

	
	НевозможныйНабор = 9999999999;
	
	Для Каждого СтрокаРабочийУчасток Из ТаблицаРабочихУчастков Цикл
		
		Если НастройкаФормированияПоРабочимУчасткам = "СРазбиениемПоРабочимУчасткам" Тогда						
			МаксимальныйОбъем = ?(СтрокаРабочийУчасток.ОграничиватьПоОбъему, СтрокаРабочийУчасток.ОграничениеПоОбъему, НевозможныйНабор);
			МаксимальныйВес = ?(СтрокаРабочийУчасток.ОграничиватьПоВесу, СтрокаРабочийУчасток.ОграничениеПоВесу, НевозможныйНабор);						
		Иначе
			МаксимальныйОбъем = ?(ОграничиватьПоОбъему, ОграничениеПоОбъему, НевозможныйНабор);
			МаксимальныйВес = ?(ОграничиватьПоВесу, ОграничениеПоВесу, НевозможныйНабор);						
		КонецЕсли;
			
		Если НастройкаФормированияПоРабочимУчасткам <> "БезРазбиенияПоРабочимУчасткам" Тогда			
			ТаблицаРезультата = СтруктураВозврата.ТаблицаРезультатов.НайтиСтроки(Новый Структура("РабочийУчасток",СтрокаРабочийУчасток.РабочийУчасток));			
		Иначе			
			ТаблицаРезультата = СтруктураВозврата.ТаблицаРезультатов;		
		КонецЕсли;
		
		
		//Разбиение по весу и объему. Соглашения:
		//	- в одну ячейку идет один человек (т.е. строка результата размещения не разбивается)
		//  - если вес (объем) одной строки больше, чем ограничения - создается отдельный документ,
		//		вес (объем) которого будет больше, чем максимальный
		//	- разбиение по весу (объему) не оптимально, т.к. более приоритетно сохранения порядка обхода
		//			(лучше пусть будет больше заданий, но каждое можно быстрее обойти)
		
		ОбъемДокумента    = 0;
		ВесДокумента	  = 0;
		ТекущийДокумент = НовоеЗаданиеНаРазмещение(СтрокаРабочийУчасток.РабочийУчасток);
		
		КоличествоОбработано = 0;
		
		Для Каждого СтрТабл Из ТаблицаРезультата Цикл
			
			Если СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйОбъем
				Или СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок > МаксимальныйВес Тогда
				
				ДокументОбъект = НовоеЗаданиеНаРазмещение(СтрокаРабочийУчасток.РабочийУчасток);
				
				НоваяСтрока = ДокументОбъект.ТоварыРазмещение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
				
				ЗаписатьДокумент(ДокументОбъект,СтрТабл.ОбъемУпаковки,СтрТабл.ВесУпаковки);
				КоличествоОбработано = КоличествоОбработано + 1;
			Иначе
				
				Если (ОбъемДокумента + СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйОбъем
					Или (ВесДокумента + СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок) > МаксимальныйВес Тогда
					
					ЗаписатьДокумент(ТекущийДокумент,ОбъемДокумента,ВесДокумента);
					
					ОбъемДокумента    = 0;
					ВесДокумента	  = 0;
					ТекущийДокумент = НовоеЗаданиеНаРазмещение(СтрокаРабочийУчасток.РабочийУчасток);
					
				КонецЕсли;
				
				НоваяСтрока = ТекущийДокумент.ТоварыРазмещение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл);
				
				ОбъемДокумента    = ОбъемДокумента + СтрТабл.ОбъемУпаковки*СтрТабл.КоличествоУпаковок;
				ВесДокумента	  = ВесДокумента + СтрТабл.ВесУпаковки*СтрТабл.КоличествоУпаковок;
				КоличествоОбработано = КоличествоОбработано + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущийДокумент.ТоварыРазмещение.Количество() > 0 Тогда
			
			ЗаписатьДокумент(ТекущийДокумент,ОбъемДокумента,ВесДокумента);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Менеджер.Закрыть();
	УстановитьОтборыВОсновныхСписках();
КонецПроцедуры

&НаСервере
Функция НовоеЗаданиеНаРазмещение(РабочийУчасток)
	
	ДокументОбъект = Документы.ОтборРазмещениеТоваров.СоздатьДокумент();
	ДокументОбъект.Дата 				= ТекущаяДатаСеанса();
	ДокументОбъект.Статус 				= Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено;
	ДокументОбъект.ВидОперации 			= Перечисления.ВидыОперацийОтбораРазмещенияТоваров.Размещение;
	ДокументОбъект.Склад 				= Склад;
	ДокументОбъект.Помещение 			= Помещение;
	ДокументОбъект.ЗонаПриемки		 	= ЗонаПриемки;
	ДокументОбъект.Ответственный 		= Пользователи.ТекущийПользователь();
	
	ДокументОбъект.РабочийУчасток 		= РабочийУчасток;
	
	ДокументОбъект.Исполнитель          = ?(НазначитьИсполнителя, Исполнитель, Справочники.Пользователи.ПустаяСсылка());
	
	Возврат ДокументОбъект;
	
КонецФункции

&НаСервере
Процедура ЗаписатьДокумент(ДокументОбъект, Объем, Вес)
	Попытка
		
		ПараметрыУказаниСерий = НоменклатураСервер.ПараметрыУказанияСерий(ДокументОбъект, Документы.ОтборРазмещениеТоваров);
		ПараметрыУказаниСерий.ИмяТЧТовары = "ТоварыРазмещение";
		ПараметрыУказаниСерий.ИмяТЧСерии  = "ТоварыРазмещение";
		
		НоменклатураСервер.ЗаполнитьСтатусыУказанияСерий(ДокументОбъект,ПараметрыУказаниСерий);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура СкладПомещениеПриИзмененииСервер()
	
	СтруктураУстанавливаемыхПараметров = Новый Структура;
	Если ЗначениеЗаполнено(Склад) Тогда
		СтруктураУстанавливаемыхПараметров.Вставить("Склад",Склад);
		СтруктураУстанавливаемыхПараметров.Вставить("Помещение",Помещение);
		
		ИспользоватьАдресноеХранение = СкладыСервер.ИспользоватьАдресноеХранение(Склад, Помещение);
		
		Если ИспользоватьАдресноеХранение Тогда
			ЗонаПриемки = Справочники.СкладскиеЯчейки.ЗонаПриемкиПоУмолчанию(Склад, Помещение);
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
		Иначе
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		КонецЕсли;
		
	Иначе
		СтруктураУстанавливаемыхПараметров.Вставить("Склад",Неопределено);
		СтруктураУстанавливаемыхПараметров.Вставить("Помещение",Неопределено);
		Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	РабочийУчасток = Справочники.РабочиеУчастки.ПустаяСсылка();
	
	УстановитьПараметрыФункциональныхОпцийФормы(СтруктураУстанавливаемыхПараметров);
	Элементы.ОрдераВРаботеСтатус.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьСтатусыПриходныхОрдеров", Новый Структура("Склад", Склад));
	
	УстановитьОтборыВОсновныхСписках();
	
	ЗаполнитьСписокВыбораФильтраОрдеров();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовкиКолонокВесОбъем()
	ЕдиницаИзмеренияОбъема 	= Строка(Константы.ЕдиницаИзмеренияОбъема.Получить());
	ЕдиницаИзмеренияВеса 	= Строка(Константы.ЕдиницаИзмеренияВеса.Получить());
		
	Элементы.ЗаданияВРаботе.ПодчиненныеЭлементы.ПеремещенияВРаботеОбъемРазмещение.Заголовок = НСтр("ru='Объем, '") + ЕдиницаИзмеренияОбъема;
	Элементы.ЗаданияВРаботе.ПодчиненныеЭлементы.ПеремещенияВРаботеВесРазмещение.Заголовок   = НСтр("ru='Вес (брутто), '") + ЕдиницаИзмеренияВеса;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыВОсновныхСписках()
	ПулНоменклатурыРазмещение.Параметры.УстановитьЗначениеПараметра("ЗонаПриемки", ЗонаПриемки);
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыОтборовРазмещенийТоваров.Подготовлено);
	СписокСтатусов.Добавить(Перечисления.СтатусыОтборовРазмещенийТоваров.ВРаботе);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Статус", СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,ФильтрЗаданий <> "");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Склад", Склад, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "Помещение", Помещение, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	
	ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	Если ЗначениеЗаполнено(ДатаПоступления) Тогда
		ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления", КонецДня(ДатаПоступления)); 
	Иначе
		ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления", ДатаПоступления); 
	КонецЕсли;	
	
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("Склад", Склад); 
	Если ЗначениеЗаполнено(ДатаПоступления) Тогда
		РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления",  КонецДня(ДатаПоступления)); 
	Иначе
		РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("ДатаПоступления", ДатаПоступления); 
	КонецЕсли;	
	МассивГруппСкладов = ЗначениеНастроекПовтИсп.ИерархияГрупп(Склад);
	МассивГруппСкладов.Добавить(Склад);
	МассивГруппСкладов.Добавить(Справочники.Склады.ПустаяСсылка());
	РаспоряженияНаПоступление.Параметры.УстановитьЗначениеПараметра("МассивГруппСкладов", МассивГруппСкладов);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(РаспоряженияНаПоступление.Отбор, "Перепоставка", Ложь, ВидСравненияКомпоновкиДанных.Равно,,ФильтрРаспоряжений <> "");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ПулНоменклатурыПоступление.Отбор, "Перепоставка", 0, ВидСравненияКомпоновкиДанных.Равно,,ФильтрРаспоряжений <> "");
	
	Элементы.ПулНоменклатурыРазмещение.Обновить();
	Элементы.ПулНоменклатурыПоступление.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСкладПомещение(Отказ, ПроверятьПомещение = Ложь)
	Если Не ЗначениеЗаполнено(Склад) Тогда
		ТекстСообщения = НСтр("ru='Перед выполнением операции необходимо выбрать склад.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
	Если ПроверятьПомещение
		И ПолучитьФункциональнуюОпциюФормы("ИспользоватьСкладскиеПомещения")
		И Не ЗначениеЗаполнено(Помещение) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыВЗависимыхСписках(РаспоряженияНаПоступление)
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ЗаданияВРаботе.Отбор, "ЗонаПриемки",ЗонаПриемки,
														ВидСравненияКомпоновкиДанных.ВСписке,,ЗначениеЗаполнено(ЗонаПриемки));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Ссылка.ЗонаПриемки",ЗонаПриемки,
														ВидСравненияКомпоновкиДанных.ВСписке,,ЗначениеЗаполнено(ЗонаПриемки));
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.ПриходныйОрдерНаТовары"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОрдерНаПеремещениеТоваров"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Тип", СписокТипов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Склад", Склад, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "ПомещениеПолучатель", Помещение, ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Помещение));
	
	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Перечисления.СтатусыПриходныхОрдеров.КПоступлению);
	СписокСтатусов.Добавить(Перечисления.СтатусыОрдеровНаПеремещение.КОтгрузке);
	
	Если ФильтрОрдеров = "" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Статус",СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Распоряжение",РаспоряженияНаПоступление, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Проведен",Истина, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	ИначеЕсли ФильтрОрдеров = "ВсеНепринятые" Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Статус",СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Распоряжение",РаспоряженияНаПоступление, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Проведен",Истина, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	ИначеЕсли ФильтрОрдеров = "ПоТекущемуРаспоряжению" Тогда	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Статус",СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке,,Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Распоряжение",РаспоряженияНаПоступление, ВидСравненияКомпоновкиДанных.Равно,,Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОрдераВРаботе.Отбор, "Проведен",Истина, ВидСравненияКомпоновкиДанных.Равно,,Ложь);
	КонецЕсли;
		
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаПоступление Тогда
		ПулНоменклатурыПоступление.Параметры.УстановитьЗначениеПараметра("Распоряжение", РаспоряженияНаПоступление); 
	ИначеЕсли  Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.СтраницаРазмещение Тогда
		Элементы.ПулНоменклатурыРазмещение.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияСервер(ИмяСобытия,РаспоряжениеНаПоступление)
	Если ИмяСобытия = "Запись_ПриходныйОрдерНаТовары" 
		Или ИмяСобытия = "Запись_ОрдерНаПеремещениеТоваров" Тогда
		Элементы.РаспоряженияНаПоступление.Обновить();
		УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление);
		Элементы.ПулНоменклатурыРазмещение.Обновить();
	ИначеЕсли ИмяСобытия = "Запись_ОтборРазмещениеТоваров" Тогда
		Элементы.ПулНоменклатурыРазмещение.Обновить();
	ИначеЕсли ИмяСобытия = "Запись_ЗаказПоставщику"
		Или ИмяСобытия = "Запись_ЗаявкаНаВозвратТоваровОтКлиента"
		Или ИмяСобытия = "Запись_ПеремещениеТоваров"
 		Или ИмяСобытия = "Запись_ПоступлениеТоваровУслуг"
 		Или ИмяСобытия = "Запись_СборкаТоваров" 
		Или ИмяСобытия = "Запись_СоглашенияСПоставщиками" Тогда
		Элементы.РаспоряженияНаПоступление.Обновить();
		Элементы.ПулНоменклатурыПоступление.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСпискиСервер(НаборСписков,РаспоряжениеНаПоступление)
	Если НаборСписков = "Поступление" Тогда
		Элементы.РаспоряженияНаПоступление.Обновить();
		Элементы.ОрдераВРаботе.Обновить();
		УстановитьОтборыВЗависимыхСписках(РаспоряжениеНаПоступление);
	Иначе
		Элементы.ПулНоменклатурыРазмещение.Обновить();
		Элементы.ЗаданияВРаботе.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РаспоряжениеНаПоступление(Форма)
	
	// На сервере текущие данные формы недоступны
	#Если Клиент Тогда
	Если Форма.Элементы.РаспоряженияНаПоступление.ТекущиеДанные <> Неопределено Тогда
		Возврат Форма.Элементы.РаспоряженияНаПоступление.ТекущиеДанные.Распоряжение;
	КонецЕсли;
	#КонецЕсли
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокВыбораФильтраОрдеров()
	
	// Добавим или удалим из списка выбора поля ФильтрОрдеров элемент "ВсеНепринятые"
	// в зависимости от использования статусов ордеров на выбранном складе
	
	СписокВыбора  = Элементы.ФильтрОрдеров.СписокВыбора;
	ЭлементСписка = СписокВыбора.НайтиПоЗначению("ВсеНепринятые");
	
	Если СкладыСервер.ИспользоватьСтатусыОрдеров(Склад, Истина, Ложь) Тогда
		Если ЭлементСписка = Неопределено Тогда
			ЭлементСписка = СписокВыбора.Вставить(1, "ВсеНепринятые");
		КонецЕсли;
		ЭлементСписка.Представление = "Все непринятые";
	Иначе
		Если ЭлементСписка <> Неопределено Тогда
			Если ФильтрОрдеров = "ВсеНепринятые" Тогда
				ФильтрОрдеров = СписокВыбора[0].Значение; // новый отбор установится позднее, при вызове УстановитьОтборыВЗависимыхСписках
			КонецЕсли;
			СписокВыбора.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
