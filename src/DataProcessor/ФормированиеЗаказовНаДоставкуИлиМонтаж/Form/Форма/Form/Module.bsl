   &НаКлиенте
перем СсылкаНаЗаказКлиента;

 &НаКлиенте
перем ДопУслугиСсылкаНаЗаказ;


Процедура ЗаполнитьНаСервере()
	ОБъект.Заказы.Очистить();
	ОБъект.ДополнительныеУслуги.Очистить();

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	АК_СтатусДоставкиМонтажаОстатки.ЗаказКлиента,
	               |	АК_СтатусДоставкиМонтажаОстатки.ДоставкаОстаток,
	               |	АК_СтатусДоставкиМонтажаОстатки.МонтажОстаток
	               |ИЗ
	               |	РегистрНакопления.АК_СтатусДоставкиМонтажа.Остатки КАК АК_СтатусДоставкиМонтажаОстатки";
				   
				   
				   Если Объект.ТипФормирования = Перечисления.АК_ТипУслуги.Монтаж тогда
					    Запрос.Текст = Запрос.Текст+
						" Где
						 | АК_СтатусДоставкиМонтажаОстатки.МонтажОстаток>0";
					 Иначе
						Запрос.Текст = Запрос.Текст+
						" Где
						 | АК_СтатусДоставкиМонтажаОстатки.ДоставкаОстаток>0";
	 
				   КонецЕсли;
				   
	
	Результат = Запрос.Выполнить();
	Объект.Заказы.Загрузить(Результат.Выгрузить());
	
	Организация = Справочники.Организации.НайтиПоНаименованию("ООО ""Пакс Мед""");
КонецПроцедуры


&НаКлиенте
Процедура ЗаказыВыбранПриИзменении(Элемент)
	ТекЗаказ = Элементы.Заказы.ТекущиеДанные.ЗаказКлиента;
	Если Элементы.Заказы.ТекущиеДанные.Выбран тогда
		//ВыполнитьДействие("Добавить");
	Иначе
	//	ВыполнитьДействие("Удалить");
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура Выделить(Команда)
	Для каждого текСтр из Элементы.ДополнительныеУслуги.ВыделенныеСтроки цикл
		ОБъект.ДополнительныеУслуги.НайтиПоИдентификатору(ТекСтр).Выбрана = Истина;		
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура Отменить(Команда)
	Для каждого текСтр из Элементы.ДополнительныеУслуги.ВыделенныеСтроки цикл
		ОБъект.ДополнительныеУслуги.НайтиПоИдентификатору(ТекСтр).Выбрана = ложь;		
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ВыделитьВсе(Команда)
	Для каждого текСтр из ОБъект.ДополнительныеУслуги цикл
		текСтр.Выбрана = Истина;		
	КонецЦикла;
КонецПроцедуры


&НаКлиенте
Процедура ОтменитьВыделениеВсе(Команда)
	Для каждого текСтр из ОБъект.ДополнительныеУслуги цикл
		текСтр.Выбрана = Ложь;		
	КонецЦикла;
КонецПроцедуры


Процедура  ВыгруззитьМашины()
	НомераМашин.Очистить();
	ВремТЗ = ОБъект.ДополнительныеУслуги.Выгрузить();
	ВремТЗ.Свернуть("НомерМашины");
	Для каждого ТекСтр из ВремТЗ цикл
		НС = НомераМашин.Добавить();
		НС.Значение = ТекСтр.НомерМашины;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокумент(Команда)
	ВыгруззитьМашины();
	ВыбЗнач = НомераМашин.ВыбратьЭлемент();
	Если ВыбЗнач = Неопределено тогда
		Возврат;
	конецЕсли;
	
	Форма = ПолучитьФорму("Документ.ЗаказПоставщику.Форма.АК_ФормаДокумента");
	Форма.Объект.Дата = ТекущаяДата();	
	Форма.Объект.Организация = Организация;
	
	Форма.Объект.Партнер = Партнер;
	Форма.ПартнерПриИзменении(Неопределено);
	
	Форма.Объект.Соглашение = Соглашение;
	Форма.СоглашениеПриИзменении(Неопределено);
	Форма.Объект.АК_ТипУслуги = Объект.ТипФормирования;	
	Для Каждого СтрокаТЧ Из Объект.ДополнительныеУслуги Цикл
		Если СтрокаТЧ.Выбрана  и  СтрокаТЧ.НомерМашины = ВыбЗнач.Значение Тогда
			НоваяСтрока = Форма.Объект.ДополнительныеУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			//ак петр 2013 04 18
			Если Объект.ТипФормирования = ПредопределенноеЗначение("Перечисление.АК_ТипУслуги.Монтаж") Тогда
				НоваяСтрока.НормаВремени = ПолучитьНормуВремени(СтрокаТЧ.Номенклатура);	
				НоваяСтрока.ОбщееВремя = НоваяСтрока.НормаВремени * НоваяСтрока.Количество; 
			КонецЕсли;
			
			Форма.Объект.АК_ЗаказчикУслуги = ПОлучитьКлиента(СтрокаТЧ.ЗаказКлиента);
			
		КонецЕсли;	
	КонецЦикла;	
	
	НоваяСтрока = Форма.Объект.Товары.Добавить();
	НоваяСтрока.Номенклатура = ПолучитьНоменклатуру();
	НоваяСтрока.Количество = 1;
	НоваяСтрока.КоличествоУпаковок = 1;
	НоваяСтрока.СтатьяРасходов = ПолучитьСтатьюРасходов(НоваяСтрока.Номенклатура);
	
	Форма.ЗаполнитьЦеныПоСоглашениюСервер();
	Форма.Открыть();
КонецПроцедуры


&НаСервере
Функция ПолучитьСтатьюРасходов(Номенклатура)
	//
	РезультатСтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию(Номенклатура.Наименование);
	
	
	//
	Если НЕ ЗначениеЗаполнено(РезультатСтатьяРасходов) Тогда
		Если Найти(ВРЕГ(Номенклатура.Наименование), "ДОСТАВКА") > 0 Тогда
			РезультатСтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("Доставка");
		КонецЕсли;
	КонецЕсли;	
	
	//
	Если НЕ ЗначениеЗаполнено(РезультатСтатьяРасходов) Тогда
		Если Найти(ВРЕГ(Номенклатура.Наименование), "МОНТАЖ") > 0 Тогда
			РезультатСтатьяРасходов = ПланыВидовХарактеристик.СтатьиРасходов.НайтиПоНаименованию("Монтаж");
		КонецЕсли;
	КонецЕсли;
	
	//
	Возврат РезультатСтатьяРасходов;	
	
КонецФункции

&НаСервере
Функция ПолучитьНормуВремени(Номенклатура)
	Возврат Номенклатура.акВремяСборки;
КонецФункции

функция ПОлучитьКлиента(ЗаказКлиента)
	Возврат ЗаказКлиента.Партнер;	
КонецФункции


Функция  ПолучитьНоменклатуру()
	Если ОБъект.ТипФормирования = Перечисления.АК_ТипУслуги.Доставка тогда
		Возврат Справочники.Номенклатура.НайтиПоНаименованию("Доставка");	
	ИНаче
		Возврат Справочники.Номенклатура.НайтиПоНаименованию("Монтаж");	
	КонецЕсли;
КонецФункции


&НаКлиенте
Процедура ТипФормированияПриИзменении(Элемент)
	ЗаполнитьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
 	Если ЭтаФорма.Параметры.Свойство("ТипОткрытия") тогда
		Объект.ТипФормирования =ЭтаФорма.Параметры.ТипОткрытия;	
		ЭтаФорма.Заголовок = "Формирование документов "+ Объект.ТипФормирования;
	КонецЕсли;
	Если Объект.ТипФормирования = Перечисления.АК_ТипУслуги.Монтаж Тогда
		Элементы.ДополнительныеУслугиПунктПогрузки.Видимость = ЛОЖЬ;	
	КонецЕсли;
	
	Если Объект.ТипФормирования = Перечисления.АК_ТипУслуги.Доставка Тогда
		Элементы.ДинамическийСписокПоискЗаказовНаДоставку.Видимость = ИСТИНА;
		Элементы.ДинамическийСписокПоискЗаказовНаМонтаж.Видимость = ЛОЖЬ;
	ИначеЕсли Объект.ТипФормирования = Перечисления.АК_ТипУслуги.Монтаж Тогда
		Элементы.ДинамическийСписокПоискЗаказовНаДоставку.Видимость = ЛОЖЬ;
		Элементы.ДинамическийСписокПоискЗаказовНаМонтаж.Видимость = ИСТИНА;		
	КонецЕсли;

	
	ЗаполнитьНаСервере();
	
	Если ЭтаФорма.Параметры.Свойство("Заказ") тогда
		ТекЗаказ =  ЭтаФорма.Параметры.Заказ;
		Для каждого ТекСтр из Объект.Заказы цикл
			Если ТекСтр.ЗаказКлиента = ТекЗаказ тогда
				ТекСтр.Выбран = Истина;
			КонецЕсли;
		КонецЦикла;
	//	ВыполнитьДействие("Добавить");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПунктПогрузки(Команда)
	ВыбЗнач = ОткрытьФормуМодально("Справочник.АК_ПунктыНазначения.Форма.ФормаВыбора");
	Если ВыбЗнач <> Неопределено тогда
		Для каждого текСтр из Элементы.ДополнительныеУслуги.ВыделенныеСтроки цикл
			ОБъект.ДополнительныеУслуги.НайтиПоИдентификатору(ТекСтр).ПунктПогрузки = ВыбЗнач;		
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПунктРазгрузки(Команда)
	ВыбЗнач = ОткрытьФормуМодально("Справочник.АК_ПунктыНазначения.Форма.ФормаВыбора");
	Если ВыбЗнач <> Неопределено тогда
		Для каждого текСтр из Элементы.ДополнительныеУслуги.ВыделенныеСтроки цикл
			ОБъект.ДополнительныеУслуги.НайтиПоИдентификатору(ТекСтр).ПунктДоставки = ВыбЗнач;		
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПунктыЗагрузки(Команда)
	ЗаполнитьПогрузкуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПогрузкуНаСервере()
	Для каждого ТекСтр из ОБъект.ДополнительныеУслуги цикл
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Ссылка.АК_ПунктНазначения КАК ПН
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Номенклатура = &Номенклатура
		|	И ЗаказПоставщикуТовары.Характеристика = &Характеристика
		|	И ЗаказПоставщикуТовары.АК_ЗаказКлиента = &АК_ЗаказКлиента";
		
		Запрос.УстановитьПараметр("АК_ЗаказКлиента",ТекСтр.ЗаказКлиента );
		Запрос.УстановитьПараметр("Номенклатура",ТекСтр.Номенклатура );
		Запрос.УстановитьПараметр("Характеристика",ТекСтр.Характеристика );

		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() тогда
			ТекСтр.ПунктПогрузки = Выборка.ПН;	
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДокументу(Команда)
	СоздатьСписокРеализаций();
	ВыбСтр = СписокРеализаций.ВыбратьЭлемент();
	Если ВыбСтр <> Неопределено тогда
		ТекущаяРеализация = ВыбСтр.Значение;
		ПоОТгрузке(ТекущаяРеализация);
	КонецЕсли;
КонецПроцедуры

Процедура ПоОТгрузке(ТекущаяРеализация)
//	ОБъект.ДополнительныеУслуги.Очистить();
	Для каждого ТекСтрока из ТекущаяРеализация.Товары цикл
		новСтр = ОБъект.ДополнительныеУслуги.Добавить();
		ЗаполнитьЗначенияСвойств(новСтр,ТекСтрока);
		новСтр.Количество = ТекСтрока.Количество;
		новСтр.Выбрана = Истина;
		новСтр.ПунктДоставки = ТекЗаказ.АК_ПунктНазначения;
	КонецЦикла;
КонецПроцедуры


процедура СоздатьСписокРеализаций()
	МассивЗаказов = НОвый Массив;
	Для каждого ТекСтрока из Объект.Заказы цикл
		Если ТекСтрока.Выбран тогда
			МассивЗаказов.Добавить(ТекСтрока.ЗаказКлиента);		
		КонецЕсли;
	КонецЦикла;
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	РеализацияТоваровУслуг.Ссылка КАК Документ
	 |ИЗ
	 |	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	 |ГДЕ
	 |	РеализацияТоваровУслуг.ЗаказКлиента в (&ЗаказКлиента)";
	 
	 Запрос.УстановитьПараметр("ЗаказКлиента", МассивЗаказов);
	 
	 Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Документ");;
	 СписокРеализаций.ЗагрузитьЗначения(Результат);
 КонецПроцедуры

/////////   ПОИСК   ///////////// 

//&НаКлиенте
//Процедура ВыполнитьПоиск()
//	Поиск(СтрокаПоискаЗначение,Истина);	  	
//КонецПроцедуры
//	
//&НаСервере
//Процедура Поиск(СтрокаПоискаЗначение,Действие)
//	
//	//	СохраненныеДанные = объект.заказы.Выгрузить();
//		 	СписокЗаказов = объект.заказы.Выгрузить();

////	СписокЗаказов = объект.заказы;
//		
//	РезультатПоиска = новый ТаблицаЗначений;
//	РезультатПоиска.Колонки.Добавить("ЗаказКлиента");
//	
//	Для каждого Строка Из СписокЗаказов Цикл
//		Если Найти(Строка(Строка.ЗаказКлиента),СтрокаПоискаЗначение) <> 0 тогда
//			НоваяСтрока =   РезультатПоиска.Добавить();
//			НоваяСтрока.ЗаказКлиента = Строка.ЗаказКлиента;  		  
//		КонецЕсли;
//	КонецЦикла;
//	
//	Если  РезультатПоиска.Количество() = 0 Тогда
//	//	объект.заказы.Загрузить(СохраненныеДанные); 
//	//	объект.заказы.Загрузить(РезультатПоиска); 
//		Сообщить("Ничего не найдено. ");		
//	Иначе
//		//объект.заказы .Загрузить(РезультатПоиска); 
//		Данные = объект.заказы;
//		Данные.Загрузить(РезультатПоиска);
//		объект.заказы= Данные;
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ОтменитьПоиск(Команда)
//		Поиск(СтрокаПоискаЗначение,Ложь);
//КонецПроцедуры



//&НаКлиенте
//Процедура ОтборСрокВыполенияПриИзменении(Элемент)
//	
//	ОтборыСписковКлиентСервер.ПриИзмененииОтбораПоАктуальности(ДинамическийСписокПоиск, Актуальность, ДатаАктуальности);
//	
//КонецПроцедуры

////&НаКлиенте
////Процедура ОтборСрокВыполенияОчистка(Элемент, СтандартнаяОбработка)
////	
////	ОтборыСписковКлиентСервер.ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаАктуальности, СтандартнаяОбработка);
////	
////КонецПроцедуры

//&НаКлиенте
//Процедура НомерЗаказаПриИзменении(Элемент)
//	// Вставить содержимое обработчика.
//	Если НомерЗаказа = "" Тогда
//		 Актуальность = "ВСЕ"
//		 КонецЕсли;
//	ОтборСрокВыполенияПриИзменении(НомерЗаказа);
//КонецПроцедуры

     &НаКлиенте
Процедура НомерЗаказаПриИзменении(Элемент)	
	 УстановитьОтбор();
 КонецПроцедуры
 

&НаКлиенте
Процедура ПартнерСтрокаПриИзменении(Элемент)
	 УстановитьОтбор();

КонецПроцедуры



&НаКлиенте
Процедура ПунктНазначенияПриИзменении(Элемент)
	 УстановитьОтбор();
КонецПроцедуры


&НаСервере
Процедура УстановитьОтбор()
	ПараметрыОтбора = Новый Соответствие();
	ПараметрыОтбора.Вставить("ЗаказКлиента", НомерЗаказа);	
	ПараметрыОтбора.Вставить("Партнер", Партнер);
	ПараметрыОтбора.Вставить("ПунктНазначения", ПунктНазначения);
	УстановитьОтборСписка(ПараметрыОтбора);	
КонецПроцедуры	

&НаСервере
Процедура УстановитьОтборСписка(ПараметрыОтбора)
	
	Если объект.типФормирования = Перечисления.АК_ТипУслуги.Доставка  Тогда
		ДинамическийСписокПоиск =ДинамическийСписокПоискЗаказовНаДоставку; 	
	ИначеЕсли объект.типФормирования = Перечисления.АК_ТипУслуги.Монтаж Тогда
		ДинамическийСписокПоиск = ДинамическийСписокПоискЗаказовНаМонтаж; 	
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДинамическийСписокПоиск.Отбор, "Номер");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДинамическийСписокПоиск.Отбор, "Партнер");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ДинамическийСписокПоиск.Отбор, "АК_ПунктНазначения");


	Если НЕ ПустаяСтрока(ПараметрыОтбора["ЗаказКлиента"]) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ДинамическийСписокПоиск.Отбор, "Номер", ПараметрыОтбора["ЗаказКлиента"],ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;
	
	Если ПараметрыОтбора["Партнер"]<> Справочники.Партнеры.ПустаяСсылка() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ДинамическийСписокПоиск.Отбор, "Партнер", ПараметрыОтбора["Партнер"],ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;

	
	Если ПараметрыОтбора["ПунктНазначения"]<>Справочники.АК_ПунктыНазначения.ПустаяСсылка() Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ДинамическийСписокПоиск.Отбор, "АК_ПунктНазначения", ПараметрыОтбора["ПунктНазначения"],ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
         
КонецПроцедуры


&НаКлиенте
Процедура ДинамическийСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)	
	ЗаказКлиентаСсылка = Элемент.ДанныеСтроки(ВыбраннаяСтрока).Ссылка;
	ЗаказКлиента = Новый Структура("Ключ", ЗаказКлиентаСсылка);
	ОткрытьФорму("Документ.ЗаказКлиента.ФормаОбъекта",ЗаказКлиента);	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказ(Команда)
		 ВыполнитьДействие("Добавить",СсылкаНаЗаказКлиента);

КонецПроцедуры



&НаСервере
Процедура ВыполнитьДействие(Действие,ТекЗаказ)
	Если Действие = "Добавить" тогда
		
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	АК_СтатусДоставкиМонтажаОстатки.ЗаказКлиента,
		|	АК_СтатусДоставкиМонтажаОстатки.Номенклатура,
		|	АК_СтатусДоставкиМонтажаОстатки.Характеристика,
		|	АК_СтатусДоставкиМонтажаОстатки.МонтажОстаток КАК Монтаж,
		|	АК_СтатусДоставкиМонтажаОстатки.ДоставкаОстаток КАК Доставка
		|ИЗ
		|	РегистрНакопления.АК_СтатусДоставкиМонтажа.Остатки(, ЗаказКлиента = &ЗаказКлиента) КАК АК_СтатусДоставкиМонтажаОстатки";
		
		Запрос.УстановитьПараметр("ЗаказКлиента", ТекЗаказ);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			новСтр = ОБъект.ДополнительныеУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(новСтр,Выборка);
			новСтр.Количество = ?(Объект.ТипФормирования = Перечисления.АК_ТипУслуги.Доставка,Выборка.Доставка,Выборка.Монтаж);
			новСтр.Выбрана = Истина;
			новСтр.ПунктДоставки = Выборка.ЗаказКлиента.АК_ПунктНазначения;
		КонецЦикла;
	Иначе
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗаказКлиента",ТекЗаказ);
		ВыбСтр = ОБъект.ДополнительныеУслуги.НайтиСтроки(СтруктураОтбора);
		Для каждого текСтр из ВыбСтр цикл
			ОБъект.ДополнительныеУслуги.Удалить(текСтр);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДинамическийСписокПоискЗаказовНаДоставкуПриАктивизацииСтроки(Элемент)	
	
	попытка
		СсылкаНаЗаказКлиента = Элемент.текущиеДанные.ссылка; 
	Исключение
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриЗакрытии()
	ОБъект.ДополнительныеУслуги.Очистить();
КонецПроцедуры


&НаКлиенте
Процедура ДинамическийСписокПоискЗаказовНаМонтажПриАктивизацииСтроки(Элемент)
	
	попытка
		СсылкаНаЗаказКлиента = Элемент.текущиеДанные.ссылка; 
	Исключение
	КонецПопытки;
КонецПроцедуры


&НаКлиенте
Процедура ДополнительныеУслугиПриАктивизацииСтроки(Элемент)
	попытка
		ДопУслугиСсылкаНаЗаказ= Элемент.ТекущиеДанные.ЗаказКлиента;
	Исключение
	КонецПопытки;
КонецПроцедуры              


&НаКлиенте
Процедура УдалитьЗаказ(Команда)
	ВыполнитьДействие("Удалить",ДопУслугиСсылкаНаЗаказ);
КонецПроцедуры

