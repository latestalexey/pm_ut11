&НаКлиенте
Перем ТекущееКоличество; //кеш текущего количества для возможности отката изменения количества

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СхемаКомпоновкиДанных = Обработки.ПомощникОформленияСкладскихАктов.ПолучитьМакет("ОтборНоменклатуры");
	URLСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемы);
	ОтборНоменклатуры.Инициализировать(ИсточникНастроек);
	ОтборНоменклатуры.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	АктивнаяСтраница = "ТоварыРаспределение";
	ДокументОснование = Неопределено;
	СтруктураОснования = Неопределено;
	
	Если Параметры.Свойство("Основание", ДокументОснование) Тогда
		
		Объект.ДокументОснование = ДокументОснование;
		
		ОснованиеПриИзмененииСервер();
	ИначеЕсли Параметры.Свойство("СтруктураОснования", СтруктураОснования) Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, СтруктураОснования);
		
		ОснованиеПриИзмененииСервер(Ложь);
		
	ИначеЕсли Не Параметры.Свойство("АвтоТест") Тогда	
		ТекстСообщения = НСтр("ru='Не предусмотрено непосредственное открытие формы.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	ЗаполнитьЗначенияПоУмолчанию();
	
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Склад", Объект.Склад));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТекущееОснование = Объект.ДокументОснование;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЕстьНеОформленныеОперации() Тогда
		ТекстВопроса = НСтр("ru='Присутствуют товары, распределенные по организациям, или зачтенные по ""пересортице (порче)"", по которым еще не сформированы документы.
		|Вы хотите закрыть форму, не сохранив эту информацию?'");
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Закрыть форму'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Продолжить оформление актов'"));
		
		Ответ = Вопрос(ТекстВопроса,СписокКнопок,,КодВозвратаДиалога.Нет);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ДоступныеОрганизации = Настройки.Получить("ДоступныеОрганизации");
	
	ДоступныеОрганизации.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	
	Для каждого СтрСписка из ДоступныеОрганизации Цикл
		НоваяСтрока = Объект.Организации.Добавить();
		НоваяСтрока.Организация = СтрСписка.Значение;
	КонецЦикла;
	
	Объект.ВыбранныеОрганизации.Загрузить(Объект.Организации.Выгрузить());
	
	ЗаполнитьПоПересчетамСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ТекущаяТаблица = ""; 
	
	Если ТекущаяСтраница = Элементы.СтраницаТовары Тогда
		ТекущаяТаблица = "ТоварыРаспределение";
		Страница = ТекущаяТаблица;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПересортица Тогда
		ТекущаяТаблица = "ТоварыРаспределениеПересортица";
		Страница = "Пересортица";
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПорча Тогда
		ТекущаяТаблица = "ТоварыРаспределениеПорча";
		Страница = "Порча";
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДокументы Тогда 
		ТекущаяТаблица = "ДокументыКОформлению";
		Страница = ТекущаяТаблица;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяТаблица) Тогда
		
		ГруппаСтраницыПриСменеСтраницыСервер(ТекущаяТаблица);
		
	КонецЕсли;
	
	АктивнаяСтраница = Страница;
	
	УстановитьТекущиеСтрокиТЧ(Страница);
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = СписокСовпадающейНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокНоменклатурыПриИзменении(Элемент)
	УстановитьОтборСтрокПоНоменклатуре();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтрокНоменклатурыОчистка(Элемент, СтандартнаяОбработка)
	УстановитьОтборСтрокПоНоменклатуре();
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОрганизацииПриИзменении(Элемент)
	СинхронизироватьСписокИТЧОрганизации()
КонецПроцедуры

&НаКлиенте
Процедура ДоступныеОрганизацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДоступныеОрганизации.Очистить();
	СинхронизироватьСписокИТЧОрганизации()

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ К СПИСАНИЮ

&НаКлиенте
Процедура ТоварыКСписаниюПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ТоварыРаспределениеСписание.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекущиеДанные.КлючСвязи);
	Иначе
		Элементы.ТоварыРаспределениеСписание.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКСписаниюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКСписаниюПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ РАСПРЕДЕЛЕНИЕ СПИСАНИЕ

&НаКлиенте
Процедура ТоварыРаспределениеСписаниеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущееКоличество = Элемент.ТекущиеДанные.Количество;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРаспределениеСписаниеКоличествоПриИзменении(Элемент)
	ТекущиеДанныеРаспределение = Элементы.ТоварыРаспределениеСписание.ТекущиеДанные;
	ТекущиеДанныеКОформлению = Элементы.ТоварыКСписанию.ТекущиеДанные;
		
	ПриИзмененииКоличестваРаспределенияКОформлению(ТекущиеДанныеКОформлению, ТекущиеДанныеРаспределение, "Списание");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРаспределениеСписаниеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРаспределениеСписаниеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ К ОПРИХОДОВАНИЮ

&НаКлиенте
Процедура ТоварыКОприходованиюПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ТоварыРаспределениеОприходование.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекущиеДанные.КлючСвязи);
	Иначе
		Элементы.ТоварыРаспределениеОприходование.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКОприходованиюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКОприходованиюПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ РАСПРЕДЕЛЕНИЕ ОПРИХОДОВАНИЕ

&НаКлиенте
Процедура ТоварыРаспределениеОприходованиеКоличествоПриИзменении(Элемент)
	ТекущиеДанныеРаспределение = Элементы.ТоварыРаспределениеОприходование.ТекущиеДанные;
	ТекущиеДанныеКОформлению = Элементы.ТоварыКОприходованию.ТекущиеДанные;
		
	ПриИзмененииКоличестваРаспределенияКОформлению(ТекущиеДанныеКОформлению, ТекущиеДанныеРаспределение, "Оприходование");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРаспределениеОприходованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущееКоличество = Элемент.ТекущиеДанные.Количество;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРаспределениеОприходованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРаспределениеОприходованиеПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ ПЕРЕСОРТИЦА

&НаКлиенте
Процедура ТоварыПересортицаПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ТоварыРаспределениеПересортица.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекущиеДанные.КлючСвязи);
	Иначе
		Элементы.ТоварыРаспределениеПересортица.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПересортицаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПересортицаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ПересортицаПорчаПриВыбореСтроки(ТекущиеДанные, "Пересортица");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПересортицаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	СтрокаПересортицы = Элемент.ТекущиеДанные;
	
	ПараметрыЗачета = Новый Структура;
	ПараметрыЗачета.Вставить("КЗачету",0);
	ПараметрыЗачета.Вставить("ОчищатьРаспределениеСписание",Ложь);
	ПараметрыЗачета.Вставить("ОчищатьРаспределениеОприходование",Ложь);
	ПараметрыЗачета.Вставить("ОчищатьРаспределениеОперации",Истина);
	
	ОбработатьЗачетПересортицыПорчи(0,0,СтрокаПересортицы.КлючСвязи, ПараметрыЗачета, Истина, "Пересортица", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПересортицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ РАСПРЕДЕЛЕНИЕ ПЕРЕСОРТИЦА

&НаКлиенте
Процедура ТоварыРаспределениеПересортицаКоличествоПриИзменении(Элемент)
	ТекущиеДанныеРаспределение = Элементы.ТоварыРаспределениеПересортица.ТекущиеДанные;
	ТекущиеДанныеКОформлению = Элементы.ТоварыПересортица.ТекущиеДанные;
		
	ПриИзмененииКоличестваРаспределенияКПересортицаПорча(ТекущиеДанныеКОформлению, ТекущиеДанныеРаспределение, "Пересортица");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРаспределениеПересортицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущееКоличество = Элемент.ТекущиеДанные.Количество;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРаспределениеПересортицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыРаспределениеПересортицаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ ПОРЧА

&НаКлиенте
Процедура ТоварыПорчаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ПересортицаПорчаПриВыбореСтроки(ТекущиеДанные, "Порча");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорчаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	СтрокаПорчи = Элемент.ТекущиеДанные;
	
	ПараметрыЗачета = Новый Структура;
	ПараметрыЗачета.Вставить("КЗачету",0);
	ПараметрыЗачета.Вставить("ОчищатьРаспределениеСписание",Ложь);
	ПараметрыЗачета.Вставить("ОчищатьРаспределениеОприходование",Ложь);
	ПараметрыЗачета.Вставить("ОчищатьРаспределениеОперации",Истина);
	
	ОбработатьЗачетПересортицыПорчи(0,0,СтрокаПорчи.КлючСвязи, ПараметрыЗачета, Истина, "Порча", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПорчаПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ТоварыРаспределениеПорча.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекущиеДанные.КлючСвязи);
	Иначе
		Элементы.ТоварыРаспределениеПорча.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ТОВАРЫ РАСПРЕДЕЛЕНИЕ ПОРЧА

&НаКлиенте
Процедура ТоварыРаспределениеПорчаКоличествоПриИзменении(Элемент)
	ТекущиеДанныеРаспределение = Элементы.ТоварыРаспределениеПорча.ТекущиеДанные;
	ТекущиеДанныеКОформлению = Элементы.ТоварыПорча.ТекущиеДанные;
		
	ПриИзмененииКоличестваРаспределенияКПересортицаПорча(ТекущиеДанныеКОформлению, ТекущиеДанныеРаспределение, "Порча");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ОПЕРАЦИИ К ОФОРМЛЕНИЮ

&НаКлиенте
Процедура ОперацииКОформлениюПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработатьАктивациюСтрокиОперацииКОформлению",0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииКОформлениюПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ОчиститьРаспределениеПоОрганизации(ТекущиеДанные.Организация, ТипОперацииПоПредставлению(ТекущиеДанные.ТипОперации), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииКОформлениюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОперацииКОформлениюПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ СОСТАВ ОПЕРАЦИЙ

&НаКлиенте
Процедура СоставОперацийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина; 
	УдалитьСтрокуОперации(Элемент.ТекущаяСтрока,Элементы.ОперацииКОформлению.ТекущаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоставОперацийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СоставОперацийПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаполнитьКОформлению(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстСообщения = НСтр("ru='Перед заполнением необходимо указать инвентаризацию.'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ЕстьРаспределения() Тогда
		ТекстВопроса = НСтр("ru='Есть товары, распределенные по организациям, но по которым еще не сформированы документы.
							|При заполнении информация об этом распределении будет потеряна. Продолжить?'");
		Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПоПересчетамСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьПорчуТоваров(Команда)
	
	ОчиститьСообщения();
	ЗаполнитьТабличнуюЧастьПорча();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстаткиОрганизаций(Команда)
	КомандаОбновитьОстаткиОрганизацийСервер();
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПорчиПоОрганизациям(Команда)
	ТекущиеДанные = Элементы.ТоварыПорча.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		РаспределитьПересортицыПорчиПоОрганизациям("Порча");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПересортицыПоОрганизациям(Команда)
	ТекущиеДанные = Элементы.ТоварыПересортица.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		РаспределитьПересортицыПорчиПоОрганизациям("Пересортица");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьСписанияПоОрганизациям(Команда)
	ТекущиеДанные = Элементы.ТоварыКСписанию.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если Объект.Организации.Количество() = 1 Тогда
			Если Объект.ВыбранныеОрганизации.Количество() <> 1 Тогда
				Объект.ВыбранныеОрганизации.Очистить();
				НоваяСтрока = Объект.ВыбранныеОрганизации.Добавить();
				НоваяСтрока.Организация = Объект.Организации[0].Организация;
			КонецЕсли;
			
			Адрес = Неопределено;
			
		Иначе
			
			Адрес = ПоместитьОрганизацииВоВременноеХранилище();
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("АдресОрганизаций", Адрес);
			
			Ответ = ОткрытьФормуМодально("Обработка.ПомощникОформленияСкладскихАктов.Форма.ФормаВыбораОрганизаций",ПараметрыФормы,ЭтаФорма);
			
			Если Ответ <> КодВозвратаДиалога.ОК Тогда
				Возврат;	
			КонецЕсли;
		КонецЕсли;
		
		РаспределитьСписанияПоОрганизациямСервер(Адрес);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьОперацию(Команда)
	ТекущиеДанные = Элементы.ОперацииКОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаДокумент = Неопределено;
	Если ТипОперацииПоПредставлению(ТекущиеДанные.ТипОперации) = "Списание" Тогда
		Если ЕстьСписаниеПоОрганизации(ТекущиеДанные.Организация, Объект.ДокументОснование) Тогда
			
			ТекстВопроса = НСтр("ru='По организации ""%Организация%"" уже есть документы ""Списание товаров"" по этой инвентаризации товаров.
			|Создать новый документ или добавить товары в имеющийся документ?'");
			
			ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Организация%",ТекущиеДанные.Организация);
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Создать'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Добавить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			
			Ответ = Вопрос(ТекстВопроса,СписокКнопок,,КодВозвратаДиалога.Нет);
			
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Организация",ТекущиеДанные.Организация);
				СтруктураОтбора.Вставить("ДокументОснование",Объект.ДокументОснование);
				СтруктураОтбора.Вставить("Проведен",Истина);
				
				СсылкаНаДокумент = ОткрытьФормуМодально("Документ.СписаниеНедостачТоваров.Форма.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),ЭтаФорма);
				
				Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ВерсияДанных = НовоеСписаниеНедостачТоваров(ТекущиеДанные.Организация,СсылкаНаДокумент);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ",СсылкаНаДокумент);
		ПараметрыФормы.Вставить("ЗапретитьИзменятьТовары",Истина);
		ПараметрыФормы.Вставить("АдресДанныхВХранилище",АдресДанныхДокументаВХранилище);
		
		Форма = ПолучитьФорму("Документ.СписаниеНедостачТоваров.Форма.ФормаДокумента",ПараметрыФормы ,ЭтаФорма);
		Форма.Модифицированность = ЗначениеЗаполнено(СсылкаНаДокумент);
		Форма.ОткрытьМодально();
		
		Если Форма.Объект.ВерсияДанных <> ВерсияДанных
			И Форма.Объект.Проведен Тогда
			СторноКОформлению(ТекущиеДанные.Организация,ТекущиеДанные.КлючСвязи,"Списание");
		КонецЕсли;
	ИначеЕсли ТипОперацииПоПредставлению(ТекущиеДанные.ТипОперации) = "Оприходование" Тогда
		
		Если ЕстьОприходованиеПоОрганизации(ТекущиеДанные.Организация, Объект.ДокументОснование) Тогда
			ТекстВопроса = НСтр("ru='По организации ""%Организация%"" уже есть документы ""Оприходование товаров"" по этой инвентаризации товаров.
			|Создать новый документ или добавить товары в имеющийся документ?'");
			
			ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Организация%",ТекущиеДанные.Организация);
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Создать'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Добавить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			
			Ответ = Вопрос(ТекстВопроса,СписокКнопок,,КодВозвратаДиалога.Нет);
			
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Организация",ТекущиеДанные.Организация);
				СтруктураОтбора.Вставить("ДокументОснование",Объект.ДокументОснование);
				СтруктураОтбора.Вставить("Проведен",Истина);
				
				СсылкаНаДокумент = ОткрытьФормуМодально("Документ.ОприходованиеИзлишковТоваров.Форма.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),ЭтаФорма);
				
				Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВерсияДанных = НовоеОприходованиеИзлишковТоваров(ТекущиеДанные.Организация,СсылкаНаДокумент);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ",СсылкаНаДокумент);
		ПараметрыФормы.Вставить("ЗапретитьИзменятьТовары",Истина);
		ПараметрыФормы.Вставить("АдресДанныхВХранилище",АдресДанныхДокументаВХранилище);
		
		Форма = ПолучитьФорму("Документ.ОприходованиеИзлишковТоваров.Форма.ФормаДокумента",ПараметрыФормы,ЭтаФорма);
		Форма.Модифицированность = ЗначениеЗаполнено(СсылкаНаДокумент);
		Форма.ОткрытьМодально();
		
		Если Форма.Объект.ВерсияДанных <> ВерсияДанных 
			И Форма.Объект.Проведен Тогда
			СторноКОформлению(ТекущиеДанные.Организация,ТекущиеДанные.КлючСвязи,"Оприходование");
		КонецЕсли;
	ИначеЕсли ТипОперацииПоПредставлению(ТекущиеДанные.ТипОперации) = "Пересортица" Тогда
		
		Если ЕстьПересортицаПоОрганизации(ТекущиеДанные.Организация, Объект.ДокументОснование) Тогда
			ТекстВопроса = НСтр("ru='По организации ""%Организация%"" уже есть документы ""Пересортица товаров"" по этой инвентаризации товаров.
			|Создать новый документ или добавить товары в имеющийся документ?'");
			
			ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Организация%",ТекущиеДанные.Организация);
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Создать'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Добавить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			
			Ответ = Вопрос(ТекстВопроса,СписокКнопок,,КодВозвратаДиалога.Нет);
			
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Организация",ТекущиеДанные.Организация);
				СтруктураОтбора.Вставить("ДокументОснование",Объект.ДокументОснование);
				СтруктураОтбора.Вставить("Проведен",Истина);
				
				СсылкаНаДокумент = ОткрытьФормуМодально("Документ.ПересортицаТоваров.Форма.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),ЭтаФорма);
				
				Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВерсияДанных = НоваяПересортицаТоваров(ТекущиеДанные.Организация,СсылкаНаДокумент);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ",СсылкаНаДокумент);
		ПараметрыФормы.Вставить("ЗапретитьИзменятьТовары",Истина);
		ПараметрыФормы.Вставить("АдресДанныхВХранилище",АдресДанныхДокументаВХранилище);
		
		Форма = ПолучитьФорму("Документ.ПересортицаТоваров.Форма.ФормаДокумента",ПараметрыФормы,ЭтаФорма);
		Форма.Модифицированность = ЗначениеЗаполнено(СсылкаНаДокумент);
		Форма.ОткрытьМодально();
		
		Если Форма.Объект.ВерсияДанных <> ВерсияДанных
			И Форма.Объект.Проведен Тогда
			СторноПересортицыПорчи(ТекущиеДанные.Организация,ТекущиеДанные.КлючСвязи, "Пересортица");
		КонецЕсли;
		
	ИначеЕсли ТипОперацииПоПредставлению(ТекущиеДанные.ТипОперации) = "Порча" Тогда
		ПроверитьГрадацииКачестваНоменклатуры(ТекущиеДанные.КлючСвязи);
		Если ЕстьПорчиПоОрганизации(ТекущиеДанные.Организация, Объект.ДокументОснование) Тогда
			ТекстВопроса = НСтр("ru='По организации ""%Организация%"" уже есть документы ""Порча товаров"" по этой инвентаризации товаров.
			|Создать новый документ или добавить товары в имеющийся документ?'");
			
			ТекстВопроса = СтрЗаменить(ТекстВопроса,"%Организация%",ТекущиеДанные.Организация);
			
			СписокКнопок = Новый СписокЗначений;
			СписокКнопок.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Создать'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Добавить'"));
			СписокКнопок.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			
			Ответ = Вопрос(ТекстВопроса,СписокКнопок,,КодВозвратаДиалога.Нет);
			
			Если Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("Организация",ТекущиеДанные.Организация);
				СтруктураОтбора.Вставить("ДокументОснование",Объект.ДокументОснование);
				СтруктураОтбора.Вставить("Проведен",Истина);
				
				СсылкаНаДокумент = ОткрытьФормуМодально("Документ.ПорчаТоваров.Форма.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),ЭтаФорма);
				
				Если Не ЗначениеЗаполнено(СсылкаНаДокумент) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВерсияДанных = НоваяПорчаТоваров(ТекущиеДанные.Организация,СсылкаНаДокумент);
		
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ",СсылкаНаДокумент);
		ПараметрыФормы.Вставить("ЗапретитьИзменятьТовары",Истина);
		ПараметрыФормы.Вставить("АдресДанныхВХранилище",АдресДанныхДокументаВХранилище);
		
		Форма = ПолучитьФорму("Документ.ПорчаТоваров.Форма.ФормаДокумента",ПараметрыФормы,ЭтаФорма);
		Форма.Модифицированность = ЗначениеЗаполнено(СсылкаНаДокумент);
		Форма.ОткрытьМодально();
		
		Если Форма.Объект.ВерсияДанных <> ВерсияДанных
			И Форма.Объект.Проведен Тогда
			СторноПересортицыПорчи(ТекущиеДанные.Организация,ТекущиеДанные.КлючСвязи, "Порча");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОприходованияПоОрганизациям(Команда)
	ТекущиеДанные = Элементы.ТоварыКОприходованию.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ДоступныеОрганизации.Количество() = 1 Тогда
			Организация = ДоступныеОрганизации[0].Значение;
		Иначе
			ТекстЗаголовка = НСтр("ru='Выберите организацию'");
			ЭлементСписка = ДоступныеОрганизации.ВыбратьЭлемент(ТекстЗаголовка);
			Если ЭлементСписка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Организация = ЭлементСписка.Значение;
		КонецЕсли;
		
		РаспределитьОприходованияПоОрганизациямСервер(Организация);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьПоПорче(Команда)
	ЗачестьПоПересортицеПорче("Порча")
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьПоПересортице(Команда)
	ЗачестьПоПересортицеПорче("Пересортица")
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Заполнение и инициализация

&НаСервере
Процедура ЗаполнитьЗначенияПоУмолчанию()
	
	Объект.Склад = ЗначениеНастроекПовтИсп.ПолучитьСкладПоУмолчанию(Объект.Склад);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ГруппаСтраницыПриСменеСтраницыСервер(ТекущаяТаблица)
	
	Если ТекущаяТаблица = "ТоварыРаспределение"
		И АктивнаяСтраница <> "ДокументыКОформлению" Тогда
		
		СкорректироватьОстаткиВТоварыРаспределение(АктивнаяСтраница);
		ЗаполнитьПересортицаПорчаПоТоварыРаспределение(АктивнаяСтраница);
		СкорректироватьОстаткиВТоварыРаспределениеПересортицаПорча(АктивнаяСтраница);
		
		//очистим ТЧ, чтобы уменьшить трафик при контекстных вызовах сервера
		Объект.СоставОпераций.Очистить();
		Объект.ОперацииКОформлению.Очистить();
		
	ИначеЕсли   ТекущаяТаблица = "ТоварыРаспределениеПересортица" Тогда
		
		Если АктивнаяСтраница = "ТоварыРаспределение" Тогда
			ЗаполнитьПересортицаПорчаПоТоварыРаспределение("Пересортица");
			ЗаполнитьПересортицаПорчаПоТоварыРаспределение("Порча");
		ИначеЕсли АктивнаяСтраница = "Порча" Тогда
			СкорректироватьОстаткиВТоварыРаспределениеПересортицаПорча("Пересортица");
			СкорректироватьОстаткиВТоварыРаспределение(АктивнаяСтраница);
		КонецЕсли;
		//очистим ТЧ, чтобы уменьшить трафик при контекстных вызовах сервера
		Объект.СоставОпераций.Очистить();
		Объект.ОперацииКОформлению.Очистить();
		
	ИначеЕсли ТекущаяТаблица = "ТоварыРаспределениеПорча" Тогда
		
		Если АктивнаяСтраница = "ТоварыРаспределение" Тогда
			ЗаполнитьПересортицаПорчаПоТоварыРаспределение("Порча");
			ЗаполнитьПересортицаПорчаПоТоварыРаспределение("Пересортица");
		ИначеЕсли АктивнаяСтраница = "Пересортица" Тогда
			СкорректироватьОстаткиВТоварыРаспределениеПересортицаПорча("Порча");
			СкорректироватьОстаткиВТоварыРаспределение(АктивнаяСтраница);
		КонецЕсли;
		//очистим ТЧ, чтобы уменьшить трафик при контекстных вызовах сервера
		Объект.СоставОпераций.Очистить();
		Объект.ОперацииКОформлению.Очистить();
		
	ИначеЕсли ТекущаяТаблица = "ДокументыКОформлению" Тогда
		
		СформироватьОперацииКОформлению();
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваРаспределенияКОформлению(СтрокаКОформлению,СтрокаРаспределение,ТипОперации)
	
	Если СтрокаРаспределение.Количество = ТекущееКоличество тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ТипОперации = "Оприходование" Тогда
		
		МаксимальноеКоличество = СтрокаКОформлению.КоличествоНеРаспределено	+ ТекущееКоличество;
		
	Иначе
		Если СтрокаРаспределение.Остаток < 0 Тогда
			МаксимальноеКоличество = 0;
		Иначе
			МаксимальноеКоличество = Мин(СтрокаКОформлению.КоличествоНеРаспределено, СтрокаРаспределение.Остаток);
			МаксимальноеКоличество = МаксимальноеКоличество + ТекущееКоличество;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаРаспределение.Количество > МаксимальноеКоличество Тогда
		
		СтрокаРаспределение.Количество = МаксимальноеКоличество;
		
		Если СтрокаРаспределение.Количество = ТекущееКоличество Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если ТипОперации = "Оприходование" Тогда
		СтрокаРаспределение.Остаток = СтрокаРаспределение.Остаток - ТекущееКоличество + СтрокаРаспределение.Количество;
	Иначе
		СтрокаРаспределение.Остаток = СтрокаРаспределение.Остаток + ТекущееКоличество - СтрокаРаспределение.Количество;
	КонецЕсли;
	
	СтрокаРаспределение.Распределено = (СтрокаРаспределение.Количество <> 0 );
	СтрокаРаспределение.Стоимость = СтрокаРаспределение.Количество * СтрокаКОформлению.Цена;
	СтрокаРаспределение.Модифицирована = Истина;
	
	СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.КоличествоНеРаспределено + ТекущееКоличество - СтрокаРаспределение.Количество;
	СтрокаКОформлению.КоличествоРаспределено = СтрокаКОформлению.КоличествоРаспределено - ТекущееКоличество + СтрокаРаспределение.Количество;
	
	ТекущееКоличество = СтрокаРаспределение.Количество;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличестваРаспределенияКПересортицаПорча(СтрокаКОформлению,СтрокаРаспределение, ВидОперации)
	
	Если СтрокаРаспределение.Количество = ТекущееКоличество тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если СтрокаРаспределение.ОстатокСписание < 0 Тогда
		МаксимальноеКоличество = 0;
	Иначе
		МаксимальноеКоличество = Мин(СтрокаКОформлению.КоличествоНеРаспределено, СтрокаРаспределение.ОстатокСписание);
		МаксимальноеКоличество = МаксимальноеКоличество + ТекущееКоличество;
	КонецЕсли;
	
	Если СтрокаРаспределение.Количество > МаксимальноеКоличество Тогда
		
		СтрокаРаспределение.Количество = МаксимальноеКоличество;
		
		Если СтрокаРаспределение.Количество = ТекущееКоличество Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	
	
	СтрокаРаспределение.ОстатокОприходование = СтрокаРаспределение.ОстатокОприходование - ТекущееКоличество + СтрокаРаспределение.Количество;
	СтрокаРаспределение.ОстатокСписание = СтрокаРаспределение.ОстатокСписание + ТекущееКоличество - СтрокаРаспределение.Количество;
	
	СтрокаРаспределение.Распределено = (СтрокаРаспределение.Количество <> 0 );
	СтрокаРаспределение.Модифицирована = Истина;
	
	СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.КоличествоНеРаспределено + ТекущееКоличество - СтрокаРаспределение.Количество;
	СтрокаКОформлению.КоличествоРаспределено = СтрокаКОформлению.КоличествоРаспределено - ТекущееКоличество + СтрокаРаспределение.Количество;
	
	ТекущееКоличество = СтрокаРаспределение.Количество;
КонецПроцедуры

&НаКлиенте
Процедура ПересортицаПорчаПриВыбореСтроки(СтрокаОперации, ВидОперации)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",СтрокаОперации.НоменклатураСписание);
	СтруктураПоиска.Вставить("Характеристика", СтрокаОперации.ХарактеристикаСписание);
	
	СтрокиСписания = Объект.ТоварыКСписанию.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиСписания.Количество() > 0 Тогда
		ТекущиеДанныеСписания 		 = СтрокиСписания[0];
		
		КлючСписания 				 = ТекущиеДанныеСписания.КлючСвязи;
		КСписаниюВсего 				 = ТекущиеДанныеСписания.Количество + СтрокаОперации.Количество;
		КСписаниюНеРаспределено 	 = ТекущиеДанныеСписания.КоличествоНеРаспределено + СтрокаОперации.Количество;
	Иначе
		КлючСписания = 0;
		КСписаниюВсего = СтрокаОперации.Количество;
		КСписаниюНеРаспределено = СтрокаОперации.Количество;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Номенклатура",СтрокаОперации.НоменклатураОприходование);
	СтруктураПоиска.Вставить("Характеристика", СтрокаОперации.ХарактеристикаОприходование);
	
	СтрокиОприходования = Объект.ТоварыКОприходованию.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиОприходования.Количество() > 0 Тогда
		ТекущиеДанныеОприходования = СтрокиОприходования[0];
		
		КлючОприходования 			 = ТекущиеДанныеОприходования.КлючСвязи;
		КОприходованиюВсего 		 = ТекущиеДанныеОприходования.Количество + СтрокаОперации.Количество;
		КОприходованиюНеРаспределено = ТекущиеДанныеОприходования.КоличествоНеРаспределено + СтрокаОперации.Количество;
	Иначе
		КлючОприходования = 0;
		КОприходованиюВсего = СтрокаОперации.Количество;
		КОприходованиюНеРаспределено = СтрокаОперации.Количество;
	КонецЕсли;
	
	Зачтено = СтрокаОперации.КоличествоРаспределено;
	
	КЗачетуВсего 				 = СтрокаОперации.КоличествоНеРаспределено;
	КЗачетуРаспределено 		 = СтрокаОперации.КоличествоРаспределено;
	
	СтрутураПараметров = Новый Структура;
	СтрутураПараметров.Вставить("КОприходованиюВсего",КОприходованиюВсего);
	СтрутураПараметров.Вставить("КОприходованиюНеРаспределено",КОприходованиюНеРаспределено);
	СтрутураПараметров.Вставить("КСписаниюВсего",КСписаниюВсего);
	СтрутураПараметров.Вставить("КСписаниюНеРаспределено",КСписаниюНеРаспределено);
	СтрутураПараметров.Вставить("КЗачетуВсего",КЗачетуВсего);
	СтрутураПараметров.Вставить("КЗачетуРаспределено",КЗачетуРаспределено);
	СтрутураПараметров.Вставить("ВидОперации",ВидОперации);
	Результат = ОткрытьФормуМодально("Обработка.ПомощникОформленияСкладскихАктов.Форма.ФормаУказанияКоличестваЗачета",СтрутураПараметров,ЭтаФорма);
	
	Если Результат <> Неопределено
		И Результат.КЗачету <> Зачтено Тогда
		
		ОбработатьЗачетПересортицыПорчи(КлючСписания,КлючОприходования,СтрокаОперации.КлючСвязи, Результат, Истина, ВидОперации);
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ОбработатьАктивациюСтрокиОперацииКОформлению()
	
	ТекущиеДанные = Элементы.ОперацииКОформлению.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.СоставОпераций.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", ТекущиеДанные.КлючСвязи);
	Иначе
		Элементы.СоставОпераций.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", 0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущиеСтрокиТЧ(Страница)
	Если Страница = "Порча"
		И Объект.ТоварыПорча.Количество() > 0
		И Элементы.ТоварыПорча.ТекущаяСтрока = Неопределено Тогда
		Элементы.ТоварыПорча.ТекущаяСтрока = Объект.ТоварыПорча[0].ПолучитьИдентификатор();
		Элементы.ТоварыРаспределениеПорча.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Объект.ТоварыПорча[0].КлючСвязи);
	ИначеЕсли Страница = "Пересортица"
		И Объект.ТоварыПересортица.Количество() > 0
		И Элементы.ТоварыПересортица.ТекущаяСтрока = Неопределено Тогда
		Элементы.ТоварыПересортица.ТекущаяСтрока = Объект.ТоварыПересортица[0].ПолучитьИдентификатор();
		Элементы.ТоварыРаспределениеПересортица.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Объект.ТоварыПересортица[0].КлючСвязи);
	ИначеЕсли Страница = "ДокументыКОформлению"
		И Объект.ОперацииКОформлению.Количество() > 0
		И Элементы.ОперацииКОформлению.ТекущаяСтрока = Неопределено Тогда
		Элементы.ОперацииКОформлению.ТекущаяСтрока = Объект.ОперацииКОформлению[0].ПолучитьИдентификатор();
		Элементы.СоставОпераций.ОтборСтрок = Новый ФиксированнаяСтруктура("КлючСвязи", Объект.ОперацииКОформлению[0].КлючСвязи);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗачестьПоПересортицеПорче(ИмяОперации)
	ТекущиеДанныеСписания = Элементы.ТоварыКСписанию.ТекущиеДанные;
	
	ИмяОперацииДляСообщения = ?(ИмяОперации = "Порча", "Порчей", "Пересортицей");
	Если ТекущиеДанныеСписания = Неопределено Тогда
		ШаблонТекстаСообщения = НСтр("ru='Выделите строку списания, которую нужно зачесть %ИмяОперации%.'");
		ТекстСообщения = СтрЗаменить(ШаблонТекстаСообщения, "%ИмяОперации%", ИмяОперацииДляСообщения);
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеОприходования = Элементы.ТоварыКОприходованию.ТекущиеДанные;
	
	Если ТекущиеДанныеОприходования = Неопределено Тогда
		ШаблонТекстаСообщения = НСтр("ru='Выделите строку оприходования, которую нужно зачесть %ИмяОперации%.'");
		ТекстСообщения = СтрЗаменить(ШаблонТекстаСообщения, "%ИмяОперации%", ИмяОперацииДляСообщения);
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеСписания.СтавкаНДС <> ТекущиеДанныеОприходования.СтавкаНДС Тогда
		ШаблонТекстаСообщения = НСтр("ru='Номенклатура списания и оприходования имеют разные ставки НДС, поэтому их нельзя зачесть %ИмяОперации%'");
		ТекстСообщения = СтрЗаменить(ШаблонТекстаСообщения, "%ИмяОперации%", ИмяОперацииДляСообщения);
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ИмяОперации = "Порча" Тогда
		СоответствиеКачества = ЭтоНовыйТовар(ТекущиеДанныеОприходования.Номенклатура);
		Если Не СоответствиеКачества Тогда
			ТекстСообщения = НСтр("ru='Невозможно зачесть по порче. Номенклатура к оприходованию (некачественный товар) имеет качество ""Новый""'");
			Предупреждение(ТекстСообщения);
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НоменклатураСписание",ТекущиеДанныеСписания.Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаСписание", ТекущиеДанныеСписания.Характеристика);
	СтруктураПоиска.Вставить("НоменклатураОприходование", ТекущиеДанныеОприходования.Номенклатура);
	СтруктураПоиска.Вставить("ХарактеристикаОприходование", ТекущиеДанныеОприходования.Характеристика);
	
	МассивСтрокОперации = Объект["Товары" + ИмяОперации].НайтиСтроки(СтруктураПоиска);
	
	КоличествоЗачет = Мин(ТекущиеДанныеСписания.КоличествоНеРаспределено,ТекущиеДанныеОприходования.КоличествоНеРаспределено);
	Если МассивСтрокОперации.Количество() > 0 Тогда
		СтрокаОперации = МассивСтрокОперации[0];
		КлючСтрокиОперации = СтрокаОперации.КлючСвязи;
		
		Зачтено = СтрокаОперации.Количество;
		
		КЗачетуВсего 				 = КоличествоЗачет;;
		КЗачетуРаспределено 		 = СтрокаОперации.КоличествоРаспределено;
		КСписаниюВсего 				 = ТекущиеДанныеСписания.КоличествоНеРаспределено;
		КСписаниюНеРаспределено 	 = ТекущиеДанныеСписания.КоличествоНеРаспределено + СтрокаОперации.Количество;
		КОприходованиюВсего 		 = ТекущиеДанныеОприходования.КоличествоНеРаспределено;
		КОприходованиюНеРаспределено = ТекущиеДанныеОприходования.КоличествоНеРаспределено + СтрокаОперации.Количество;
		
	Иначе
		
		КлючСтрокиОперации = 0;
		Зачтено = 0;
				
		КЗачетуВсего 				 = КоличествоЗачет;
		КЗачетуРаспределено 		 = 0;
		КСписаниюВсего 				 = ТекущиеДанныеСписания.Количество;
		КСписаниюНеРаспределено 	 = ТекущиеДанныеСписания.КоличествоНеРаспределено;
		КОприходованиюВсего 		 = ТекущиеДанныеОприходования.Количество;
		КОприходованиюНеРаспределено = ТекущиеДанныеОприходования.КоличествоНеРаспределено;
		
	КонецЕсли;
		
	СтрутураПараметров = Новый Структура;
	СтрутураПараметров.Вставить("КОприходованиюВсего",КОприходованиюВсего);
	СтрутураПараметров.Вставить("КОприходованиюНеРаспределено",КОприходованиюНеРаспределено);
	СтрутураПараметров.Вставить("КСписаниюВсего",КСписаниюВсего);
	СтрутураПараметров.Вставить("КСписаниюНеРаспределено",КСписаниюНеРаспределено);
	СтрутураПараметров.Вставить("КЗачетуВсего",КЗачетуВсего);
	СтрутураПараметров.Вставить("КЗачетуРаспределено",КЗачетуРаспределено);
	СтрутураПараметров.Вставить("ВидОперации",ИмяОперации);
	
	Результат = ОткрытьФормуМодально("Обработка.ПомощникОформленияСкладскихАктов.Форма.ФормаУказанияКоличестваЗачета",СтрутураПараметров,ЭтаФорма);
	
	Если Результат <> Неопределено
		И Результат.КЗачету <> Зачтено Тогда
		
		ОбработатьЗачетПересортицыПорчи(ТекущиеДанныеСписания.КлючСвязи,ТекущиеДанныеОприходования.КлючСвязи,КлючСтрокиОперации, Результат, , ИмяОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПересортицыПорчиПоОрганизациям(ИмяОперации)
	
	Если Объект.Организации.Количество() = 1 Тогда
		Если Объект.ВыбранныеОрганизации.Количество() <> 1 Тогда
			Объект.ВыбранныеОрганизации.Очистить();
			НоваяСтрока = Объект.ВыбранныеОрганизации.Добавить();
			НоваяСтрока.Организация = Объект.Организации[0].Организация;
		КонецЕсли;
		
		Адрес = Неопределено;
		
	Иначе
		
		Адрес = ПоместитьОрганизацииВоВременноеХранилище();
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("АдресОрганизаций", Адрес);
		
		Ответ = ОткрытьФормуМодально("Обработка.ПомощникОформленияСкладскихАктов.Форма.ФормаВыбораОрганизаций",ПараметрыФормы,ЭтаФорма);
		
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	РаспределитьПересортицыПорчиПоОрганизациямСервер(Адрес, ИмяОперации);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьГрадацииКачестваНоменклатуры(КлючОтбора)
	СтруктураОтбора = Новый Структура("КлючСвязи", КлючОтбора);
	МассивСтрок = Объект.СоставОпераций.НайтиСтроки(СтруктураОтбора);
	Для Каждого Строка Из МассивСтрок Цикл
		ФормированиеГрадации = РегистрыСведений.ТоварыДругогоКачества.ПроверитьНаличиеГрадации(Строка.НоменклатураСписание, Строка.НоменклатураОприходование);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьОперацииКОформлению()
	
	Объект.ОперацииКОформлению.Очистить();
	Объект.СоставОпераций.Очистить();
	
	КлючСвязи = 0;
	
	Для Каждого СтрТабл из Объект.Организации Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", СтрТабл.Организация);
		СтруктураПоиска.Вставить("Распределено", Истина);
		
		НайденныеСтроки = Объект.ТоварыРаспределениеСписание.НайтиСтроки(СтруктураПоиска);
		
		КоличествоПозиций = НайденныеСтроки.Количество();
		
		Если КоличествоПозиций > 0 Тогда
			
			Стоимость = 0;
			КлючСвязи = КлючСвязи + 1;

			Для Каждого СтрМас из НайденныеСтроки Цикл
				
				НоваяСтрокаОперации = Объект.СоставОпераций.Добавить();
				НоваяСтрокаОперации.НоменклатураСписание = СтрМас.Номенклатура;
				НоваяСтрокаОперации.ХарактеристикаСписание = СтрМас.Характеристика;
				НоваяСтрокаОперации.Количество = СтрМас.Количество;
				НоваяСтрокаОперации.Стоимость = СтрМас.Стоимость;
				НоваяСтрокаОперации.КлючСвязи = КлючСвязи;
				
				Стоимость = Стоимость + СтрМас.Стоимость;
				
			КонецЦикла;
			
			НоваяОперация = Объект.ОперацииКОформлению.Добавить();
			НоваяОперация.Организация = СтрТабл.Организация;
			НоваяОперация.ТипОперации = ПредставлениеОперацииПоТипу("Списание");
			НоваяОперация.КоличествоПозиций = КоличествоПозиций;
			НоваяОперация.Стоимость = Стоимость;
			НоваяОперация.КлючСвязи = КлючСвязи;
			
		КонецЕсли;
		
		НайденныеСтроки = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(СтруктураПоиска);
		КоличествоПозиций = НайденныеСтроки.Количество();
		
		Если КоличествоПозиций > 0 Тогда
			
			Стоимость = 0;
			КлючСвязи = КлючСвязи + 1;

			Для Каждого СтрМас из НайденныеСтроки Цикл
				
				НоваяСтрокаОперации = Объект.СоставОпераций.Добавить();
				НоваяСтрокаОперации.НоменклатураОприходование = СтрМас.Номенклатура;
				НоваяСтрокаОперации.ХарактеристикаОприходование = СтрМас.Характеристика;
				НоваяСтрокаОперации.Количество = СтрМас.Количество;
				НоваяСтрокаОперации.Стоимость = СтрМас.Стоимость;
				НоваяСтрокаОперации.КлючСвязи = КлючСвязи;
				
				Стоимость = Стоимость + СтрМас.Стоимость;
				
			КонецЦикла;
			
			НоваяОперация = Объект.ОперацииКОформлению.Добавить();
			НоваяОперация.Организация = СтрТабл.Организация;
			НоваяОперация.ТипОперации = ПредставлениеОперацииПоТипу("Оприходование");
			НоваяОперация.КоличествоПозиций = КоличествоПозиций;
			НоваяОперация.Стоимость = Стоимость;
			НоваяОперация.КлючСвязи = КлючСвязи;
			
		КонецЕсли;
		
		НайденныеСтроки = Объект.ТоварыРаспределениеПересортица.НайтиСтроки(СтруктураПоиска);
		КоличествоПозиций = НайденныеСтроки.Количество();
		
		Если КоличествоПозиций > 0 Тогда
			
			КлючСвязи = КлючСвязи + 1;

			Для Каждого СтрМас из НайденныеСтроки Цикл
				
				НоваяСтрокаОперации = Объект.СоставОпераций.Добавить();
				НоваяСтрокаОперации.НоменклатураСписание = СтрМас.НоменклатураСписание;
				НоваяСтрокаОперации.ХарактеристикаСписание = СтрМас.ХарактеристикаСписание;
				НоваяСтрокаОперации.НоменклатураОприходование = СтрМас.НоменклатураОприходование;
				НоваяСтрокаОперации.ХарактеристикаОприходование = СтрМас.ХарактеристикаОприходование;
				НоваяСтрокаОперации.Количество = СтрМас.Количество;
				НоваяСтрокаОперации.КлючСвязи = КлючСвязи;
				
				
			КонецЦикла;
			
			НоваяОперация = Объект.ОперацииКОформлению.Добавить();
			НоваяОперация.Организация = СтрТабл.Организация;
			НоваяОперация.ТипОперации = ПредставлениеОперацииПоТипу("Пересортица");
			НоваяОперация.КоличествоПозиций = КоличествоПозиций;
			НоваяОперация.Стоимость = 0;
			НоваяОперация.КлючСвязи = КлючСвязи;
			
		КонецЕсли;
		
		НайденныеСтроки = Объект.ТоварыРаспределениеПорча.НайтиСтроки(СтруктураПоиска);
		КоличествоПозиций = НайденныеСтроки.Количество();
		
		Если КоличествоПозиций > 0 Тогда
			
			КлючСвязи = КлючСвязи + 1;

			Для Каждого СтрМас из НайденныеСтроки Цикл
				
				НоваяСтрокаОперации = Объект.СоставОпераций.Добавить();
				НоваяСтрокаОперации.НоменклатураСписание = СтрМас.НоменклатураСписание;
				НоваяСтрокаОперации.ХарактеристикаСписание = СтрМас.ХарактеристикаСписание;
				НоваяСтрокаОперации.НоменклатураОприходование = СтрМас.НоменклатураОприходование;
				НоваяСтрокаОперации.ХарактеристикаОприходование = СтрМас.ХарактеристикаОприходование;
				НоваяСтрокаОперации.Количество = СтрМас.Количество;
				НоваяСтрокаОперации.КлючСвязи = КлючСвязи;
				
			КонецЦикла;
			
			НоваяОперация = Объект.ОперацииКОформлению.Добавить();
			НоваяОперация.Организация = СтрТабл.Организация;
			НоваяОперация.ТипОперации = ПредставлениеОперацииПоТипу("Порча");
			НоваяОперация.КоличествоПозиций = КоличествоПозиций;
			НоваяОперация.Стоимость = 0;
			НоваяОперация.КлючСвязи = КлючСвязи;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьОстаткиВТоварыРаспределение(ИмяОперации)
	ИмяТаблицыДляПоиска = "ТоварыРаспределение" + ИмяОперации;
	НайденныеСтроки = Объект[ИмяТаблицыДляПоиска].НайтиСтроки(Новый Структура("Модифицирована", Истина));
	
	Для Каждого СтрМас из НайденныеСтроки Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрМас.НоменклатураСписание);
		СтруктураПоиска.Вставить("Характеристика", СтрМас.ХарактеристикаСписание);
		СтруктураПоиска.Вставить("Организация", СтрМас.Организация);
		
		СтрокиСписания = Объект.ТоварыРаспределениеСписание.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрРасп из СтрокиСписания Цикл
			СтрРасп.Остаток = СтрМас.ОстатокСписание;
		КонецЦикла;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрМас.НоменклатураОприходование);
		СтруктураПоиска.Вставить("Характеристика", СтрМас.ХарактеристикаОприходование);
		СтруктураПоиска.Вставить("Организация", СтрМас.Организация);
		
		СтрокиОприходования = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрРасп из СтрокиОприходования Цикл
			СтрРасп.Остаток = СтрМас.ОстатокОприходование;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПересортицаПорчаПоТоварыРаспределение(ИмяОперации)
	НайденныеСтроки = Объект.ТоварыРаспределениеСписание.НайтиСтроки(Новый Структура("Модифицирована", Истина));
	
	Для Каждого СтрМас из НайденныеСтроки Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураСписание", СтрМас.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаСписание", СтрМас.Характеристика);
		СтруктураПоиска.Вставить("Организация", СтрМас.Организация);
		
		СтрокиСписания = Объект["ТоварыРаспределение" + ИмяОперации].НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрРасп из СтрокиСписания Цикл
			СтрРасп.ОстатокСписание = СтрМас.Остаток;
		КонецЦикла;
		
	КонецЦикла;
	
	НайденныеСтроки = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(Новый Структура("Модифицирована", Истина));
	
	Для Каждого СтрМас из НайденныеСтроки Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураОприходование", СтрМас.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаОприходование", СтрМас.Характеристика);
		СтруктураПоиска.Вставить("Организация", СтрМас.Организация);
		
		СтрокиОприходования = Объект["ТоварыРаспределение" + ИмяОперации].НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрРасп из СтрокиОприходования Цикл
			СтрРасп.ОстатокОприходование = СтрМас.Остаток;
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СкорректироватьОстаткиВТоварыРаспределениеПересортицаПорча(ИмяОперации)
	
	ИмяТаблицыДляПоиска = ?(ИмяОперации = "Порча", "ТоварыРаспределениеПересортица", "ТоварыРаспределениеПорча");
	НайденныеСтроки = Объект[ИмяТаблицыДляПоиска].НайтиСтроки(Новый Структура("Модифицирована", Истина));
	
	Для Каждого СтрМас из НайденныеСтроки Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураСписание", СтрМас.НоменклатураСписание);
		СтруктураПоиска.Вставить("ХарактеристикаСписание", СтрМас.ХарактеристикаСписание);
		СтруктураПоиска.Вставить("Организация", СтрМас.Организация);
		
		СтрокиСписания = Объект["ТоварыРаспределение" + ИмяОперации].НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрРасп из СтрокиСписания Цикл
			СтрРасп.ОстатокСписание = СтрМас.ОстатокСписание;
		КонецЦикла;
		
	КонецЦикла;
	
	НайденныеСтроки = Объект[ИмяТаблицыДляПоиска].НайтиСтроки(Новый Структура("Модифицирована", Истина));
	
	Для Каждого СтрМас из НайденныеСтроки Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НоменклатураОприходование", СтрМас.НоменклатураОприходование);
		СтруктураПоиска.Вставить("ХарактеристикаОприходование", СтрМас.ХарактеристикаОприходование);
		СтруктураПоиска.Вставить("Организация", СтрМас.Организация);
		
		СтрокиОприходования = Объект["ТоварыРаспределение" + ИмяОперации].НайтиСтроки(СтруктураПоиска);
		
		Для Каждого СтрРасп из СтрокиОприходования Цикл
			СтрРасп.ОстатокОприходование = СтрМас.ОстатокОприходование;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаПоОснованию(Основание)
	
	ТекстЗапроса = "";
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.ОрдерНаОтражениеПорчиТоваров") Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА (НЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент ЕСТЬ NULL )
		|				И ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент <> 0
		|			ТОГДА ЦеныНоменклатурыСрезПоследних.Цена / ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент
		|		ИНАЧЕ ЦеныНоменклатурыСрезПоследних.Цена
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ВидЦены = &ВидЦены
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика
		|					ИЗ
		|						ТаблицаНоменклатуры КАК Таблица)) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыОрганизацийОстатки.Характеристика КАК Характеристика,
		|	ТоварыОрганизацийОстатки.Склад КАК Склад,
		|	ТоварыОрганизацийОстатки.Организация КАК Организация,
		|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК Остаток
		|ПОМЕСТИТЬ ТоварыОрганизацийОстатки
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад, Организация) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Склад,
		|					Таблица.Организация
		|				ИЗ
		|					ТаблицаНоменклатуры КАК Таблица)) КАК ТоварыОрганизацийОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ТоварыОрганизацийОстатки.Остаток, 0) КАК Остаток,
		|	ТаблицаНоменклатуры.Организация КАК Организация,
		|	ТаблицаНоменклатуры.Приоритет КАК Приоритет,
		|	ТаблицаНоменклатуры.СтавкаНДС,
		|	ТаблицаНоменклатуры.Количество,
		|	ТаблицаНоменклатуры.КоличествоНеРаспределено,
		|	ТаблицаНоменклатуры.ТипОперации,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * КурсыВалютыЦены.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыВалютыЦены.Кратность) КАК Цена
		|ПОМЕСТИТЬ ТаблицаНоменклатурыКОформлению
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыОрганизацийОстатки КАК ТоварыОрганизацийОстатки
		|		ПО (ТоварыОрганизацийОстатки.Номенклатура = ТаблицаНоменклатуры.Номенклатура)
		|			И (ТоварыОрганизацийОстатки.Характеристика = ТаблицаНоменклатуры.Характеристика)
		|			И (ТоварыОрганизацийОстатки.Склад = ТаблицаНоменклатуры.Склад)
		|			И (ТоварыОрганизацийОстатки.Организация = ТаблицаНоменклатуры.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютыЦены
		|		ПО (ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУпрУчета) КАК КурсыУпрВалюты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ЕСТЬNULL(ТаблицаНоменклатуры.Количество, 0) <> 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНоменклатурыКОформлению.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатурыКОформлению.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатурыКОформлению.Остаток КАК Остаток,
		|	ТаблицаНоменклатурыКОформлению.Организация КАК Организация,
		|	ТаблицаНоменклатурыКОформлению.Приоритет КАК Приоритет,
		|	ТаблицаНоменклатурыКОформлению.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаНоменклатурыКОформлению.Количество КАК Количество,
		|	ТаблицаНоменклатурыКОформлению.КоличествоНеРаспределено,
		|	ТаблицаНоменклатурыКОформлению.ТипОперации КАК ТипОперации,
		|	ТаблицаНоменклатурыКОформлению.Цена КАК Цена,
		|	ОрдерНаОтражениеПорчи.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ТаблицаНоменклатурыКОформлению КАК ТаблицаНоменклатурыКОформлению
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОрдерНаОтражениеПорчиТоваров.Товары КАК ОрдерНаОтражениеПорчи
		|		ПО (ОрдерНаОтражениеПорчи.Номенклатура = ТаблицаНоменклатурыКОформлению.Номенклатура
		|					И ОрдерНаОтражениеПорчи.Характеристика = ТаблицаНоменклатурыКОформлению.Характеристика
		|				ИЛИ ОрдерНаОтражениеПорчи.НоменклатураОприходование = ТаблицаНоменклатурыКОформлению.Номенклатура
		|					И ОрдерНаОтражениеПорчи.ХарактеристикаОприходование = ТаблицаНоменклатурыКОформлению.Характеристика)
		|ГДЕ
		|	ОрдерНаОтражениеПорчи.Ссылка = &ДокументОснование
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|ИТОГИ ПО
		|	Номенклатура,
		|	Характеристика
		|;";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
		|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
		|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
		|	ВЫБОР
		|		КОГДА (НЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент ЕСТЬ NULL )
		|				И ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент <> 0
		|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
		|	КОНЕЦ КАК Цена
		|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|			,
		|			ВидЦены = &ВидЦены
		|				И (Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						Таблица.Номенклатура,
		|						Таблица.Характеристика
		|					ИЗ
		|						ТаблицаНоменклатуры КАК Таблица)) КАК ЦеныНоменклатурыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыОрганизацийОстатки.Характеристика КАК Характеристика,
		|	ТоварыОрганизацийОстатки.Склад КАК Склад,
		|	ТоварыОрганизацийОстатки.Организация КАК Организация,
		|	ТоварыОрганизацийОстатки.КоличествоОстаток КАК Остаток
		|ПОМЕСТИТЬ ТоварыОрганизацийОстатки
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(
		|			,
		|			(Номенклатура, Характеристика, Склад, Организация) В
		|				(ВЫБРАТЬ
		|					Таблица.Номенклатура,
		|					Таблица.Характеристика,
		|					Таблица.Склад,
		|					Таблица.Организация
		|				ИЗ
		|					ТаблицаНоменклатуры КАК Таблица)) КАК ТоварыОрганизацийОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
		|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
		|	ТаблицаНоменклатуры.Номенклатура.Наименование КАК НоменклатураНаименование,
		|	ТаблицаНоменклатуры.Характеристика.Наименование КАК ХарактеристикаНаименование,
		|	ЕСТЬNULL(ТоварыОрганизацийОстатки.Остаток, 0) КАК Остаток,
		|	ТаблицаНоменклатуры.Организация КАК Организация,
		|	ТаблицаНоменклатуры.Приоритет КАК Приоритет,
		|	ТаблицаНоменклатуры.СтавкаНДС КАК СтавкаНДС,
		|	ТаблицаНоменклатуры.Количество КАК Количество,
		|	ТаблицаНоменклатуры.КоличествоНеРаспределено КАК КоличествоНеРаспределено,
		|	ТаблицаНоменклатуры.ТипОперации КАК ТипОперации,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * КурсыВалютыЦены.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыВалютыЦены.Кратность) КАК Цена
		|ИЗ
		|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыОрганизацийОстатки КАК ТоварыОрганизацийОстатки
		|		ПО (ТоварыОрганизацийОстатки.Номенклатура = ТаблицаНоменклатуры.Номенклатура)
		|			И (ТоварыОрганизацийОстатки.Характеристика = ТаблицаНоменклатуры.Характеристика)
		|			И (ТоварыОрганизацийОстатки.Склад = ТаблицаНоменклатуры.Склад)
		|			И (ТоварыОрганизацийОстатки.Организация = ТаблицаНоменклатуры.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
		|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютыЦены
		|		ПО (ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУпрУчета) КАК КурсыУпрВалюты
		|		ПО (ИСТИНА)
		|ГДЕ
		|	ЕСТЬNULL(ТаблицаНоменклатуры.Количество, 0) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураНаименование,
		|	ХарактеристикаНаименование,
		|	Приоритет
		|ИТОГИ ПО
		|	Номенклатура,
		|	Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТоварыОрганизацийОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ЦеныНоменклатурыСрезПоследних
		|;";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Процедура ЗаполнитьПоПересчетамСервер()
	
	Если Объект.Организации.Количество() = 0 Тогда
		ИспользуетсяУправленческаяОрганизация = ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(НЕ Организации.ПометкаУдаления)";
		Если Не ИспользуетсяУправленческаяОрганизация Тогда 
			ТекстЗапроса = ТекстЗапроса + 
			"
			|И Организации.Ссылка <> ЗНАЧЕНИЕ(Справочник.Организации.УправленческаяОрганизация)";
		КонецЕсли;
		Запрос.Текст = ТекстЗапроса;
		Таблица = Запрос.Выполнить().Выгрузить();
		
		Объект.Организации.Загрузить(Таблица);
		Объект.ВыбранныеОрганизации.Загрузить(Таблица);
		ДоступныеОрганизации.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("Организация"));
		
	КонецЕсли;
	
	СхемаКомпоновкиДанных = Обработки.ПомощникОформленияСкладскихАктов.ПолучитьМакет("ОтборНоменклатуры");
	
	ОтборНоменклатуры.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Склад", Объект.Склад);
	ОтборНоменклатуры.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ДокументОснование", Объект.ДокументОснование);
	
	СегментыСервер.ВключитьОтборПоСегментуНоменклатурыВСКД(ОтборНоменклатуры);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ОтборНоменклатуры.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТаблицаНоменклатуры = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	//Если ФО "ИспользоватьХарактеристикиНоменклатуры" выключена, то из СКД
	//будет удалено поле Характеристика, поэтому в ТаблицаНоменклатуры может не быть этой колонки
	Если ТаблицаНоменклатуры.Колонки.Найти("Характеристика") = Неопределено Тогда
		ТаблицаНоменклатуры.Колонки.Добавить("Характеристика",Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Количество,
	|	ТаблицаНоменклатуры.КоличествоНеРаспределено,
	|	ТаблицаНоменклатуры.ТипОперации,
	|	ТаблицаНоменклатуры.СтавкаНДС
	|ПОМЕСТИТЬ ТаблицаНоменклатурыДляЗапроса
	|ИЗ
	|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Организация,
	|	Таблица.НомерСтроки КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаОрганизацийДляЗапроса
	|ИЗ
	|	&ТаблицаОрганизаций КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика,
	|	ТаблицаНоменклатуры.Количество,
	|	ТаблицаНоменклатуры.КоличествоНеРаспределено,
	|	ТаблицаНоменклатуры.ТипОперации,
	|	ТаблицаНоменклатуры.СтавкаНДС,
	|	ТаблицаОрганизацийДляЗапроса.Организация,
	|	ТаблицаОрганизацийДляЗапроса.Приоритет,
	|	&Склад
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	ТаблицаНоменклатурыДляЗапроса КАК ТаблицаНоменклатуры
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаОрганизацийДляЗапроса КАК ТаблицаОрганизацийДляЗапроса
	|		ПО (ИСТИНА)
	|;
	|"
	+ ТекстЗапросаПоОснованию(Объект.ДокументОснование) +
	"
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОрганизацийДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыДляЗапроса";
	
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("ТаблицаОрганизаций", Объект.Организации.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦены);
	Запрос.УстановитьПараметр("ДокументОснование", Объект.ДокументОснование);
	
	Объект.МаксимальныйКлючСвязи = 0;
	
	ОчиститьТаблицы();
	
	ОстаткиОрганизаций.Очистить();
	
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		
		ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоХарактеристикам.Следующий() Цикл
			НоваяСтрока = Неопределено;
			
			Выборка = ВыборкаПоХарактеристикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Выборка.Следующий() Цикл
				
				Если НоваяСтрока = Неопределено Тогда
					Если Выборка.ТипОперации = "Списание" Тогда 
						НоваяСтрока = Объект.ТоварыКСписанию.Добавить();
					Иначе
						НоваяСтрока = Объект.ТоварыКОприходованию.Добавить();
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
					Объект.МаксимальныйКлючСвязи = Объект.МаксимальныйКлючСвязи + 1;
					НоваяСтрока.КлючСвязи = Объект.МаксимальныйКлючСвязи;
				КонецЕсли;
				
				
				Если ЗначениеЗаполнено(Выборка.Организация) Тогда
					
					Если Выборка.ТипОперации = "Списание" Тогда 
						НоваяСтрокаРаспределения = Объект.ТоварыРаспределениеСписание.Добавить();
					Иначе
						НоваяСтрокаРаспределения = Объект.ТоварыРаспределениеОприходование.Добавить();
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрокаРаспределения,НоваяСтрока,,"Количество");
					НоваяСтрокаРаспределения.Организация = Выборка.Организация;
					НоваяСтрокаРаспределения.Остаток = Выборка.Остаток;
					
					НоваяСтрокаОстатков = ОстаткиОрганизаций.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОстатков, Выборка);
					
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОтборСтрокНоменклатуры = Неопределено;
	СформироватьСписокСовпадающейНоменклатуры();
	УстановитьОтборСтрокПоНоменклатуре();
	
	ПараметрыЗаполненияПризнака = Новый Структура;
	ПараметрыЗаполненияПризнака.Вставить("Номенклатура","ХарактеристикиИспользуются");
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", ПараметрыЗаполненияПризнака);
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыКСписанию, ПараметрыЗаполнения);
  	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыКОприходованию, ПараметрыЗаполнения);

КонецПроцедуры

&НаСервере
Функция ОбновитьТаблицуОстатков()
	
	Индекс = Объект.Организации.Количество()-1;
	
	Пока Индекс > -1 Цикл
		СтрТабл = Объект.Организации[Индекс];
		Индекс = Индекс - 1;
		
		Если Не ЗначениеЗаполнено(СтрТабл.Организация) Тогда
			Объект.Организации.Удалить(СтрТабл);
		КонецЕсли;
		
	КонецЦикла;
		
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатурыКСписанию
	|ИЗ
	|	&ТаблицаКСписанию КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатурыКОприходованию
	|ИЗ
	|	&ТаблицаКОприходованию КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураСписание КАК Номенклатура,
	|	Таблица.ХарактеристикаСписание КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатурыПересортицаСписание
	|ИЗ
	|	&ТаблицаПересортица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураОприходование КАК Номенклатура,
	|	Таблица.ХарактеристикаОприходование КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатурыПересортицаОприходование
	|ИЗ
	|	&ТаблицаПересортица КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураОприходование КАК Номенклатура,
	|	Таблица.ХарактеристикаОприходование КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатурыПорчаОприходование
	|ИЗ
	|	&ТаблицаПорча КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НоменклатураСписание КАК Номенклатура,
	|	Таблица.ХарактеристикаСписание КАК Характеристика
	|ПОМЕСТИТЬ ТаблицаНоменклатурыПорчаСписание
	|ИЗ
	|	&ТаблицаПорча КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Организация,
	|	Таблица.НомерСтроки КАК Приоритет
	|ПОМЕСТИТЬ ТаблицаОрганизацийДляЗапроса
	|ИЗ
	|	&ТаблицаОрганизаций КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаНоменклатурыДляЗапроса.Номенклатура,
	|	ТаблицаНоменклатурыДляЗапроса.Характеристика,
	|	ТаблицаОрганизацийДляЗапроса.Организация,
	|	ТаблицаОрганизацийДляЗапроса.Приоритет,
	|	&Склад КАК Склад
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Номенклатура КАК Номенклатура,
	|		Таблица.Характеристика КАК Характеристика
	|	ИЗ
	|		ТаблицаНоменклатурыКСписанию КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика
	|	ИЗ
	|		ТаблицаНоменклатурыКОприходованию КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика
	|	ИЗ
	|		ТаблицаНоменклатурыПересортицаСписание КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика
	|	ИЗ
	|		ТаблицаНоменклатурыПересортицаОприходование КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика
	|	ИЗ
	|		ТаблицаНоменклатурыПорчаСписание КАК Таблица
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Номенклатура,
	|		Таблица.Характеристика
	|	ИЗ
	|		ТаблицаНоменклатурыПорчаОприходование КАК Таблица) КАК ТаблицаНоменклатурыДляЗапроса
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТаблицаОрганизацийДляЗапроса КАК ТаблицаОрганизацийДляЗапроса
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТоварыОрганизацийОстатки.Номенклатура КАК Номенклатура,
	|	ТоварыОрганизацийОстатки.Характеристика КАК Характеристика,
	|	ТоварыОрганизацийОстатки.Склад КАК Склад,
	|	ТоварыОрганизацийОстатки.Организация КАК Организация,
	|	ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0) КАК Остаток
	|ПОМЕСТИТЬ ТоварыОрганизацийОстатки
	|ИЗ
	|	РегистрНакопления.ТоварыОрганизаций.Остатки(
	|			,
	|			(Номенклатура, Характеристика, Склад, Организация) В
	|				(ВЫБРАТЬ
	|					Таблица.Номенклатура,
	|					Таблица.Характеристика,
	|					Таблица.Склад,
	|					Таблица.Организация
	|				ИЗ
	|					ТаблицаНоменклатуры КАК Таблица)) КАК ТоварыОрганизацийОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Характеристика КАК Характеристика,
	|	ВЫБОР
	|		КОГДА (НЕ ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент ЕСТЬ NULL )
	|				И ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент <> 0
	|			ТОГДА ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) / ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0)
	|	КОНЕЦ КАК Цена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта
	|ПОМЕСТИТЬ ЦеныНоменклатурыСрезПоследних
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			,
	|			ВидЦены = &ВидЦены
	|				И (Номенклатура, Характеристика) В
	|					(ВЫБРАТЬ
	|						Таблица.Номенклатура,
	|						Таблица.Характеристика
	|					ИЗ
	|						ТаблицаНоменклатуры КАК Таблица)) КАК ЦеныНоменклатурыСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура,
	|	ТаблицаНоменклатуры.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ТоварыОрганизацийОстатки.Остаток, 0) КАК Остаток,
	|	ТаблицаНоменклатуры.Организация КАК Организация,
	|	ТаблицаНоменклатуры.Приоритет КАК Приоритет,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * КурсыВалютыЦены.Курс * КурсыУпрВалюты.Кратность / (КурсыУпрВалюты.Курс * КурсыВалютыЦены.Кратность) КАК Цена
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыОрганизацийОстатки КАК ТоварыОрганизацийОстатки
	|		ПО (ТоварыОрганизацийОстатки.Номенклатура = ТаблицаНоменклатуры.Номенклатура)
	|			И (ТоварыОрганизацийОстатки.Характеристика = ТаблицаНоменклатуры.Характеристика)
	|			И (ТоварыОрганизацийОстатки.Склад = ТаблицаНоменклатуры.Склад)
	|			И (ТоварыОрганизацийОстатки.Организация = ТаблицаНоменклатуры.Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатурыСрезПоследних КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ТаблицаНоменклатуры.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
	|			И ТаблицаНоменклатуры.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютыЦены
	|		ПО (ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютыЦены.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(, Валюта = &ВалютаУпрУчета) КАК КурсыУпрВалюты
	|		ПО (ИСТИНА)
	|ГДЕ
	|	(НЕ ТаблицаНоменклатуры.Организация ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыКСписанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыКОприходованию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыПересортицаСписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыПересортицаОприходование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыПорчаСписание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатурыПорчаОприходование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаОрганизацийДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТоварыОрганизацийОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЦеныНоменклатурыСрезПоследних";

	Запрос.УстановитьПараметр("ТаблицаКСписанию", Объект.ТоварыКСписанию.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаКОприходованию", Объект.ТоварыКОприходованию.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаПересортица", Объект.ТоварыПересортица.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаПорча", Объект.ТоварыПорча.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаОрганизаций", Объект.Организации.Выгрузить());
	Запрос.УстановитьПараметр("ВалютаУпрУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ВидЦены", Объект.ВидЦены);
	
	ОстаткиОрганизаций.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецФункции

&НаСервере
Процедура ОбновитьОстаткиОрганизацийСервер()
	
	ОбновитьТаблицуОстатков();
	
	Для Каждого СтрТабл из ОстаткиОрганизаций Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", СтрТабл.Организация);
		СтруктураПоиска.Вставить("Номенклатура",СтрТабл.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",СтрТабл.Характеристика);
		
		СтрокиРаспределения = Объект.ТоварыРаспределениеСписание.НайтиСтроки(СтруктураПоиска);
		
		СтрокаРаспределения = Неопределено;
		СтрокаРаспределенияПересортицы = Неопределено;
		СтрокаРаспределенияПорчи = Неопределено;
		
		Если СтрокиРаспределения.Количество()> 0 Тогда
			
			СтрокаРаспределения = СтрокиРаспределения[0];
			
			СтрТабл.Остаток = СтрТабл.Остаток - СтрокаРаспределения.Количество;
			
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", СтрТабл.Организация);
		СтруктураПоиска.Вставить("НоменклатураСписание",СтрТабл.Номенклатура);
		СтруктураПоиска.Вставить("ХарактеристикаСписание",СтрТабл.Характеристика);
		
		СтрокиРаспределенияПересортицы = Объект.ТоварыРаспределениеПересортица.НайтиСтроки(СтруктураПоиска);
		СтрокиРаспределенияПорчи =       Объект.ТоварыРаспределениеПорча.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиРаспределенияПересортицы.Количество() > 0
			Или СтрокиРаспределенияПорчи.Количество() > 0 Тогда
			
			Если СтрокиРаспределенияПересортицы.Количество() > 0 Тогда
				
				СтрокаРаспределенияПересортицы = СтрокиРаспределенияПересортицы[0];
				
				СтрТабл.Остаток = СтрТабл.Остаток - СтрокаРаспределенияПересортицы.Количество;
				
			КонецЕсли;
			
			Если СтрокиРаспределенияПорчи.Количество() > 0 Тогда
				
				СтрокаРаспределенияПорчи = СтрокиРаспределенияПорчи[0];
				
				СтрТабл.Остаток = СтрТабл.Остаток - СтрокаРаспределенияПорчи.Количество;
				
			КонецЕсли;
			
			Если СтрокаРаспределенияПересортицы <> Неопределено Тогда
				СтрокаРаспределенияПересортицы.ОстатокСписание = СтрТабл.Остаток;
			КонецЕсли;
			
			Если СтрокаРаспределенияПорчи <> Неопределено Тогда
				СтрокаРаспределенияПорчи.ОстатокСписание = СтрТабл.Остаток;
			КонецЕсли;
			
		Иначе
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Организация", СтрТабл.Организация);
			СтруктураПоиска.Вставить("НоменклатураОприходование",СтрТабл.Номенклатура);
			СтруктураПоиска.Вставить("ХарактеристикаОприходование",СтрТабл.Характеристика);
			
			СтрокиРаспределенияПересортицы = Объект.ТоварыРаспределениеПересортица.НайтиСтроки(СтруктураПоиска);
			СтрокиРаспределенияПорчи =       Объект.ТоварыРаспределениеПорча.НайтиСтроки(СтруктураПоиска);
			
			Если СтрокиРаспределенияПересортицы.Количество() > 0 Тогда
				
				СтрокаРаспределенияПересортицы = СтрокиРаспределенияПересортицы[0];
				СтрТабл.Остаток = СтрТабл.Остаток + СтрокаРаспределенияПересортицы.Количество;
				
			КонецЕсли;
			
			Если СтрокиРаспределенияПорчи.Количество() > 0 Тогда
				
				СтрокаРаспределенияПорчи = СтрокиРаспределенияПорчи[0];
				СтрТабл.Остаток = СтрТабл.Остаток + СтрокаРаспределенияПорчи.Количество;
				
			КонецЕсли;
			
			Если СтрокаРаспределенияПересортицы <> Неопределено Тогда
				СтрокаРаспределенияПересортицы.ОстатокОприходование = СтрТабл.Остаток;
			КонецЕсли;
			
			Если СтрокаРаспределенияПорчи <> Неопределено Тогда
				СтрокаРаспределенияПорчи.ОстатокОприходование = СтрТабл.Остаток;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаРаспределения <> Неопределено Тогда
			СтрокаРаспределения.Остаток = СтрТабл.Остаток;
		КонецЕсли;
		
		
		Если СтрТабл.Остаток < 0 Тогда
			
			Если СтрокаРаспределения <> Неопределено Тогда
				
				КоличествоКСписанию = СтрокаРаспределения.Количество + СтрТабл.Остаток;
				
				Если КоличествоКСписанию < 0 Тогда
					КоличествоКСписанию = 0;
				КонецЕсли;
				
				
				
				СтрокаКОформлению = СтрокаКОформлениюПоКлючу(СтрокаРаспределения.КлючСвязи, "Списание");
				
				КЗачету = СтрокаРаспределения.Количество - КоличествоКСписанию;
				СтрокаРаспределения.Количество = КоличествоКСписанию;
				
		
				СтрТабл.Остаток = СтрТабл.Остаток + КЗачету;
				СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.КоличествоНеРаспределено + КЗачету;
				СтрокаКОформлению.КоличествоРаспределено = СтрокаКОформлению.Количество - СтрокаКОформлению.КоличествоНеРаспределено;
				
				СтрокаРаспределения.Распределено = (СтрокаРаспределения.Количество <> 0 );
				СтрокаРаспределения.Стоимость = СтрокаРаспределения.Количество * СтрокаРаспределения.Цена;
			КонецЕсли;
			
			
			Если СтрТабл.Остаток < 0 Тогда
				
				Если (СтрокаРаспределенияПересортицы = Неопределено
					И СтрокаРаспределенияПорчи = Неопределено)
					Или (СтрТабл.Номенклатура = СтрокаРаспределенияПересортицы.НоменклатураОприходование
					И СтрТабл.Характеристика = СтрокаРаспределенияПересортицы.ХарактеристикаОприходование) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаРаспределенияПересортицы <> Неопределено Тогда
					ИмяОперации = "Пересортица";
					СтрокаРаспределенияОперации = СтрокаРаспределенияПересортицы;
				Иначе
					ИмяОперации = "Порча";
					СтрокаРаспределенияОперации = СтрокаРаспределенияПорчи;
				КонецЕсли;
					
					КоличествоКСписанию = СтрокаРаспределенияОперации.Количество + СтрТабл.Остаток;
					
					Если КоличествоКСписанию < 0 Тогда
						КоличествоКСписанию = 0;
					КонецЕсли;
					
					
					СтрокаОперации = СтрокаКОформлениюПоКлючу(СтрокаРаспределенияПересортицы.КлючСвязи,ИмяОперации);
					
					КЗачету = СтрокаРаспределенияОперации.Количество - КоличествоКСписанию;
					СтрокаРаспределенияПересортицы.Количество =  КоличествоКСписанию;
					
					СтрТабл.Остаток = СтрТабл.Остаток + КЗачету;
					СтрокаОперации.КоличествоНеРаспределено = СтрокаОперации.КоличествоНеРаспределено + КЗачету;
					СтрокаОперации.КоличествоРаспределено   = СтрокаОперации.Количество - СтрокаОперации.КоличествоНеРаспределено;
					
					СтрокаОперации.Распределено = (СтрокаРаспределения.Количество <> 0 );
					СтрокаРаспределения.Стоимость = СтрокаРаспределения.Количество * СтрокаРаспределения.Цена;
				КонецЕсли;
				
				Если СтрокаРаспределения <> Неопределено Тогда
					СтрокаРаспределения.Остаток = СтрТабл.Остаток;
				КонецЕсли;
				
				Если СтрокаРаспределенияОперации <> Неопределено Тогда
					СтрокаРаспределенияОперации.ОстатокСписание = СтрТабл.Остаток;
				КонецЕсли;
			
		КонецЕсли;
		
		///////////////////////////////////////////////////////////////////////////////
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", СтрТабл.Организация);
		СтруктураПоиска.Вставить("Номенклатура",СтрТабл.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика",СтрТабл.Характеристика);
		
		СтрокиРаспределения = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиРаспределения.Количество()> 0 Тогда
			
			СтрокаРаспределения = СтрокиРаспределения[0];
			
			СтрТабл.Остаток = СтрТабл.Остаток + СтрокаРаспределения.Количество;
			СтрокаРаспределения.Остаток = СтрТабл.Остаток
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОснованиеПриИзмененииСервер(СкладПоОснованию = Истина)
	
	Объект.ДокументОснование = СкладыСервер.ОснованиеОформленияИзлишковНедостачТоваров(Объект.ДокументОснование);
	
	ИспользуетсяКачествоТоваров = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РаспоряжениеНаИнвентаризациюТоваров") 
		ИЛИ ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПересчетТоваров") Тогда
		ПоОрдеру = Ложь;
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование,
								Новый Структура("Склад, ВидЦены"));
		Если НЕ ЗначениеЗаполнено(ЗначенияРеквизитов.ВидЦены) И ЗначениеЗаполнено(ЗначенияРеквизитов.Склад) Тогда
			ЗначенияРеквизитов.ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗначенияРеквизитов.Склад,"УчетныйВидЦены");
		КонецЕсли;
	Иначе
		ПоОрдеру = Истина;
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДокументОснование,
								Новый Структура("Склад, ВидЦены","Склад","Склад.УчетныйВидЦены"));
	КонецЕсли;
	
	Объект.ВидЦены = ЗначенияРеквизитов.ВидЦены;
	
	Если СкладПоОснованию Тогда
		Объект.Склад = ЗначенияРеквизитов.Склад;
	КонецЕсли;
	
	ОчиститьТаблицы();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ДокументыПоОснованию.Отбор, "ДокументОснование",Объект.ДокументОснование, ВидСравненияКомпоновкиДанных.Равно,,Истина);
	
	Элементы.ОтборСтрокНоменклатуры.Видимость = Не ПоОрдеру;
	Элементы.СтраницаПересортица.Видимость = Не ПоОрдеру;
	Элементы.СтраницаПорча.Видимость = Не ПоОрдеру;
	Элементы.ФормаОтразитьПорчуТоваров.Видимость = Не ПоОрдеру;
	Элементы.ТоварыКОприходованиюЗачестьПоПорче.Видимость = Не ПоОрдеру;
	Элементы.ТоварыКСписаниюЗачестьПоПорче.Видимость = Не ПоОрдеру;
	
	Если ПоОрдеру Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОрдерНаОтражениеИзлишковТоваров") Тогда
			Элементы.ГруппаТоварыКСписанию.Видимость = Ложь;
			Элементы.ГруппаТоварыКОприходованию.Видимость = Истина;
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОрдерНаОтражениеНедостачТоваров") Тогда
			Элементы.ГруппаТоварыКСписанию.Видимость = Истина;
			Элементы.ГруппаТоварыКОприходованию.Видимость = Ложь;
		ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ОрдерНаОтражениеПорчиТоваров") Тогда
			Элементы.ГруппаТоварыКСписанию.Видимость = Истина;
			Элементы.ГруппаТоварыКОприходованию.Видимость = Истина;
			Элементы.СтраницаПорча.Видимость = Истина;
			Элементы.ФормаОтразитьПорчуТоваров.Видимость = Истина;
			Элементы.ТоварыКОприходованиюЗачестьПоПорче.Видимость = Истина;
			Элементы.ТоварыКСписаниюЗачестьПоПорче.Видимость = Истина;
		КонецЕсли;
		
		Элементы.ТоварыКОприходованиюЗачестьПоПересортице.Видимость = Ложь;
		Элементы.ТоварыКСписаниюЗачестьПоПересортице.Видимость = Ложь;
		Элементы.ТоварыКОприходованиюЗачестьПоПересортицеПорче.Видимость = Ложь;
		Элементы.ТоварыКСписаниюЗачестьПоПересортицеПорче.Видимость = Ложь;
		Элементы.КонтекстноеМенюТоварыКОприходованиюЗачестьПоПересортице.Видимость = Ложь;
		Элементы.КонтекстноеМенюТоварыКСписаниюЗачестьПоПересортице.Видимость = Ложь;
	Иначе
		Элементы.ГруппаТоварыКОприходованию.Видимость = Истина;
		Элементы.ГруппаТоварыКСписанию.Видимость = Истина;
		
		Если ИспользуетсяКачествоТоваров Тогда
			Элементы.ТоварыКОприходованиюЗачестьПоПересортице.Видимость = Ложь;
			Элементы.ТоварыКСписаниюЗачестьПоПересортице.Видимость = Ложь;
			Элементы.ТоварыКОприходованиюЗачестьПоПорче.Видимость = Ложь;
			Элементы.ТоварыКСписаниюЗачестьПоПорче.Видимость = Ложь;
		Иначе
			Элементы.ФормаОтразитьПорчуТоваров.Видимость = Ложь;
			Элементы.ТоварыКОприходованиюЗачестьПоПересортицеПорче.Видимость = Ложь;
			Элементы.ТоварыКСписаниюЗачестьПоПересортицеПорче.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Валюта = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	
	ЦенаСВалютой 	  = НСтр("ru = 'Цена (%Валюта%)'");
	ЦенаСВалютой      = СтрЗаменить(ЦенаСВалютой,"%Валюта%",Валюта);
	
	СтоимостьСВалютой = НСтр("ru = 'Стоимость(оценка) (%Валюта%)'");
	СтоимостьСВалютой = СтрЗаменить(ЦенаСВалютой,"%Валюта%",Валюта);
	
	Элементы.ТоварыКОприходованиюЦена.Заголовок 			= ЦенаСВалютой;
	Элементы.ТоварыКСписаниюЦена.Заголовок					= ЦенаСВалютой;
	Элементы.ТоварыПересортицаЦенаОприходование.Заголовок 	= ЦенаСВалютой;
	Элементы.ТоварыПересортицаЦенаСписание.Заголовок 		= ЦенаСВалютой;
	Элементы.ТоварыПорчаЦенаОприходование.Заголовок 		= ЦенаСВалютой;
	Элементы.ТоварыПорчаЦенаСписание.Заголовок 				= ЦенаСВалютой;
	Элементы.ОперацииКОформлениюСтоимость.Заголовок			= СтоимостьСВалютой;
	Элементы.СоставОперацийСтоимость.Заголовок				= СтоимостьСВалютой;
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗачетПересортицыПорчи(КлючСтрокиСписания,КлючСтрокиОприходования,КлючСтрокиОперации, ПараметрыЗачета, ИскатьСтрокиКОформлению = Ложь, ИмяОперации, ОбновитьОстатки = Ложь)
	
	Если ОбновитьОстатки Тогда
		ИмяТаблицы = "ТоварыРаспределение" + ИмяОперации;
		СтрокиРаспределения = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("КлючСвязи", КлючСтрокиОперации));
		ОбновлятьОстатки = Ложь;
		Для Каждого СтрРасприделения Из СтрокиРаспределения Цикл
			Если СтрРасприделения.Количество > 0 Тогда
				ОбновлятьОстатки = Истина;
				СтрРасприделения.ОстатокСписание = СтрРасприделения.ОстатокСписание + СтрРасприделения.Количество;
				СтрРасприделения.ОстатокОприходование = СтрРасприделения.ОстатокОприходование - СтрРасприделения.Количество;
				СтрРасприделения.Модифицирована = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбновлятьОстатки Тогда
			ТаблицаПоиска = ?(ИмяОперации = "Порча", "Пересортица", "Порча");
			СкорректироватьОстаткиВТоварыРаспределениеПересортицаПорча(ТаблицаПоиска);
			СкорректироватьОстаткиВТоварыРаспределение(ИмяОперации);
		КонецЕсли;
	КонецЕсли;
	
	
	Если КлючСтрокиОперации = 0
		И (КлючСтрокиСписания = 0
		Или КлючСтрокиОприходования = 0) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОперации = Неопределено;
	СтрокаСписания = Неопределено;
	СтрокаОприходования = Неопределено;
	
	Если КлючСтрокиОперации <> 0 Тогда
		СтрокаОперации = СтрокаКОформлениюПоКлючу(КлючСтрокиОперации,ИмяОперации);
	КонецЕсли;
	
	Если ИскатьСтрокиКОформлению
		И СтрокаОперации <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",СтрокаОперации.НоменклатураСписание);
		СтруктураПоиска.Вставить("Характеристика", СтрокаОперации.ХарактеристикаСписание);
		
		СтрокиСписания = Объект.ТоварыКСписанию.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиСписания.Количество() > 0 Тогда
			СтрокаСписания 		 = СтрокиСписания[0];
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура",СтрокаОперации.НоменклатураОприходование);
		СтруктураПоиска.Вставить("Характеристика", СтрокаОперации.ХарактеристикаОприходование);
		
		СтрокиОприходования = Объект.ТоварыКОприходованию.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиОприходования.Количество() > 0 Тогда
			СтрокаОприходования = СтрокиОприходования[0];
		КонецЕсли;
		
	Иначе
		Если КлючСтрокиСписания <> 0 Тогда
			СтрокаСписания = СтрокаКОформлениюПоКлючу(КлючСтрокиСписания, "Списание");
		КонецЕсли;
		
		Если КлючСтрокиОприходования <> 0 Тогда
			СтрокаОприходования = СтрокаКОформлениюПоКлючу(КлючСтрокиОприходования, "Оприходование"); 
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаОприходования = Неопределено Тогда
		Объект.МаксимальныйКлючСвязи = Объект.МаксимальныйКлючСвязи + 1;
		СтрокаОприходования = Объект.ТоварыКОприходованию.Добавить();
		
		СтрокаОприходования.Номенклатура               = СтрокаОперации.НоменклатураОприходование;
		СтрокаОприходования.Характеристика             = СтрокаОперации.ХарактеристикаОприходование;
		СтрокаОприходования.ХарактеристикиИспользуются = СтрокаОперации.ХарактеристикиИспользуютсяОприходование;
		СтрокаОприходования.СтавкаНДС                  = СтрокаОперации.СтавкаНДС;
		СтрокаОприходования.КлючСвязи                  = Объект.МаксимальныйКлючСвязи;
		СтрокаОприходования.Цена 			           = СтрокаОперации.ЦенаОприходование;
		
		СтрокиРаспределенения = Объект["ТоварыРаспределение" + ИмяОперации].НайтиСтроки(Новый Структура("КлючСвязи",СтрокаОперации.КлючСвязи));
		
		Для Каждого СтрМас из СтрокиРаспределенения Цикл
			
			НоваяСтрока = Объект.ТоварыРаспределениеОприходование.Добавить();
			
			НоваяСтрока.КлючСвязи      = СтрокаОприходования.КлючСвязи;
			НоваяСтрока.Номенклатура   = СтрМас.НоменклатураОприходование;
			НоваяСтрока.Характеристика = СтрМас.ХарактеристикаОприходование;
			НоваяСтрока.Организация    = СтрМас.Организация;
			НоваяСтрока.Остаток        = СтрМас.ОстатокОприходование;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтрокаСписания = Неопределено Тогда
		Объект.МаксимальныйКлючСвязи = Объект.МаксимальныйКлючСвязи + 1;
		
		СтрокаСписания = Объект.ТоварыКСписанию.Добавить();
		
		СтрокаСписания.Номенклатура               = СтрокаОперации.НоменклатураСписание;
		СтрокаСписания.Характеристика             = СтрокаОперации.ХарактеристикаСписание;
		СтрокаСписания.ХарактеристикиИспользуются = СтрокаОперации.ХарактеристикиИспользуютсяСписание;
		СтрокаСписания.СтавкаНДС                  = СтрокаОперации.СтавкаНДС;
		СтрокаСписания.КлючСвязи                  = Объект.МаксимальныйКлючСвязи;
		СтрокаСписания.Цена 			          = СтрокаОперации.ЦенаСписание;
		
		СтрокиРаспределенения = Объект["ТоварыРаспределение" + ИмяОперации].НайтиСтроки(Новый Структура("КлючСвязи",СтрокаОперации.КлючСвязи));
		
		Для Каждого СтрМас из СтрокиРаспределенения Цикл
			
			НоваяСтрока = Объект.ТоварыРаспределениеСписание.Добавить();
			
			НоваяСтрока.КлючСвязи      = СтрокаСписания.КлючСвязи;
			НоваяСтрока.Номенклатура   = СтрМас.НоменклатураСписание;
			НоваяСтрока.Характеристика = СтрМас.ХарактеристикаСписание;
			НоваяСтрока.Организация    = СтрМас.Организация;
			НоваяСтрока.Остаток        = СтрМас.ОстатокСписание;
		
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокаОперации = Неопределено Тогда
		
		Объект.МаксимальныйКлючСвязи = Объект.МаксимальныйКлючСвязи + 1;
		
		СтрокаОперации = Объект["Товары" + ИмяОперации].Добавить();
		
		СтрокаОперации.НоменклатураСписание                    = СтрокаСписания.Номенклатура;
		СтрокаОперации.ХарактеристикаСписание                  = СтрокаСписания.Характеристика;
		СтрокаОперации.ХарактеристикиИспользуютсяСписание      = СтрокаСписания.ХарактеристикиИспользуются;
		СтрокаОперации.СтавкаНДС                               = СтрокаСписания.СтавкаНДС;
		СтрокаОперации.НоменклатураОприходование               = СтрокаОприходования.Номенклатура;
		СтрокаОперации.ХарактеристикаОприходование             = СтрокаОприходования.Характеристика;
		СтрокаОперации.ХарактеристикиИспользуютсяОприходование = СтрокаОприходования.ХарактеристикиИспользуются;
		СтрокаОперации.КлючСвязи                               = Объект.МаксимальныйКлючСвязи;
		СтрокаОперации.ЦенаОприходование 		               = СтрокаОприходования.Цена;
		СтрокаОперации.ЦенаСписание				               = СтрокаСписания.Цена;
		
		СтрокиРаспределенения = Объект.ТоварыРаспределениеСписание.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаСписания.КлючСвязи));
		
		Для Каждого СтрМас из СтрокиРаспределенения Цикл
			
			НоваяСтрока = Объект["ТоварыРаспределение" + ИмяОперации].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОперации,,"Количество");
			НоваяСтрока.Организация = СтрМас.Организация;
			НоваяСтрока.ОстатокСписание = СтрМас.Остаток;
			
			СтрокаРаспределенияОприходования = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(Новый Структура("КлючСвязи,Организация",СтрокаОприходования.КлючСвязи,СтрМас.Организация))[0];
			
			НоваяСтрока.ОстатокОприходование = СтрокаРаспределенияОприходования.Остаток;
			
		КонецЦикла;
	КонецЕсли;
	
	
	КЗачету = ПараметрыЗачета.КЗачету - СтрокаОперации.Количество;
	
	
	СкорректироватьПересортицаПорча(СтрокаОперации, ПараметрыЗачета.ОчищатьРаспределениеОперации, КЗачету, ИмяОперации);
	СкорректироватьКОформлению(СтрокаСписания, ПараметрыЗачета.ОчищатьРаспределениеСписание, КЗачету, "Списание");
	СкорректироватьКОформлению(СтрокаОприходования, ПараметрыЗачета.ОчищатьРаспределениеОприходование, КЗачету, "Оприходование");
	
	СформироватьСписокСовпадающейНоменклатуры();
	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьПересортицаПорча(СтрокаОперации, ОчищатьРаспределение, КЗачету, ИмяОперации)
	
	СтрокаОперации.Количество = СтрокаОперации.Количество + КЗачету; 
	
	Если СтрокаОперации.Количество = 0 Тогда
		
		СтрокиРаспределения = Объект["ТоварыРаспределение" + ИмяОперации].НайтиСтроки(Новый Структура("КлючСвязи", СтрокаОперации.КлючСвязи));
		
		Для Каждого СтрМас из СтрокиРаспределения Цикл
			 Объект["ТоварыРаспределение" + ИмяОперации].Удалить(СтрМас);
		КонецЦикла;
		
		Объект["Товары" + ИмяОперации].Удалить(СтрокаОперации);
		
	ИначеЕсли ОчищатьРаспределение Тогда
		
		СтрокиРаспределения = Объект["ТоварыРаспределение" + ИмяОперации].НайтиСтроки(Новый Структура("КлючСвязи", СтрокаОперации.КлючСвязи));
		
		Для Каждого СтрМас из СтрокиРаспределения Цикл
			СтрМас.Количество = 0;
			СтрМас.Стоимость = 0;
			
			СтрМас.Распределено = Ложь;
		КонецЦикла;
		
		СтрокаОперации.КоличествоНеРаспределено = СтрокаОперации.Количество;
		СтрокаОперации.КоличествоРаспределено = 0;
		
	Иначе
		
		СтрокаОперации.КоличествоНеРаспределено = СтрокаОперации.КоличествоНеРаспределено + КЗачету;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура СкорректироватьКОформлению(СтрокаКОформлению, ОчищатьРаспределение, КЗачету, ТипОперации)

	СтрокаКОформлению.Количество = СтрокаКОформлению.Количество - КЗачету;
	
	Если СтрокаКОформлению.Количество = 0 Тогда
		
		СтрокиРаспределения = Объект.ТоварыРаспределениеСписание.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаКОформлению.КлючСвязи));
		
		Для Каждого СтрМас из СтрокиРаспределения Цикл
			Объект.ТоварыРаспределениеСписание.Удалить(СтрМас);
		КонецЦикла;
		
		СтрокиРаспределения = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаКОформлению.КлючСвязи));
		
		Для Каждого СтрМас из СтрокиРаспределения Цикл
			Объект.ТоварыРаспределениеОприходование.Удалить(СтрМас);
		КонецЦикла;
		
		Если ТипОперации = "Списание" Тогда
			Объект.ТоварыКСписанию.Удалить(СтрокаКОформлению);
		Иначе
			Объект.ТоварыКОприходованию.Удалить(СтрокаКОформлению);
		КонецЕсли;
	
	ИначеЕсли ОчищатьРаспределение Тогда
		Если ТипОперации = "Списание" Тогда
			СтрокиРаспределения = Объект.ТоварыРаспределениеСписание.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаКОформлению.КлючСвязи));
			
			Для Каждого СтрМас из СтрокиРаспределения Цикл
				
				СтрМас.Остаток = СтрМас.Остаток + СтрМас.Количество; 
				СтрМас.Количество = 0;
				СтрМас.Стоимость = 0;
				СтрМас.Распределено = Ложь;
				СтрМас.Модифицирована = Истина;
			КонецЦикла;
		Иначе
			СтрокиРаспределения = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаКОформлению.КлючСвязи));
			
			Для Каждого СтрМас из СтрокиРаспределения Цикл
				
				СтрМас.Остаток = СтрМас.Остаток - СтрМас.Количество; 
				СтрМас.Количество = 0;
				СтрМас.Распределено = Ложь;
				СтрМас.Стоимость = 0;
				СтрМас.Модифицирована = Истина;
			КонецЦикла;
		КонецЕсли;
		СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.Количество;
		СтрокаКОформлению.КоличествоРаспределено = 0;
		
	Иначе
		СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.КоличествоНеРаспределено - КЗачету;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СтрокаКОформлениюПоКлючу(КлючСвязи, ТипОперации)
	Если ТипОперации = "Списание" Тогда
		Возврат Объект.ТоварыКСписанию.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи))[0];
	ИначеЕсли ТипОперации = "Оприходование" Тогда
		Возврат Объект.ТоварыКОприходованию.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи))[0];
	ИначеЕсли ТипОперации = "Пересортица" Тогда
		Возврат Объект.ТоварыПересортица.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи))[0];
	ИначеЕсли ТипОперации = "Порча" Тогда
		Возврат Объект.ТоварыПорча.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи))[0];
	КонецЕсли;
КонецФункции

&НаСервере
Процедура РаспределитьСписанияПоОрганизациямСервер(АдресОрганизаций)
	
	ЗагрузитьОрганизацииИзВременногоХранилища(АдресОрганизаций);
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("СтрокаРаспределения");
	ТаблицаРаспределения.Колонки.Добавить("Порядок",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРаспределения.Колонки.Добавить("Распределять",Новый ОписаниеТипов("Булево"));
	
	ОченьБольшоеЧисло = 999999999;
	
	Для каждого СтрМас из Элементы.ТоварыКСписанию.ВыделенныеСтроки Цикл
		
		СтрокаКСписанию = Объект.ТоварыКСписанию.НайтиПоИдентификатору(СтрМас);
		
		КоличествоЗачет = СтрокаКСписанию.Количество;
		
		СтрокиРаспределения = Объект.ТоварыРаспределениеСписание.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаКСписанию.КлючСвязи));
		
		ТаблицаРаспределения.Очистить();
		
		Для Каждого СтрМас из СтрокиРаспределения Цикл
			
			НоваяСтрока = ТаблицаРаспределения.Добавить();
			НоваяСтрока.СтрокаРаспределения = СтрМас;
			
			ВыбраннаяОрганизация = Объект.ВыбранныеОрганизации.НайтиСтроки(Новый Структура("Организация", СтрМас.Организация));
			
			Если ВыбраннаяОрганизация.Количество() > 0 Тогда
				
				НоваяСтрока.Порядок = ВыбраннаяОрганизация[0].НомерСтроки;
				НоваяСтрока.Распределять = Истина;
				
			Иначе
				
				НоваяСтрока.Распределять = Ложь;
				НоваяСтрока.Порядок = ОченьБольшоеЧисло;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаРаспределения.Сортировать("Порядок");
		
		Для Каждого СтрТабл из ТаблицаРаспределения Цикл
			
			Если СтрТабл.Распределять Тогда
				
				Количество = Мин(КоличествоЗачет, СтрТабл.СтрокаРаспределения.Остаток + СтрТабл.СтрокаРаспределения.Количество);
				
				Если Количество < 0 Тогда
					Количество = 0;
				КонецЕсли;
				
				Дельта = СтрТабл.СтрокаРаспределения.Количество - Количество;
				
				Если Дельта <> 0 Тогда
					
					СтрТабл.СтрокаРаспределения.Остаток = СтрТабл.СтрокаРаспределения.Остаток + Дельта; 					
					
					СтрТабл.СтрокаРаспределения.Количество = Количество;
					СтрТабл.СтрокаРаспределения.Модифицирована = Истина;
				КонецЕсли;
				
				КоличествоЗачет = КоличествоЗачет - Количество;
				
			Иначе
				Если СтрТабл.СтрокаРаспределения.Количество <> 0 Тогда
					СтрТабл.СтрокаРаспределения.Остаток = СтрТабл.СтрокаРаспределения.Остаток + СтрТабл.СтрокаРаспределения.Количество;
					СтрТабл.СтрокаРаспределения.Количество = 0;
					СтрТабл.СтрокаРаспределения.Модифицирована = Истина;
				КонецЕсли;
			КонецЕсли;
			
			СтрТабл.СтрокаРаспределения.Распределено = (СтрТабл.СтрокаРаспределения.Количество <> 0 );
			СтрТабл.СтрокаРаспределения.Стоимость = СтрТабл.СтрокаРаспределения.Количество * СтрокаКСписанию.Цена; 
		КонецЦикла;
		
		СтрокаКСписанию.КоличествоНеРаспределено = КоличествоЗачет;
		СтрокаКСписанию.КоличествоРаспределено = СтрокаКСписанию.Количество - СтрокаКСписанию.КоличествоНеРаспределено;
		
		Если СтрокаКСписанию.КоличествоРаспределено = 0 Тогда
			ТекстСообщения = НСтр("ru = 'По товару ""%Товар%"" у выбранных организаций нет остатка, поэтому распределение не выполнено.'");
			
			ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаКСписанию.Номенклатура, СтрокаКСписанию.Характеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%", ПредставлениеТовара);  
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РаспределитьОприходованияПоОрганизациямСервер(Организация)
	
	Для каждого СтрМас из Элементы.ТоварыКОприходованию.ВыделенныеСтроки Цикл
		
		СтрокаКОприходованию = Объект.ТоварыКОприходованию.НайтиПоИдентификатору(СтрМас);
		
		СтрокаРаспределения = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(Новый Структура("КлючСвязи, Организация", СтрокаКОприходованию.КлючСвязи, Организация))[0];
		
		КоличествоДоОперации = СтрокаРаспределения.Количество;
		
		СтрокаРаспределения.Количество = СтрокаКОприходованию.КоличествоНеРаспределено + СтрокаРаспределения.Количество;
		СтрокаРаспределения.Остаток    = СтрокаРаспределения.Остаток - КоличествоДоОперации + СтрокаРаспределения.Количество; 
		СтрокаРаспределения.Стоимость  = СтрокаРаспределения.Количество * СтрокаКОприходованию.Цена;
		
		СтрокаКОприходованию.КоличествоНеРаспределено = 0;
		СтрокаКОприходованию.КоличествоРаспределено   = СтрокаКОприходованию.Количество;
		
		СтрокаРаспределения.Модифицирована = СтрокаРаспределения.Модифицирована ИЛИ (КоличествоДоОперации <> СтрокаРаспределения.Количество);
		СтрокаРаспределения.Распределено = (СтрокаРаспределения.Количество <> 0 );
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РаспределитьПересортицыПорчиПоОрганизациямСервер(АдресОрганизаций, ИмяОперации)
	
	ЗагрузитьОрганизацииИзВременногоХранилища(АдресОрганизаций);
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("СтрокаРаспределения");
	ТаблицаРаспределения.Колонки.Добавить("Порядок",Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаРаспределения.Колонки.Добавить("Распределять",Новый ОписаниеТипов("Булево"));
	
	ОченьБольшоеЧисло = 999999999;
	
	Для каждого СтрМас из Элементы["Товары" + ИмяОперации].ВыделенныеСтроки Цикл
		
		СтрокаОперации = Объект["Товары" + ИмяОперации].НайтиПоИдентификатору(СтрМас);
		
		КоличествоЗачет = СтрокаОперации.Количество;
		
		СтрокиРаспределения = Объект["ТоварыРаспределение" + ИмяОперации].НайтиСтроки(Новый Структура("КлючСвязи", СтрокаОперации.КлючСвязи));
		
		ТаблицаРаспределения.Очистить();
		
		Для Каждого СтрМас из СтрокиРаспределения Цикл
			
			НоваяСтрока = ТаблицаРаспределения.Добавить();
			НоваяСтрока.СтрокаРаспределения = СтрМас;
			
			ВыбраннаяОрганизация = Объект.ВыбранныеОрганизации.НайтиСтроки(Новый Структура("Организация", СтрМас.Организация));
			
			Если ВыбраннаяОрганизация.Количество() > 0 Тогда
				
				НоваяСтрока.Порядок = ВыбраннаяОрганизация[0].НомерСтроки;
				НоваяСтрока.Распределять = Истина;
				
			Иначе
				
				НоваяСтрока.Распределять = Ложь;
				НоваяСтрока.Порядок = ОченьБольшоеЧисло;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаРаспределения.Сортировать("Порядок");
		
		Для Каждого СтрТабл из ТаблицаРаспределения Цикл
			
			Если СтрТабл.Распределять Тогда
				
				Количество = Мин(КоличествоЗачет, СтрТабл.СтрокаРаспределения.ОстатокСписание + СтрТабл.СтрокаРаспределения.Количество);
				
				Если Количество < 0 Тогда
					Количество = 0;
				КонецЕсли;
				
				Дельта = СтрТабл.СтрокаРаспределения.Количество - Количество;
				
				Если Дельта <> 0 Тогда
					
					СтрТабл.СтрокаРаспределения.ОстатокСписание = СтрТабл.СтрокаРаспределения.ОстатокСписание + Дельта; 					
					СтрТабл.СтрокаРаспределения.ОстатокОприходование = СтрТабл.СтрокаРаспределения.ОстатокОприходование - Дельта; 					
					СтрТабл.СтрокаРаспределения.Количество = Количество;
					СтрТабл.СтрокаРаспределения.Модифицирована = Истина;
				КонецЕсли;
				
				КоличествоЗачет = КоличествоЗачет - Количество;
				
			Иначе
				Если СтрТабл.СтрокаРаспределения.Количество <> 0 Тогда
					СтрТабл.СтрокаРаспределения.ОстатокСписание = СтрТабл.СтрокаРаспределения.ОстатокСписание + СтрТабл.СтрокаРаспределения.Количество;
					СтрТабл.СтрокаРаспределения.ОстатокОприходование = СтрТабл.СтрокаРаспределения.ОстатокОприходование - СтрТабл.СтрокаРаспределения.Количество;
					
					СтрТабл.СтрокаРаспределения.Количество = 0;
					СтрТабл.СтрокаРаспределения.Модифицирована = Истина;
				КонецЕсли;
			КонецЕсли;
			
			СтрТабл.СтрокаРаспределения.Распределено = (СтрТабл.СтрокаРаспределения.Количество <> 0 );
			СкорректироватьКоличествоОстаток(СтрТабл.СтрокаРаспределения, ИмяОперации);
		КонецЦикла;
		
		СтрокаОперации.КоличествоНеРаспределено = КоличествоЗачет;
		СтрокаОперации.КоличествоРаспределено = СтрокаОперации.Количество - СтрокаОперации.КоличествоНеРаспределено;
		
		Если СтрокаОперации.КоличествоРаспределено = 0 Тогда
			ТекстСообщения = НСтр("ru = 'По товару ""%Товар%"" у выбранных организаций нет остатка, поэтому распределение не выполнено.'");
			
			ПредставлениеТовара = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(СтрокаОперации.НоменклатураСписание,
																						СтрокаОперации.ХарактеристикаСписание);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Товар%", ПредставлениеТовара);  
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьРаспределения()
	Возврат ((Объект.ТоварыРаспределениеСписание.НайтиСтроки(Новый Структура("Распределено", Истина)).Количество() > 0)
			 Или (Объект.ТоварыРаспределениеОприходование.НайтиСтроки(Новый Структура("Распределено", Истина)).Количество() > 0)
			 Или (Объект.ТоварыРаспределениеПересортица.НайтиСтроки(Новый Структура("Распределено", Истина)).Количество() > 0))
КонецФункции

&НаСервере
Процедура ОчиститьТаблицы()
	Объект.ТоварыКСписанию.Очистить();
	Объект.ТоварыКОприходованию.Очистить();
	Объект.ТоварыРаспределениеСписание.Очистить();
	Объект.ТоварыРаспределениеОприходование.Очистить();
	Объект.ТоварыПересортица.Очистить();
	Объект.ТоварыРаспределениеПересортица.Очистить();
	Объект.ТоварыПорча.Очистить();
	Объект.ТоварыРаспределениеПорча.Очистить();
	Объект.ОперацииКОформлению.Очистить();
	Объект.СоставОпераций.Очистить();
КонецПроцедуры

&НаСервере
Функция НовоеСписаниеНедостачТоваров(Организация,СсылкаНаДокумент)
	
	СтруктураДанных = Новый Структура;
	
	Шапка  			= Новый Структура;
	Шапка.Вставить("Дата",ТекущаяДата());
	Шапка.Вставить("Организация",Организация);
	Шапка.Вставить("Склад",Объект.Склад);
	Шапка.Вставить("ДокументОснование",Объект.ДокументОснование);
	Шапка.Вставить("ВидЦены",Объект.ВидЦены);
	
	СтруктураДанных.Вставить("Шапка", Шапка);
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	СтруктураОтбора.Вставить("Распределено", Истина);
	
	СтрокиРаспределения = Объект.ТоварыРаспределениеСписание.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого СтрМас из СтрокиРаспределения Цикл
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТаблицаТовары", ТаблицаТовары);
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(СтруктураДанных, АдресДанныхДокументаВХранилище);	
	Иначе
		АдресДанныхДокументаВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(СсылкаНаДокумент),СсылкаНаДокумент.ВерсияДанных,"");
	
КонецФункции

&НаСервере
Процедура СкорректироватьКоличествоОстаток(СтрокаРаспределение, ВидОперации)
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("Организация", СтрокаРаспределение.Организация);
	ПараметрыПоиска.Вставить("НоменклатураОприходование", СтрокаРаспределение.НоменклатураОприходование);
	ПараметрыПоиска.Вставить("НоменклатураСписание", СтрокаРаспределение.НоменклатураСписание);
	ПараметрыПоиска.Вставить("ХарактеристикаОприходование", СтрокаРаспределение.ХарактеристикаОприходование);
	ПараметрыПоиска.Вставить("ХарактеристикаСписание", СтрокаРаспределение.ХарактеристикаСписание);
	
	
	Если ВидОперации = "Порча" Тогда
		ИмяТаблицы = "ТоварыРаспределениеПересортица"
	Иначе
		ИмяТаблицы = "ТоварыРаспределениеПорча"
	КонецЕсли;
	
	НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого Строка из НайденныеСтроки Цикл
			Строка.ОстатокСписание = СтрокаРаспределение.ОстатокСписание;
			Строка.ОстатокОприходование = СтрокаРаспределение.ОстатокОприходование;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НовоеОприходованиеИзлишковТоваров(Организация,СсылкаНаДокумент)
	
	СтруктураДанных = Новый Структура;
	
	Шапка  			= Новый Структура;
	Шапка.Вставить("Дата",ТекущаяДата());
	Шапка.Вставить("Организация",Организация);
	Шапка.Вставить("Склад",Объект.Склад);
	Шапка.Вставить("ДокументОснование",Объект.ДокументОснование);
	Шапка.Вставить("ВидЦены", Объект.ВидЦены);
	
	СтруктураДанных.Вставить("Шапка", Шапка);
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	ТаблицаТовары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	ТаблицаТовары.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	СтруктураОтбора.Вставить("Распределено", Истина);
	
	СтрокиРаспределения = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(СтруктураОтбора);
	Цена = Неопределено;
	
	Для Каждого СтрМас из СтрокиРаспределения Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
		Если Цена = Неопределено Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", НоваяСтрока.Номенклатура, НоваяСтрока.Характеристика);
			МассивСтрок = Объект.ТоварыКОприходованию.НайтиСтроки(СтруктураПоиска);
			НоваяСтрока.Цена = ?(МассивСтрок.Количество() > 0, МассивСтрок[0].Цена, 0);
		Иначе
			НоваяСтрока.Цена = Цена;
		КонецЕсли;
		НоваяСтрока.Сумма = НоваяСтрока.Количество * НоваяСтрока.Цена;
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТаблицаТовары", ТаблицаТовары);
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(СтруктураДанных, АдресДанныхДокументаВХранилище);	
	Иначе
		АдресДанныхДокументаВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(СсылкаНаДокумент),СсылкаНаДокумент.ВерсияДанных,"");
	
КонецФункции

&НаСервере
Функция НоваяПересортицаТоваров(Организация,СсылкаНаДокумент)
	
	СтруктураДанных = Новый Структура;
	
	Шапка  			= Новый Структура;
	Шапка.Вставить("Дата",ТекущаяДата());
	Шапка.Вставить("Организация",Организация);
	Шапка.Вставить("Склад",Объект.Склад);
	Шапка.Вставить("ДокументОснование",Объект.ДокументОснование);
	Шапка.Вставить("ВидЦены", Объект.ВидЦены);
	
	СтруктураДанных.Вставить("Шапка", Шапка);
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("НоменклатураОприходование", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("ХарактеристикаОприходование", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	ТаблицаТовары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	СтруктураОтбора.Вставить("Распределено", Истина);
	
	СтрокиРаспределения = Объект.ТоварыРаспределениеПересортица.НайтиСтроки(СтруктураОтбора);
	Цена = Неопределено;
	
	Для Каждого СтрМас из СтрокиРаспределения Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
		
		НоваяСтрока.Номенклатура   = СтрМас.НоменклатураСписание;
		НоваяСтрока.Характеристика = СтрМас.ХарактеристикаСписание;
		
		НоваяСтрока.НоменклатураОприходование   = СтрМас.НоменклатураОприходование;
		НоваяСтрока.ХарактеристикаОприходование = СтрМас.ХарактеристикаОприходование;
		Если Цена = Неопределено Тогда
			СтруктураПоиска = Новый Структура("НоменклатураОприходование, ХарактеристикаОприходование", НоваяСтрока.НоменклатураОприходование, НоваяСтрока.ХарактеристикаОприходование);
			МассивСтрок = Объект.ТоварыПересортица.НайтиСтроки(СтруктураПоиска);
			НоваяСтрока.Цена = ?(МассивСтрок.Количество() > 0, МассивСтрок[0].ЦенаОприходование, 0);
		Иначе
			НоваяСтрока.Цена = Цена;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТаблицаТовары", ТаблицаТовары);
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(СтруктураДанных, АдресДанныхДокументаВХранилище);	
	Иначе
		АдресДанныхДокументаВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(СсылкаНаДокумент),СсылкаНаДокумент.ВерсияДанных,"");
	
КонецФункции

&НаСервере
Функция НоваяПорчаТоваров(Организация,СсылкаНаДокумент)
	
	СтруктураДанных = Новый Структура;
	
	Шапка  			= Новый Структура;
	Шапка.Вставить("Дата",ТекущаяДата());
	Шапка.Вставить("Организация",Организация);
	Шапка.Вставить("Склад",Объект.Склад);
	Шапка.Вставить("ДокументОснование",Объект.ДокументОснование);
	Шапка.Вставить("ВидЦены", Объект.ВидЦены);
	
	СтруктураДанных.Вставить("Шапка", Шапка);
	
	ТаблицаТовары = Новый ТаблицаЗначений;
	ТаблицаТовары.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("Характеристика", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("НоменклатураОприходование", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТовары.Колонки.Добавить("ХарактеристикаОприходование", Новый ОписаниеТипов("СправочникСсылка.ХарактеристикиНоменклатуры"));
	ТаблицаТовары.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));
	ТаблицаТовары.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Организация);
	СтруктураОтбора.Вставить("Распределено", Истина);
	
	СтрокиРаспределения = Объект.ТоварыРаспределениеПорча.НайтиСтроки(СтруктураОтбора);
	Цена = Неопределено;
	
	Для Каждого СтрМас из СтрокиРаспределения Цикл
		
		НоваяСтрока = ТаблицаТовары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрМас);
		
		НоваяСтрока.Номенклатура   = СтрМас.НоменклатураСписание;
		НоваяСтрока.Характеристика = СтрМас.ХарактеристикаСписание;
		
		НоваяСтрока.НоменклатураОприходование   = СтрМас.НоменклатураОприходование;
		НоваяСтрока.ХарактеристикаОприходование = СтрМас.ХарактеристикаОприходование;
		Если Цена = Неопределено Тогда
			СтруктураПоиска = Новый Структура("НоменклатураОприходование, ХарактеристикаОприходование", НоваяСтрока.НоменклатураОприходование, НоваяСтрока.ХарактеристикаОприходование);
			МассивСтрок = Объект.ТоварыПорча.НайтиСтроки(СтруктураПоиска);
			НоваяСтрока.Цена = ?(МассивСтрок.Количество() > 0, МассивСтрок[0].ЦенаОприходование, 0);
		Иначе
			НоваяСтрока.Цена = Цена;
		КонецЕсли;
			
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТаблицаТовары", ТаблицаТовары);
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(СтруктураДанных, АдресДанныхДокументаВХранилище);	
	Иначе
		АдресДанныхДокументаВХранилище = ПоместитьВоВременноеХранилище(СтруктураДанных, УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат ?(ЗначениеЗаполнено(СсылкаНаДокумент),СсылкаНаДокумент.ВерсияДанных,"");
	
КонецФункции

&НаСервере
Процедура СторноПересортицыПорчи(Организация, КлючСвязи, ИмяОперации)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	СтруктураПоиска.Вставить("Распределено", Истина);
	ТоварыРаспределение = Объект["ТоварыРаспределение" + ИмяОперации];
	СтрокиРаспределения = ТоварыРаспределение.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрМас из СтрокиРаспределения Цикл
		
		СтрокаОперации = СтрокаКОформлениюПоКлючу(СтрМас.КлючСвязи, ИмяОперации);
		
		СтрокаОперации.Количество = СтрокаОперации.Количество - СтрМас.Количество;
		СтрокаОперации.КоличествоРаспределено = СтрокаОперации.КоличествоРаспределено - СтрМас.Количество;
		
		Если СтрокаОперации.Количество = 0 Тогда
			
			СтрокиРаспределенияКУдалению = ТоварыРаспределение.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаОперации.КлючСвязи));
			
			Для Каждого СтрМасУдаление из СтрокиРаспределенияКУдалению Цикл
				ТоварыРаспределение.Удалить(СтрМасУдаление);
			КонецЦикла;
			
			Объект["Товары" + ИмяОперации].Удалить(СтрокаОперации);
		Иначе
			СтрокаОперации.КоличествоРаспределено = СтрокаОперации.КоличествоРаспределено - СтрМас.Количество;
			
			Если ИмяОперации = "Оприходование"
				Или ИмяОперации = "Списание" Тогда
				СтрМас.Стоимость = 0;
			КонецЕсли;
			СтрМас.Количество = 0;
			СтрМас.Распределено = Ложь;
		КонецЕсли;
		
	КонецЦикла;

	ОбновитьОстаткиОрганизацийСервер();
	
	НайденныеСтрокиОперации = Объект.ОперацииКОформлению.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
	Для Каждого СтрМас из НайденныеСтрокиОперации Цикл
		Объект.ОперацииКОформлению.Удалить(СтрМас);
	КонецЦикла;
	
	НайденныеСтрокиСоставаОперции = Объект.СоставОпераций.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));

	Для Каждого СтрМас из НайденныеСтрокиСоставаОперции Цикл
		Объект.СоставОпераций.Удалить(СтрМас);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СторноКОформлению(Организация,КлючСвязи,ТипОперации)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", Организация);
	СтруктураПоиска.Вставить("Распределено", Истина);
	
	Если ТипОперации = "Списание" Тогда
		СтрокиРаспределения = Объект.ТоварыРаспределениеСписание.НайтиСтроки(СтруктураПоиска);
	Иначе
		СтрокиРаспределения = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(СтруктураПоиска);
	КонецЕсли;
	
	Для Каждого СтрМас из СтрокиРаспределения Цикл
		
		СтрокаКОформлению = СтрокаКОформлениюПоКлючу(СтрМас.КлючСвязи, ТипОперации);
		
		СтрокаКОформлению.Количество = СтрокаКОформлению.Количество - СтрМас.Количество;
		СтрокаКОформлению.КоличествоРаспределено = СтрокаКОформлению.КоличествоРаспределено - СтрМас.Количество;
		
		Если СтрокаКОформлению.Количество = 0 Тогда
			
			Если ТипОперации = "Списание" Тогда
				СтрокиРаспределенияКУдалению = Объект.ТоварыРаспределениеСписание.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаКОформлению.КлючСвязи));
				Для Каждого СтрМасУдаление из СтрокиРаспределенияКУдалению Цикл
					Объект.ТоварыРаспределениеСписание.Удалить(СтрМасУдаление);
				КонецЦикла;
				Объект.ТоварыКСписанию.Удалить(СтрокаКОформлению);
			Иначе
				СтрокиРаспределенияКУдалению = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(Новый Структура("КлючСвязи",СтрокаКОформлению.КлючСвязи));
				Для Каждого СтрМасУдаление из СтрокиРаспределенияКУдалению Цикл
					Объект.ТоварыРаспределениеОприходование.Удалить(СтрМасУдаление);
				КонецЦикла;
				Объект.ТоварыКОприходованию.Удалить(СтрокаКОформлению);
			КонецЕсли;
			
		Иначе
			СтрМас.Количество = 0;
			СтрМас.Стоимость = 0;
			СтрМас.Распределено = Ложь;
		КонецЕсли;
		
	КонецЦикла;

	ОбновитьОстаткиОрганизацийСервер();
	
	НайденныеСтрокиОперации = Объект.ОперацииКОформлению.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));
	
	Для Каждого СтрМас из НайденныеСтрокиОперации Цикл
		Объект.ОперацииКОформлению.Удалить(СтрМас);
	КонецЦикла;
	
	НайденныеСтрокиСоставаОперции = Объект.СоставОпераций.НайтиСтроки(Новый Структура("КлючСвязи", КлючСвязи));

	Для Каждого СтрМас из НайденныеСтрокиСоставаОперции Цикл
		Объект.СоставОпераций.Удалить(СтрМас);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоместитьОрганизацииВоВременноеХранилище()
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("Организации",Объект.Организации.Выгрузить());
	СтруктураТаблиц.Вставить("ВыбранныеОрганизации",Объект.ВыбранныеОрганизации.Выгрузить());
	
	Адрес = ПоместитьВоВременноеХранилище(СтруктураТаблиц,ЭтаФорма.УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьОрганизацииИзВременногоХранилища(Адрес)
	
	Если Адрес <> Неопределено Тогда
		ТаблицаОрганизаций = ПолучитьИзВременногоХранилища(Адрес);
		Объект.ВыбранныеОрганизации.Загрузить(ТаблицаОрганизаций);
		УдалитьИзВременногоХранилища(Адрес);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокСовпадающейНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура
	|ПОМЕСТИТЬ ТаблицаКСписанию
	|ИЗ
	|	&ТаблицаКСписанию КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура
	|ПОМЕСТИТЬ ТаблицаКОприходованию
	|ИЗ
	|	&ТаблицаКОприходованию КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКОприходованию.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаКОприходованию.Номенклатура КАК Справочник.Номенклатура).Наименование КАК Наименование
	|ИЗ
	|	ТаблицаКОприходованию КАК ТаблицаКОприходованию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКСписанию КАК ТаблицаКСписанию
	|		ПО ТаблицаКОприходованию.Номенклатура = ТаблицаКСписанию.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКСписанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКОприходованию";	
	
	Запрос.УстановитьПараметр("ТаблицаКСписанию", Объект.ТоварыКСписанию.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаКОприходованию", Объект.ТоварыКОприходованию.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокСовпадающейНоменклатуры.Очистить();
	
	Пока Выборка.Следующий() Цикл
		СписокСовпадающейНоменклатуры.Добавить(Выборка.Номенклатура, Выборка.Наименование);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличнуюЧастьПорча()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таблица.Номенклатура,
	|	ВЫРАЗИТЬ(Таблица.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК Характеристика,
	|	Таблица.КлючСвязи КАК КлючСтрокиСписание,
	|	Таблица.КоличествоНеРаспределено
	|ПОМЕСТИТЬ ТаблицаКСписанию
	|ИЗ
	|	&ТаблицаКСписанию КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Номенклатура,
	|	ВЫРАЗИТЬ(Таблица.Характеристика КАК Справочник.ХарактеристикиНоменклатуры) КАК ХарактеристикаОприходование,
	|	Таблица.КлючСвязи КАК КлючСтрокиОприходование,
	|	Таблица.КоличествоНеРаспределено
	|ПОМЕСТИТЬ ТаблицаКОприходованию
	|ИЗ
	|	&ТаблицаКОприходованию КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаКОприходованию.КоличествоНеРаспределено КАК КоличествоНеРаспределеноОприходование,
	|	ТаблицаКСписанию.КоличествоНеРаспределено КАК КоличествоНеРаспределено,
	|	ГрадацииКачестваНоменклатуры.Номенклатура КАК НоменклатураСписание,
	|	ГрадацииКачестваНоменклатуры.НоменклатураБрак КАК НоменклатураОприходование,
	|	ТаблицаКОприходованию.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
	|	ТаблицаКСписанию.Характеристика КАК ХарактеристикаСписание,
	|	ТаблицаКОприходованию.КлючСтрокиОприходование КАК КлючСтрокиОприходование,
	|	ТаблицаКСписанию.КлючСтрокиСписание КАК КлючСтрокиСписание,
	|	ГрадацииКачестваНоменклатуры.НоменклатураБрак.ИспользованиеХарактеристик КАК ВариантИспользованияХарактеристик,
	|	ТаблицаКОприходованию.ХарактеристикаОприходование.Наименование КАК НаименованиеХарактеристикиОприходования,
	|	ТаблицаКСписанию.Характеристика.Наименование КАК НаименованиеХарактеристикиСписания
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ГрадацииКачестваНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКОприходованию КАК ТаблицаКОприходованию
	|		ПО ГрадацииКачестваНоменклатуры.НоменклатураБрак = ТаблицаКОприходованию.Номенклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКСписанию КАК ТаблицаКСписанию
	|		ПО ГрадацииКачестваНоменклатуры.Номенклатура = ТаблицаКСписанию.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрадацииКачестваНоменклатуры.НоменклатураБрак.Наименование,
	|	ГрадацииКачестваНоменклатуры.Номенклатура.Наименование,
	|	ТаблицаКОприходованию.ХарактеристикаОприходование.Наименование
	|ИТОГИ ПО
	|	НоменклатураОприходование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКСписанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКОприходованию";	
	
	Запрос.УстановитьПараметр("ТаблицаКСписанию", Объект.ТоварыКСписанию.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаКОприходованию", Объект.ТоварыКОприходованию.Выгрузить());
	Результат = Запрос.Выполнить();
	ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЕстьТоварыКЗачету = Ложь;
	Пока ВыборкаПоНоменклатуре.Следующий() Цикл
		КоличествоКОприходованию = Неопределено;
		ВыборкаПоДетальнымЗаписям = ВыборкаПоНоменклатуре.Выбрать();
		Пока ВыборкаПоДетальнымЗаписям.Следующий() Цикл
			
			Если КоличествоКОприходованию = Неопределено Тогда
				КоличествоКОприходованию = ВыборкаПоДетальнымЗаписям.КоличествоНеРаспределеноОприходование;
			КонецЕсли;
			
			СовпадениеПоХарактеристикам = Истина;
			
			Если ВыборкаПоДетальнымЗаписям.ВариантИспользованияХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
				СовпадениеПоХарактеристикам = ВыборкаПоДетальнымЗаписям.НаименованиеХарактеристикиСписания = ВыборкаПоДетальнымЗаписям.НаименованиеХарактеристикиОприходования;
			ИначеЕсли ВыборкаПоДетальнымЗаписям.ВариантИспользованияХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
				СовпадениеПоХарактеристикам = (ВыборкаПоДетальнымЗаписям.ХарактеристикаСписание = ВыборкаПоДетальнымЗаписям.ХарактеристикаОприходование); 
			КонецЕсли;
			
			Если Не СовпадениеПоХарактеристикам Тогда
				Продолжить;
			КонецЕсли;
			
			Количество 		= Мин(ВыборкаПоДетальнымЗаписям.КоличествоНеРаспределеноОприходование, ВыборкаПоДетальнымЗаписям.КоличествоНеРаспределено);
			ПараметрыПоиска = Новый Структура("НоменклатураОприходование, НоменклатураСписание, ХарактеристикаОприходование, ХарактеристикаСписание");
			ЗаполнитьЗначенияСвойств(ПараметрыПоиска, ВыборкаПоДетальнымЗаписям);
			СтрокиПорчи = Объект.ТоварыПорча.НайтиСтроки(ПараметрыПоиска);
			
			Если ЗначениеЗаполнено(СтрокиПорчи) Тогда
				СтрокаПорчи 		= СтрокиПорчи[0];
				КЗачету 			= СтрокаПорчи.Количество + Количество;
				КлючСтрокиОперации 	= СтрокаПорчи.КлючСвязи;
			Иначе
				КЗачету 			= Количество;
				КлючСтрокиОперации 	= 0;
			КонецЕсли;
			
			ОчищатьРаспределениеСписание 		= ВыборкаПоДетальнымЗаписям.КоличествоНеРаспределено <= КоличествоКОприходованию;
			ОчищатьРаспределениеОприходование 	= ВыборкаПоДетальнымЗаписям.КоличествоНеРаспределено >= КоличествоКОприходованию;
			ОчищатьРаспределениеОперации 		= Ложь;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("КЗачету", КЗачету);
			СтруктураПараметров.Вставить("ОчищатьРаспределениеСписание", 		ОчищатьРаспределениеСписание);
			СтруктураПараметров.Вставить("ОчищатьРаспределениеОприходование", 	ОчищатьРаспределениеОприходование);
			СтруктураПараметров.Вставить("ОчищатьРаспределениеОперации", 		ОчищатьРаспределениеОперации);
			
			ОбработатьЗачетПересортицыПорчи(
			ВыборкаПоДетальнымЗаписям.КлючСтрокиСписание,
			ВыборкаПоДетальнымЗаписям.КлючСтрокиОприходование,
			КлючСтрокиОперации, 
			СтруктураПараметров, 
			, 
			"Порча");
			
			Если Не ЕстьТоварыКЗачету Тогда
				ЕстьТоварыКЗачету = Истина;
			КонецЕсли;
			
			КоличествоКОприходованию = КоличествоКОприходованию - Количество;
			
			Если КоличествоКОприходованию = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ЕстьТоварыКЗачету Тогда
		ТекстСообщения = НСтр("ru = 'Отсутствуют товары, по которым можно сделать автоматический зачет по порче.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		ПараметрыЗаполненияПризнака = Новый Структура;
		ПараметрыЗаполненияПризнака.Вставить("НоменклатураОприходование","ХарактеристикиИспользуютсяОприходование");
		ПараметрыЗаполненияПризнака.Вставить("НоменклатураСписание","ХарактеристикиИспользуютсяСписание");
		
		ПараметрыЗаполнения = Новый Структура;
		ПараметрыЗаполнения.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", ПараметрыЗаполненияПризнака);
		
		НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(Объект.ТоварыПорча, ПараметрыЗаполнения);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСтрокПоНоменклатуре()
	Если ЗначениеЗаполнено(ОтборСтрокНоменклатуры) Тогда
		Элементы.ТоварыКОприходованию.ОтборСтрок = Новый ФиксированнаяСтруктура("Номенклатура",ОтборСтрокНоменклатуры);
		Элементы.ТоварыКСписанию.ОтборСтрок = Новый ФиксированнаяСтруктура("Номенклатура",ОтборСтрокНоменклатуры);
	Иначе
		Элементы.ТоварыКОприходованию.ОтборСтрок = Неопределено;
		Элементы.ТоварыКСписанию.ОтборСтрок = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьРаспределениеПоОрганизации(Организация, ТипОперации = "", УдалятьОрганизацию = Истина)
	
	Если ТипОперации = "" 
		Или ТипОперации = "Списание" Тогда
		
		СтрокиРаспределения = Объект.ТоварыРаспределениеСписание.НайтиСтроки(Новый Структура("Организация",Организация));
		
		Для Каждого СтрМас из СтрокиРаспределения Цикл
			
			Если СтрМас.Количество > 0 Тогда
				
				СтруктураПоиска = Новый Структура;
				
				СтрокаКОформлению = СтрокаКОформлениюПоКлючу(СтрМас.КлючСвязи, "Списание");
				
				СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.КоличествоНеРаспределено + СтрМас.Количество;
				СтрокаКОформлению.КоличествоРаспределено   = СтрокаКОформлению.КоличествоРаспределено - СтрМас.Количество;
				СтрМас.Остаток = СтрМас.Остаток + СтрМас.Количество;
				СтрМас.Количество = 0; 
				СтрМас.Распределено = Ложь; 
				СтрМас.Модифицирована = Истина; 
			КонецЕсли;
			
			Если УдалятьОрганизацию Тогда
				Объект.ТоварыРаспределениеСписание.Удалить(СтрМас);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипОперации = "" 
		Или ТипОперации = "Оприходование" Тогда
		СтрокиРаспределения = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(Новый Структура("Организация",Организация));
		
		Для Каждого СтрМас из СтрокиРаспределения Цикл
			
			Если СтрМас.Количество > 0 Тогда
				
				СтруктураПоиска = Новый Структура;
				
				СтрокаКОформлению = СтрокаКОформлениюПоКлючу(СтрМас.КлючСвязи, "Оприходование");
				
				СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.КоличествоНеРаспределено + СтрМас.Количество;
				СтрокаКОформлению.КоличествоРаспределено   = СтрокаКОформлению.КоличествоРаспределено - СтрМас.Количество;
				СтрМас.Остаток = СтрМас.Остаток - СтрМас.Количество; 
				СтрМас.Количество = 0; 
				СтрМас.Распределено = Ложь; 
				СтрМас.Модифицирована = Истина; 
			КонецЕсли;
			
			Если УдалятьОрганизацию Тогда
				Объект.ТоварыРаспределениеОприходование.Удалить(СтрМас);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ТипОперации = "" 
		Или ТипОперации = "Пересортица" Тогда
		
		СтрокиРаспределенияПересортицы = Объект.ТоварыРаспределениеПересортица.НайтиСтроки(Новый Структура("Организация",Организация));
		
		Для Каждого СтрМас из СтрокиРаспределенияПересортицы Цикл
			Если СтрМас.Количество > 0 Тогда
				
				СтруктураПоиска = Новый Структура;
				
				СтрокаПересортицы = СтрокаКОформлениюПоКлючу(СтрМас.КлючСвязи,"Пересортица");
				
				СтрокаПересортицы.КоличествоНеРаспределено = СтрокаПересортицы.КоличествоНеРаспределено + СтрМас.Количество;
				СтрокаПересортицы.КоличествоРаспределено   = СтрокаПересортицы.КоличествоРаспределено - СтрМас.Количество;
				СтрМас.ОстатокСписание = СтрМас.ОстатокСписание + СтрМас.Количество;
				СтрМас.Количество = 0; 
				СтрМас.ОстатокОприходование = СтрМас.ОстатокОприходование - СтрМас.Количество; 
				СтрМас.Распределено = Ложь; 
				СтрМас.Модифицирована = Истина; 
			КонецЕсли;
			
			Если УдалятьОрганизацию Тогда
				Объект.ТоварыРаспределениеПересортица.Удалить(СтрМас);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	Если ТипОперации = "" 
		Или ТипОперации = "Порча" Тогда
		
		СтрокиРаспределенияПорчи = Объект.ТоварыРаспределениеПорча.НайтиСтроки(Новый Структура("Организация",Организация));
		
		Для Каждого СтрМас из СтрокиРаспределенияПорчи Цикл
			Если СтрМас.Количество > 0 Тогда
				
				СтруктураПоиска = Новый Структура;
				
				СтрокаПорчи = СтрокаКОформлениюПоКлючу(СтрМас.КлючСвязи,"Порча");
				
				СтрокаПорчи.КоличествоНеРаспределено = СтрокаПорчи.КоличествоНеРаспределено + СтрМас.Количество;
				СтрокаПорчи.КоличествоРаспределено   = СтрокаПорчи.КоличествоРаспределено - СтрМас.Количество;
				СтрМас.ОстатокСписание = СтрМас.ОстатокСписание + СтрМас.Количество;
				СтрМас.Количество = 0; 
				СтрМас.ОстатокОприходование = СтрМас.ОстатокОприходование - СтрМас.Количество; 
				СтрМас.Распределено = Ложь; 
				СтрМас.Модифицирована = Истина; 
			КонецЕсли;
			
			Если УдалятьОрганизацию Тогда
				Объект.ТоварыРаспределениеПорча.Удалить(СтрМас);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОрганизациюВРаспределение(Организация)

	Для Каждого СтрТабл из Объект.ТоварыКСписанию Цикл
		НоваяСтрока = Объект.ТоварыРаспределениеСписание.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл,,"Количество");
		НоваяСтрока.Организация = Организация;
	КонецЦикла;
	
	Для Каждого СтрТабл из Объект.ТоварыКОприходованию Цикл
		НоваяСтрока = Объект.ТоварыРаспределениеОприходование.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл,,"Количество");
		НоваяСтрока.Организация = Организация;
	КонецЦикла;

	Для Каждого СтрТабл из Объект.ТоварыПересортица Цикл
		НоваяСтрока = Объект.ТоварыРаспределениеПересортица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл,,"Количество");
		НоваяСтрока.Организация = Организация;
	КонецЦикла;

	Для Каждого СтрТабл из Объект.ТоварыПорча Цикл
		НоваяСтрока = Объект.ТоварыРаспределениеПорча.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрТабл,,"Количество");
		НоваяСтрока.Организация = Организация;
	КонецЦикла;
	
	
	
	ОбновитьОстаткиОрганизацийСервер();
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьСписокИТЧОрганизации()
	
	Индекс = Объект.Организации.Количество()-1;
	
	//Удалим из ТЧ удаленные в списке значений
	Пока Индекс > -1 Цикл
		
		СтрТабл = Объект.Организации[Индекс];
		Индекс = Индекс - 1;
		
		Если ДоступныеОрганизации.НайтиПоЗначению(СтрТабл.Организация) = Неопределено Тогда
			ОчиститьРаспределениеПоОрганизации(СтрТабл.Организация);
			
			ВыбраннаяОрганизацияМассив = Объект.ВыбранныеОрганизации.НайтиСтроки(Новый Структура("Организация", СтрТабл.Организация));
			
			Если ВыбраннаяОрганизацияМассив.Количество() > 0 Тогда
				Объект.ВыбранныеОрганизации.Удалить(ВыбраннаяОрганизацияМассив[0]);
			КонецЕсли;
			
			Объект.Организации.Удалить(СтрТабл);
		КонецЕсли;
		
	КонецЦикла;
	
	//Добавим в ТЧ добавленные в список значений
	Для каждого СтрСписка из ДоступныеОрганизации Цикл
		
		НайденныеСтроки = Объект.Организации.НайтиСтроки(Новый Структура("Организация", СтрСписка.Значение));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = Объект.Организации.Добавить();
			НоваяСтрока.Организация = СтрСписка.Значение;
			
			НоваяВыбраннаяОрганизация = Объект.ВыбранныеОрганизации.Добавить();
			НоваяВыбраннаяОрганизация.Организация = СтрСписка.Значение;
			
			ДобавитьОрганизациюВРаспределение(НоваяСтрока.Организация);
		КонецЕсли;
			
	КонецЦикла;	
	
	//Исключим из списка значений дубли
	ДоступныеОрганизации.ЗагрузитьЗначения(Объект.Организации.Выгрузить().ВыгрузитьКолонку("Организация"));
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокуОперации(ИдентификаторСтрокиОперации, ИдентификаторОперации)
	
	Операция = Объект.ОперацииКОформлению.НайтиПоИдентификатору(ИдентификаторОперации);
	СтрокаОперации = Объект.СоставОпераций.НайтиПоИдентификатору(ИдентификаторСтрокиОперации);
	
	ТипОперации = ТипОперацииПоПредставлению(Операция.ТипОперации);
	
	Если ТипОперации = "Списание" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", Операция.Организация);
		СтруктураПоиска.Вставить("Номенклатура", СтрокаОперации.НоменклатураСписание);
		СтруктураПоиска.Вставить("Характеристика", СтрокаОперации.ХарактеристикаСписание);
		
		НайденныеСтроки = Объект.ТоварыРаспределениеСписание.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаРаспределения = НайденныеСтроки[0];
			СтрокаКОформлению = СтрокаКОформлениюПоКлючу(СтрокаРаспределения.КлючСвязи, ТипОперации);
			
			СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.КоличествоНеРаспределено + СтрокаРаспределения.Количество; 
			СтрокаКОформлению.КоличествоРаспределено = СтрокаКОформлению.КоличествоРаспределено - СтрокаРаспределения.Количество; 
			
			СтрокаРаспределения.Остаток = СтрокаРаспределения.Остаток + СтрокаРаспределения.Количество;
			СтрокаРаспределения.Количество = 0;
			СтрокаРаспределения.Распределено = Ложь;
			СтрокаРаспределения.Модифицирована = Истина;
			
		КонецЕсли;
	ИначеЕсли ТипОперации = "Оприходование" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", Операция.Организация);
		СтруктураПоиска.Вставить("Номенклатура", СтрокаОперации.НоменклатураОприходование);
		СтруктураПоиска.Вставить("Характеристика", СтрокаОперации.ХарактеристикаОприходование);
		
		НайденныеСтроки = Объект.ТоварыРаспределениеОприходование.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаРаспределения = НайденныеСтроки[0];
			СтрокаКОформлению = СтрокаКОформлениюПоКлючу(СтрокаРаспределения.КлючСвязи, ТипОперации);
			
			СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.КоличествоНеРаспределено + СтрокаРаспределения.Количество; 
			СтрокаКОформлению.КоличествоРаспределено = СтрокаКОформлению.КоличествоРаспределено - СтрокаРаспределения.Количество; 
			
			СтрокаРаспределения.Остаток = СтрокаРаспределения.Остаток - СтрокаРаспределения.Количество;
			СтрокаРаспределения.Количество = 0;
			СтрокаРаспределения.Распределено = Ложь;
			СтрокаРаспределения.Модифицирована = Истина;
			
		КонецЕсли;
	ИначеЕсли ТипОперации = "Пересортица" Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", Операция.Организация);
		СтруктураПоиска.Вставить("НоменклатураСписание", СтрокаОперации.НоменклатураСписание);
		СтруктураПоиска.Вставить("ХарактеристикаСписание", СтрокаОперации.ХарактеристикаСписание);
		СтруктураПоиска.Вставить("НоменклатураОприходование", СтрокаОперации.НоменклатураОприходование);
		СтруктураПоиска.Вставить("ХарактеристикаОприходование", СтрокаОперации.ХарактеристикаОприходование);
		
		НайденныеСтроки = Объект.ТоварыРаспределениеПересортица.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			СтрокаРаспределения = НайденныеСтроки[0];
			СтрокаКОформлению = СтрокаКОформлениюПоКлючу(СтрокаРаспределения.КлючСвязи, ТипОперации);
			
			СтрокаКОформлению.КоличествоНеРаспределено = СтрокаКОформлению.КоличествоНеРаспределено + СтрокаРаспределения.Количество; 
			СтрокаКОформлению.КоличествоРаспределено = СтрокаКОформлению.КоличествоРаспределено - СтрокаРаспределения.Количество; 
			
			СтрокаРаспределения.ОстатокСписание = СтрокаРаспределения.ОстатокСписание + СтрокаРаспределения.Количество;
			СтрокаРаспределения.ОстатокОприходование = СтрокаРаспределения.ОстатокОприходование - СтрокаРаспределения.Количество;
			СтрокаРаспределения.Количество = 0;
			СтрокаРаспределения.Распределено = Ложь;
			СтрокаРаспределения.Модифицирована = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Операция.Стоимость = Операция.КоличествоПозиций - СтрокаОперации.Стоимость;
	Операция.КоличествоПозиций = Операция.КоличествоПозиций - 1; 
	
	Если Операция.КоличествоПозиций = 0 Тогда
		Объект.ОперацииКОформлению.Удалить(Операция);
	КонецЕсли;
	
	Объект.СоставОпераций.Удалить(СтрокаОперации);
	
КонецПроцедуры

&НаСервере
Процедура КомандаОбновитьОстаткиОрганизацийСервер()
	
	ОбновитьОстаткиОрганизацийСервер();
	
	СформироватьОперацииКОформлению();
	
КонецПроцедуры

&НаСервере
Функция ЕстьНеОформленныеОперации()
	
	Результат = Ложь;
	
	СтрОтбор = Новый Структура("Распределено", Истина);
	
	Если Объект.ТоварыРаспределениеОприходование.НайтиСтроки(СтрОтбор).Количество() <> 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Если Объект.ТоварыРаспределениеСписание.НайтиСтроки(СтрОтбор).Количество() <> 0 Тогда
		Результат = Истина;
	КонецЕсли;
	
	Если Объект.ТоварыПересортица.Количество() > 0 Тогда
		Результат = Истина
	КонецЕсли;
	
	Если Объект.ТоварыПорча.Количество() > 0 Тогда
		Результат = Истина
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоНовыйТовар(Номенклатура)
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура,"Качество") = Перечисления.ГрадацииКачества.Новый Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста 
Функция ЕстьСписаниеПоОрганизации(Организация, Инвентаризация)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеНедостачТоваров.Ссылка
	|ИЗ
	|	Документ.СписаниеНедостачТоваров КАК СписаниеНедостачТоваров
	|ГДЕ
	|	СписаниеНедостачТоваров.Проведен
	|	И СписаниеНедостачТоваров.Организация = &Организация
	|	И СписаниеНедостачТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДокументОснование",Инвентаризация);
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

&НаСервереБезКонтекста 
Функция ЕстьОприходованиеПоОрганизации(Организация, Инвентаризация)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОприходованиеИзлишковТоваров.Ссылка
	|ИЗ
	|	Документ.ОприходованиеИзлишковТоваров КАК ОприходованиеИзлишковТоваров
	|ГДЕ
	|	ОприходованиеИзлишковТоваров.Проведен
	|	И ОприходованиеИзлишковТоваров.Организация = &Организация
	|	И ОприходованиеИзлишковТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДокументОснование",Инвентаризация);
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

&НаСервереБезКонтекста 
Функция ЕстьПересортицаПоОрганизации(Организация, Инвентаризация)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПересортицаТоваров.Ссылка
	|ИЗ
	|	Документ.ПересортицаТоваров КАК ПересортицаТоваров
	|ГДЕ
	|	ПересортицаТоваров.Проведен
	|	И ПересортицаТоваров.Организация = &Организация
	|	И ПересортицаТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДокументОснование",Инвентаризация);
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

&НаСервереБезКонтекста 
Функция ЕстьПорчиПоОрганизации(Организация, Инвентаризация)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПорчаТоваров.Ссылка
	|ИЗ
	|	Документ.ПорчаТоваров КАК ПорчаТоваров
	|ГДЕ
	|	ПорчаТоваров.Проведен
	|	И ПорчаТоваров.Организация = &Организация
	|	И ПорчаТоваров.ДокументОснование = &ДокументОснование";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ДокументОснование",Инвентаризация);
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПредставлениеОперацииПоТипу(ТипОперации)
	
	ПредставлениеОперации = "";
	
	Если ТипОперации = "Списание" Тогда
		ПредставлениеОперации = НСтр("ru = 'Списание'");
	ИначеЕсли ТипОперации = "Оприходование" Тогда
		ПредставлениеОперации = НСтр("ru = 'Оприходование'");
	ИначеЕсли ТипОперации = "Пересортица" Тогда
		ПредставлениеОперации = НСтр("ru = 'Пересортица'");
	ИначеЕсли ТипОперации = "Порча" Тогда
		ПредставлениеОперации = НСтр("ru = 'Порча'");
	КонецЕсли;
	
	Возврат ПредставлениеОперации;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ТипОперацииПоПредставлению(ПредставлениеОперации)
	
	ТипОперации = "";
	
	Если ПредставлениеОперации = НСтр("ru = 'Списание'") Тогда
		ТипОперации = "Списание";
	ИначеЕсли ПредставлениеОперации = НСтр("ru = 'Оприходование'") Тогда
		ТипОперации = "Оприходование";
	ИначеЕсли ПредставлениеОперации = НСтр("ru = 'Порча'") Тогда
		ТипОперации = "Порча";
	ИначеЕсли ПредставлениеОперации = НСтр("ru = 'Пересортица'") Тогда
		ТипОперации = "Пересортица";
	КонецЕсли;
	
	Возврат  ТипОперации;
КонецФункции
