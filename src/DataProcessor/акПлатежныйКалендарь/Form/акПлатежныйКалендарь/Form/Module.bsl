
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Обработчик подсистемы "Внешние обработки"
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	
	УстановитьВидимость();
	
	СтруктураБыстрогоОтбора = Неопределено;
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		СтруктураБыстрогоОтбора = Новый Структура;
		СтруктураБыстрогоОтбора.Вставить("ДатаОплаты", ДатаОплаты.Дата);
		СтруктураБыстрогоОтбора.Вставить("Статус", Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована);
	КонецЕсли;
	
	//ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Организация", Организация, СтруктураБыстрогоОтбора);
	//ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Приоритет", Приоритет, СтруктураБыстрогоОтбора);
	//ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "Статус", Статус, СтруктураБыстрогоОтбора);
	//
	//ОтборыСписковКлиентСервер.ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, "ДатаОплаты", ДатаОплаты.Дата, СтруктураБыстрогоОтбора, 
	//	ЗначениеЗаполнено(ДатаОплаты.Дата), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	
	Параметры.Свойство("СтруктураБыстрогоОтбора", СтруктураБыстрогоОтбора);
	
	
	//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 18.01.2014
	//
	ЗаполнитьСписокЗаявок();
	
	
	
	//} 
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявокПриАктивизацииСтроки(Элемент)	
	ТекущиеДанные	=	Элементы.СписокЗаявок.ТекущиеДанные;
	СодержимоеСчета.Очистить();
	//ОбновитьИнформациюОСчете(ТекущиеДанные.ЗаявкаСсылка);
	Если ТекущиеДанные <> неопределено тогда //значениеЗаполнено(ТекущиеДанные) Тогда
		АдресВХранилище=ОбновитьСодержимоеСчетаСервер(ТекущиеДанные.ЗаявкаСсылка);
		
		Если ЗначениеЗаполнено(АдресВХранилище) Тогда
			Данные	=	ПолучитьИзВременногоХранилища(АдресВХранилище);
			Для каждого Строка из Данные Цикл
				НоваяСтрока	=СодержимоеСчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			КОнецЦИкла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.ЗаявкаСсылка)Тогда
			ОбновитьДеревоСтруктурыПодчиненности(ТекущиеДанные.ЗаявкаСсылка);
		КонецЕсли;
	КонецЕсли;
	
	

КонецПроцедуры

&НаКлиенте
Процедура СписокЗаявокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьОтборы();
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ


&НаКлиенте
Процедура ПриоритетОтборПриИзменении(Элемент)
	
	ПриоритетОтборПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОтборПриИзменении(Элемент)
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Статус", Статус, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Статус));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЕстьФайлы" Тогда
		СтандартнаяОбработка = Ложь;
		СтрокаСписка = Элементы.Список.ТекущиеДанные;
		ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы",
		Новый Структура("ВладелецФайла", СтрокаСписка.Ссылка),
		ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьСодержимоеСчетаСервер(ЗаявкаСсылка)
	
	ТабЧастьЗаявки =ЗаявкаСсылка.РасшифровкаПлатежа.выгрузить(); 
	
	Если ТабЧастьЗаявки.количество()>0 Тогда
		Если  ЗначениеЗаполнено(ТабЧастьЗаявки[0].Заказ) Тогда
			ТабЧастьТоварыПоставщика = ТабЧастьЗаявки[0].Заказ.Товары.выгрузить();
			Если   ТабЧастьТоварыПоставщика.количество()>0 Тогда
				ДанныеСчета=Новый Массив;
				ИнформацияОСчете = ТабЧастьТоварыПоставщика.Скопировать(,"Номенклатура,Количество,цена,Сумма");
				Для каждого строка из ИнформацияОСчете Цикл
					НоваяСтрока	=	Новый Структура("Номенклатура,Количество,цена,Сумма");
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
					ДанныеСчета.Добавить(НоваяСтрока);
				КонецЦикла;
				АдресВХранилище	=	ПоместитьВоВременноеХранилище(ДанныеСчета);
				Возврат АдресВХранилище;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	Возврат "";
КонецФункции // ОбновитьСодержимоеСчетаСервер()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура АвтоТест_УтвердитьЗаявки(Команда) Экспорт
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокЗаявок);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""Утверждена"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 21.01.2014
	УтвердитьИлиОтклонитьЗаявкуНаРасходованиеДС(ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ЗаявкаСсылка,"Утвердить");
	//} 	
	
	//	КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Утверждена");	
	//	ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), "Утверждена");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьЗаявки(Команда)
	
	ВыделенныеСтроки = РаботаСДиалогамиКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Элементы.СписокЗаявок);
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='У выделенных в списке заявок будет установлен статус ""Отклонена"". Продолжить?'");
	Ответ = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 21.01.2014
	УтвердитьИлиОтклонитьЗаявкуНаРасходованиеДС(ЭтаФорма.ТекущийЭлемент.ТекущиеДанные.ЗаявкаСсылка,"Отклонить");	
	//} 
	
	//КоличествоОбработанных = ОбщегоНазначенияУТВызовСервера.УстановитьСтатусДокументов(ВыделенныеСтроки, "Отклонена");
	//ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, ВыделенныеСтроки.Количество(), "Отклонена");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтбор(Команда)
	// Вставить содержимое обработчика.
	Имя=СтрЗаменить(Элементы.СписокЗаявок.ТекущийЭлемент.Имя,"СписокЗаявок","");
	Значение = Элементы.СписокЗаявок.ТекущиеДанные[Имя];
	Отбор   = Новый ФиксированнаяСтруктура(Имя,Значение);
	Элементы.СписокЗаявок.ОтборСтрок=Отбор;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьОтбор(Команда)
	Отбор   = Новый ФиксированнаяСтруктура();
	Элементы.СписокЗаявок.ОтборСтрок=Отбор;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ПриоритетОтборПриИзмененииНаСервере()
	
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Список.Отбор, "Приоритет", Приоритет, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Приоритет));
	УстановитьВидимость();
	
КонецПроцедуры

//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 18.01.2014
&НаКлиенте
Процедура СписокЗаявокСуммаКОплатеПриИзменении(Элемент)
	
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Текст = ТекущийЭлемент.ТекущиеДанные.СуммаКОплате;
	
	ПересчитатьПроцентИСуммуОплаты(ТекущиеДанные.ЗаявкаСсылка,Текст);
	
	ЭтаФорма.СписокЗаявок.Итог("СуммаКОплате");	
	
КонецПроцедуры
//}

//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 18.01.2014
&НаСервере 
Процедура ПересчитатьПроцентИСуммуОплаты(Данные,ЗначениеПоля)
	
	ЗаявкаОбъект = Данные.получитьОбъект();  
	// ЗначениеПоля =ЗаявкаОбъект.СуммаКОплате; 
	
	ЗапросОстатков = Новый Запрос;
ЗапросОстатков.Текст = "ВЫБРАТЬ
                       |	ДенежныеСредстваКВыплатеОстатки.СуммаОстаток * -1 КАК СуммаОстаток
                       |ИЗ
                       |	РегистрНакопления.ДенежныеСредстваКВыплате.Остатки КАК ДенежныеСредстваКВыплатеОстатки
                       |ГДЕ
                       |	ДенежныеСредстваКВыплатеОстатки.ЗаявкаНаРасходованиеДенежныхСредств = &Ссылка";
					   
					   ЗапросОстатков.УстановитьПараметр("Ссылка",Данные);
					   результат = ЗапросОстатков.Выполнить().Выгрузить();

    ЕСли результат.Количество()<> 0 тогда
		СуммаОстатокДокумента = результат[0].СуммаОстаток;
	Иначе
		СуммаОстатокДокумента = ЗаявкаОбъект.СуммаДокумента;
  КонецЕсли;
  
  
	Если Найти(ЗначениеПоля,"%") >0 Тогда
		Попытка
			Сумма=Число(СтрЗаменить(ЗначениеПоля,"%",""));
			ЗаявкаОбъект.акПроцентОплаты = Сумма;
			ЗаявкаОбъект.акСуммаОплаты = СуммаОстатокДокумента *Сумма/100; 
			ЗаявкаОбъект.акКОплате = ЗаявкаОбъект.акСуммаОплаты;
		Исключение
			Сообщить("Введено некоректное значение!");
			ЗаявкаОбъект.акСуммаОплаты=0;
			ЗаявкаОбъект.акПроцентОплаты=0;
			ЗаявкаОбъект.акКОплате =ЗаявкаОбъект.акСуммаОплаты;
		КонецПопытки;
	Иначе
		Попытка
			Сумма=Число(ЗначениеПоля);
			ЗаявкаОбъект.акСуммаОплаты=Сумма;
			ЗаявкаОбъект.акПроцентОплаты = ЗаявкаОбъект.акСуммаОплаты/ЗаявкаОбъект.СуммаДокумента*100;
			ЗаявкаОбъект.акКОплате = ЗаявкаОбъект.акСуммаОплаты;
		Исключение
			Сообщить("Введено некоректное значение!");
			ЗаявкаОбъект.акСуммаОплаты=0;
			ЗаявкаОбъект.акПроцентОплаты=0;
			ЗаявкаОбъект.акКОплате = ЗаявкаОбъект.акСуммаОплаты;
		КонецПопытки;		
	КонецЕсли; 
	
	
	Если ЗначениеПоля <> "" И ЗначениеПоля <> "0" Тогда
          ЗаявкаОбъект.статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Согласована;
	КонецЕсли;
	
	
	ЗаявкаОбъект.записать();
	ЗаполнитьСписокЗаявок();
	
КонецПроцедуры
//}

&НаКлиенте
Процедура СписокЗаявокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя="СписокЗаявокСуммаКОплате" Тогда
		СтандартнаяОбработка = Истина;	
	Иначе
		СтандартнаяОбработка=Ложь;
		ОткрытьЗначение(Элементы.СписокЗаявок.ТекущиеДанные.ЗаявкаСсылка);
	конецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьОплаченныеПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьУтвержденныеПриИзменении(Элемент)
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьНеУтвержденныеПриИзменении(Элемент)
	УстановитьОтборы();
	
КонецПроцедуры


//} 


//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 19.01.2014
//
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ТаблицаОтчета.Показать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	//ВывестиСтруктуруПодчиненности();
	//ТаблицаОтчета.Показать();
	ЗаполнитьСписокЗаявок();

КонецПроцедуры

&НаКлиенте
Процедура ВывестиДляТекущего(Команда)
	
	ТекущийДокумент = Элементы.ТаблицаОтчета.ТекущаяОбласть.Расшифровка;
	
	Если ЗначениеЗаполнено(ТекущийДокумент) Тогда
		ДокументСсылка = ТекущийДокумент;
	Иначе
		Возврат;
	КонецЕсли;
	
	ВывестиСтруктуруПодчиненности();
	ТаблицаОтчета.Показать();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры вывода в табличный документ.

// Выводит дерево подчиненности в табличный документ
&НаСервере
Процедура ВывестиТабличныйДокумент()
	
	ТаблицаОтчета.Очистить();
	
	Макет = ПолучитьОбщийМакет("СтруктураПодчиненности");
	
	ВывестиРодительскиеЭлементыДерева(ДеревоРодительскиеДокументы.ПолучитьЭлементы(),Макет,1);
	ВывестиТекущийДокумент(Макет);
	ВывестиПодчиненныеЭлементыДерева(ДеревоПодчиненныеДокументы.ПолучитьЭлементы(),Макет,1)
	
КонецПроцедуры

// Выводит строки дерева родительских документов
//
// Параметры
//  СтрокиДерева  - ДанныеФормыКоллекцияЭлементовДерева - строки дерева
//                 которые выводятся в табличный документ
//  Макет  - МакетТабличногоДокумента - макет, на основании которого
//           происходит вывод в табличный документ
//  УровеньРекурсии - Число - уровень рекурсии процедуры
//
&НаСервере
Процедура ВывестиРодительскиеЭлементыДерева(СтрокиДерева,Макет,УровеньРекурсии)
	
	Счетчик =  СтрокиДерева.Количество();
	Пока Счетчик >0 Цикл
		
		ТекущаяСтрокаДерева = СтрокиДерева.Получить(Счетчик -1);
		ПодчиненныеЭлементыСтрокиДерева = ТекущаяСтрокаДерева.ПолучитьЭлементы();
		ВывестиРодительскиеЭлементыДерева(ПодчиненныеЭлементыСтрокиДерева,Макет,УровеньРекурсии + 1);
		
		Для инд=1 По УровеньРекурсии Цикл
			
			Если инд = УровеньРекурсии Тогда
				
				Если СтрокиДерева.Индекс(ТекущаяСтрокаДерева) < (СтрокиДерева.Количество()-1) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхПравоНиз");
				Иначе	
					Область = Макет.ПолучитьОбласть("КоннекторПравоНиз");
				КонецЕсли;
				
			Иначе
				
				Если НеобходимостьВыводаВертикальногоКоннектора(УровеньРекурсии - инд + 1,ТекущаяСтрокаДерева,Ложь) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("Отступ");
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если инд = 1 Тогда
				ТаблицаОтчета.Вывести(Область);
			Иначе
				ТаблицаОтчета.Присоединить(Область);
			КонецЕсли;
			
		КонецЦикла;
		
		ВывестиДокументИКартинку(ТекущаяСтрокаДерева,Макет,Ложь,Ложь);
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Выводит в табличный документ картинку, соответствующую статусу документа и его представление
//
&НаСервере
Процедура ВывестиДокументИКартинку(СтрокаДерева,Макет,ЭтоТекущийДокумент = Ложь,ЭтоПодчиненный = Неопределено)
	
	//Вывод картинки
	Если СтрокаДерева.Проведен Тогда
		Если ЭтоПодчиненный = Неопределено  Тогда
			Если ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() И ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество()  Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторВерхНиз");
			ИначеЕсли ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторНиз");
			ИначеЕсли ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторВерх");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторВерх");
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоНиз");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		Иначе
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведенКоннекторЛевоВерх");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПроведен");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.ПометкаУдаления Тогда
		Если ЭтоПодчиненный = Неопределено Тогда
			Если ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() И ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество()  Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторВерхНиз");
			ИначеЕсли ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУделениеКоннекторНиз");
			ИначеЕсли ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторВерх");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторВерх");
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторЛевоНиз");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдаление");
			КонецЕсли;
		Иначе
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдалениеКоннекторЛевоВерх");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументПомеченНаУдаление");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Ссылка = ДокументСсылка Тогда
			Если ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() И ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество()  Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторВерхНиз");
			ИначеЕсли ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторНиз");
			ИначеЕсли ДеревоРодительскиеДокументы.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторВерх");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторВерх");
			КонецЕсли;
		ИначеЕсли ЭтоПодчиненный = Истина Тогда
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторЛевоНиз");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписан");
			КонецЕсли;
		Иначе
			Если СтрокаДерева.ПолучитьЭлементы().Количество() Тогда
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписанКоннекторЛевоВерх");
			Иначе
				ОбластьКартинка = Макет.ПолучитьОбласть("ДокументЗаписан");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЭтоТекущийДокумент Тогда
		ТаблицаОтчета.Вывести(ОбластьКартинка) 
	Иначе
		ТаблицаОтчета.Присоединить(ОбластьКартинка);
	КонецЕсли;
	
	
	//Вывод документа
	ОбластьДокумент = Макет.ПолучитьОбласть(?(ЭтоТекущийДокумент,"ТекущийДокумент","Документ"));
	ОбластьДокумент.Параметры.ПредставлениеДокумента = СтрокаДерева.Представление;
	ОбластьДокумент.Параметры.Документ = СтрокаДерева.Ссылка;
	ТаблицаОтчета.Присоединить(ОбластьДокумент);
	
КонецПроцедуры

// Определяет необходимость вывода вертикального коннектора в  табличный документ
//
// Параметры
//  УровеньВверх  - Число - на каком количестве уровней выше находится 
//                 родитель от которого будет рисоваться вертикальный коннектор
//  СтрокаДерева  - ДанныеФормыЭлементДерева - исходная строка дерева значений
//                  от которой ведется отсчет.
// Возвращаемое значение:
//   Булево   - необходимость вывода в области вертиркального коннекотора
//
&НаСервере
Функция НеобходимостьВыводаВертикальногоКоннектора(УровеньВверх,СтрокаДерева,ИщемСредиПодчиненных = Истина)
	
	ТекущаяСтрока = СтрокаДерева;
	
	Для инд=1 По УровеньВверх Цикл
		
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		Если инд = УровеньВверх Тогда
			ИскомыйРодитель = ТекущаяСтрока;
		ИначеЕсли инд = (УровеньВверх-1) Тогда
			ИскомаяСтрока = ТекущаяСтрока;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИскомыйРодитель = Неопределено Тогда
		Если ИщемСредиПодчиненных Тогда
			ПодчиненныеЭлементыРодителя =  ДеревоПодчиненныеДокументы.ПолучитьЭлементы(); 
		Иначе
			ПодчиненныеЭлементыРодителя =  ДеревоРодительскиеДокументы.ПолучитьЭлементы();
		КонецЕсли;
	Иначе
		ПодчиненныеЭлементыРодителя =  ИскомыйРодитель.ПолучитьЭлементы(); 
	КонецЕсли;
	
	Возврат ПодчиненныеЭлементыРодителя.Индекс(ИскомаяСтрока) < (ПодчиненныеЭлементыРодителя.Количество()-1);
	
КонецФункции

// Выводит в табличный документ строку с документом, для которого формируется структура подчиненности
//
// Параметры
//  Макет  - МакетТабличногоДокумента - макет, на основании которого формирутеся табличный документ.
&НаСервере
Процедура ВывестиТекущийДокумент(Макет)
	
	Выборка = ПолучитьВыборкуПоРеквизитамДокумента(ДокументСсылка);
	Если Выборка.Следующий() Тогда
		
		ПереопределяемоеПредставление = СтруктураПодчиненностиПереопределяемый.ПолучитьПредставлениеДокументаДляПечати(Выборка);
		Если ПереопределяемоеПредставление <> Неопределено Тогда
			СтруктураРеквизитов = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка.Владелец().Выгрузить()[0]);
			СтруктураРеквизитов.Представление = ПереопределяемоеПредставление;
			ВывестиДокументИКартинку(СтруктураРеквизитов,Макет,Истина);
		Иначе
			СтруктураРеквизитов = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка.Владелец().Выгрузить()[0]);
			СтруктураРеквизитов.Представление = ПолучитьПредставлениеДокументаДляПечати(СтруктураРеквизитов);
			ВывестиДокументИКартинку(СтруктураРеквизитов,Макет,Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует представление документа для вывода в табличный документ
//
// Параметры
//  Выборка  - ВыборкаИзРезультатаЗапроса или ДанныеФормыЭлементДерева - набор данных
//             на основании которого формируется представление
//
// Возвращаемое значение:
//   Строка   - сформированное представление
//
&НаСервере
Функция ПолучитьПредставлениеДокументаДляПечати(Выборка)
	
	ПредставлениеДокумента = Выборка.Представление;
	Если (Выборка.СуммаДокумента <> 0) И (Выборка.СуммаДокумента <> NULL) Тогда
		ПредставлениеДокумента = ПредставлениеДокумента + " " + НСтр("ru='на сумму'") + " " + Выборка.СуммаДокумента + " " + Выборка.Валюта + ".";
	КонецЕсли;
	
	Возврат ПредставлениеДокумента;
	
КонецФункции

// Выводит строки дерева подчиненных документов
//
// Параметры
//  СтрокиДерева  - ДанныеФормыКоллекцияЭлементовДерева - строки дерева
//                 которые выводятся в табличный документ
//  Макет  - МакетТабличногоДокумента - макет, на основании которого
//                 происходит вывод в табличный документ
//  УровеньРекурсии - Число - уровень рекурсии процедуры
//
&НаСервере
Процедура ВывестиПодчиненныеЭлементыДерева(СтрокиДерева,Макет,УровеньРекурсии)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		ЭтоТекущийДокумент = (СтрокаДерева.Ссылка = ДокументСсылка);
		ЭтоИсходныйДокумент = (СтрокаДерева.Ссылка = ИсходныйДокумент);
		ПодчиненныеЭлементыДерева = СтрокаДерева.ПолучитьЭлементы();
		
		//Вывод коннекторов
		Для инд = 1 По УровеньРекурсии Цикл
			Если УровеньРекурсии > инд Тогда
				
				Если НеобходимостьВыводаВертикальногоКоннектора(УровеньРекурсии - инд + 1,СтрокаДерева) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("Отступ");
					
				КонецЕсли;
			Иначе 
				
				Если СтрокиДерева.Количество() > 1 И (СтрокиДерева.Индекс(СтрокаДерева)<> (СтрокиДерева.Количество()-1)) Тогда
					Область = Макет.ПолучитьОбласть("КоннекторВерхПравоНиз");
				Иначе
					Область = Макет.ПолучитьОбласть("КоннекторВерхПраво");
				КонецЕсли;
				
			КонецЕсли;	
			
			Область.Параметры.Документ = ?(ЭтоИсходныйДокумент,Неопределено,СтрокаДерева.Ссылка);
			
			Если инд = 1 Тогда
				ТаблицаОтчета.Вывести(Область);
			Иначе
				ТаблицаОтчета.Присоединить(Область);
			КонецЕсли;
			
		КонецЦикла;		
		
		ВывестиДокументИКартинку(СтрокаДерева,Макет,Ложь,Истина);
		
		//Вывод подчиненных элементов дерева
		ВывестиПодчиненныеЭлементыДерева(ПодчиненныеЭлементыДерева,Макет,УровеньРекурсии + 1);
		
	КонецЦикла;
	
КонецПроцедуры

//Инициирует вывод в табличный документ и отображает его по окончанию формирования.
&НаКлиенте
Процедура ВывестиСтруктуруПодчиненности()
	
	//ОбновитьДеревоСтруктурыПодчиненности();
	ТаблицаОтчета.Показать();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры построения дерева подчиненности документов.

&НаСервере
Процедура ОбновитьДеревоСтруктурыПодчиненности(СсылкаНаЗаявку)
	
	ДокументСсылка = СсылкаНаЗаявку;
	//Если СсылкаНаЗаявку<>Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка()  Тогда
	
	Если  ЗначениеЗаполнено(ДокументСсылка) Тогда
		//Параметры.Свойство("ОбъектОтбора", ДокументСсылка);	
		ИсходныйДокумент = ДокументСсылка;
		
		Если ОсновнойДокументДоступен() Тогда
			СформироватьДеревьяДокументов();
			ВывестиТабличныйДокумент();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			Нстр("ru = 'Документ, для которого сформирован отчет о структуре подчиненности, стал недоступен.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревьяДокументов()
	
	ДеревоРодительскиеДокументы.ПолучитьЭлементы().Очистить();
	ДеревоПодчиненныеДокументы.ПолучитьЭлементы().Очистить();
	
	ВывестиРодительскиеДокументы(ДокументСсылка,ДеревоРодительскиеДокументы);
	ВывестиПодчиненныеДокументы(ДокументСсылка,ДеревоПодчиненныеДокументы);
	
КонецПроцедуры

&НаСервере
Функция ОсновнойДокументДоступен()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	1
	|ИЗ
	|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК Таб
	|ГДЕ
	|	Таб.Ссылка = &ТекущийДокумент
	|");
	Запрос.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Получает выборку по реквизитам документа
//
// Параметры
//  ДокументСсылка  - ДокументСсылка - документ, значения реквзитов которого получаются запросом.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса
//
&НаСервере
Функция ПолучитьВыборкуПоРеквизитамДокумента(ДокументСсылка)
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка,
	|	Проведен,
	|	ПометкаУдаления,
	|	#Сумма,
	|	#Валюта,
	|	#Представление
	|ИЗ
	|	Документ." + МетаданныеДокумента.Имя + "
	|ГДЕ
	|	Ссылка = &Ссылка
	|";
	ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеДокумента, "#Сумма", "СуммаДокумента");
	ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеДокумента, "#Валюта", "Валюта");
	ДополнитьТекстЗапросаПоРеквизитамДокумента(ТекстЗапроса,
	СтруктураПодчиненностиПереопределяемый.МассивДополнительныхРеквизитовДокумента(МетаданныеДокумента.Имя));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Возврат Запрос.Выполнить().Выбрать(); 
	
КонецФункции

&НаСервере
Процедура ВывестиРодительскиеДокументы(ТекущийДокумент,ДеревоРодитель)
	
	СтрокиДерева = ДеревоРодитель.ПолучитьЭлементы();
	МетаданныеДокумента = ТекущийДокумент.Метаданные();
	СписокРеквизитов    = Новый СписокЗначений;
	
	Для Каждого Реквизит ИЗ МетаданныеДокумента.Реквизиты Цикл
		
		Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
			
			Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
				
				МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
				
				Если МетаданныеРеквизита <> Неопределено
					И Метаданные.Документы.Содержит(МетаданныеРеквизита)
					И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
					
					ЗначениеРеквизита = ТекущийДокумент[Реквизит.Имя];
					
					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И ТипЗнч(ЗначениеРеквизита) = ТекущийТип
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТЧ Из МетаданныеДокумента.ТабличныеЧасти Цикл
		СтрРеквизитов = "";
		
		СодержимоеТЧ = ТекущийДокумент[ТЧ.Имя].Выгрузить();
		
		Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
			
			Если Метаданные.КритерииОтбора.СвязанныеДокументы.Состав.Содержит(Реквизит) Тогда
				
				Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
					
					МетаданныеРеквизита = Метаданные.НайтиПоТипу(ТекущийТип);
					
					Если МетаданныеРеквизита<>Неопределено
						И Метаданные.Документы.Содержит(МетаданныеРеквизита)
						И ПравоДоступа("Чтение", МетаданныеРеквизита) Тогда
						
						СтрРеквизитов = СтрРеквизитов + ?(СтрРеквизитов = "", "", ", ") + Реквизит.Имя;
						Прервать;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СодержимоеТЧ.Свернуть(СтрРеквизитов);
		Для Каждого КолонкаТЧ ИЗ СодержимоеТЧ.Колонки Цикл
			
			Для Каждого СтрокаТЧ ИЗ СодержимоеТЧ Цикл
				
				ЗначениеРеквизита = СтрокаТЧ[КолонкаТЧ.Имя];
				
				МетаданныеЗначения = Метаданные.НайтиПоТипу(ТипЗнч(ЗначениеРеквизита));
				Если МетаданныеЗначения <> Неопределено Тогда
					
					Если ЗначениеЗаполнено(ЗначениеРеквизита)
						И Метаданные.Документы.Содержит(МетаданныеЗначения)
						И ЗначениеРеквизита <> ТекущийДокумент
						И СписокРеквизитов.НайтиПоЗначению(ЗначениеРеквизита) = Неопределено Тогда
						
						СписокРеквизитов.Добавить(ЗначениеРеквизита,Формат(ЗначениеРеквизита.Дата,"ДФ=yyyyMMddЧЧММсс"));
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СписокРеквизитов.СортироватьПоПредставлению();
	
	Для каждого ЭлементСписка Из СписокРеквизитов Цикл
		
		Выборка = ПолучитьВыборкуПоРеквизитамДокумента(ЭлементСписка.Значение);
		
		Если Выборка.Следующий() Тогда
			СтрокаДерева = ДобавитьСтрокуВДерево(СтрокиДерева, Выборка);
			Если НЕ ДобавляемыйДокументИмеетсяСредиРодителей(ДеревоРодитель,ЭлементСписка.Значение) Тогда
				ВывестиРодительскиеДокументы(ЭлементСписка.Значение,СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет наличие документа среди родителей строки дерева, которая возомжно будет добавлена
//
// Параметры
//  СтрокаРодитель  - ДанныеФормыДерево,ДанныеФормыЭлементДерева - родитель, для 
//                 которого предполагается добавить строку дерева.
//  ДокументСсылка  - Документ - документ, на наличие которого выполняется проверка
//
// Возвращаемое значение:
//   Булево   - Истина если найден, Ложь в обратном случае.
//
Функция ДобавляемыйДокументИмеетсяСредиРодителей(СтрокаРодитель,ИскомыйДокумент)
	
	Если ИскомыйДокумент = ДокументСсылка Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаРодитель) = Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	ТекущийРодитель = СтрокаРодитель;
	Пока ТекущийРодитель <> Неопределено Цикл
		Если ТекущийРодитель.Ссылка = ИскомыйДокумент Тогда
			Возврат Истина;
		КонецЕсли;
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции


&НаСервере
Процедура ЗаменитьТекстЗапроса(ТекстЗапроса, МетаданныеДокумента, ЧтоЗаменять, ИмяРеквизита)
	
	Если МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменять, ИмяРеквизита + " КАК " + ИмяРеквизита);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЧтоЗаменять, " NULL КАК " + ИмяРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента,КэшРеквизитовДокумента)
	
	РеквизитыДокумента = КэшРеквизитовДокумента[ИмяДокумента];
	Если РеквизитыДокумента = Неопределено Тогда
		
		РеквизитыДокумента = Новый Соответствие;
		РеквизитыДокумента.Вставить("СуммаДокумента",  МетаданныеДокумента.Реквизиты.Найти("СуммаДокумента") <> Неопределено);
		РеквизитыДокумента.Вставить("Валюта",          МетаданныеДокумента.Реквизиты.Найти("Валюта") <> Неопределено);
		
		КэшРеквизитовДокумента.Вставить(ИмяДокумента, РеквизитыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьСписокДокументовПоКритериюОтбора(ЗначениеКритерияОтбора)
	
	Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязанныеДокументы.Ссылка
		|ИЗ
		|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы";
		
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора",ЗначениеКритерияОтбора);
		Возврат Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВывестиПодчиненныеДокументы(ТекущийДокумент,ДеревоРодитель)
	
	СтрокиДерева = ДеревоРодитель.ПолучитьЭлементы();
	Таблица      = ПолучитьСписокДокументовПоКритериюОтбора(ТекущийДокумент);
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшПоТипамДокументов   = Новый Соответствие;
	КэшРеквизитовДокумента = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		
		МетаданныеДокумента = СтрокаТаблицы.Ссылка.Метаданные();
		Если Не ПравоДоступа("Чтение", МетаданныеДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяДокумента = МетаданныеДокумента.Имя;
		ДополнитьКэшМетаданных(МетаданныеДокумента, ИмяДокумента,КэшРеквизитовДокумента);
		
		МассивСсылок = КэшПоТипамДокументов[ИмяДокумента];
		Если МассивСсылок = Неопределено Тогда
			
			МассивСсылок = Новый Массив;
			КэшПоТипамДокументов.Вставить(ИмяДокумента, МассивСсылок);
			
		КонецЕсли;
		
		МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);
		
	КонецЦикла;
	
	ЕСли КэшПоТипамДокументов.Количество() = 0 ТОгда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеДокументы УПОРЯДОЧИТЬ ПО ПодчиненныеДокументы.Дата";
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Для Каждого КлючИЗначение Из КэшПоТипамДокументов Цикл
		
		ТекстПоТипуДокумента = "
		|	Дата,
		|	Ссылка,
		|	Проведен,
		|	ПометкаУдаления,
		|" + ?(КэшРеквизитовДокумента[КлючИЗначение.Ключ]["СуммаДокумента"], "СуммаДокумента", "NULL") + " КАК СуммаДокумента,
		|" + ?(КэшРеквизитовДокумента[КлючИЗначение.Ключ]["Валюта"],         "Валюта", "NULL") + "         КАК Валюта,
		|	#Представление
		|ИЗ
		|	Документ." + КлючИЗначение.Ключ + "
		|ГДЕ
		|	Ссылка В (&" + КлючИЗначение.Ключ + ")";
		
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		ДополнитьТекстЗапросаПоРеквизитамДокумента(ТекстПоТипуДокумента,
		СтруктураПодчиненностиПереопределяемый.МассивДополнительныхРеквизитовДокумента(КлючИЗначение.Ключ));
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", " ВЫБРАТЬ ", " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + ТекстПоТипуДокумента;
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + ТекстЗапроса + ТекстЗапросаКонец;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДобавитьСтрокуВДерево(СтрокиДерева, Выборка);
		Если НЕ ДобавляемыйДокументИмеетсяСредиРодителей(ДеревоРодитель,Выборка.Ссылка) Тогда
			ВывестиПодчиненныеДокументы(Выборка.Ссылка,НоваяСтрока)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьСтрокуВДерево(СтрокиДерева, Выборка)
	
	НоваяСтрока = СтрокиДерева.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Ссылка, Представление, СуммаДокумента, Валюта, Проведен, ПометкаУдаления");
	
	ПереопределенноеПредставление = СтруктураПодчиненностиПереопределяемый.ПолучитьПредставлениеДокументаДляПечати(Выборка);
	Если ПереопределенноеПредставление <> Неопределено Тогда
		НоваяСтрока.Представление = ПереопределенноеПредставление;
	Иначе
		НоваяСтрока.Представление = ПолучитьПредставлениеДокументаДляПечати(Выборка);
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Процедура ДополнитьТекстЗапросаПоРеквизитамДокумента(ТекстЗапроса, МассивРеквизитов)
	
	ТекстПредставление = "Представление КАК Представление";
	
	Для Инд = 1 По 3 Цикл
		
		ТекстПредставление = ТекстПредставление + ",
		|	" + ?(МассивРеквизитов.Количество() >= Инд,МассивРеквизитов[инд - 1],"NULL") + " Как ДополнительныйРеквизит" + Инд;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Представление", ТекстПредставление);
	
КонецПроцедуры




//////////////////////////////////////// ОТБОРЫ  /////////////////////////////////////////////


//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 21.01.2014
&НаСервере	
Процедура  УстановитьОтборы()   
	
	Отбор = новый Структура;
	
	Если ВыводитьОплаченные = Истина Тогда
		Отбор.Вставить("Оплачено","1");
		Отбор.Вставить("ОстатокОплаты",0);
	конецЕсли ;
	Если ВыводитьУтвержденные = Истина Тогда
		Отбор.Вставить("ЗаявкаУтверждена","1");
		Отбор.Вставить("КОплатеЕсть","1");	
	конецЕсли ;
	
	Если ВыводитьНеУтвержденные = Истина Тогда
		Отбор.Вставить("ЗаявкаУтверждена","0");
		Отбор.Вставить("КОплатеЕсть","1");
	КонецЕсли;
	
	
	Элементы.СписокЗаявок.ОтборСтрок=Новый ФИксированнаяСтруктура(Отбор);
	ВычислитьИТОГИ(Отбор);	 
КонецПроцедуры

&НаСервере	
Процедура  ВычислитьИТОГИ(ЗначениеОтбора)
	ИтогоКДолг=0;
	ИтогоКОплате=0;
	ИтогоСуммаСчета=0;
	Для каждого СтрокаСписка из  СписокЗаявок.НайтиСтроки(ЗначениеОтбора) Цикл
		ИтогоКДолг = ИтогоКДолг +  СтрокаСписка.ОстатокОплаты ; 
		ИтогоКОплате =  ИтогоКОплате +  Число(СтрокаСписка.СуммаКОплате);
		ИтогоСуммаСчета= ИтогоСуммаСчета + Число(СтрокаСписка.СуммаСчета)		
	КонецЦикла;
	
	
КонецПроцедуры


//} 


///////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ОповеститьПользователяОбУстановкеСтатуса(КоличествоОбработанных, КоличествоВсего, Статус)
	
	Если КоличествоОбработанных > 0 Тогда
		
		Элементы.Список.Обновить();
		
		ТекстСообщения = НСтр("ru='Для %КоличествоОбработанных% из %КоличествоВсего% выделенных в списке документов установлен статус ""%Статус%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоОбработанных%", КоличествоОбработанных);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КоличествоВсего%",        КоличествоВсего);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%",                 Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Статус ""%Статус%"" не установлен ни для одного документа.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Статус);
		ТекстЗаголовка = НСтр("ru='Статус ""%Статус%"" не установлен'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%Статус%", Статус);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	//Элементы.СписокОрганизация.Видимость = Не ЗначениеЗаполнено(Организация);
	//Элементы.СписокПриоритет.Видимость = Не ЗначениеЗаполнено(Приоритет);
	
КонецПроцедуры

//{ ООО "АСТЭК" по заказу ООО "ПаксМед". Разработчик: Бурыкин Александр Дата: 18.01.2014
&НаСервере
Процедура	ЗаполнитьСписокЗаявок()
	
	ЗапросЗаявок = новый Запрос;
	ЗапросЗаявок.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Ссылка,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.СтатьяДвиженияДенежныхСредств КАК Категория,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Контрагент КАК Контрагент,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокумента КАК СуммаСчета,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование.НомерПоДаннымПоставщика КАК НомерВходящегоДокумента,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование.ДатаПоДаннымПоставщика КАК ДатаСчета,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Валюта КАК Валюта,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Дата КАК ДатаПолучения,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.КтоЗаявил КАК Ответственный,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.ЖелательнаяДатаПлатежа КАК ДатаОплаты,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.акСуммаОплаты КАК акСуммаОплаты,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.акПроцентОплаты КАК акПроцентОплаты,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Статус КАК Статус,
	                    |	СУММА(Заявка.СуммаКонечныйОстаток) * -1 КАК СуммаОстаток,
	                    |	МАКСИМУМ(СписаниеБезналичныхДенежныхСредств.Номер) КАК НомерПП,
	                    |	МАКСИМУМ(СписаниеБезналичныхДенежныхСредств.Дата) КАК Дата,
	                    |	МАКСИМУМ(КурсыВалют.Курс) КАК Курс,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Статус КАК СтатусЗаявки,
	                    |	СУММА(Заявка.СуммаПриход) КАК СуммаПриход,
	                    |	СУММА(Заявка.СуммаРасход) КАК СуммаРасход,
	                    |	ВЫБОР
	                    |		КОГДА СУММА(Заявка.СуммаКонечныйОстаток) * -1 = 0
	                    |			ТОГДА 1
	                    |		ИНАЧЕ 0
	                    |	КОНЕЦ КАК Оплачено,
	                    |	ВЫБОР
	                    |		КОГДА ЗаявкаДок.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена)
	                    |			ТОГДА 1
	                    |		ИНАЧЕ 0
	                    |	КОНЕЦ КАК ЗаявкаУтверждена,
	                    |	ВЫБОР
	                    |		КОГДА ЗаявкаДок.акСуммаОплаты <> 0
	                    |			ТОГДА 1
	                    |		ИНАЧЕ 0
	                    |	КОНЕЦ КАК КОплатеЕсть,
	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.ДокументОснование,
	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.ДокументОснование.Номер КАК ЗаказКлиентаНомер,
	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.ДокументОснование.Менеджер КАК ЗаказКлиентаМенеджер,
	                    |	ВЫРАЗИТЬ(Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Заметки КАК СТРОКА(1000)) КАК Комментарий,
//{{MRG[ <-> ]
	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.ДокументОснование.Контрагент КАК Заказчик
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.ДокументОснование.Контрагент КАК Заказчик,
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	                    |	КурсыВалютСрезПоследних.Курс КАК Курс
//}}MRG[ <-> ]
	                    |ИЗ
	                    |	РегистрНакопления.ДенежныеСредстваКВыплате.ОстаткиИОбороты КАК Заявка
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	                    |		ПО Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Ссылка = СписаниеБезналичныхДенежныхСредств.ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	                    |		ПО Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Валюта = КурсыВалют.Валюта
	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаДок
	                    |		ПО Заявка.ЗаявкаНаРасходованиеДенежныхСредств = ЗаявкаДок.Ссылка
//{{MRG[ <-> ]
	                    |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	                    |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
//}}MRG[ <-> ]
	                    |		ПО Заявка.ЗаявкаНаРасходованиеДенежныхСредств = ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка
//{{MRG[ <-> ]
//	                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
//	                    |		ПО Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Валюта = КурсыВалютСрезПоследних.Валюта
//	                    |			И Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Дата = КурсыВалютСрезПоследних.Период
//}}MRG[ <-> ]
	                    |
	                    |СГРУППИРОВАТЬ ПО
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.СтатьяДвиженияДенежныхСредств,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Контрагент,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокумента,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование.НомерПоДаннымПоставщика,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование.ДатаПоДаннымПоставщика,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Валюта,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Дата,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.КтоЗаявил,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.ЖелательнаяДатаПлатежа,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.акПроцентОплаты,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.акСуммаОплаты,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Ссылка,
	                    |	ЗаявкаДок.Статус,
	                    |	ЗаявкаДок.акСуммаОплаты,
	                    |	Заявка.СуммаПриход,
	                    |	Заявка.СуммаРасход,
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Статус,
	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ,
	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.ДокументОснование,
	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.ДокументОснование.Номер,
	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.ДокументОснование.Менеджер,
	                    |	ВЫРАЗИТЬ(Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Заметки КАК СТРОКА(1000)),
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Ссылка,
//{{MRG[ <-> ]
	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Статус";
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	                    |	Заявка.ЗаявкаНаРасходованиеДенежныхСредств.Статус,
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	                    |	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Заказ.ДокументОснование.Контрагент,
//	                    |	КурсыВалютСрезПоследних.Курс";
//}}MRG[ <-> ]
	
	
	Результат = ЗапросЗаявок.Выполнить().Выгрузить();
	
	ТабДок = СписокЗаявок.Выгрузить();
	ТабДок.Очистить();
	
	Для каждого СтрокаРезультата ИЗ Результат цикл
		Новаястрока = ТабДок.Добавить();
		
		Если СтрокаРезультата.СуммаОстаток=0 Тогда
			Новаястрока.ОплатаПоФакту="100%";	                                    
		Иначе
			Если СтрокаРезультата.СуммаСчета=0 Тогда
				Новаястрока.ОплатаПоФакту=Формат(100,"ЧДЦ=0; ЧРГ=; ЧН=0; ЧГ=")+"%"
			иначе
				Новаястрока.ОплатаПоФакту=Формат(100 - СтрокаРезультата.СуммаОстаток/СтрокаРезультата.СуммаСчета*100,"ЧДЦ=0; ЧРГ=; ЧН=0; ЧГ=")+"%";
			конецЕсли;
		КонецЕсли;
		
		//Новаястрока.ОплатаПоФакту =  ЛЕВ(Строка(100 - СтрокаРезультата.СуммаОстаток/СтрокаРезультата.СуммаСчета*100),3); //СтрокаРезультата.ОплатаПоФакту; 
		Новаястрока.ЗаявкаСсылка = СтрокаРезультата.Ссылка;
		Новаястрока.СтатусЗаявки = СтрокаРезультата.СтатусЗаявки;
		Новаястрока.Категория = СтрокаРезультата.Категория; 
		Новаястрока.Контрагент = СтрокаРезультата.Контрагент; 
		Новаястрока.НомерСчета = СтрокаРезультата.НомерВходящегоДокумента; 
		Новаястрока.ДатаСчета = СтрокаРезультата.ДатаСчета; 
		Новаястрока.СуммаСчета = СтрокаРезультата.СуммаСчета; 
		Новаястрока.Валюта = СтрокаРезультата.Валюта; 
		Новаястрока.Курс = СтрокаРезультата.Курс; 
		Новаястрока.ДатаПолучения = СтрокаРезультата.ДатаПолучения; 
		Новаястрока.Ответственный = СтрокаРезультата.Ответственный; 
		Новаястрока.ДатаОплаты = СтрокаРезультата.ДатаОплаты; 
		Новаястрока.НомерПП = СтрокаРезультата.НомерПП; 
		Новаястрока.ОстатокОплаты = СтрокаРезультата.СуммаОстаток; 
		Новаястрока.СуммаКОплате = СтрокаРезультата.акСуммаОплаты; 
		Новаястрока.ПроцентОплаты = СтрокаРезультата.акПроцентОплаты; 
		Новаястрока.Примечание = СтрокаРезультата.Комментарий;
		Новаястрока.Оплачено = СтрокаРезультата.Оплачено; 
		Новаястрока.ЗаявкаУтверждена = СтрокаРезультата.ЗаявкаУтверждена; 
		Новаястрока.КОплатеЕсть = СтрокаРезультата.КОплатеЕсть; 
		
		Новаястрока.Менеджер = СтрокаРезультата.ЗаказКлиентаМенеджер; 
		Новаястрока.Заказчик = СтрокаРезультата.Заказчик; 
		Новаястрока.ЗаказКлиентаНомер = СтрокаРезультата.ЗаказКлиентаНомер; 
		
		
		
	КонецЦикла;
	СписокЗаявок.Загрузить(ТабДок);
	
	//ТекущийОтбор = новый Структура;		 
	// ВычислитьИТОГИ(ТекущийОтбор);  
	УстановитьОтборы(); 
КонецПроцедуры

&НаСервере
Процедура УтвердитьИлиОтклонитьЗаявкуНаРасходованиеДС(СсылкаНаЗаявку,Действие)
	ЗаявкаОбъект = СсылкаНаЗаявку.получитьОбъект();
	
	Если  Действие="Утвердить"  Тогда
		ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Утверждена;
	ИначеЕсли  Действие= "Отклонить" Тогда
		ЗаявкаОбъект.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.Отклонена;
	КонецЕсли;
	ЗаявкаОбъект.записать();
	ЗаполнитьСписокЗаявок();
	
КонецПроцедуры

&НаКлиенте
Процедура Спросить(Команда)
	// Вставить содержимое обработчика.
	// тут пишем вопрос ДАНЕТ
КонецПроцедуры



//}
