////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДата());
	КонецЕсли;
	ВремяНачалаФормированияДвиженияПоПартиям 	= НачалоМесяца(Объект.ПериодРегистрации);
	ВремяОкончанияФормированияДвиженияПоПартиям = КонецМесяца(Объект.ПериодРегистрации);
	
	Элементы.ГруппаРаспределениеДоходовИРасходовПоНаправлениямОбщая.Видимость = ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат");
	
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПредставлениеПериодаРегистрации 			= ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
	ПредставлениеПериодРегистрацииРегламентный 	= ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
	СтруктураОпераций = Новый Структура;
	ОбновитьСостояния(СтруктураОпераций);
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, Объект.ПериодРегистрации, ПредставлениеПериодаРегистрации);
	СтруктураОпераций = Новый Структура;
	ОбновитьСостояния(СтруктураОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Объект.ПериодРегистрации, ЭтаФорма);
	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(Объект.ПериодРегистрации);
	СтруктураОпераций = Новый Структура;
	ОбновитьСостояния(СтруктураОпераций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	СтруктураОпераций = Новый Структура;
	ОбновитьСостояния(СтруктураОпераций);
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации)

	Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");

КонецФункции

&НаКлиенте
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации)

	СтандартнаяОбработка = Ложь;

	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено)

	СтандартнаяОбработка = Ложь;

	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли;

	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли;
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));

	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;

	ПериодРегистрации = ВыбранныйЭлемент.Значение;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ПОДВАЛА ФОРМЫ

&НаКлиенте
Процедура АвтоматическиВыполнятьОперацииПоЗакрытиюМесяцаПриИзменении(Элемент)
	
	Если АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца И НЕ ЗначениеЗаполнено(ПериодРегистрацииРегламентный) Тогда
		ПериодРегистрацииРегламентный = Объект.ПериодРегистрации;
		ПредставлениеПериодРегистрацииРегламентный = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
	КонецЕсли;
	УправлениеЭлементамиПодвала();
	СохранитьРеквизитыРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрацииРегламентный, ПредставлениеПериодРегистрацииРегламентный);
	СохранитьРеквизитыРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодРегистрацииРегламентныйНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрацииРегламентный, ЭтаФорма);
	ПредставлениеПериодРегистрацииРегламентный = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрацииРегламентный);
	СохранитьРеквизитыРегламентногоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыполнитьОперацииПоЗакрытиюМесяцаНажатие(Команда)
	
	ВыполнитьОперацииПоЗакрытиюМесяца();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОперацииПоЗакрытиюМесяца()
	
	ДействиеФормированиеДвиженийПоРасчетуСПартнерамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеРегламентногоЗадания(Команда)
	
	РедактированиеРасписанияРегламентногоЗадания();
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОпераций(Команда)
	
	СтруктураОпераций = Новый Структура;
	ОбновитьСостояния(СтруктураОпераций);
	ПолучитьСостояниеРегламентногоЗадания();
	УправлениеЭлементамиПодвала();
	ОбновитьПредставлениеРасписания();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ГРУППЫ ОПЕРАЦИЙ

////////////////////////////////////////////////////////////////////////////////
// НА КЛИЕНТЕ

&НаКлиенте
Процедура ДействиеИсправлениеОтрицательныхОстатковТоваровНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", 		 Объект.Организация);
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	
	ОткрытьФорму("Обработка.ПомощникИсправленияОстатковТоваровОрганизаций.Форма.ФормаМониторСостоянияТоваровОрганизаций", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеДвиженийПоРасчетуСПартнерамиНажатие(Элемент)
	
	ДействиеФормированиеДвиженийПоРасчетуСПартнерамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеДвиженийПоПартиямТоваровНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", НСтр("ru = 'ПартионныйУчет'"));
	ПараметрыФормы.Вставить("ДатаНачала", 				 ВремяНачалаФормированияДвиженияПоПартиям);
	ПараметрыФормы.Вставить("ДатаОкончания", 			 ВремяОкончанияФормированияДвиженияПоПартиям);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , НСтр("ru = 'ПартионныйУчет'"));

КонецПроцедуры

&НаКлиенте
Процедура ДействиеФормированиеДвиженийПоПартиямТоваровНажатие(Элемент)
	
	ДействиеФормированиеДвиженийПоПартиямТоваровСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРаспределениеРБПНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",		 Объект.Организация);
	ПараметрыФормы.Вставить("ПериодРегистрации", КонецМесяца(Объект.ПериодРегистрации));
	
	ОткрытьФорму("Документ.РаспределениеРасходовБудущихПериодов.Форма.ФормаСпискаДокументов", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРаспределениеНДСНажатие(Элемент)
	
	ДействиеРаспределениеНДССервер();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеНДСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДокументРаспределения = ПолучитьДокументРаспределенияНДС(Объект.Организация, Объект.ПериодРегистрации);
	
	Если ДокументРаспределения <> Неопределено Тогда
		ОткрытьЗначение(ДокументРаспределения); 
	Иначе
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
		ОткрытьФорму("Документ.РаспределениеНДС.Форма.ФормаСписка", ПараметрыФормы);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетСебестоимостиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", НСтр("ru = 'Расчет себестоимости'"));
	ПараметрыФормы.Вставить("ДатаНачала", 				 ВремяНачалаРасчетаСебестоимости);
	ПараметрыФормы.Вставить("ДатаОкончания", 			 ВремяОкончанияРасчетаСебестоимости);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, , НСтр("ru = 'Расчет себестоимости'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчетСебестоимостиНажатие(Элемент)
	
	ДействиеРасчетСебестоимостиСервер();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументРаспределенияНДС(Организация, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаспределениеНДС.Ссылка
	|ИЗ
	|	Документ.РаспределениеНДС КАК РаспределениеНДС
	|ГДЕ
	|	(РаспределениеНДС.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|	И
	|	(Не РаспределениеНДС.ПометкаУдаления)
	|	И
	|	(РаспределениеНДС.Организация = &Организация
	|	ИЛИ РаспределениеНДС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("ДатаНачала", НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		ДокументРаспределения = Результат.Ссылка;
	КонецЦикла;
	
	Если Результат.Количество()=1 Тогда
		Возврат ДокументРаспределения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РаспределениеДоходовИРасходовПоНаправлениямНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПериодРегистрации", Объект.ПериодРегистрации);
	ПараметрыФормы.Вставить("Организация", 		 Объект.Организация);
	ПараметрыФормы.Вставить("НеПомеченныеНаУдаление", 	Истина);
	
	Форма = ПолучитьФорму("Документ.РаспределениеДоходовИРасходовПоНаправлениямДеятельности.Форма.ФормаСписка", ПараметрыФормы,,ПредопределенноеЗначение("Перечисление.СостоянияОперацийЗакрытияМесяца.НеВыполнено"));
	Форма.Открыть(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРаспределениеДоходовИРасходовПоНаправлениямНажатие(Элемент)
	
	РаспределениеДоходовИРасходовПоНаправлениямСервер();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НА СЕРВЕРЕ

&НаСервере
Процедура ДействиеФормированиеДвиженийПоРасчетуСПартнерамиСервер()
	
	//основной функционал
	Попытка
		ВзаиморасчетыСервер.ОтложенноеПроведениеПоРасчетамСПартнерамиЗакрытиеМесяца(Объект.Организация);
	Исключение
	КонецПопытки;
	
	//последующие действия
	СтруктураОпераций = Новый Структура;
	СтруктураОпераций.Вставить("ФормированиеДвиженийПоРасчетуСПартнерами","");
	
	ОбновитьСостояния(СтруктураОпераций);
	
	Если НЕ (ФормированиеДвиженийПоРасчетуСПартнерами = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено ) Тогда
			ДействиеФормированиеДвиженийПоПартиямТоваровСервер();
	Иначе
		СтруктураОпераций = Новый Структура;
		СтруктураОпераций.Вставить("ФормированиеДвиженийПоПартиямТоваров","");
		СтруктураОпераций.Вставить("РаспределениеРБП","");
		СтруктураОпераций.Вставить("РаспределениеНДС","");
		СтруктураОпераций.Вставить("РасчетСебестоимости","");
		СтруктураОпераций.Вставить("РаспределениеДоходовИРасходовПоНаправлениям","");
		ОбновитьСостояния(СтруктураОпераций);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДействиеФормированиеДвиженийПоПартиямТоваровСервер()
	
	//основной функционал
	ВремяНачалаФормированияДвиженияПоПартиям = ТекущаяДата();
	Попытка
		ПартионныйУчетСервер.ВыполнитьРегламентноеФормированиеДвиженийПоПартиямТоваров();
		ПартионныйУчетСервер.ВыполнитьРаспределениеДополнительныхРасходов(Объект.ПериодРегистрации, ?(Объект.Организация.Пустая(), Неопределено, Объект.Организация));
	Исключение
	КонецПопытки;
	ВремяОкончанияФормированияДвиженияПоПартиям = ТекущаяДата();
	
	//последующие действия
	СтруктураОпераций = Новый Структура;
	СтруктураОпераций.Вставить("ФормированиеДвиженийПоПартиямТоваров","");
	СтруктураОпераций.Вставить("РаспределениеРБП","");
	
	ОбновитьСостояния(СтруктураОпераций);
	
	Если НЕ (
			ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено ИЛИ
			ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
			) Тогда
			ДействиеРаспределениеНДССервер();
	Иначе
		СтруктураОпераций = Новый Структура;
		СтруктураОпераций.Вставить("РаспределениеНДС","");
		СтруктураОпераций.Вставить("РасчетСебестоимости","");
		СтруктураОпераций.Вставить("РаспределениеДоходовИРасходовПоНаправлениям","");
		ОбновитьСостояния(СтруктураОпераций);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДействиеРасчетСебестоимостиСервер()
	
	//основной функционал
	ВремяНачалаРасчетаСебестоимости = ТекущаяДата();
	Попытка
		Документы.РасчетСебестоимостиТоваров.ВыполнитьРегламентноеЗаданиеРасчетСебестоимости(Истина, КонецМесяца(Объект.ПериодРегистрации));
	Исключение
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РасчетСебестоимостиТоваровОрганизации.Ссылка КАК Документ
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
		|ГДЕ
		|	РасчетСебестоимостиТоваровОрганизации.Организация В(&МассивОрганизаций)
		|	И РасчетСебестоимостиТоваровОрганизации.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РасчетСебестоимостиТоваровОрганизации.Ссылка.Проведен = ИСТИНА
		|	И РасчетСебестоимостиТоваровОрганизации.Ссылка.ПредварительныйРасчет = ЛОЖЬ";

		Запрос.УстановитьПараметр("ДатаНачала", 	НачалоМесяца(Объект.ПериодРегистрации));
		Запрос.УстановитьПараметр("ДатаОкончания", 	КонецМесяца(Объект.ПериодРегистрации));
		МассивОрганизаций = МассивДоступныхОрганизаций();
		Запрос.УстановитьПараметр("МассивОрганизаций", 	МассивОрганизаций);
		
		Результат = Запрос.Выполнить().Выбрать();
		Пока Результат.Следующий() Цикл
			ДокОбъект = Результат.Документ.ПолучитьОбъект();
			ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
	КонецПопытки;
	ВремяОкончанияРасчетаСебестоимости = ТекущаяДата();
	
	//последующие действия
	ОбновитьСостояния(Новый Структура("РасчетСебестоимости",""));
	
	Если ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		Если НЕ (
			(РаспределениеРБП = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено ИЛИ
			РаспределениеРБП = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций)
			ИЛИ
			(РасчетСебестоимости = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено ИЛИ
			РасчетСебестоимости = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций)
			ИЛИ
			(РаспределениеНДС 	 = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено ИЛИ
			РаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций)
			) Тогда
			РаспределениеДоходовИРасходовПоНаправлениямСервер();
		Иначе
			ОбновитьСостояния(Новый Структура("РаспределениеДоходовИРасходовПоНаправлениям",""));
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ДействиеРаспределениеНДССервер()
	
	//основные действия
	Если КонецМесяца(Объект.ПериодРегистрации) = КонецКвартала(Объект.ПериодРегистрации) Тогда
		ОбъектОбработка = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.ОперацииЗакрытияМесяца"));
		ОбъектОбработка.РаспределениеНДС();
		ЗначениеВРеквизитФормы(ОбъектОбработка, "Объект");
	КонецЕсли;
	
	//последующие действия
	ОбновитьСостояния(Новый Структура("РаспределениеНДС",""));
	
	Если НЕ (
			ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено ИЛИ
			ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
			) Тогда
			ДействиеРасчетСебестоимостиСервер();
	Иначе
		СтруктураОпераций = Новый Структура;
		СтруктураОпераций.Вставить("РасчетСебестоимости","");
		СтруктураОпераций.Вставить("РаспределениеДоходовИРасходовПоНаправлениям","");
		ОбновитьСостояния(СтруктураОпераций);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РаспределениеДоходовИРасходовПоНаправлениямСервер()
	
	//проверим необходимость выполнения действия
	ОбновитьСостояния(Новый Структура("РаспределениеДоходовИРасходовПоНаправлениям",""));
	Если Не РаспределениеДоходовИРасходовПоНаправлениям = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
		//основные действия
		ОбъектОбработка = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.ОперацииЗакрытияМесяца"));
		ОбъектОбработка.РаспределениеДоходовИРасходовПоНаправлениям();
		ЗначениеВРеквизитФормы(ОбъектОбработка, "Объект");
		
		//последующие действия
		ОбновитьСостояния(Новый Структура("РаспределениеДоходовИРасходовПоНаправлениям",""));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СОСТОЯНИЕ ОПЕРАЦИЙ ЗАКРЫТИЯ МЕСЯЦА

&НаСервере
Процедура СостояниеИсправлениеОтрицательныхОстатковТоваров()
	
	Запрос = Новый Запрос();
	Запрос.Текст = Обработки.ПомощникИсправленияОстатковТоваровОрганизаций.ТекстЗапросаСостояниеОстатковТоваровОрганизаций()+"
	|ВЫБРАТЬ
	|	ТаблицаОтрицательныхОстатков.Период КАК Период
	|ИЗ
	|	ВтТаблицаОтрицательныхОстатков КАК ТаблицаОтрицательныхОстатков
	|ГДЕ
	|	ТаблицаОтрицательныхОстатков.Организация В (&МассивОрганизаций)";
	
	МассивОрганизаций = МассивДоступныхОрганизаций();
	Запрос.УстановитьПараметр("ДатаНачала", 		НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("МассивОрганизаций", 	МассивОрганизаций);
	МассивРезультатов = Запрос.ВыполнитьПакет();
	РезультатЗапросаОтрицательныеОстатки = МассивРезультатов[6];
	РезультатЗапросаРазвернутоеСальдо	 = МассивРезультатов[3];
	Если РезультатЗапросаОтрицательныеОстатки.Пустой() И РезультатЗапросаРазвернутоеСальдо.Пустой() Тогда
		ИсправлениеОтрицательныхОстатковТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		Элементы.ПояснениеИсправлениеОтрицательныхОстатковТоваров.Заголовок = НСтр("ru = 'Отрицательных остатков не обнаружено.'");
	Иначе
		ИсправлениеОтрицательныхОстатковТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
		Элементы.ПояснениеИсправлениеОтрицательныхОстатковТоваров.Заголовок = НСтр("ru = 'Обнаружены отрицательные остатки на конец месяца.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СостояниеФормированиеДвиженийПоРасчетуСПартнерами()
	
	Запрос = Новый Запрос;
	Запрос.Текст ="
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСКлиентами.АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
		|ГДЕ
		|	РасчетыСКлиентами.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РасчетыСКлиентами.АналитикаУчетаПоПартнерам В(&МассивКлючейАналитики)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РасчетыСПоставщиками.АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК РасчетыСПоставщиками
		|ГДЕ
		|	РасчетыСПоставщиками.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РасчетыСПоставщиками.АналитикаУчетаПоПартнерам В (&МассивКлючейАналитики)";
	
	МассивКлючейАналитики = РегистрыСведений.АналитикаУчетаПоПартнерам.ПолучитьМассивКлючейАналитикиПоОрганизации(Объект.Организация);
		
	Запрос.УстановитьПараметр("ДатаНачала", 			НачалоМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("ДатаОкончания", 			КонецМесяца(Объект.ПериодРегистрации));
	Запрос.УстановитьПараметр("МассивКлючейАналитики", 	МассивКлючейАналитики);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ФормированиеДвиженийПоРасчетуСПартнерами = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		Элементы.ПояснениеФормированиеДвиженийПоРасчетуСПартнерами.Заголовок = НСтр("ru = 'Отсутствуют взаиморасчеты с партнерами.'");
	Иначе
		РезультатЗапросаВзаиморасчетыСКлиентами = ВзаиморасчетыСервер.РезультатЗапросаПоАналитикамУчетаРасчетовСКлиентами(МассивКлючейАналитики, КонецМесяца(Объект.ПериодРегистрации));
		РезультатЗапросаВзаиморасчетыСПоставщиками = ВзаиморасчетыСервер.РезультатЗапросаПоАналитикамУчетаРасчетовСПоставщиками(МассивКлючейАналитики, КонецМесяца(Объект.ПериодРегистрации));
		
		Если РезультатЗапросаВзаиморасчетыСКлиентами.Пустой() И РезультатЗапросаВзаиморасчетыСПоставщиками.Пустой() Тогда
			ФормированиеДвиженийПоРасчетуСПартнерами = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
			Элементы.ПояснениеФормированиеДвиженийПоРасчетуСПартнерами.Заголовок = НСтр("ru = 'Движения по взаиморасчетам с партнерами успешно сформированы.'");
		Иначе
			ФормированиеДвиженийПоРасчетуСПартнерами = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
			Элементы.ПояснениеФормированиеДвиженийПоРасчетуСПартнерами.Заголовок = НСтр("ru = 'Необходимо выполнить формирование движений по взаиморасчетам с партнерами.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СостояниеФормированиеДвиженийПоПартиямТоваров()
	
	Если ФормированиеДвиженийПоРасчетуСПартнерами = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
		Элементы.ФормированиеДвиженийПоПартиямТоваров.Гиперссылка = Ложь;
		Элементы.ПояснениеФормированиеДвиженийПоПартиямТоваров.Заголовок = НСтр("ru = 'Предыдущая операция должна быть успешно завершена.'");
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПартииТоваровОрганизаций.Регистратор
		|ИЗ
		|	Последовательность.ПартииТоваровОрганизаций КАК ПартииТоваровОрганизаций
		|ГДЕ
		|	ПартииТоваровОрганизаций.Период МЕЖДУ &ДатаНачала И &ДатаОкончания";

		Запрос.УстановитьПараметр("ДатаНачала", 	НачалоМесяца(Объект.ПериодРегистрации));
		Запрос.УстановитьПараметр("ДатаОкончания", 	КонецМесяца(Объект.ПериодРегистрации));
		
		ОтсутствуютДвижения = Запрос.Выполнить().Пустой();
		
		Если ОтсутствуютДвижения Тогда
			ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
			Элементы.ФормированиеДвиженийПоПартиямТоваров.Гиперссылка = Ложь;
			Элементы.ПояснениеФормированиеДвиженийПоПартиямТоваров.Заголовок = НСтр("ru = 'Отсутствуют движения товаров на складах и в производстве.'");
		Иначе
			МенеджерВТЗатратыГраницы = Новый МенеджерВременныхТаблиц;
			МенеджерВТПартииТоваровГраницы = Новый МенеджерВременныхТаблиц;
			Если ПартионныйУчетСервер.ТребуетсяРаспределениеДопРасходов(КонецМесяца(Объект.ПериодРегистрации), Объект.Организация) Тогда
				ГраницаПартииТоваровВосстановлена = Ложь
			ИначеЕсли НЕ ПартионныйУчетСервер.СформироватьВременнуюТаблицуНачальныеГраницыПартииТоваровОрганизаций(МенеджерВТПартииТоваровГраницы) Тогда
				ГраницаПартииТоваровВосстановлена = Истина
			Иначе
				Запрос = Новый Запрос;
				ТекстЗапроса ="ВЫБРАТЬ
				|	НачальныеГраницы.Номенклатура
				|ИЗ
				|	НачальныеГраницы КАК НачальныеГраницы
				|ГДЕ
				|	НачальныеГраницы.Период < &ДатаОкончания";
				
				Запрос.МенеджерВременныхТаблиц = МенеджерВТПартииТоваровГраницы;
				Запрос.Текст = ТекстЗапроса;
				Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Объект.ПериодРегистрации));
				ГраницаПартииТоваровВосстановлена = Запрос.Выполнить().Пустой();
			КонецЕсли;
			
			Если ГраницаПартииТоваровВосстановлена 
				Тогда
				ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
				Элементы.ФормированиеДвиженийПоПартиямТоваров.Гиперссылка = Ложь;
				Элементы.ПояснениеФормированиеДвиженийПоПартиямТоваров.Заголовок = НСтр("ru = 'Отложенные движения по партиям товаров товаров успешно выполнены.'");
			Иначе
				ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
				Элементы.ФормированиеДвиженийПоПартиямТоваров.Гиперссылка = Истина;
				Элементы.ПояснениеФормированиеДвиженийПоПартиямТоваров.Заголовок = НСтр("ru = 'При распределении партий товаров возникли ошибки.'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СостояниеРаспределениеРБП()
	
	Если ФормированиеДвиженийПоРасчетуСПартнерами = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено Тогда
		РаспределениеРБП = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
		Элементы.ПояснениеРаспределениеРБП.Заголовок = НСтр("ru = 'Предыдущая операция должна быть успешно завершена.'");
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПрочиеРасходыОбороты.СтатьяРасходов
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Обороты(
		|											&ДатаНачала,
		|											&ГраницаДатаОкончания,
		|											,
		|											Организация В (&МассивОрганизаций)
		|											И СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|											) КАК ПрочиеРасходыОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрочиеРасходы.СтатьяРасходов,
		|	ВЫБОР
		|		КОГДА ПрочиеРасходы.СуммаОстаток >= ЕСТЬNULL(ПрочиеРасходыОстаток.СуммаОстаток, 0)
		|			ТОГДА ЕСТЬNULL(ПрочиеРасходыОстаток.СуммаОстаток, 0)
		|		ИНАЧЕ ПрочиеРасходы.СуммаОстаток
		|	КОНЕЦ КАК Сумма
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Остатки(
		|											&ГраницаДатаОкончания, 
		|											СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|											И Организация В (&МассивОрганизаций)
		|											) КАК ПрочиеРасходы
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеРасходы.Остатки(
		|															, 
		|															СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаРасходыБудущихПериодов)
		|															И Организация В (&МассивОрганизаций)
		|															 ) КАК ПрочиеРасходыОстаток
		|		ПО ПрочиеРасходы.Организация = ПрочиеРасходыОстаток.Организация
		|			И ПрочиеРасходы.Подразделение = ПрочиеРасходыОстаток.Подразделение
		|			И ПрочиеРасходы.СтатьяРасходов = ПрочиеРасходыОстаток.СтатьяРасходов
		|			И ПрочиеРасходы.АналитикаРасходов = ПрочиеРасходыОстаток.АналитикаРасходов";
		
		Граница = Новый Граница(КонецМесяца(Объект.ПериодРегистрации), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
		Запрос.УстановитьПараметр("ДатаНачала", 	НачалоМесяца(Объект.ПериодРегистрации));
		МассивОрганизаций = МассивДоступныхОрганизаций();
		Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);
		
		РезультатЗапроса 	= Запрос.ВыполнитьПакет();
		
		Если РезультатЗапроса[0].Пустой() Тогда
			РаспределениеРБП = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
			Элементы.ПояснениеРаспределениеРБП.Заголовок = НСтр("ru = 'Отсутствуют расходы будущих периодов, требующие распределения.'");
		ИначеЕсли РезультатЗапроса[1].Пустой() Тогда
			РаспределениеРБП = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
			Элементы.ПояснениеРаспределениеРБП.Заголовок = НСтр("ru = 'Расходы будущих периодов успешно распределены.'");
		Иначе
			РаспределениеРБП = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
			Элементы.ПояснениеРаспределениеРБП.Заголовок = НСтр("ru = 'Существуют не распределенные расходы будущих периодов.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СостояниеРасчетСебестоимости()
	
	Если ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено 
		ИЛИ ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
		РасчетСебестоимости = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
		Элементы.РасчетСебестоимости.Гиперссылка = Ложь;
		Элементы.ПояснениеРасчетСебестоимости.Заголовок = НСтр("ru = 'Предыдущая операция должна быть успешно завершена.'");
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СебестоимостьТоваровОбороты.Организация
		|ПОМЕСТИТЬ ВТОрганизацииСОборотами
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Обороты(&ДатаНачала, &ДатаОкончания, , Организация В (&МассивОрганизаций)) КАК СебестоимостьТоваровОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РасчетСебестоимостиТоваровОрганизации.Организация
		|ПОМЕСТИТЬ ВТДокументыПоОрганизациям
		|ИЗ
		|	Документ.РасчетСебестоимостиТоваров.Организации КАК РасчетСебестоимостиТоваровОрганизации
		|ГДЕ
		|	РасчетСебестоимостиТоваровОрганизации.Организация В(&МассивОрганизаций)
		|	И РасчетСебестоимостиТоваровОрганизации.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РасчетСебестоимостиТоваровОрганизации.Ссылка.Проведен = ИСТИНА
		|	И РасчетСебестоимостиТоваровОрганизации.Ссылка.ПредварительныйРасчет = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОрганизацииСОборотами.Организация
		|ИЗ
		|	ВТОрганизацииСОборотами КАК ВТОрганизацииСОборотами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОрганизацииСОборотами.Организация КАК ОрганизацияИзОборотов,
		|	ВТДокументыПоОрганизациям.Организация КАК ОрганизацияИзДокументов
		|ИЗ
		|	ВТОрганизацииСОборотами КАК ВТОрганизацииСОборотами
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТДокументыПоОрганизациям КАК ВТДокументыПоОрганизациям
		|		ПО ВТОрганизацииСОборотами.Организация = ВТДокументыПоОрганизациям.Организация
		|ГДЕ
		|	ВТДокументыПоОрганизациям.Организация ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СебестоимостьТоваровОстатки.Организация
		|ИЗ
		|	РегистрНакопления.СебестоимостьТоваров.Остатки(&ГраницаДатаОкончания, Организация В (&МассивОрганизаций)) КАК СебестоимостьТоваровОстатки
		|ГДЕ
		|	СебестоимостьТоваровОстатки.КоличествоОстаток = 0
		|	И НЕ(СебестоимостьТоваровОстатки.СтоимостьОстаток = 0
		|				И СебестоимостьТоваровОстатки.СтоимостьБезНДСОстаток = 0
		|				И СебестоимостьТоваровОстатки.СуммаДопРасходовОстаток = 0
		|				И СебестоимостьТоваровОстатки.СуммаДопРасходовБезНДСОстаток = 0
		|				И СебестоимостьТоваровОстатки.СтоимостьРеглОстаток = 0)";
		
		Запрос.УстановитьПараметр("ДатаНачала", 		НачалоМесяца(Объект.ПериодРегистрации));
		Запрос.УстановитьПараметр("ДатаОкончания", 		КонецМесяца(Объект.ПериодРегистрации));
		Граница = Новый Граница(КонецКвартала(Объект.ПериодРегистрации), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", Граница);
		МассивОрганизаций = МассивДоступныхОрганизаций();
		Запрос.УстановитьПараметр("МассивОрганизаций", 	МассивОрганизаций);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[2].Пустой() Тогда
			РасчетСебестоимости = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
			Элементы.РасчетСебестоимости.Гиперссылка = Ложь;
			Элементы.ПояснениеРасчетСебестоимости.Заголовок = НСтр("ru = 'Выполнение расчета себестоимости не требуется.'");
		ИначеЕсли Результат[3].Пустой() И Результат[4].Пустой() Тогда
			РасчетСебестоимости = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
			Элементы.РасчетСебестоимости.Гиперссылка = Ложь;
			Элементы.ПояснениеРасчетСебестоимости.Заголовок = НСтр("ru = 'Выполнен фактический расчет себестоимости.'");
		Иначе
			РасчетСебестоимости = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
			Элементы.РасчетСебестоимости.Гиперссылка = Истина;
			Элементы.ПояснениеРасчетСебестоимости.Заголовок = НСтр("ru = 'Необходимо ввести документ расчета себестоимости с вариантом расчета - фактический.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СостояниеРаспределениеНДС()
	
	Если КонецМесяца(Объект.ПериодРегистрации) <> КонецКвартала(Объект.ПериодРегистрации) Тогда
		РаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
		Элементы.ПояснениеРаспределениеНДС.Заголовок = НСтр("ru = 'Распределение НДС выполняется в конце квартала.'");
		Элементы.РаспределениеНДС.Гиперссылка = Ложь;
	ИначеЕсли ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено 
		ИЛИ ФормированиеДвиженийПоПартиямТоваров = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций Тогда
		РаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
		Элементы.ПояснениеРаспределениеНДС.Заголовок = НСтр("ru = 'Операция формирования движений по партиям товаров, производственым запасам и НДС должна быть успешно завершена.'");
		Элементы.РаспределениеНДС.Гиперссылка = Ложь;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ПартииПрочихРасходов.СтатьяРасходов
		|ИЗ
		|	РегистрНакопления.ПартииПрочихРасходов КАК ПартииПрочихРасходов
		|ГДЕ
		|	ПартииПрочихРасходов.Период МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, КВАРТАЛ) И КОНЕЦПЕРИОДА(&ДатаНачала, КВАРТАЛ)
		|	И ПартииПрочихРасходов.Активность
		|	И ПартииПрочихРасходов.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ПартииПрочихРасходов.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)
		|	И ПартииПрочихРасходов.Организация В (&МассивОрганизаций)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииПрочихРасходовОстатки.Организация,
		|	СУММА(ПартииПрочихРасходовОстатки.СтоимостьОстаток) КАК СтоимостьОстаток,
		|	СУММА(ПартииПрочихРасходовОстатки.СтоимостьБезНДСОстаток) КАК СтоимостьБезНДСОстаток,
		|	СУММА(ПартииПрочихРасходовОстатки.СтоимостьРеглОстаток) КАК СтоимостьРеглОстаток
		|ИЗ
		|	РегистрНакопления.ПартииПрочихРасходов.Остатки(
		|			&ГраницаДатаОкончания,
		|			Организация В (&МассивОрганизаций)
		|				И СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности)) КАК ПартииПрочихРасходовОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииПрочихРасходовОстатки.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДССостояниеРеализации0.Организация
		|ПОМЕСТИТЬ ВТРегистрНДС0
		|ИЗ
		|	РегистрСведений.НДССостояниеРеализации0 КАК НДССостояниеРеализации0
		|ГДЕ
		|	НДССостояниеРеализации0.Организация В (&МассивОрганизаций)
		|	И НДССостояниеРеализации0.ДатаПодтверждения МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, КВАРТАЛ) И КОНЕЦПЕРИОДА(&ДатаНачала, КВАРТАЛ)
		|	И (НДССостояниеРеализации0.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.ПодтвержденаРеализация0)
		|		ИЛИ НДССостояниеРеализации0.Состояние = ЗНАЧЕНИЕ(Перечисление.НДССостоянияРеализация0.НЕПодтвержденаРеализация0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РаспределениеНДС.Ссылка,
		|	РаспределениеНДС.Организация
		|ПОМЕСТИТЬ ВТДокументыВсе
		|ИЗ
		|	Документ.РаспределениеНДС КАК РаспределениеНДС
		|ГДЕ
		|	РаспределениеНДС.Организация В (&МассивОрганизаций)
		|	И РаспределениеНДС.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаНачала, КВАРТАЛ) И КОНЕЦПЕРИОДА(&ДатаНачала, КВАРТАЛ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДокументыВсе.Ссылка
		|ИЗ
		|	ВТРегистрНДС0 КАК ВТРегистрНДС0
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДокументыВсе КАК ВТДокументыВсе
		|		ПО ВТРегистрНДС0.Организация = ВТДокументыВсе.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТРегистрНДС0.Организация
		|ИЗ
		|	ВТРегистрНДС0 КАК ВТРегистрНДС0";
		
		Граница = Новый Граница(КонецКвартала(Объект.ПериодРегистрации), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаНачала", 			Объект.ПериодРегистрации);
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", 	Граница);
		МассивОрганизаций = МассивДоступныхОрганизаций();
		Запрос.УстановитьПараметр("МассивОрганизаций",	МассивОрганизаций);
		
		Результат = Запрос.ВыполнитьПакет();
		
		ЕстьДвиженияПриход = НЕ Результат[0].Пустой();
		ЕстьОстатки = НЕ Результат[1].Пустой();
		ЕстьЗаписиВРегистреНДС0 = НЕ Результат[5].Пустой();
		ЕстьДокументыРаспределения = НЕ Результат[4].Пустой();
		
		
		Если НЕ (ЕстьДвиженияПриход ИЛИ ЕстьЗаписиВРегистреНДС0) Тогда
			РаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
			Элементы.ПояснениеРаспределениеНДС.Заголовок = НСтр("ru = 'Отсутствуют расходы по статьям, требующим распределения НДС и отсутствуют данные о подтверждении (не подтверждении) ставки НДС 0%.'");
			Элементы.РаспределениеНДС.Гиперссылка = Ложь;
		ИначеЕсли НЕ ЕстьОстатки
			И (НЕ ЕстьЗаписиВРегистреНДС0 ИЛИ (ЕстьЗаписиВРегистреНДС0 И ЕстьДокументыРаспределения)) Тогда
			РаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
			Элементы.ПояснениеРаспределениеНДС.Заголовок = 
			НСтр("ru = 'Выполнено распределение НДС по видам налогообложения; при необходимости формируются записи книги покупок по данным подтверждения ставки НДС 0%.'");
			Элементы.РаспределениеНДС.Гиперссылка = Ложь;
		ИначеЕсли ЕстьОстатки ИЛИ (ЕстьЗаписиВРегистреНДС0 И НЕ ЕстьДокументыРаспределения) Тогда
			РаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
			Элементы.ПояснениеРаспределениеНДС.Заголовок = 
			НСтр("ru = 'Необходимо выполнить распределение НДС по видам налогообложения и при необходимости сформировать записи книги покупок по данным подтверждения ставки НДС 0%.'");
			Элементы.РаспределениеНДС.Гиперссылка = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СостояниеРаспределениеДоходовИРасходовПоНаправлениям()
	
	Если НЕ ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		Возврат;
	КонецЕсли;
	Если (РаспределениеРБП = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено ИЛИ
		РаспределениеРБП = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций)
		ИЛИ
		(РасчетСебестоимости = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено ИЛИ
		РасчетСебестоимости = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций)
		ИЛИ
		(РаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено ИЛИ
		РаспределениеНДС = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций)
		Тогда
		РаспределениеДоходовИРасходовПоНаправлениям = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций;
		Элементы.РаспределениеДоходовИРасходовПоНаправлениям.Гиперссылка = Ложь;
		Элементы.ПояснениеРаспределениеДоходовИРасходовПоНаправлениям.Заголовок = НСтр("ru = 'Предыдущая операция должна быть успешно завершена.'");
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрочиеРасходыОбороты.СтатьяРасходов
		|ПОМЕСТИТЬ ВТОбороты
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Обороты(
		|											&ДатаНачала, 
		|											&ГраницаДатаОкончания,
		|											,
		|											Организация В (&МассивОрганизаций)
		|											)
		|											КАК ПрочиеРасходыОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОбороты.СтатьяРасходов
		|ИЗ
		|	ВТОбороты КАК ВТОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|		ПО ВТОбороты.СтатьяРасходов = СтатьиРасходов.Ссылка
		|			И (СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрочиеРасходыОстатки.СтатьяРасходов
		|ПОМЕСТИТЬ ВТОстатки
		|ИЗ
		|	РегистрНакопления.ПрочиеРасходы.Остатки(
		|											&ГраницаДатаОкончания, 
		|											Организация В (&МассивОрганизаций)
		|											) 
		|											КАК ПрочиеРасходыОстатки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТОстатки.СтатьяРасходов
		|ИЗ
		|	ВТОстатки КАК ВТОстатки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|		ПО ВТОстатки.СтатьяРасходов = СтатьиРасходов.Ссылка
		|			И (СтатьиРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаНаправленияДеятельности))";
		
		Граница = Новый Граница(КонецМесяца(Объект.ПериодРегистрации), ВидГраницы.Включая);
		Запрос.УстановитьПараметр("ДатаНачала", 			НачалоМесяца(Объект.ПериодРегистрации));
		Запрос.УстановитьПараметр("ГраницаДатаОкончания", 	Граница);
		МассивОрганизаций = МассивДоступныхОрганизаций();
		Запрос.УстановитьПараметр("МассивОрганизаций",		МассивОрганизаций);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Если Результат[1].Пустой() Тогда
			РаспределениеДоходовИРасходовПоНаправлениям = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется;
			Элементы.РаспределениеДоходовИРасходовПоНаправлениям.Гиперссылка = Ложь;
			Элементы.ПояснениеРаспределениеДоходовИРасходовПоНаправлениям.Заголовок = НСтр("ru = 'Распределение доходов и расходов по направлениям деятельности не требуется.'");
		ИначеЕсли Результат[3].Пустой() Тогда
			РаспределениеДоходовИРасходовПоНаправлениям = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно;
			Элементы.РаспределениеДоходовИРасходовПоНаправлениям.Гиперссылка = Ложь;
			Элементы.ПояснениеРаспределениеДоходовИРасходовПоНаправлениям.Заголовок = НСтр("ru = 'Распределение доходов и расходов по направлениям деятельности выполнено успешно.'");
		ИначеЕсли НЕ Результат[3].Пустой() Тогда
			РаспределениеДоходовИРасходовПоНаправлениям = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;
			Элементы.РаспределениеДоходовИРасходовПоНаправлениям.Гиперссылка = Истина;
			Элементы.ПояснениеРаспределениеДоходовИРасходовПоНаправлениям.Заголовок = НСтр("ru = 'Необходимо выполнить распределение доходов и расходов по направлениям деятельности.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НАСТРОЙКА РЕГЛАМЕНТНОГО ЗАДАНИЯ

&НаСервере
Процедура СохранитьРеквизитыРегламентногоЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентныеЗаданияЗакрытияМесяца.РегламентноеЗадание
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК РегламентныеЗаданияЗакрытияМесяца
	|ГДЕ
	|	РегламентныеЗаданияЗакрытияМесяца.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ИдентификаторЗадания = Неопределено;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдентификаторЗадания = ВыборкаДетальныеЗаписи.РегламентноеЗадание;
	КонецЦикла;
	
	СоздатьНовоеЗадание = Ложь;
	Если ИдентификаторЗадания <> Неопределено Тогда
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если Задание = Неопределено  Тогда
			СоздатьНовоеЗадание = Истина;
		КонецЕсли;
	Иначе
		СоздатьНовоеЗадание = Истина;
	КонецЕсли;
	
	Если СоздатьНовоеЗадание Тогда
		Задание = РегламентныеЗадания.СоздатьРегламентноеЗадание(Метаданные.РегламентныеЗадания.ЗакрытиеМесяца);
		СтрокаНаименования = НСтр("ru = 'Закрытие месяца по организации: %1'");
		Если Объект.Организация = Справочники.Организации.ПустаяСсылка() Тогда
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования, "По всем организациям");
		Иначе
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНаименования, СокрЛП(Объект.Организация));
		КонецЕсли;
		Задание.Наименование = СтрокаНаименования;
	КонецЕсли;
	
	Если РасписаниеРегламентногоЗадания <> Неопределено Тогда
		Задание.Расписание = РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	РегламентноеЗадание = Задание.УникальныйИдентификатор;
	Задание.Использование = АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	
	Если НЕ ЗначениеЗаполнено(ПериодРегистрацииРегламентный) Тогда
		ПериодРегистрацииРегламентный = НачалоМесяца(ТекущаяДата());
		ПредставлениеПериодРегистрацииРегламентный = Формат(ПериодРегистрацииРегламентный, "ДФ='MMMM yyyy'");
	КонецЕсли;
	
	Если Задание.Параметры.Количество() <> 1 ИЛИ Задание.Параметры[0] <> Объект.Организация Тогда
		ПараметрыЗадания = Новый Массив;
		ПараметрыЗадания.Добавить(Объект.Организация);
		Задание.Параметры = ПараметрыЗадания;
	КонецЕсли;
	
	Задание.Записать();
	
	НаборЗаписей = РегистрыСведений.РегламентныеЗаданияЗакрытияМесяца.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Организация.Установить(Объект.Организация);
	Запись = НаборЗаписей.Добавить();
	Запись.Организация = Объект.Организация;
	Запись.РегламентноеЗадание = РегламентноеЗадание;
	Запись.ЗакрываемыйПериод = ПериодРегистрацииРегламентный;
	
	НаборЗаписей.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеРасписания()
	
	ПредставлениеРасписания = Строка(РасписаниеРегламентногоЗадания);
	Если ПредставлениеРасписания = Строка(Новый РасписаниеРегламентногоЗадания) Тогда
		ПредставлениеРасписания = НСтр("ru = 'Расписание не задано'");
	КонецЕсли;
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Заголовок = ПредставлениеРасписания;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеРасписанияРегламентногоЗадания()
	
	Если РасписаниеРегламентногоЗадания = Неопределено Тогда
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеРегламентногоЗадания);
	Если Диалог.ОткрытьМодально() Тогда
		РасписаниеРегламентногоЗадания = Диалог.Расписание;
		СохранитьРеквизитыРегламентногоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеРегламентногоЗадания()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентныеЗаданияЗакрытияМесяца.РегламентноеЗадание,
	|	РегламентныеЗаданияЗакрытияМесяца.ЗакрываемыйПериод
	|ИЗ
	|	РегистрСведений.РегламентныеЗаданияЗакрытияМесяца КАК РегламентныеЗаданияЗакрытияМесяца
	|ГДЕ
	|	РегламентныеЗаданияЗакрытияМесяца.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ИдентификаторЗадания = Неопределено;
	ПериодРегистрацииРегламентный = Дата("00010101000000");
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдентификаторЗадания = ВыборкаДетальныеЗаписи.РегламентноеЗадание;
		ПериодРегистрацииРегламентный = ВыборкаДетальныеЗаписи.ЗакрываемыйПериод;
	КонецЦикла;
	
	ПредставлениеПериодРегистрацииРегламентный = Формат(ПериодРегистрацииРегламентный, "ДФ='MMMM yyyy'");
	
	Если ИдентификаторЗадания <> Неопределено Тогда
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если Задание <> Неопределено Тогда
			РасписаниеРегламентногоЗадания	= Задание.Расписание;
			АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Задание.Использование;
			
			СвойстваПоследнегоФоновогоЗадания = РегламентныеЗаданияСлужебный.ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
			Если СвойстваПоследнегоФоновогоЗадания = Неопределено Тогда
				СостояниеАвтоматическогоВыполненияОпераций = "Не выполнялось";
			Иначе
				СостояниеАвтоматическогоВыполненияОпераций = Строка(СвойстваПоследнегоФоновогоЗадания.Состояние) + ": "
				+ Строка(СвойстваПоследнегоФоновогоЗадания.Конец);
			КонецЕсли;
		Иначе
			РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
			АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Ложь;
			СостояниеАвтоматическогоВыполненияОпераций = "";
		КонецЕсли;
	Иначе
		РасписаниеРегламентногоЗадания = Новый РасписаниеРегламентногоЗадания;
		АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца = Ложь;
		СостояниеАвтоматическогоВыполненияОпераций = "";
	КонецЕсли;
	
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЧЕЕ

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	МассивЭтапов = Новый Массив;
	МассивЭтапов.Добавить("ФормированиеДвиженийПоРасчетуСПартнерами");
	МассивЭтапов.Добавить("ИсправлениеОтрицательныхОстатковТоваров");
	МассивЭтапов.Добавить("ФормированиеДвиженийПоПартиямТоваров");
	МассивЭтапов.Добавить("РаспределениеРБП");
	МассивЭтапов.Добавить("РаспределениеНДС");
	МассивЭтапов.Добавить("РасчетСебестоимости");
	МассивЭтапов.Добавить("РаспределениеДоходовИРасходовПоНаправлениям");
	
	Для Каждого Элемент Из МассивЭтапов Цикл
		
		Если ЭтаФорма[Элемент] = Перечисления.СостоянияОперацийЗакрытияМесяца.ОжидаетВыполненияПредыдущихОпераций
			ИЛИ ЭтаФорма[Элемент] = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			Элементы["Действие"+Элемент].Гиперссылка 	= Ложь;
			Элементы["Действие"+Элемент].Видимость 		= Ложь;
		Иначе
			Элементы["Действие"+Элемент].Гиперссылка 	= Истина;
			Элементы["Действие"+Элемент].Видимость 		= Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиПодвала()
	
	Элементы.НастроитьРасписаниеРегламентногоЗадания.Доступность 		= АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	Элементы.ПредставлениеПериодРегистрацииРегламентный.Доступность 	=АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	Элементы.СостояниеАвтоматическогоВыполненияОпераций.Доступность 	= АвтоматическиВыполнятьОперацииПоЗакрытиюМесяца;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояния(СтруктураОпераций)
	
	Если СтруктураОпераций.Количество()=0 ИЛИ СтруктураОпераций.Свойство("ИсправлениеОтрицательныхОстатковТоваров") Тогда
		СостояниеИсправлениеОтрицательныхОстатковТоваров();
	КонецЕсли;
	Если СтруктураОпераций.Количество()=0 ИЛИ СтруктураОпераций.Свойство("ФормированиеДвиженийПоРасчетуСПартнерами") Тогда
		СостояниеФормированиеДвиженийПоРасчетуСПартнерами();
	КонецЕсли;
	Если СтруктураОпераций.Количество()=0 ИЛИ СтруктураОпераций.Свойство("ФормированиеДвиженийПоПартиямТоваров") Тогда
		СостояниеФормированиеДвиженийПоПартиямТоваров();
	КонецЕсли;
	Если СтруктураОпераций.Количество()=0 ИЛИ СтруктураОпераций.Свойство("РаспределениеРБП") Тогда
		СостояниеРаспределениеРБП();
	КонецЕсли;
	Если СтруктураОпераций.Количество()=0 ИЛИ СтруктураОпераций.Свойство("РаспределениеНДС") Тогда
		СостояниеРаспределениеНДС();
	КонецЕсли;
	Если СтруктураОпераций.Количество()=0 ИЛИ СтруктураОпераций.Свойство("РасчетСебестоимости") Тогда
		СостояниеРасчетСебестоимости();
	КонецЕсли;
	Если СтруктураОпераций.Количество()=0 ИЛИ СтруктураОпераций.Свойство("РаспределениеДоходовИРасходовПоНаправлениям") Тогда
		СостояниеРаспределениеДоходовИРасходовПоНаправлениям();
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	УстановитьСтатус();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатус()
		
	ВыполненоУспешно = 0;
	НеТребуется		 = 0;
	НеВыполнено		 = 0;
	
	МассивЭтапов = Новый Массив;
	МассивЭтапов.Добавить("ФормированиеДвиженийПоРасчетуСПартнерами");
	МассивЭтапов.Добавить("ИсправлениеОтрицательныхОстатковТоваров");
	МассивЭтапов.Добавить("ФормированиеДвиженийПоПартиямТоваров");
	МассивЭтапов.Добавить("РаспределениеРБП");
	МассивЭтапов.Добавить("РаспределениеНДС");
	МассивЭтапов.Добавить("РасчетСебестоимости");
	Если ПолучитьФункциональнуюОпцию("ФормироватьФинансовыйРезультат") Тогда
		МассивЭтапов.Добавить("РаспределениеДоходовИРасходовПоНаправлениям");
	КонецЕсли;
	
	Для Каждого Элемент Из МассивЭтапов Цикл
		
		Если ЭтаФорма[Элемент] = Перечисления.СостоянияОперацийЗакрытияМесяца.ВыполненоУспешно  Тогда 
			ВыполненоУспешно = ВыполненоУспешно +1;
		ИначеЕсли 	ЭтаФорма[Элемент] = Перечисления.СостоянияОперацийЗакрытияМесяца.НеТребуется Тогда
			НеТребуется = НеТребуется + 1;
		Иначе
			НеВыполнено = НеВыполнено + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыполненоУспешно >0 И НеВыполнено = 0 Тогда
		Статус = НСтр("ru = 'Операции выполнены успешно'");
		Элементы.ДекорацияВыполнено.Видимость= Истина;
		Элементы.ДекорацияНеВыполнено.Видимость = Ложь;
	ИначеЕсли НеТребуется > 0 И НеВыполнено = 0 Тогда
		Статус = "";
		Элементы.ДекорацияВыполнено.Видимость= Ложь;
		Элементы.ДекорацияНеВыполнено.Видимость = Ложь;
	Иначе
		Статус = НСтр("ru = 'Существуют невыполненные операции'");
		Элементы.ДекорацияВыполнено.Видимость= Ложь;
		Элементы.ДекорацияНеВыполнено.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МассивДоступныхОрганизаций()
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеСправочника.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Организация
	|	ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|");
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	МассивОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
	Возврат МассивОрганизаций;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФорма_ПомощникИсправленияОтрицательныхОстатковОрганизаций" Тогда
		СтруктураОпераций = Новый Структура;
		СтруктураОпераций.Вставить("ИсправлениеОтрицательныхОстатковТоваров","");
		СтруктураОпераций.Вставить("ФормированиеДвиженийПоРасчетуСПартнерами","");
		СтруктураОпераций.Вставить("ФормированиеДвиженийПоПартиямТоваров","");
		СтруктураОпераций.Вставить("РаспределениеРБП","");
		СтруктураОпераций.Вставить("РаспределениеНДС","");
		СтруктураОпераций.Вставить("РасчетСебестоимости","");
		СтруктураОпераций.Вставить("РаспределениеДоходовИРасходовПоНаправлениям","");
		ОбновитьСостояния(СтруктураОпераций);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_РаспределениеРасходовБудущихПериодов" Тогда
		СтруктураОпераций = Новый Структура;
		СтруктураОпераций.Вставить("РаспределениеРБП","");
		СтруктураОпераций.Вставить("РаспределениеНДС","");
		СтруктураОпераций.Вставить("РасчетСебестоимости","");
		СтруктураОпераций.Вставить("РаспределениеДоходовИРасходовПоНаправлениям","");
		ОбновитьСостояния(СтруктураОпераций);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_РаспределениеРасходовНаСебестоимостьТоваров" Тогда
		СтруктураОпераций = Новый Структура;
		СтруктураОпераций.Вставить("РасчетСебестоимости","");
		СтруктураОпераций.Вставить("РаспределениеДоходовИРасходовПоНаправлениям","");
		ОбновитьСостояния(СтруктураОпераций);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_РаспределениеНДС" Тогда
		СтруктураОпераций = Новый Структура;
		СтруктураОпераций.Вставить("РаспределениеНДС","");
		СтруктураОпераций.Вставить("РасчетСебестоимости","");
		СтруктураОпераций.Вставить("РаспределениеДоходовИРасходовПоНаправлениям","");
		ОбновитьСостояния(СтруктураОпераций);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_РаспределениеДоходовИРасходовПоНаправлениямДеятельности" Тогда
		СтруктураОпераций = Новый Структура;
		СтруктураОпераций.Вставить("РаспределениеДоходовИРасходовПоНаправлениям","");
		ОбновитьСостояния(СтруктураОпераций);
	КонецЕсли;
	
КонецПроцедуры



