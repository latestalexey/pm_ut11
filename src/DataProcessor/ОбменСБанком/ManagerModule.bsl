#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура проверяет заполнение таблицы с документами.
//
Процедура ПроверитьЗаполнениеТаблицыДокументов(Объект, Документ, Отказ = Ложь) Экспорт
	
	Для НомСтр = 0 По Документ.Количество() - 1 Цикл
		
		Если Документ[НомСтр].Готовность > 0 Тогда
						
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Документ[НомСтр].ОписаниеОшибок);
			
			Если Документ[НомСтр].Свойство("Выгружать") Тогда
				Поле = "Объект.ПлатежныеДокументы[" + НомСтр + "].Выгружать";
			Иначе
				Поле = "ДокументыКИмпорту[" + НомСтр + "].Загружать";
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Стр, 
				, // ОбъектИлиСсылка
				Поле,
				, // ПутьКДанным
				Отказ
			);
			
		КонецЕсли;
		          		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет таблицу документов на экспорт.
//
Процедура ЗаполнитьДокументыНаЭкспорт(ОбъектПлатежныеДокументы, ДокументыНаЭкспорт, НачПериода, КонПериода, БанковскийСчет) Экспорт
	
	ВыгружатьПлатежноеПоручение = Истина;
		
	УсловиеОтбораПоТипуПлатежногоДокумента = "";
	
	Если ВыгружатьПлатежноеПоручение Тогда
		УсловиеОтбораПоТипуПлатежногоДокумента = УсловиеОтбораПоТипуПлатежногоДокумента + "ТипПлатежногоДокумента = &ПлатежноеПоручение";
	КонецЕсли;
			
	ТекстЗапроса = ПолучитьТекстЗапросаПоСписаниеБезналичныхДенежныхСредств(УсловиеОтбораПоТипуПлатежногоДокумента);
		
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИмяДокумента,
	|	Дата,
	|	Документ";
	
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",          НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание",       КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Счет",                БанковскийСчет);
	ЗапросПоДокументам.УстановитьПараметр("ПлатежноеПоручение",  Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение);
		
	ОбъектПлатежныеДокументы.Загрузить(ЗапросПоДокументам.Выполнить().Выгрузить());
	
	КоллекцияЭлементов = ДокументыНаЭкспорт.ПодчиненныеЭлементы;
	Для Каждого СтрокаДокумента Из ОбъектПлатежныеДокументы Цикл
		
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, КоллекцияЭлементов);
		
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		
	КонецЦикла;

КонецПроцедуры

// Процедура выгружает данные в файл.
//
Процедура Выгрузить(ПлатежныеДокументы, Кодировка, Программа, НачПериода, КонПериода, БанковскийСчет, ФайлВыгрузки, Организация, АдресВременногоХранилища, ВыгружатьКПП) Экспорт
	
	ПотокВыгрузки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
	// Формируем заголовок.
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=1.01");
	
	ПотокВыгрузки.ДобавитьСтроку("Кодировка="     + Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель="   + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель="    + Программа);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания="  + Формат(ТекущаяДата(), "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(), "ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала="    + Формат(НачПериода, "ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца="     + Формат(КонПериода, "ДЛФ=Д"));
	
	ПотокВыгрузки.ДобавитьСтроку("РасчСчет="      + СокрЛП(БанковскийСчет.НомерСчета));
		
	ИмяДокумента = "Платежное поручение";
	ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
			
	// Выводим отмеченные секции документов.
	Для Каждого СтрокаСекции Из ПлатежныеДокументы Цикл
		
		Если НЕ СтрокаСекции.Выгружать Тогда
			Продолжить;
		КонецЕсли;
		
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, Организация, ВыгружатьКПП);
		
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		
		СтрокаСекции.Готовность = -2;
		
	КонецЦикла;
	
	// Записываем на диск.
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	
	ПоместитьВоВременноеХранилище(ПотокВыгрузки, АдресВременногоХранилища);
	
КонецПроцедуры

// Процедура заполняет таблицу документов для импорта.
//
Процедура ЗаполнитьДокументыНаИмпорт(ДокументыДляИмпорта, Таблица, ВыводитьСообщения, ФайлЗагрузки, БанковскийСчет, Кодировка, Организация, НастройкаЗаполнения, ТаблицаКонтрагентов, Импорт_Заголовок, Импорт_РасчетныеСчета, АдресВременногоХранилища) Экспорт
	
	Импорт_ТекстДляРазбора = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Импорт_ВидыДокументов = Новый Массив;
	
	// Подготавливаем структуры обработки данных.
	Импорт_ПризнакОбмена = Ложь;
	НайденКонецФайла     = Ложь;
	
	СписокДокументов = Новый СписокЗначений;
			
	Импорт_РасчетныеСчета.Очистить();
	
	ДокументыДляИмпорта.Очистить();
		
	// Заполняем первичные структуры данных.
	Импорт_КоличествоСтрок = СтрЧислоСтрок(Импорт_ТекстДляРазбора);
	Импорт_ТекущаяСтрока = 1;
	
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
		Если Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора) Тогда
					Возврат;
				КонецЕсли;
				
			Иначе
				
				Сообщение = Новый СообщениеПользователю;
		
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нарушена структура файла импорта, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, Стр);
					
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14) = "СЕКЦИЯРАСЧСЧЕТ" Тогда
			
			СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
			
			Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора) Тогда
				
				Сообщение = Новый СообщениеПользователю;
		
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нарушена структура файла импорта в секции описания расчетного счета! Строка: %1'"), Импорт_ТекущаяСтрока - 1);
					
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
			Если СокрЛП(БанковскийСчет.НомерСчета) <> СокрЛП(СтрокаРССчетов.РасчСчет) Тогда
				Импорт_РасчетныеСчета.Удалить(СтрокаРССчетов);
			КонецЕсли;
				
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "РАСЧСЧЕТ" Тогда
			
			Значение = "";
			Тег = "";
			
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				
				Если СчетПринадлежитОрганизации(Значение, Организация) Тогда
					
					Если СокрЛП(БанковскийСчет.НомерСчета) = СокрЛП(Значение) Тогда
						
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("РасчСчет", Значение);
						
						СтрокаРССчетов = Импорт_РасчетныеСчета.НайтиСтроки(ПараметрыОтбора);
						
						Если СтрокаРССчетов.Количество() = 0 Тогда
							СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
							СтрокаРССчетов.РасчСчет = Значение;
						КонецЕсли;
					Иначе
						Если ВыводитьСообщения Тогда
														
							Сообщение = Новый СообщениеПользователю;
														
							Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В заголовке файла указан счет (%1), отличный от указанного, расчеты по которому загружаться не будут!'"), Значение);
							
							Сообщение.Сообщить();
							
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					Если ВыводитьСообщения Тогда
												
						Сообщение = Новый СообщениеПользователю;
												
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В заголовке файла указан счет, не принадлежащий организации: %1!'"), Значение);
												
						Сообщение.Сообщить();
						
					КонецЕсли;
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8) = "ДОКУМЕНТ" Тогда
			
			Импорт_ВидыДокументов.Добавить(Значение);

		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10) = "КОНЕЦФАЙЛА" Тогда
			
			Если НЕ Импорт_ПризнакОбмена Тогда
								
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='В файле импорта отсутствует признак обмена ""1CClientBankExchange""!'");
				
				Сообщение.Сообщить();
				
				Возврат;
				
			КонецЕсли;
			
			НайденКонецФайла = Истина;
			НомерСтроки = 0;
			
			// Формируем объектные структуры данных.
			Для Каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
				// Последовательно обрабатываем каждую загруженную строку.
				
				// Распознаем реквизиты.
				// Если в файле находятся выписки пл. документов по нескольким счетам, то распознаем и отображаем
				// только те, которые выгружены по указанному банковскому счету.
				Если СокрЛП(СтрокаДокумента.ПлательщикСчет) = СокрЛП(БанковскийСчет.НомерСчета)
				 ИЛИ СокрЛП(СтрокаДокумента.ПолучательСчет) = СокрЛП(БанковскийСчет.НомерСчета) Тогда
					РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, БанковскийСчет, Организация, НастройкаЗаполнения);
					НомерСтроки = НомерСтроки + 1;
					СтрокаДокумента.НомерСтроки = НомерСтроки;
					// Для каждого реквизита (= колонка) надо проверить на пустое значение.
					ТаблицаДокументыДляИмпорта = ДокументыДляИмпорта.Выгрузить();
					Для Каждого КолонкаИмпорта Из ТаблицаДокументыДляИмпорта.Колонки Цикл
						ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, Таблица.ПодчиненныеЭлементы["ДокументыКИмпорту" + КолонкаИмпорта.Имя].Заголовок);
					КонецЦикла;
					
					Если ТипЗнч(СтрокаДокумента.Контрагент) = Тип("Строка")
					 ИЛИ ТипЗнч(СтрокаДокумента.СчетКонтрагента) = Тип("Строка") Тогда
						
						// Добавляем реквизиты в табличную часть для дальнейшего использования.
						СписокНенайденных(СтрокаДокумента, БанковскийСчет, ТаблицаКонтрагентов);
						
					КонецЕсли;
				Иначе
					// Остальные помечаем для последующего удаления.
					СтрокаДокумента.НомерСтроки = 0;					
				КонецЕсли;
			КонецЦикла;
			
			// Удалим ненужные строки из таблицы.
			Количество = ДокументыДляИмпорта.Количество() - 1;
			Для Ном = 0 По Количество Цикл
				Если ДокументыДляИмпорта[Количество - Ном].НомерСтроки = 0 Тогда
					ДокументыДляИмпорта.Удалить(Количество - Ном);
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20) = "1CCLIENTBANKEXCHANGE" Тогда
			
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			
			ЗагрузитьСтрокуЗаголовка(Стр, Импорт_ТекущаяСтрока, Импорт_Заголовок);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НайденКонецФайла Тогда
		
		Импорт_РасчетныеСчета.Очистить();
		ДокументыДляИмпорта.Очистить();
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Файл загрузки не соответствует стандарту (не найдена секция КонецФайла)!'");
		
		Сообщение.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура загружает платежные документы в информационную базу.
//
Процедура Загрузить(ДокументыКИмпорту, Импорт_Заголовок, Организация, Импорт_РасчетныеСчета, ИспользоватьГраницуОбработки, НастройкаЗаполнения, ДатаГраницыОбработки, БанковскийСчет) Экспорт
		
	НачалоИнтервалаЗагрузки = Дата("00010101");
	КонецИнтервалаЗагрузки  = Дата("00010101");
	           	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!'");
		
		Сообщение.Сообщить();
				
		Возврат;
		
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
			
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='В заголовке файла импорта неверно указана дата окончания интервала!'");
		
		Сообщение.Сообщить();
				
	КонецЕсли;
	
	// Загружаем отмеченные секции документов.
	Для Каждого СтрокаСекции Из ДокументыКИмпорту Цикл
		
		Если СтрокаСекции.Загружать Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
				 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
					Продолжить; // не требуется созданение документа
					
				ИначеЕсли СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте
				 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту Тогда
					ИмяДокумента = "ОтчетБанкаПоОперациямЭквайринга";
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Списано) Тогда
					ИмяДокумента = "СписаниеБезналичныхДенежныхСредств";
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Поступило) Тогда
					ИмяДокумента = "ПоступлениеБезналичныхДенежныхСредств";
				Иначе

					Если СокрЛП(СтрокаСекции.ПлательщикСчет) = СокрЛП(БанковскийСчет.НомерСчета) Тогда
						ИмяДокумента                = "СписаниеБезналичныхДенежныхСредств";
						СтрокаСекции.Списано        = СтрокаСекции.ДатаДок;
						СтрокаСекции.ДатаПроведения = СтрокаСекции.Списано;
					Иначе
						ИмяДокумента                = "ПоступлениеБезналичныхДенежныхСредств";
						СтрокаСекции.Поступило      = СтрокаСекции.ДатаДок;
						СтрокаСекции.ДатаПроведения = СтрокаСекции.Поступило;
					КонецЕсли;
					
					Сообщение = Новый СообщениеПользователю;
						
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В загружаемом файле не указана дата списания/поступления средств (реквизит ДатаСписано/ДатаПоступило) для платежного документа ""%1"" №%2 от %3.'"), СтрокаСекции.Операция, СтрокаСекции.Номер, СтрокаСекции.ДатаДок);
						
					Сообщение.Сообщить();
				
				КонецЕсли;
								      				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					
					// В ИБ не найден документ, необходимо создать новый.					
					//Если ИмяДокумента = "ПоступлениеБезналичныхДенежныхСредств"
					//	И ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Организации")
					//	И ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
					//	
					//	ОбъектДокумента = Документы["СписаниеБезналичныхДенежныхСредств"].СоздатьДокумент();
					//	
					//Иначе
						
						ОбъектДокумента = Документы[ИмяДокумента].СоздатьДокумент();
						
					//КонецЕсли;
					
				Иначе
					
					// В ИБ найден документ, необходимо получить его объект.
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					
				КонецЕсли;
				
				ЭтоНовыйДокумент = ОбъектДокумента.ЭтоНовый();
				
				// Заполняем все реквизиты документа.
				Если ИмяДокумента = "ПоступлениеБезналичныхДенежныхСредств"
  				   И ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Организации")
				   И ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций")
				   И (СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				  ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию 
				  ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств) Тогда
				   
					СтрокаСекции.ВидДокумента = "ПлатежноеПоручение";
					ЗаполнитьРеквизитыДокументаСписаниеБезналичныхДенежныхСредств(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции, ЭтоНовыйДокумент, СтрокаСекции.Контрагент);
					
				ИначеЕсли ИмяДокумента = "ОтчетБанкаПоОперациямЭквайринга" Тогда
					
					ЗаполнитьРеквизитыОтчетаБанкаПоОперациямЭквайринга(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции, ЭтоНовыйДокумент, Организация);
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Списано) Тогда
					
					ЗаполнитьРеквизитыДокументаСписаниеБезналичныхДенежныхСредств(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции, ЭтоНовыйДокумент, Организация);
					
				ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.Поступило) Тогда					
					
					ЗаполнитьРеквизитыДокументаПоступлениеБезналичныхДенежныхСредств(ОбъектДокумента, ОбъектДокумента.Метаданные().Имя, СтрокаСекции, ЭтоНовыйДокумент, Организация);
					
				КонецЕсли;

				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
				КонецЕсли;
				
				Если ИмяДокумента = "ПоступлениеБезналичныхДенежныхСредств"
  				   И ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Организации")
				   И ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций")
				   И (СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				  ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию 
				  ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств) Тогда
					
					ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, НастройкаЗаполнения, ОбъектДокумента.Проведен);
					
				Иначе
					
					ЗаписатьОбъект(ОбъектДокумента, СтрокаСекции, ЭтоНовыйДокумент, НастройкаЗаполнения);
					
				КонецЕсли;
			   				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					
					Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
						
						СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
						СтрокаСекции.НомерДок = ОбъектДокумента["Номер"];
						
					КонецЕсли;
					
				КонецЕсли;
								
			Иначе
	
				Сообщение = Новый СообщениеПользователю;
								
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Платежный документ ""%1"" №%2 от %3 не может быть загружен:%4%5!'"), СтрокаСекции.Операция, СтрокаСекции.Номер, СтрокаСекции.Дата, Символы.ПС, РезультатПроверки);
												
				Сообщение.Сообщить();
				
			КонецЕсли;
	
		КонецЕсли;

	КонецЦикла;
	
	// Составляем список счетов.
	СписокСчетов = Новый СписокЗначений;
	
	Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
			
	СоздатьДокументыВыпискаПоРасчетномуСчету(ДокументыКИмпорту, Организация, БанковскийСчет, Импорт_Заголовок);
	
	Сообщение = Новый СообщениеПользователю;
								
	Сообщение.Текст = НСтр("ru='Загрузка платежных документов в информационную базу завершена.'");
										
	Сообщение.Сообщить();
		
КонецПроцедуры

// Функция создает контрагента.
//
Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено) Экспорт
	
	СообщатьОСозданномКонтрагенте 	  = Ложь;
	СообщатьОСозданномБанковскомСчете = Ложь;
		
	// Эти элементы есть у всех справочников.
	Если НЕ ТипЗнч(СтрокаКонтрагент.Реквизит) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		
		НовыйЭлемент.Наименование       = СтрокаКонтрагент.Представление;
		НовыйЭлемент.НаименованиеПолное = НовыйЭлемент.Наименование;
		НовыйЭлемент.ИНН                = СтрокаКонтрагент.ПолучитьЭлементы()[1].Значение;
		НовыйЭлемент.КПП                = СтрокаКонтрагент.ПолучитьЭлементы()[2].Значение;
		
		Если СтрДлина(НовыйЭлемент.ИНН) = 10 Тогда
			НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Иначе
			НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		КонецЕсли;
				
		НовыйЭлемент.Записать();
				
		СообщатьОСозданномКонтрагенте = Истина;
		
	Иначе
		
		НовыйЭлемент = СтрокаКонтрагент.Реквизит.ПолучитьОбъект();
		
	КонецЕсли;
	
	Если СообщатьОСозданномКонтрагенте Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Контрагент (%1) создан.'"), СтрокаКонтрагент.Представление);
				
		Сообщение.Сообщить();
		
		ПредставлениеКонтрагента = "" + Символы.Таб + "- ";
		
	Иначе
		
		ПредставлениеКонтрагента = "Контрагенту (" + СтрокаКонтрагент.Представление + ")";
		
	КонецЕсли;

	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого Строка Из СтрокаКонтрагент.ПолучитьЭлементы() Цикл
			
		СообщатьОСозданномБанковскомСчете = Ложь;
				
		Если Строка.Представление = "Р/счет" Тогда
			
			Попытка
				
				НомерСчета = Строка.Значение;
				ВалютаСчета = ДенежныеСредстваСервер.ПолучитьВалютуПоНомеруСчета(НомерСчета);
				
				НовыйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
				
				НовыйСчет.НомерСчета            = НомерСчета;
				НовыйСчет.Владелец              = НовыйЭлемент.Ссылка;
				НовыйСчет.ВалютаДенежныхСредств = ?(ЗначениеЗаполнено(ВалютаСчета), ВалютаСчета, ВалютаРегламентированногоУчета);
				                               				
				РССчет = Строка.ПолучитьЭлементы();
				
				Если НЕ НайтиЭлементДерева(РССчет, "Представление", "РЦ банка") = Неопределено Тогда
					
					// Банк контрагента.
					Если НЕ ПустаяСтрока(РССчет[0].Значение) Тогда
						
						НовыйБанк = НайтиБанк(РССчет[0].Значение, РССчет[1].Значение, "", РССчет[2].Значение);
						
						Если НовыйБанк = Справочники.КлассификаторБанковРФ.ПустаяСсылка() Тогда
							
							//НовыйБанк = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
							//
							//НовыйБанк.Наименование = РССчет[0].Значение;
							//НовыйБанк.Город        = РССчет[1].Значение;
							//НовыйБанк.КоррСчет     = РССчет[2].Значение;
							//
							//НовыйБанк.Записать();
							
							НовыйСчет.РучноеИзменениеРеквизитовБанка = Истина;
							НовыйСчет.НаименованиеБанка              = РССчет[0].Значение;
							НовыйСчет.ГородБанка					 = РССчет[1].Значение;
							//НовыйСчет.БИКБанка                       = РССчет[2].Значение;
							НовыйСчет.КоррСчетБанка                  = РССчет[2].Значение;
							
						Иначе	
						
							НовыйСчет.Банк = НовыйБанк.Ссылка;
							
						КонецЕсли;
						
					КонецЕсли;
					
					// РЦ банка контрагента.
					Если НЕ ПустаяСтрока(РССчет[3].Значение) Тогда
						
						НовыйБанкКорр = НайтиБанк(РССчет[3].Значение, РССчет[4].Значение, РССчет[5].Значение, РССчет[6].Значение);
						
						Если НовыйБанкКорр = Справочники.КлассификаторБанковРФ.ПустаяСсылка() Тогда
							
							//НовыйБанкКорр = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
							//
							//НовыйБанкКорр.Наименование = РССчет[3].Значение;
							//НовыйБанкКорр.Город        = РССчет[4].Значение;
							//НовыйБанкКорр.Код          = РССчет[5].Значение;
							//НовыйБанкКорр.КоррСчет     = РССчет[6].Значение;
							//
							//НовыйБанкКорр.Записать();
							
							НовыйСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина;
							НовыйСчет.НаименованиеБанкаДляРасчетов              = РССчет[3].Значение;
							НовыйСчет.ГородБанкаДляРасчетов     				= РССчет[4].Значение;
							НовыйСчет.БИКБанкаДляРасчетов                       = РССчет[5].Значение;
							НовыйСчет.КоррСчетБанкаДляРасчетов                  = РССчет[6].Значение;
							
						Иначе	
							
							НовыйСчет.БанкДляРасчетов = НовыйБанкКорр.Ссылка;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					// Банк контрагента.
					НовыйБанк = НайтиБанк(РССчет[0].Значение, РССчет[1].Значение, РССчет[2].Значение, РССчет[3].Значение);
					
					Если НовыйБанк = Справочники.КлассификаторБанковРФ.ПустаяСсылка() Тогда
						
						//НовыйБанк = Справочники.КлассификаторБанковРФ.СоздатьЭлемент();
						//
						//НовыйБанк.Наименование = РССчет[0].Значение;
						//НовыйБанк.Город        = РССчет[1].Значение;
						//НовыйБанк.Код          = РССчет[2].Значение;
						//НовыйБанк.КоррСчет     = РССчет[3].Значение;
						//
						//НовыйБанк.Записать();
						
						НовыйСчет.РучноеИзменениеРеквизитовБанка = Истина;
						НовыйСчет.НаименованиеБанка              = РССчет[0].Значение;
						НовыйСчет.ГородБанка					 = РССчет[1].Значение;
						НовыйСчет.БИКБанка                       = РССчет[2].Значение;
						НовыйСчет.КоррСчетБанка                  = РССчет[3].Значение;
						
					Иначе	
						
						НовыйСчет.Банк = НовыйБанк.Ссылка;
						
					КонецЕсли;
					
				КонецЕсли;
								
				НовыйСчет.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Лев(НСтр("ru='%1, (Расчетный)'"), 100), РССчет[0].Значение);
				
				НовыйСчет.Записать();
				
				СообщатьОСозданномБанковскомСчете = Истина;
				
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = НСтр("ru='Не удалось создать банковский счет контрагента!'");
				
				Сообщение.Сообщить();
				
			КонецПопытки;
			
		КонецЕсли;
			
		Если СообщатьОСозданномБанковскомСчете Тогда
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 добавлен банковский счет (%2).'"), ПредставлениеКонтрагента, НомерСчета);
						
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(НовыйЭлемент.Партнер) Тогда
		
		Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			
			НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
			НовыйПартнер.Клиент = Истина;
			НовыйПартнер.Поставщик = Истина;
			НовыйПартнер.ПрочиеОтношения = Истина;
			НовыйПартнер.ДатаРегистрации = ТекущаяДата();
			НовыйПартнер.Комментарий = НСтр("ru = 'Создан автоматически при импорте банковских документов'");
			НовыйПартнер.Наименование = СтрокаКонтрагент.Представление;
			НовыйПартнер.НаименованиеПолное = СтрокаКонтрагент.Представление;
			
			Если СтрДлина(НовыйЭлемент.ИНН) = 10 Тогда
				НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
			Иначе
				НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо ;
			КонецЕсли;
 	
			НовыйПартнер.Записать();
 			
			НовыйЭлемент.Партнер = НовыйПартнер.Ссылка;
			
		Иначе
			
			НовыйЭлемент.Партнер = Справочники.Партнеры.НеизвестныйПартнер;
			
		КонецЕсли;
		
	КонецЕсли;

		
	НовыйЭлемент.Записать();
	
	Возврат НовыйЭлемент.Ссылка;

КонецФункции

// Процедура заполнения типа платежного документа по хозяйственной операции.
//
Процедура ЗаполнитьТипПлатежногоДокумента(Организация, БанковскийСчет, ВидОперации, СуммаДокумента, ТипПлатежногоДокумента, ПлатежныйДокумент) Экспорт
	
	Если ВидОперации = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		ТипПлатежногоДокумента = Новый ОписаниеТипов("ДокументСсылка.РасходныйКассовыйОрдер");
		
	ИначеЕсли ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
		ТипПлатежногоДокумента = Новый ОписаниеТипов("ДокументСсылка.ПриходныйКассовыйОрдер");
		
	ИначеЕсли ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту Тогда
		ТипПлатежногоДокумента = Новый ОписаниеТипов("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга");
		
	ИначеЕсли ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте Тогда
		ТипПлатежногоДокумента = Новый ОписаниеТипов("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга");	
		
	Иначе
		ТипПлатежногоДокумента = Неопределено;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипПлатежногоДокумента) Тогда
		ПлатежныйДокумент = ПлатежныйДокументПоВидуОперации(
			ВидОперации,
			Организация,
			БанковскийСчет,
			СуммаДокумента
		);
	//Иначе
	//	ПлатежныйДокумент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Печать

Процедура ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, Источник, Организация, БанковскийСчет, НачПериода, КонПериода) Экспорт
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгруженныхПлатежныхДокументах");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета = "Отчет о выгруженных документах";
	
	НаимВалюты = БанковскийСчет.ВалютаДенежныхСредств.Наименование;
	
	Шапка.Параметры.ОписаниеПериода	= "по счету " + СокрЛП(БанковскийСчет.НомерСчета) + " (валюта: " + ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, "не указана") + ") с " + Формат(НачПериода, "ДЛФ=D") + " по " + Формат(КонПериода, "ДЛФ=D");
	ПолеОтчета.Вывести(Шапка);
	
	Индекс      = 0;
	ИтогоСуммаП = 0;
	ИтогоСуммаР = 0;
	
	Для Каждого СтрокаИсточника Из Источник Цикл

		Если СтрокаИсточника.Готовность <> -1 Тогда
			Продолжить;
		КонецЕсли;
		
		Строка.Параметры.Плательщик = СтрокаИсточника.ОрганизацияНаим;
		
		НаимВалюты = СтрокаИсточника.Документ.БанковскийСчет.ВалютаДенежныхСредств.Наименование;
		
		Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ОрганизацияРасчСчет + " (валюта: " + ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, "не указана") + ")";
		Строка.Параметры.Получатель     = СтрокаИсточника.Контрагент;
				
		Если ЗначениеЗаполнено(СтрокаИсточника.Документ.БанковскийСчетПолучатель) Тогда
			НаимВалюты = СтрокаИсточника.Документ.БанковскийСчетПолучатель.ВалютаДенежныхСредств.Наименование;
		ИначеЕсли ЗначениеЗаполнено(СтрокаИсточника.Документ.БанковскийСчетКонтрагента) Тогда
			НаимВалюты = СтрокаИсточника.Документ.БанковскийСчетКонтрагента.ВалютаДенежныхСредств.Наименование;
		Иначе
			НаимВалюты = "";
		КонецЕсли;
				
		Строка.Параметры.ПолучательСчет = СтрокаИсточника.КонтрагентРасчСчет + " (валюта: " + ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, "не указана") + ")";
		Строка.Параметры.СуммаСписание  = СтрокаИсточника.СуммаДокумента;
		ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаДокумента;
		
		Строка.Параметры.Документ = СтрокаИсточника.Документ;
		Индекс = Индекс + 1;
		Строка.Параметры.Индекс = Индекс;
		
		ПолеОтчета.Вывести(Строка);
		
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку 		 = Ложь;
	ПолеОтчета.ТолькоПросмотр 		 = Истина;
	
КонецПроцедуры

Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета, Источник, Организация, Импорт_РасчетныеСчета, Импорт_Заголовок) Экспорт
		
	ИмеетсяСекцияРасчСчет = Ложь;
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагруженныхПлатежныхДокументах");
	
	Шапка   = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка  = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал  = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки = МакетОтчета.ПолучитьОбласть("Остатки");
	НазвОрг = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		
		Если НЕ ПустаяСтрока(СтрокаСчета.ДатаНачала) Тогда
			
			Индекс                = 0;
			ИтогоСуммаП           = 0;
			ИтогоСуммаР           = 0;
			ИмеетсяСекцияРасчСчет = Истина;
			
			НаимВалюты = ПоискБанковскогоСчета(СтрокаСчета.РасчСчет).ВалютаДенежныхСредств.Наименование;
			
			Шапка.Параметры.ИмяОтчета 		= "Отчет о загруженных документах";
			Шапка.Параметры.ОписаниеПериода	= "по счету " + СтрокаСчета.РасчСчет + " (валюта: " + ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, "не указана") + ") с " + СтрокаСчета.ДатаНачала + " по " + СтрокаСчета.ДатаКонца;
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;
			Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчет));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			ДатаНачала = ПолучитьДатуИзСтроки(ДатаНачала, СтрокаСчета.ДатаНачала);
						
			Если ЗначениеЗаполнено(СтрокаСчета.ДатаКонца) Тогда
				ДатаКонца = ПолучитьДатуИзСтроки(ДатаКонца, СтрокаСчета.ДатаКонца);
			Иначе
				ДатаКонца = '21000101';
			КонецЕсли;
			
			Для Каждого СтрокаИсточника Из Источник Цикл
					
				Если ТипЗнч(СтрокаИсточника.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов")
				 ИЛИ ТипЗнч(СтрокаИсточника.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда		
					НаимВалюты = СтрокаИсточника.СчетКонтрагента.ВалютаДенежныхСредств.Наименование;
				Иначе
					НаимВалюты = "";
				КонецЕсли;
				
				Если СтрокаИсточника.СуммаПоступило > 0 
				   И СтрокаИсточника.Поступило >= ДатаНачала И СтрокаИсточника.Поступило <= ДатаКонца Тогда
					
					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Плательщик1), СтрокаИсточника.Плательщик, СтрокаИсточника.Плательщик1);
					Строка.Параметры.Счет	          = СтрокаИсточника.ПлательщикСчет + " (валюта: " + ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, "не указана") + ")";
					Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание    = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаП                       = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0 
					И СтрокаИсточника.Списано >= ДатаНачала И СтрокаИсточника.Списано <= ДатаКонца Тогда

					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Получатель1), СтрокаИсточника.Получатель, СтрокаИсточника.Получатель1);
					Строка.Параметры.Счет 		      = СтрокаИсточника.ПолучательСчет + " (валюта: " + ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, "не указана") + ")";
					Строка.Параметры.СуммаСписание    = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаР                       = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;	
	
				Иначе
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Номер             = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс + 1;
				
				Док = СтрокаИсточника.Документ;
				
				Если ЗначениеЗаполнено(Док) Тогда
					
					Строка.Параметры.Документ     = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
					
					Если ТипЗнч(Док) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
					 ИЛИ ТипЗнч(Док) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
						Строка.Параметры.ТипДокумента = СтрокаИсточника.ВидОперации; 
						
					ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга") Тогда
						Строка.Параметры.ТипДокумента = СтрокаИсточника.Операция;
						
					Иначе
						Строка.Параметры.ТипДокумента = Док.ТипПлатежногоДокумента;
					КонецЕсли;
					
				Иначе
					
					Строка.Параметры.Документ     = "НЕ ЗАГРУЖЕН";
					Строка.Параметры.ТипДокумента = СтрокаИсточника.Операция;
					
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					
				КонецЕсли;
				
				Строка.Параметры.Индекс = Индекс;
				
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
						
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = "Остаток на начало " + СтрокаСчета.ДатаНачала +":";
			Остатки.Параметры.Текст2 = "Остаток на конец " + СтрокаСчета.ДатаКонца +":";
			
			Если НЕ ПустаяСтрока(СтрокаСчета.НачальныйОстаток) И НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.НачальныйОстаток, ".", ""),"-",""),",","")) Тогда
				Остатки.Параметры.Сумма1 = Формат(Число(СтрокаСчета.НачальныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма1 = СтрокаСчета.НачальныйОстаток;
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(СтрокаСчета.КонечныйОстаток) И НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.КонечныйОстаток, ".", ""),"-",""),",","")) Тогда
				Остатки.Параметры.Сумма2 = Формат(Число(СтрокаСчета.КонечныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма2 = СтрокаСчета.КонечныйОстаток;
			КонецЕсли;
			
			ПолеОтчета.Вывести(Остатки);
			
		КонецЕсли;

	КонецЦикла;

	Если НЕ ИмеетсяСекцияРасчСчет Тогда
		
		Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
			
			Индекс      = 0;
			ИтогоСуммаП = 0;
			ИтогоСуммаР = 0;
			
			НаимВалюты = ПоискБанковскогоСчета(СтрокаСчета.РасчСчет).ВалютаДенежныхСредств.Наименование;
			
			Шапка.Параметры.ИмяОтчета 		= "Отчет о загруженных документах";
			Шапка.Параметры.ОписаниеПериода	= "по счету " + СтрокаСчета.РасчСчет + " (валюта: " + ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, "не указана") + ") с " + Импорт_Заголовок.ДатаНачала + " по " + Импорт_Заголовок.ДатаКонца;
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;                    
			Отбор.Вставить("СчетОрганизации", ПоискБанковскогоСчета(СтрокаСчета.РасчСчет));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаИсточника Из Источник Цикл
				
				Если ТипЗнч(СтрокаИсточника.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов")
				 ИЛИ ТипЗнч(СтрокаИсточника.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда		
					НаимВалюты = СтрокаИсточника.СчетКонтрагента.ВалютаДенежныхСредств.Наименование;
				Иначе
					НаимВалюты = "";
				КонецЕсли;
								
				Если СтрокаИсточника.СуммаПоступило > 0 Тогда
					
					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Плательщик1), СтрокаИсточника.Плательщик, СтрокаИсточника.Плательщик1);
					Строка.Параметры.Счет	          = СтрокаИсточника.ПлательщикСчет + " (валюта: " + ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, "не указана") + ")";
					Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание    = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаП                       = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0  Тогда
					
					Строка.Параметры.Контрагент       = ?(ПустаяСтрока(СтрокаИсточника.Получатель1),СтрокаИсточника.Получатель,СтрокаИсточника.Получатель1);
					Строка.Параметры.Счет 		      = СтрокаИсточника.ПолучательСчет + " (валюта: " + ?(ЗначениеЗаполнено(НаимВалюты), НаимВалюты, "не указана") + ")";
					Строка.Параметры.СуммаСписание    = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление = "";
					Строка.Параметры.Дата             = СтрокаИсточника.Дата;
					ИтогоСуммаР                       = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
												
				Строка.Параметры.Номер = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс + 1;
				
				Док = СтрокаИсточника.Документ;
				
				Если ЗначениеЗаполнено(Док) Тогда
					
					Строка.Параметры.Документ     = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
					
					Если ТипЗнч(Док) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
					 ИЛИ ТипЗнч(Док) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
						Строка.Параметры.ТипДокумента = СтрокаИсточника.ВидОперации; 
						
					ИначеЕсли ТипЗнч(Док) = Тип("ДокументСсылка.ОтчетБанкаПоОперациямЭквайринга") Тогда
						Строка.Параметры.ТипДокумента = СтрокаИсточника.Операция;
						
					Иначе
						Строка.Параметры.ТипДокумента = Док.ТипПлатежногоДокумента;
					КонецЕсли;
					
				Иначе
					
					Строка.Параметры.Документ     = "НЕ ЗАГРУЖЕН";
					Строка.Параметры.ТипДокумента = СтрокаИсточника.Операция;
					
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
					
				КонецЕсли;
				
				Строка.Параметры.Индекс = Индекс;
				
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
						
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = "Остаток на начало " + Импорт_Заголовок.ДатаНачала + ":";
			Остатки.Параметры.Текст2 = "Остаток на конец " + Импорт_Заголовок.ДатаКонца + ":";
			Остатки.Параметры.Сумма1 = "";
			Остатки.Параметры.Сумма2 = "";
			ПолеОтчета.Вывести(Остатки);
			
		КонецЦикла;
	
	КонецЕсли;
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки   = Ложь;
	ПолеОтчета.ОтображатьСетку       = Ложь;
	ПолеОтчета.ТолькоПросмотр        = Истина;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

Процедура ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента, КоллекцияЭлементов)
	
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
	
	Плательщик = "Организация";
	Получатель = "Контрагент";
	
	РеквизитыПлДокЭкс_Основные      = "Номер,Дата,СуммаДокумента";
	//РеквизитыПлДокЭкс_Плательщик    = Плательщик + "КоррСчет," + Плательщик + "Наим," + Плательщик + "ИНН";      
	РеквизитыПлДокЭкс_Плательщик    = Плательщик + "РасчСчет," + Плательщик + "Наим," + Плательщик + "ИНН";      
	РеквизитыПлДокЭкс_ПлательщикНПР = Плательщик + "РасчСчет," + Плательщик + "БанкДляРасчетов," + Плательщик + "ГородБанка," + Плательщик + "БИКРЦБанка";
	//РеквизитыПлДокЭкс_Получатель    = Получатель + "КоррСчет," + Получатель + "ИНН";
	РеквизитыПлДокЭкс_Получатель    = Получатель + "РасчСчет," + Получатель + "ИНН";
	РеквизитыПлДокЭкс_ПолучательНПР = Получатель + "РасчСчет," + Получатель + "БанкДляРасчетов," + Получатель + "ГородБанка," + Получатель + "БИКРЦБанка";

	Экспорт_НеПустые = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДокЭкс_Основные   + "," +
	РеквизитыПлДокЭкс_Плательщик + "," +
	?(НепрямыеРасчетыУПлательщика, РеквизитыПлДокЭкс_ПлательщикНПР + ",", "")+
	РеквизитыПлДокЭкс_Получатель + "," +
	?(НепрямыеРасчетыУПолучателя, РеквизитыПлДокЭкс_ПолучательНПР + ",", ""));
	
	Для Каждого Свойство Из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ, КоллекцияЭлементов.Найти(Свойство.Ключ).Заголовок);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнен реквизит ""%1""!'"), ПредставлениеСвойства);
		ДобавитьЗамечание(СтрокаЭкспорта, 3, Стр);
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)

	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		
		Буфер = НоваяСтрока;
		
	Иначе
		
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСекциюДокумент(СтруктураДокумента, Организация, ВыгружатьКПП)
	
	Буфер    = "";
	Реквизит = "";
	СтуртураДляЗаписи = СформироватьСтруктуруЭкспорта();
	ЗаполнитьЗначениеЭкспорта(СтуртураДляЗаписи, СтруктураДокумента, Организация, ВыгружатьКПП);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для Каждого ВыгружаемыйРеквизит Из СтуртураДляЗаписи Цикл
		
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
				
		Если НЕ ПустаяСтрока(Значение) Тогда
			ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта()

	СтруктураЭкспорта = Новый структура;
	
	СтруктураЭкспорта.Вставить( "Выгружать",             ""); // "_"
	СтруктураЭкспорта.Вставить( "Готовность",            ""); // "Готовность"
	
	СтруктураЭкспорта.Вставить( "НомерДок",              ""); // "№ Документа"
	СтруктураЭкспорта.Вставить( "Номер",                 ""); // "Номер"
	СтруктураЭкспорта.Вставить( "Дата",                  ""); // "Дата"
	СтруктураЭкспорта.Вставить( "Операция",              ""); // "Операция"
	СтруктураЭкспорта.Вставить( "СчетОрганизации",       ""); // "Эл. Р/с организации"
	СтруктураЭкспорта.Вставить( "НомерСчетаОрганизации", ""); // "Р/с организации"
	СтруктураЭкспорта.Вставить( "Сумма",                 ""); // "Сумма"
	
	СтруктураЭкспорта.Вставить( "Контрагент",            ""); // "Контрагент"
	СтруктураЭкспорта.Вставить( "СчетКонтрагента",       ""); // "Р/с контрагента"
	СтруктураЭкспорта.Вставить( "НомерСчетаКонтрагента", ""); // "Эл. Р/с контрагента"
	
	СтруктураЭкспорта.Вставить( "КвитанцияДата",         ""); // "Дата форм. квитанции"
	СтруктураЭкспорта.Вставить( "КвитанцияВремя",        ""); // "Время форм. квитанции"
	СтруктураЭкспорта.Вставить( "КвитанцияСодержание",   ""); // "Содержание квитанции"
	
	СтруктураЭкспорта.Вставить( "ПлательщикСчет",        ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик",            ""); // "Плательщик"
	СтруктураЭкспорта.Вставить( "ПлательщикИНН",         ""); // "ИНН плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик1",           ""); // "Наименование плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик2",           ""); // "Расчетный счет плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик3",           ""); // "Банк плательщика"
	СтруктураЭкспорта.Вставить( "Плательщик4",           ""); // "Город банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикРасчСчет",    ""); // "Корсчет банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикБанк1",       ""); // "РЦ банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикБанк2",       ""); // "Город РЦ банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикБИК",         ""); // "БИК РЦ банка плательщика"
	СтруктураЭкспорта.Вставить( "ПлательщикКорсчет",     ""); // "Корсчет РЦ банка плат."
	
	СтруктураЭкспорта.Вставить( "ПолучательСчет",        ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить( "Получатель",            ""); // "Получатель"
	СтруктураЭкспорта.Вставить( "ПолучательИНН",         ""); // "ИНН получателя"
	СтруктураЭкспорта.Вставить( "Получатель1",           ""); // "Наименование получателя"
	СтруктураЭкспорта.Вставить( "Получатель2",           ""); // "Расчетный счет получателя"
	СтруктураЭкспорта.Вставить( "Получатель3",           ""); // "Банк получателя"
	СтруктураЭкспорта.Вставить( "Получатель4",           ""); // "Город банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательРасчСчет",    ""); // "Корсчет банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательБанк1",       ""); // "РЦ банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательБанк2",       ""); // "Город РЦ банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательБИК",         ""); // "БИК РЦ банка получателя"
	СтруктураЭкспорта.Вставить( "ПолучательКорсчет",     ""); // "Корсчет РЦ банка пол."
	
	СтруктураЭкспорта.Вставить( "ВидПлатежа",            ""); // "Вид платежа"
	СтруктураЭкспорта.Вставить( "ВидОплаты",             ""); // "Вид оплаты"
	
	СтруктураЭкспорта.Вставить( "СтатусСоставителя",     ""); // "Статус составителя"
	СтруктураЭкспорта.Вставить( "ПлательщикКПП",         ""); // "КПП плательщика"
	СтруктураЭкспорта.Вставить( "ПолучательКПП",         ""); // "КПП получателя"
	СтруктураЭкспорта.Вставить( "ПоказательКБК",         ""); // "Показатель КБК"
	СтруктураЭкспорта.Вставить( "ОКАТО",                 ""); // "ОКАТО"
	СтруктураЭкспорта.Вставить( "ПоказательОснования",   ""); // "Пок. основания"
	СтруктураЭкспорта.Вставить( "ПоказательПериода",     ""); // "Пок. нал. периода"
	СтруктураЭкспорта.Вставить( "ПоказательНомера",      ""); // "Пок. номера док."
	СтруктураЭкспорта.Вставить( "ПоказательДаты",        ""); // "Пок. даты док."
	СтруктураЭкспорта.Вставить( "ПоказательТипа",        ""); // "Пок. типа платежа"
	
	СтруктураЭкспорта.Вставить( "СрокПлатежа",           ""); // "Срок действия аккредитива"
	СтруктураЭкспорта.Вставить( "Очередность",           ""); // "Очередность платежа"
	
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа",     ""); // "Назначение платежа"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа1",    ""); // "Назначение платежа, стр. 1"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа2",    ""); // "Назначение платежа, стр. 2"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа3",    ""); // "Назначение платежа, стр. 3"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа4",    ""); // "Назначение платежа, стр. 4"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа5",    ""); // "Назначение платежа, стр. 5"
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа6",    ""); // "Назначение платежа, стр. 6"
	
	СтруктураЭкспорта.Вставить( "СрокАкцепта",           ""); // "Срок акцепта"
	СтруктураЭкспорта.Вставить( "ВидАккредитива",        ""); // "Вид аккредитива"
	СтруктураЭкспорта.Вставить( "УсловиеОплаты1",        ""); // "Условие оплаты, стр. 1"
	СтруктураЭкспорта.Вставить( "УсловиеОплаты2",        ""); // "Условие оплаты, стр. 2"
	СтруктураЭкспорта.Вставить( "УсловиеОплаты3",        ""); // "Условие оплаты, стр. 3"
	СтруктураЭкспорта.Вставить( "ПлатежПоПредст",        ""); // "Платеж по представлению"
	СтруктураЭкспорта.Вставить( "ДополнУсловия",         ""); // "Дополнительные условия"
	СтруктураЭкспорта.Вставить( "НомерСчетаПоставщика",  ""); // "№ счета поставщика"
	СтруктураЭкспорта.Вставить( "ДатаОтсылкиДок",        ""); // "Дата отсылки документов"
	
	СтруктураЭкспорта.Вставить( "Документ",              ""); // "Источник"
	СтруктураЭкспорта.Вставить( "СекцияДокумент",        ""); // "Выгрузка"
	
	СтруктураЭкспорта.Вставить( "ОписаниеОшибок",        ""); // "Замечания"
	СтруктураЭкспорта.Вставить( "ТипДокумента",          ""); // "Тип пл. документа"
	
	Возврат СтруктураЭкспорта;
	
КонецФункции

Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта, Организация, ВыгружатьКПП)
	
	Плательщик = "Организация";
	Получатель = "Контрагент";
		
	СтрокаЭкспорта.Номер =	ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(
		ВыборкаДляЭкспорта.Номер,
		Истина, // УдалитьПрефиксИнформационнойБазы
		Истина // УдалитьПользовательскийПрефикс
	);
	СтрокаЭкспорта.Дата           =	Формат(ВыборкаДляЭкспорта.Дата, "ДЛФ=Д");
	СтрокаЭкспорта.Сумма          =	Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет =	ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	СтрокаЭкспорта.ПолучательСчет =	ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	СтрокаЭкспорта.ВидПлатежа 	  =	ВыборкаДляЭкспорта.ВидПлатежа;
	
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);

	// ВидОплаты
	//
	Если ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение Тогда
		СтрокаЭкспорта.ВидОплаты =  "01";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.Аккредитив Тогда
		СтрокаЭкспорта.ВидОплаты =  "08";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ИнкассовоеПоручение Тогда
		СтрокаЭкспорта.ВидОплаты =  "06";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеТребование Тогда
		СтрокаЭкспорта.ВидОплаты =  "02";
		
	Иначе
		СтрокаЭкспорта.ВидОплаты = "00";
		
	КонецЕсли;
		
	// Плательщик1
	//
	СтрокаЭкспорта.Плательщик1 = ВыборкаДляЭкспорта[Плательщик + "Наим"];
	
	// Плательщик, ПлательщикИНН
	//
	СтрокаЭкспорта.ПлательщикИНН = ВыборкаДляЭкспорта[Плательщик + "ИНН"];
	СтрокаЭкспорта.Плательщик = "ИНН " + ВыборкаДляЭкспорта[Плательщик + "ИНН"] + " " + СтрокаЭкспорта.Плательщик1; 
	
	// ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,Плательщик2, Плательщик3, Плательщик4
	//
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2 		  = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.Плательщик3 		  = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4 		  = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик 		  = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "КоррСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1    = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2    = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК      = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет  = ВыборкаДляЭкспорта[Плательщик + "КоррСчет"];
	КонецЕсли;
	
	// Получатель1
	//
	СтрокаЭкспорта.Получатель1 = ВыборкаДляЭкспорта[Получатель];
	
	// Получатель, ПолучательИНН
	//
	СтрокаЭкспорта.ПолучательИНН = ВыборкаДляЭкспорта[Получатель + "ИНН"];
	СтрокаЭкспорта.Получатель = "ИНН " + ВыборкаДляЭкспорта[Получатель + "ИНН"] + " " + СтрокаЭкспорта.Получатель1;
	
	// ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, Получатель2, Получатель3, Получатель4
	//
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2 		  = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.Получатель3 		  = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4 		  = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель 		  = СтрокаЭкспорта.Получатель + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "КоррСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1    = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2    = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК      = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет  = ВыборкаДляЭкспорта[Получатель + "КоррСчет"];
	КонецЕсли;
	
	// СтатусСоставителя, ПлательщикКПП, ПолучательКПП, ПоказательКБК, ОКАТО, ПоказательОснования, ПоказательПериода, ПоказательНомера, ПоказательДаты, ПоказательТипа
	Если (ВыборкаДляЭкспорта.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		ИЛИ ВыборкаДляЭкспорта.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
		ИЛИ ВыборкаДляЭкспорта.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
		ИЛИ ВыборкаДляЭкспорта.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств
		ИЛИ ВыборкаДляЭкспорта.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне
		)
		И ВыборкаДляЭкспорта.ПеречислениеВБюджет Тогда
				
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если ПустаяСтрока(СтрокаЭкспорта.СтатусСоставителя) Тогда
			СтрокаЭкспорта.СтатусСоставителя = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
		СтрокаЭкспорта.ПоказательКБК = ВыборкаДляЭкспорта.КодБК;
		СтрокаЭкспорта.ОКАТО         = ВыборкаДляЭкспорта.КодОКАТО;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = Формат(ВыборкаДляЭкспорта.ПоказательДаты,"ДЛФ=Д");
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательТипа) Тогда
			СтрокаЭкспорта.ПоказательТипа = "0";
		Иначе
			СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
		КонецЕсли;
		
	ИначеЕсли ВыгружатьКПП Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
	КонецЕсли;
			
	// Очередность
	СтрокаЭкспорта.Очередность = ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
	// НазначениеПлатежа, НазначениеПлатежа1, НазначениеПлатежа2, НазначениеПлатежа3, НазначениеПлатежа4, НазначениеПлатежа5, НазначениеПлатежа6
	//
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, "");
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры

Функция НайтиЭлементДерева(ЭлементыДерева, ИмяКолонки, ИскомоеЗначение)
	
	Для Ном = 0 По ЭлементыДерева.Количество() - 1 Цикл
		
		ЭлементДерева = ЭлементыДерева.Получить(Ном);
		
		Если ЭлементДерева[ИмяКолонки] = ИскомоеЗначение Тогда
			Возврат ЭлементДерева;
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			
			РезультатПоиска = НайтиЭлементДерева(ЭлементДерева.ПолучитьЭлементы(), ИмяКолонки, ИскомоеЗначение);
			
			Если НЕ РезультатПоиска = Неопределено Тогда
				Возврат РезультатПоиска;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьПартнераИзРегистраСведенийАналитикаУчетаПоПартнерам(Организация, Контрагент)
			
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	 |	АналитикаУчетаПоПартнерам.Партнер КАК Партнер,
	 |	АналитикаУчетаПоПартнерам.Организация КАК Организация,
	 |	АналитикаУчетаПоПартнерам.Контрагент КАК Контрагент
	 |ИЗ
	 |	РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
	 |ГДЕ
	 |	Организация = &Организация
	 |	И Контрагент = &Контрагент
	 |";
		
	ЗапросПоПартнерам = Новый Запрос(ТекстЗапроса);
	ЗапросПоПартнерам.УстановитьПараметр("Организация", Организация);
	ЗапросПоПартнерам.УстановитьПараметр("Контрагент",  Контрагент);
	
	РезультатЗапроса = ЗапросПоПартнерам.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат	РезультатЗапроса.Выгрузить()[0].Партнер;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекстЗапросаПоСписаниеБезналичныхДенежныхСредств(УсловиеОтбораПоТипуПлатежногоДокумента)
		
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Списание безналичных денежных средств"" КАК ИмяДокумента,
	|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК Документ,
	|	СписаниеБезналичныхДенежныхСредств.Проведен КАК Проведен,
	|	СписаниеБезналичныхДенежныхСредств.ТипПлатежногоДокумента КАК ВидДокумента,
	|	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СписаниеБезналичныхДенежныхСредств.Номер КАК Номер,
	|	СписаниеБезналичныхДенежныхСредств.Дата КАК Дата,
	|	СписаниеБезналичныхДенежныхСредств.ВидПлатежа КАК ВидПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.ПеречислениеВБюджет КАК ПеречислениеВБюджет,
	|	СписаниеБезналичныхДенежныхСредств.СтатусСоставителя КАК СтатусСоставителя,
	|	СписаниеБезналичныхДенежныхСредств.Организация.КПП КАК КПППлательщика,
	|	СписаниеБезналичныхДенежныхСредств.Контрагент.КПП КАК КПППолучателя,
	|	СписаниеБезналичныхДенежныхСредств.КодБК КАК КодБК,
	|	СписаниеБезналичныхДенежныхСредств.КодОКАТО КАК КодОКАТО,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательОснования КАК ПоказательОснования,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательПериода КАК ПоказательПериода,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательНомера КАК ПоказательНомера,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательДаты КАК ПоказательДаты,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательТипа КАК ПоказательТипа,
	|	СписаниеБезналичныхДенежныхСредств.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.СуммаДокумента КАК СуммаДокумента,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.НомерСчета КАК КонтрагентРасчСчет,
	|	ВЫБОР
	|		КОГДА
	|       	ВЫРАЗИТЬ(СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.ТекстКорреспондента КАК Строка(255)) = """"
	|		ТОГДА
    |			ВЫБОР
	|				КОГДА
	|       			СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику))
	|				ТОГДА
	|           		СписаниеБезналичныхДенежныхСредств.ПодотчетноеЛицо.Наименование
	|				ИНАЧЕ
	|					СписаниеБезналичныхДенежныхСредств.Контрагент.НаименованиеПолное
	|			КОНЕЦ
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.ТекстКорреспондента 
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику))
	|		ТОГДА
	|           СписаниеБезналичныхДенежныхСредств.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.Контрагент.Наименование
	|	КОНЕЦ КАК КонтрагентКратко,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику))
	|		ТОГДА
	|           СписаниеБезналичныхДенежныхСредств.ПодотчетноеЛицо.ИНН
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.Контрагент.ИНН
	|	КОНЕЦ КАК КонтрагентИНН,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.НаименованиеБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.Банк.Наименование
	|	КОНЕЦ КАК КонтрагентБанк,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.ГородБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.Банк.Город
	|	КОНЕЦ КАК КонтрагентГородБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.БИКБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.Банк.Код
	|	КОНЕЦ КАК КонтрагентБИКБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.КоррСчетБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.Банк.КоррСчет
	|	КОНЕЦ КАК КонтрагентКоррСчет,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК КонтрагентБанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.ГородБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.БанкДляРасчетов.Город
	|	КОНЕЦ КАК КонтрагентГородРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.БИКБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.БанкДляРасчетов.Код
	|	КОНЕЦ КАК КонтрагентБИКРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК КонтрагентКоррСчетРЦБанка,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НомерСчета КАК ОрганизацияРасчСчет,
	|	ВЫБОР
	|		КОГДА
	|       	ВЫРАЗИТЬ(СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ТекстКорреспондента КАК Строка(255)) = """"
	|		ТОГДА
	|           СписаниеБезналичныхДенежныхСредств.Организация.НаименованиеСокращенное
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаим,
	|	СписаниеБезналичныхДенежныхСредств.Организация.ИНН КАК ОрганизацияИНН,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК ОрганизацияБанк,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ГородБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.Город
	|	КОНЕЦ КАК ОрганизацияГородБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БИКБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.Код
	|	КОНЕЦ КАК ОрганизацияБИКБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.КоррСчет
	|	КОНЕЦ КАК ОрганизацияКоррСчет,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК ОрганизацияБанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ГородБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.Город
	|	КОНЕЦ КАК ОрганизацияГородРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БИКБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.Код
	|	КОНЕЦ КАК ОрганизацияБИКРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК ОрганизацияКоррСчетРЦБанка,
	|	СписаниеБезналичныхДенежныхСредств.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКСписаниюБезналичные.Остатки КАК ДенежныеСредстваКСписаниюБезналичныеОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|	ПО ДенежныеСредстваКСписаниюБезналичныеОстатки.Документ = СписаниеБезналичныхДенежныхСредств.Ссылка
	|		И ДенежныеСредстваКСписаниюБезналичныеОстатки.СуммаОстаток < 0
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И (НЕ СписаниеБезналичныхДенежныхСредств.ПометкаУдаления)
	|	И СписаниеБезналичныхДенежныхСредств.БанковскийСчет = &Счет
	|	И СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация Не В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		)
	|	И (СписаниеБезналичныхДенежныхСредств." + УсловиеОтбораПоТипуПлатежногоДокумента + ")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Списание безналичных денежных средств"" КАК ИмяДокумента,
	|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК Документ,
	|	СписаниеБезналичныхДенежныхСредств.Проведен КАК Проведен,
	|	СписаниеБезналичныхДенежныхСредств.ТипПлатежногоДокумента КАК ВидДокумента,
	|	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СписаниеБезналичныхДенежныхСредств.Номер КАК Номер,
	|	СписаниеБезналичныхДенежныхСредств.Дата КАК Дата,
	|	СписаниеБезналичныхДенежныхСредств.ВидПлатежа КАК ВидПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.ПеречислениеВБюджет КАК ПеречислениеВБюджет,
	|	СписаниеБезналичныхДенежныхСредств.СтатусСоставителя КАК СтатусСоставителя,
	|	СписаниеБезналичныхДенежныхСредств.Организация.КПП КАК КПППлательщика,
	|	СписаниеБезналичныхДенежныхСредств.Контрагент.КПП КАК КПППолучателя,
	|	СписаниеБезналичныхДенежныхСредств.КодБК КАК КодБК,
	|	СписаниеБезналичныхДенежныхСредств.КодОКАТО КАК КодОКАТО,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательОснования КАК ПоказательОснования,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательПериода КАК ПоказательПериода,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательНомера КАК ПоказательНомера,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательДаты КАК ПоказательДаты,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательТипа КАК ПоказательТипа,
	|	СписаниеБезналичныхДенежныхСредств.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.СуммаДокумента КАК СуммаДокумента,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.НомерСчета КАК КонтрагентРасчСчет,
	|	ВЫБОР
	|		КОГДА
	|       	ВЫРАЗИТЬ(СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.ТекстКорреспондента КАК Строка(255)) = """"
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.Организация.НаименованиеСокращенное
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.ТекстКорреспондента 
	|	КОНЕЦ КАК Контрагент,
	|	СписаниеБезналичныхДенежныхСредств.Организация.Наименование КАК КонтрагентКратко,
	|	СписаниеБезналичныхДенежныхСредств.Организация.ИНН КАК КонтрагентИНН,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.НаименованиеБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Банк.Наименование
	|	КОНЕЦ КАК КонтрагентБанк,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.ГородБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Банк.Город
	|	КОНЕЦ КАК КонтрагентГородБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БИКБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Банк.Код
	|	КОНЕЦ КАК КонтрагентБИКБанка,
	
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Банк.КоррСчет КАК КонтрагентКоррСчет,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК КонтрагентБанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.ГородБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БанкДляРасчетов.Город
	|	КОНЕЦ КАК КонтрагентГородРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БИКБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БанкДляРасчетов.Код
	|	КОНЕЦ КАК КонтрагентБИКРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК КонтрагентКоррСчетРЦБанка,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НомерСчета КАК ОрганизацияРасчСчет,
	|	ВЫБОР
	|		КОГДА
	|       	ВЫРАЗИТЬ(СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ТекстКорреспондента КАК Строка(255)) = """"
	|		ТОГДА
	|           СписаниеБезналичныхДенежныхСредств.Организация.НаименованиеСокращенное
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаим,
	|	СписаниеБезналичныхДенежныхСредств.Организация.ИНН КАК ОрганизацияИНН,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК ОрганизацияБанк,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ГородБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.Город
	|	КОНЕЦ КАК ОрганизацияГородБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БИКБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.Код
	|	КОНЕЦ КАК ОрганизацияБИКБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.КоррСчетБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.КоррСчет
	|	КОНЕЦ КАК ОрганизацияКоррСчет,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК ОрганизацияБанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ГородБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.Город
	|	КОНЕЦ КАК ОрганизацияГородРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БИКБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.Код
	|	КОНЕЦ КАК ОрганизацияБИКРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанкаДляРасчетов = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК ОрганизацияКоррСчетРЦБанка,
	|	СписаниеБезналичныхДенежныхСредств.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКСписаниюБезналичные.Остатки КАК ДенежныеСредстваКСписаниюБезналичныеОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|	ПО ДенежныеСредстваКСписаниюБезналичныеОстатки.Документ = СписаниеБезналичныхДенежныхСредств.Ссылка
	|		И ДенежныеСредстваКСписаниюБезналичныеОстатки.СуммаОстаток < 0
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И (НЕ СписаниеБезналичныхДенежныхСредств.ПометкаУдаления)
	|	И СписаниеБезналичныхДенежныхСредств.БанковскийСчет = &Счет
	|	И СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет)
	|		)
	|	И (СписаниеБезналичныхДенежныхСредств." + УсловиеОтбораПоТипуПлатежногоДокумента + ")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Списание безналичных денежных средств"" КАК ИмяДокумента,
	|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК Документ,
	|	СписаниеБезналичныхДенежныхСредств.Проведен КАК Проведен,
	|	СписаниеБезналичныхДенежныхСредств.ТипПлатежногоДокумента КАК ВидДокумента,
	|	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	СписаниеБезналичныхДенежныхСредств.Номер КАК Номер,
	|	СписаниеБезналичныхДенежныхСредств.Дата КАК Дата,
	|	СписаниеБезналичныхДенежныхСредств.ВидПлатежа КАК ВидПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.ПеречислениеВБюджет КАК ПеречислениеВБюджет,
	|	СписаниеБезналичныхДенежныхСредств.СтатусСоставителя КАК СтатусСоставителя,
	|	СписаниеБезналичныхДенежныхСредств.Организация.КПП КАК КПППлательщика,
	|	СписаниеБезналичныхДенежныхСредств.Контрагент.КПП КАК КПППолучателя,
	|	СписаниеБезналичныхДенежныхСредств.КодБК КАК КодБК,
	|	СписаниеБезналичныхДенежныхСредств.КодОКАТО КАК КодОКАТО,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательОснования КАК ПоказательОснования,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательПериода КАК ПоказательПериода,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательНомера КАК ПоказательНомера,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательДаты КАК ПоказательДаты,
	|	СписаниеБезналичныхДенежныхСредств.ПоказательТипа КАК ПоказательТипа,
	|	СписаниеБезналичныхДенежныхСредств.ОчередностьПлатежа КАК ОчередностьПлатежа,
	|	СписаниеБезналичныхДенежныхСредств.СуммаДокумента КАК СуммаДокумента,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.НомерСчета КАК КонтрагентРасчСчет,
	|	ВЫБОР
	|		КОГДА
	|       	ВЫРАЗИТЬ(СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.ТекстКорреспондента КАК Строка(255)) = """"
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Владелец.НаименованиеСокращенное
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.ТекстКорреспондента 
	|	КОНЕЦ КАК Контрагент,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Владелец.Наименование КАК КонтрагентКратко,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Владелец.ИНН КАК КонтрагентИНН,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.НаименованиеБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Банк.Наименование
	|	КОНЕЦ КАК КонтрагентБанк,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.ГородБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Банк.Город
	|	КОНЕЦ КАК КонтрагентГородБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БИКБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Банк.Код
	|	КОНЕЦ КАК КонтрагентБИКБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.КоррСчетБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.Банк.КоррСчет
	|	КОНЕЦ КАК КонтрагентКоррСчет,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК КонтрагентБанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.ГородБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БанкДляРасчетов.Город
	|	КОНЕЦ КАК КонтрагентГородРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БИКБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БанкДляРасчетов.Код
	|	КОНЕЦ КАК КонтрагентБИКРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК КонтрагентКоррСчетРЦБанка,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НомерСчета КАК ОрганизацияРасчСчет,
	|	ВЫБОР
	|		КОГДА
	|       	ВЫРАЗИТЬ(СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ТекстКорреспондента КАК Строка(255)) = """"
	|		ТОГДА
	|           СписаниеБезналичныхДенежныхСредств.Организация.НаименованиеСокращенное
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ТекстКорреспондента
	|	КОНЕЦ КАК ОрганизацияНаим,
	|	СписаниеБезналичныхДенежныхСредств.Организация.ИНН КАК ОрганизацияИНН,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НаименованиеБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.Наименование
	|	КОНЕЦ КАК ОрганизацияБанк,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ГородБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.Город
	|	КОНЕЦ КАК ОрганизацияГородБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БИКБанка
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.Код
	|	КОНЕЦ КАК ОрганизацияБИКБанка,
	|	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.Банк.КоррСчет КАК ОрганизацияКоррСчет,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.НаименованиеБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.Наименование
	|	КОНЕЦ КАК ОрганизацияБанкДляРасчетов,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.ГородБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.Город
	|	КОНЕЦ КАК ОрганизацияГородРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БИКБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.Код
	|	КОНЕЦ КАК ОрганизацияБИКРЦБанка,
	|	ВЫБОР
	|		КОГДА
	|       	СписаниеБезналичныхДенежныхСредств.БанковскийСчет.РучноеИзменениеРеквизитовБанка = Истина
	|		ТОГДА
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.КоррСчетБанкаДляРасчетов
	|		ИНАЧЕ
	|			СписаниеБезналичныхДенежныхСредств.БанковскийСчет.БанкДляРасчетов.КоррСчет
	|	КОНЕЦ КАК ОрганизацияКоррСчетРЦБанка,
	|	СписаниеБезналичныхДенежныхСредств.НазначениеПлатежа КАК НазначениеПлатежа
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваКСписаниюБезналичные.Остатки КАК ДенежныеСредстваКСписаниюБезналичныеОстатки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|	ПО ДенежныеСредстваКСписаниюБезналичныеОстатки.Документ = СписаниеБезналичныхДенежныхСредств.Ссылка
	|		И ДенежныеСредстваКСписаниюБезналичныеОстатки.СуммаОстаток < 0
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И (НЕ СписаниеБезналичныхДенежныхСредств.ПометкаУдаления)
	|	И СписаниеБезналичныхДенежныхСредств.БанковскийСчет = &Счет
	|	И СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств)
	|		)
	|	И (СписаниеБезналичныхДенежныхСредств." + УсловиеОтбораПоТипуПлатежногоДокумента + ")
	|";
	
КонецФункции

Функция ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора)
	
	Буфер = "";
	
	Пока ПустаяСтрока(Буфер)
	 ИЛИ Лев(Буфер, 2) = "//" Цикл
		
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
			
		Буфер = СокрЛП(СтрПолучитьСтроку(Импорт_ТекстДляРазбора, Импорт_ТекущаяСтрока));
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Функция ЗагрузитьСекциюДокумента(СтрокаДокумента, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора)
	
	Импорт_Загружаемые = СоздатьСоответствиеИзСтроки(ВРЕГ(
	   "Номер,Дата,Сумма,"
	 + "ВидПлатежа,ВидОплаты,"
	 + "КвитанцияДата,КвитанцияВремя,КвитанцияСодержание,"
	 + "ДатаСписано,"
	 + "ДатаПоступило,"
	 + "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1,"
	 + "ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет,"
	 + "Плательщик2,Плательщик3,Плательщик4,"
	 + "ПолучательСчет,Получатель,ПолучательИНН,Получатель1,"
	 + "ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет,"
	 + "Получатель2,Получатель3,Получатель4,"
	 + "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа,"
	 + "НазначениеПлатежа,"
	 + "НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6,"
	 + "СрокПлатежа,Очередность,"
	 + "УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3,"
	 + "СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,НомерСчетаПоставщика,ДатаОтсылкиДок"));
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые[Тег] = Истина Тогда
				
				СтрокаДокумента[Тег] = Значение;
				
			Иначе
				
				Сообщение = Новый СообщениеПользователю;
		        				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный реквизит платежного документа, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
									
				Сообщение.Сообщить();
				
				//Чечин Петр. Иногда не заполняют лишние поля в клиент банке
				//Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Нарушена структура платежного документа, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
						
			Сообщение.Сообщить();
			
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета, Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора)
	
	СтрокаТегов = ВРЕГ("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет");
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
	
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			
			СтрокаРССчета[Тег] = Значение;
			
		Иначе
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный реквизит в секции описания расчетного счета, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, СтрокаРазбора);
						
			Сообщение.Сообщить();
						
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта(Импорт_ТекущаяСтрока, Импорт_КоличествоСтрок, Импорт_ТекстДляРазбора);
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СчетПринадлежитОрганизации(НомерСчета, Организация)
	
	ЗапросПоСчету = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	БанковскиеСчетаОрганизаций.Владелец,
	                              |	БанковскиеСчетаОрганизаций.НомерСчета,
	                              |	БанковскиеСчетаОрганизаций.Ссылка
	                              |ИЗ
	                              |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	                              |ГДЕ
	                              |	БанковскиеСчетаОрганизаций.Владелец = &Организация
	                              |	И БанковскиеСчетаОрганизаций.НомерСчета = &НомерСчета");
	
	ЗапросПоСчету.УстановитьПараметр("НомерСчета", НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация", Организация);
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции

Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента, БанковскийСчет, Организация, НастройкаЗаполнения)
	
	ОперацияПоОплатеДСВДругуюОрганизацию = Ложь;
	
	НайденДокументСписания = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// 1) Определим вид платежа – входящий или исходящий.
	ПлатежноеПоручение  = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")), "Ё", "Е") = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")), "Ё", "Е") = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";
	ПлатежныйОрдер      = СтрЗаменить(ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")), "Ё", "Е") = "ПЛАТЕЖНЫЙОРДЕР";
	БанковскийОрдер		= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "БАНКОВСКИЙОРДЕР";	
	МемориальныйОрдер	= ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "МЕМОРИАЛЬНЫЙОРДЕР";	
	ИнкассовоеПоручение = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ИНКАССОВОЕПОРУЧЕНИЕ";	
			
	Исходящий = (СокрЛП(СтрокаДокумента.ПлательщикСчет) = СокрЛП(БанковскийСчет.НомерСчета));
	
	ИмяДокумента = ?(Исходящий, "Списание безналичных денежных средств", "Поступление безналичных денежных средств");
	
	// 2) Определим вид документа в программе.
	Если ПлатежноеПоручение Тогда
		ВидДокумента = "ПлатежноеПоручение";
	ИначеЕсли ПлатежноеТребование Тогда
		ВидДокумента = "ПлатежноеТребование";
	ИначеЕсли ПлатежныйОрдер Тогда
		ВидДокумента = "ПлатежныйОрдер";	
	ИначеЕсли БанковскийОрдер Тогда
		ВидДокумента = "БанковскийОрдер";		
	ИначеЕсли МемориальныйОрдер Тогда
		ВидДокумента = "МемориальныйОрдер";			
	ИначеЕсли ИнкассовоеПоручение Тогда
		ВидДокумента = "ИнкассовоеПоручение";			
	КонецЕсли;
		
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	
	// 3) Определяем вид операции документа.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		
		Если СтрокаДокумента.ВидОплаты = "03" Тогда
			СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств;
			
		ИначеЕсли СтрокаДокумента.ВидОплаты = "04" Тогда
			СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк;
			
		ИначеЕсли СтрокаДокумента.ВидОплаты = "13" Тогда
			Если Исходящий Тогда
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту;
			Иначе
				СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте;
			КонецЕсли;
			
		Иначе
			СтрокаДокумента.ВидОперации = ПолучитьНастройкуЗаполнения(ИмяДокумента, "ВидОперации", НастройкаЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	// 4) Найдем ранее загруженный (введенный вручную) документ.
	// Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.

	// Распознаем дату документа.
	ВсеРеквизитыПоискаЕсть = Ложь;
	ДокументНайден         = Ложь;
	ДатаДок                = Дата("00010101");
	
	Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);

	Если ЗначениеЗаполнено(Результат) Тогда
		
		СтрокаДокумента.ДатаДок = Результат;
		
		Если СтрокаДокумента.ВидДокумента = "ПлатежноеПоручение"
		 ИЛИ СтрокаДокумента.ВидДокумента = "ПлатежноеТребование"
		 ИЛИ СтрокаДокумента.ВидДокумента = "ПлатежныйОрдер"
		 ИЛИ СтрокаДокумента.ВидДокумента = "БанковскийОрдер"
		 ИЛИ СтрокаДокумента.ВидДокумента = "МемориальныйОрдер"
		 ИЛИ СтрокаДокумента.ВидДокумента = "ИнкассовоеПоручение" Тогда
		
		 	Если НЕ ЕстьНеЦифры(СтрокаДокумента.Номер)
			 ИЛИ НЕ СтрокаДокумента.ВидДокумента = "ПлатежноеПоручение" Тогда
			 
				НомерДляПоискаДок = СтрокаДокумента.Номер;
				ВсеРеквизитыПоискаЕсть = Истина;
				
			Иначе
								
				Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указан неправильный номер документа(%1)!'"), СтрокаДокумента.Номер);
								
				ДобавитьЗамечание(СтрокаДокумента, 4, Стр);
				ВсеРеквизитыПоискаЕсть = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	
	Если ВсеРеквизитыПоискаЕсть Тогда
	
		// При наличии нескольких предпочтение отдается первому с совпадающим номером счета.
		ЗапросПоискаДокумента = Новый Запрос;
		
		Если ИмяДокумента = "Поступление безналичных денежных средств" Тогда
			
			ЗапросПоискаДокумента.Текст = "ВЫБРАТЬ
			|	ПоступлениеБезналичныхДенежныхСредств.Ссылка,
			|	ПоступлениеБезналичныхДенежныхСредств.Проведен,
			|	ПоступлениеБезналичныхДенежныхСредств.НомерВходящегоДокумента КАК Номер,                       
			|	ПоступлениеБезналичныхДенежныхСредств.ДатаВходящегоДокумента КАК Дата,
			|	БанковскиеСчетаКонтрагентов.НомерСчета КАК НомерСчета,
			|	ПоступлениеБезналичныхДенежныхСредств.Организация
			|ИЗ
			|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
			|	ПО ПоступлениеБезналичныхДенежныхСредств.Контрагент = БанковскиеСчетаКонтрагентов.Владелец
			|ГДЕ
			|	НАЧАЛОПЕРИОДА(ПоступлениеБезналичныхДенежныхСредств.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаДок
			|	И ПоступлениеБезналичныхДенежныхСредств.БанковскийСчет = &БанковскийСчет
			|	И ПоступлениеБезналичныхДенежныхСредств.Организация = &Организация";
			
		ИначеЕсли ИмяДокумента = "Списание безналичных денежных средств" Тогда
			
			ЗапросПоискаДокумента.Текст = "ВЫБРАТЬ
			|	СписаниеБезналичныхДенежныхСредств.Ссылка,
			|	СписаниеБезналичныхДенежныхСредств.Проведен,"
			+ ?(ПлатежноеПоручение,
				" СписаниеБезналичныхДенежныхСредств.Номер КАК Номер,",
				" СписаниеБезналичныхДенежныхСредств.НомерВходящегоДокумента КАК Номер,")
			+ "	СписаниеБезналичныхДенежныхСредств.Дата КАК Дата,"
			+ ?(СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
				ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
				ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
				ИЛИ СтрокаДокумента.ВидОперации = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств
			,
			    " СписаниеБезналичныхДенежныхСредств.БанковскийСчетПолучатель.НомерСчета КАК НомерСчета,",
				" СписаниеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.НомерСчета КАК НомерСчета,")
			+ " СписаниеБезналичныхДенежныхСредств.Организация
			|ИЗ
			|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
			|ГДЕ
			|	НАЧАЛОПЕРИОДА(СписаниеБезналичныхДенежныхСредств.Дата, ДЕНЬ) = &ДатаДок
			|	И СписаниеБезналичныхДенежныхСредств.БанковскийСчет = &БанковскийСчет
			|	И СписаниеБезналичныхДенежныхСредств.Организация = &Организация";
			
		КонецЕсли;
		
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
		
		Если Результат.Количество() = 0
		   И ИмяДокумента = "Поступление безналичных денежных средств" Тогда
		   
		   ЗапросПоискаДокумента.Текст = "ВЫБРАТЬ
			|	ПоступлениеБезналичныхДенежныхСредств.Ссылка,
			|	ПоступлениеБезналичныхДенежныхСредств.Проведен,
			|	ПоступлениеБезналичныхДенежныхСредств.НомерВходящегоДокумента КАК Номер,                       
			|	ПоступлениеБезналичныхДенежныхСредств.ДатаВходящегоДокумента КАК Дата,
			|	ПоступлениеБезналичныхДенежныхСредств.БанковскийСчетКонтрагента.НомерСчета КАК НомерСчета,
			|	ПоступлениеБезналичныхДенежныхСредств.Организация
			|ИЗ
			|	Документ.ПоступлениеБезналичныхДенежныхСредств КАК ПоступлениеБезналичныхДенежныхСредств
			|ГДЕ
			|	НАЧАЛОПЕРИОДА(ПоступлениеБезналичныхДенежныхСредств.ДатаВходящегоДокумента, ДЕНЬ) = &ДатаДок
			|	И ПоступлениеБезналичныхДенежныхСредств.БанковскийСчет = &БанковскийСчет
			|	И ПоступлениеБезналичныхДенежныхСредств.Организация = &Организация";
		   
		КонецЕсли;
		
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
						
		СчетДляПоискаДок = ?(Исходящий, СтрокаДокумента.ПолучательСчет, СтрокаДокумента.ПлательщикСчет);
		ДлинаНомера = СтрДлина(НомерДляПоискаДок);
		КоличествоДок = 0;
		
		Пока Результат.Следующий() Цикл
			
			ВыборкаНомер = Прав(СокрЛП(Результат.Номер), ДлинаНомера);
						
			Если ВыборкаНомер = НомерДляПоискаДок
			   И (НЕ ЗначениеЗаполнено(Результат.НомерСчета) ИЛИ Результат.НомерСчета = СчетДляПоискаДок)
			   И ВРег(СокрЛП(СтрЗаменить(Результат.Ссылка.ТипПлатежногоДокумента, " ", ""))) = ВРег(СокрЛП(СтрокаДокумента.ВидДокумента)) Тогда	
				
				Если КоличествоДок = 0 Тогда
					СтрокаДокумента.Документ = Результат.Ссылка;
					СтрокаДокумента.Проведен = Результат.Проведен;
					СтрокаДокумента.НомерДок = Результат.Номер;
					СтрокаДокумента.ДатаДок  = Результат.Дата;
				КонецЕсли;
				
				КоличествоДок = КоличествоДок + 1;
				
			КонецЕсли;
		КонецЦикла;
		
		// Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		
		Если ДокументНайден
		 И (ТипЗнч(СтрокаДокумента.Документ) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
			 ИЛИ ТипЗнч(СтрокаДокумента.Документ) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")) Тогда
			
			Документ = СтрокаДокумента.Документ; 
			Если Документ.РасшифровкаПлатежа.Количество() > 0 Тогда
			
				Если ИмяДокумента = "Поступление безналичных денежных средств" Тогда
					СтрокаДокумента.СтатьяДоходовИлиРасходов = Документ.РасшифровкаПлатежа[0].СтатьяДоходов;
				ИначеЕсли ИмяДокумента = "Списание безналичных денежных средств" Тогда
					СтрокаДокумента.СтатьяДоходовИлиРасходов = Документ.РасшифровкаПлатежа[0].СтатьяРасходов;
				КонецЕсли;
				СтрокаДокумента.Подразделение   = Документ.РасшифровкаПлатежа[0].Подразделение;
			
			КонецЕсли;
		
			СтрокаДокумента.СтатьяДДС       = Документ.СтатьяДвиженияДенежныхСредств;
			СтрокаДокумента.СчетОрганизации = БанковскийСчет;
			СтрокаДокумента.Контрагент      = Документ.Контрагент;
						
		КонецЕсли;
		
	КонецЕсли;
	
	// 5) Определяем банковский счет организации.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	
	// 6) Определяем банковский счет контрагента.
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		
		ЗапросПоискаСчета = Новый Запрос;

		Если Исходящий Тогда
						
			СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
			ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
			КППКонтрагента = СтрокаДокумента.ПолучательКПП;
			Если СтрокаДокумента.Получатель1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Получатель1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Получатель;
			КонецЕсли;
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
						
		Иначе
			
			ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
			СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
			ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
			КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
			Если СтрокаДокумента.Плательщик1 <> "" Тогда
				ИмяКонтрагента = СтрокаДокумента.Плательщик1;
			Иначе
				ИмяКонтрагента = СтрокаДокумента.Плательщик;
			КонецЕсли;
			
		КонецЕсли;
		
		ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
		
		ЗапросПоискаСчета.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	БанковскиеСчета.Владелец,
		|	БанковскиеСчета.Ссылка,
		|	БанковскиеСчета.НомерСчета
		|ИЗ
		|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента
		|	И БанковскиеСчета.НомерСчета = &НомерСчета";
				
		ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
		
		Контрагент = Справочники.Организации.ПустаяСсылка();
				
		Если ИмяДокумента = "Поступление безналичных денежных средств"
	   	   И ВыборкаПоиска.Количество() > 0 Тогда
		   
		   ОперацияПоОплатеДСВДругуюОрганизацию = Истина;
		   
		   ВыборкаПоиска.Следующий();
		   
		   // Найдем документ списания с операцией "Перечисление денежных средств в другую организацию".
		   //
		   ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		   |	СписаниеБезналичныхДенежныхСредств.Ссылка,
		   |	СписаниеБезналичныхДенежныхСредств.Номер,
		   |	СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация
		   |ИЗ
		   |	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		   |ГДЕ
		   |	НАЧАЛОПЕРИОДА(СписаниеБезналичныхДенежныхСредств.Дата, ДЕНЬ) = &Дата
		   |	И (СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = &ХозяйственнаяОперацияОплатаДенежныхСредствВДругуюОрганизацию ИЛИ СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = &ХозяйственнаяОперацияВозвратДенежныхСредствВДругуюОрганизацию ИЛИ СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = &ХозяйственнаяОперацияВнутренняяПередачаДенежныхСредств ИЛИ СписаниеБезналичныхДенежныхСредств.ХозяйственнаяОперация = &ХозяйственнаяОперацияПеречислениеДенежныхСредствНаДругойСчет)
		   |	И СписаниеБезналичныхДенежныхСредств.БанковскийСчет = &БанковскийСчет";
		   
		   ЗапросДокументыСписанияДСВДругуюОрганизацию = Новый Запрос(ТекстЗапроса);
		   
		   ДатаДок = Дата("00010101");
		   
		   Результат = ПолучитьДатуИзСтроки(ДатаДок, СтрокаДокумента.Дата);
		   
		   ЗапросДокументыСписанияДСВДругуюОрганизацию.УстановитьПараметр("Дата", ДатаДок);
		   ЗапросДокументыСписанияДСВДругуюОрганизацию.УстановитьПараметр("ХозяйственнаяОперацияОплатаДенежныхСредствВДругуюОрганизацию", Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию);
		   ЗапросДокументыСписанияДСВДругуюОрганизацию.УстановитьПараметр("ХозяйственнаяОперацияВозвратДенежныхСредствВДругуюОрганизацию", Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию);
		   ЗапросДокументыСписанияДСВДругуюОрганизацию.УстановитьПараметр("ХозяйственнаяОперацияВнутренняяПередачаДенежныхСредств", Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
		   ЗапросДокументыСписанияДСВДругуюОрганизацию.УстановитьПараметр("ХозяйственнаяОперацияПеречислениеДенежныхСредствНаДругойСчет", Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
		   ЗапросДокументыСписанияДСВДругуюОрганизацию.УстановитьПараметр("БанковскийСчет", ВыборкаПоиска.Ссылка);
		   
		   ДокументыСписанияДСВДругуюОрганизацию = ЗапросДокументыСписанияДСВДругуюОрганизацию.Выполнить().Выбрать();
		   
		   ВыборкаПоиска.Сбросить();
		   
		   НомерДляПоискаДок = СтрокаДокумента.Номер;
		   
		   ДлинаНомера = СтрДлина(НомерДляПоискаДок);
		   
		   Пока ДокументыСписанияДСВДругуюОрганизацию.Следующий() Цикл
			   
			   ВыборкаНомер = Прав(СокрЛП(ДокументыСписанияДСВДругуюОрганизацию.Номер), ДлинаНомера);
			   
			   Если ВыборкаНомер = НомерДляПоискаДок Тогда
				   
				   СтрокаДокумента.Документ    = ДокументыСписанияДСВДругуюОрганизацию.Ссылка;
				   СтрокаДокумента.Номер       = ДокументыСписанияДСВДругуюОрганизацию.Номер;
				   СтрокаДокумента.НомерДок    = ДокументыСписанияДСВДругуюОрганизацию.Номер;
				   СтрокаДокумента.ВидОперации = ДокументыСписанияДСВДругуюОрганизацию.ХозяйственнаяОперация;
				   
				   НайденДокументСписания = Истина;
				   
				   Прервать;
				   
			   КонецЕсли;
			   
		   КонецЦикла;
		   
	   	КонецЕсли;
	   		
		Если (ВыборкаПоиска.Количество() = 0
		 ИЛИ ОперацияПоОплатеДСВДругуюОрганизацию)
		 И НЕ НайденДокументСписания Тогда
			
			ЗапросПоискаСчета.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Владелец,
			|	БанковскиеСчета.Ссылка,
			|	БанковскиеСчета.НомерСчета
			|ИЗ
			|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента
			|	И БанковскиеСчета.НомерСчета = &НомерСчета";
			
			ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
			
			Контрагент = Справочники.Контрагенты.ПустаяСсылка()
			
		КонецЕсли;
				
		Если ВыборкаПоиска.Следующий() Тогда
			
			СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
			Контрагент = ВыборкаПоиска.Владелец;
			
		Иначе  
			
			ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден счет контрагента (%1)!'"), СчетКонтрагента));
			СтрокаДокумента.СчетКонтрагента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден (%1)'"), СчетКонтрагента);
			
		КонецЕсли;
		
		Если ВыборкаПоиска.Количество() > 1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В информационной базе найдено несколько (%1) одинаковых банковских счетов!'"), ВыборкаПоиска.Количество()));
		КонецЕсли;
	КонецЕсли;
	
	// Проверка на корректность БИКа плательщика/получателя.
	Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
		
		Длина = СтрДлина(СтрокаДокумента.ПлательщикБИК);
		
		Если (Длина = 9 И Лев(СтрокаДокумента.ПлательщикБИК, 2) <> "04")
		 ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПлательщикБИК, 1) <> "4")
		 ИЛИ (Длина < 8) Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Некорректный БИК (%1) плательщика!'"), СтрокаДокумента.ПлательщикБИК));
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПлательщикБИК = "0" + СтрокаДокумента.ПлательщикБИК;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
		
		Длина = СтрДлина(СтрокаДокумента.ПолучательБИК);
		
		Если (Длина = 9 И Лев(СтрокаДокумента.ПолучательБИК, 2) <> "04")
		 ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПолучательБИК, 1) <> "4")
		 ИЛИ (Длина < 8) Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Некорректный БИК (%1) получателя!'"), СтрокаДокумента.ПолучательБИК));
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПолучательБИК = "0" + СтрокаДокумента.ПолучательБИК;
		КонецЕсли;
		
	КонецЕсли;
		
	// 7) Определим контрагента.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			
		ИначеЕсли НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			
			ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
													|	Контрагенты.Ссылка,
													|	Контрагенты.ИНН,
													|	Контрагенты.Наименование,
													|	Контрагенты.КПП
													|ИЗ
													|	Справочник.Организации КАК Контрагенты
													|ГДЕ
													|	Контрагенты.ИНН = &КонтрагентИНН");
			                                            			
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
			
			Если ИмяДокумента = "Поступление безналичных денежных средств"
	   		   И ВыборкаПоиска.Количество() > 0 Тогда
			   
			   ОперацияПоОплатеДСВДругуюОрганизацию = Истина;
			   
		   	КонецЕсли;
		         			
			Если (ВыборкаПоиска.Количество() = 0
			 ИЛИ ОперацияПоОплатеДСВДругуюОрганизацию)
			 И НЕ НайденДокументСписания Тогда
				
				ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
														|	Контрагенты.Ссылка,
														|	Контрагенты.ИНН,
														|	Контрагенты.Наименование,
														|	Контрагенты.КПП
														|ИЗ
														|	Справочник.Контрагенты КАК Контрагенты
														|ГДЕ
														|	Контрагенты.ИНН = &КонтрагентИНН");
														
				ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);										
				ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();										
				
			КонецЕсли;
						
			// Ищем контрагента по ИНН, если указан КПП, то и по нему.
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
			Если Не ПустаяСтрока(КППКонтрагента)Тогда
				ПараметрыОтбора.Вставить("КПП", КППКонтрагента);
			КонецЕсли;
			НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			
			// Если не нашли по ИНН и по КПП, то попробуем поискать только по ИНН.
			Если НайденныеКонтрагенты.Количество() = 0
			   И НЕ ПустаяСтрока(КППКонтрагента) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
				НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество() > 0 Тогда
				
				СтрокаДокумента.Контрагент = НайденныеКонтрагенты[0].Ссылка;
				
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество() > 1 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='В информационной базе найдено несколько (%1) контрагентов с одинаковым ИНН!'"), НайденныеКонтрагенты.Количество()));
			ИначеЕсли НайденныеКонтрагенты.Количество() = 0 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден контрагент (%1, ИНН %2)!'"), ИмяКонтрагента, ИННКонтрагента));
				СтрокаДокумента.Контрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден (%1, ИНН %2)'"), ИмяКонтрагента, ИННКонтрагента);
			КонецЕсли;

		Иначе
			
			ДобавитьЗамечание(СтрокаДокумента, 2, НСтр("ru='Не указан ИНН контрагента.'"));
			СтрокаДокумента.Контрагент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не найден (%1, не указан ИНН)'"), ИмяКонтрагента);
			
		КонецЕсли;
		
	КонецЕсли;
		
	// 8) Определим статью ДДС по умолчанию.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		СтрокаДокумента.СтатьяДДС = ПолучитьНастройкуЗаполнения(ИмяДокумента, "СтатьяДДС", НастройкаЗаполнения);
	КонецЕсли;
	
	// 9) Определим статью доходов/расходов по умолчанию.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СтатьяДоходовИлиРасходов) Тогда
		СтрокаДокумента.СтатьяДоходовИлиРасходов = ПолучитьНастройкуЗаполнения(ИмяДокумента, "СтатьяДоходовИлиРасходов", НастройкаЗаполнения);
	КонецЕсли;
	
	// 10) Определим подразделение по умолчанию.
	Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Подразделение) Тогда
		СтрокаДокумента.Подразделение = ПолучитьНастройкуЗаполнения(ИмяДокумента, "Подразделение", НастройкаЗаполнения);
	КонецЕсли;
			
	// 11) Определим сумму.
	
	// Преобразуем из строки в число.
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если НЕ ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""), "-", ""), ",", "")) Тогда
		
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;      
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента = Сумма;
		Если Исходящий Тогда
			СтрокаДокумента.СуммаСписано = Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило = Сумма;
		КонецЕсли;
		
	Иначе
		
		ДобавитьЗамечание(СтрокаДокумента, 4, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Указана неверная сумма документа (%1)!'"), Буфер));
		
	КонецЕсли;
		
	// 12) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = Дата("00010101");
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
		
	Иначе
		
		СтрокаДокумента.Списано = Дата("00010101");
		
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая.
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = Дата("00010101");
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
		
	Иначе
		
		СтрокаДокумента.Поступило = Дата("00010101");
		
	КонецЕсли;
	
	// 13) Определим очередность платежа
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер <> "" И НЕ ЕстьНеЦифры(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа = Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
	КонецЕсли;
	
	// 14) Переопределяем вид операции документа, если документ присутствует в ИБ.
	Если ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		
		СтрокаДокумента.ВидОперации = СтрокаДокумента.Документ.ХозяйственнаяОперация;
						
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаДокумента.Документ) Тогда
		ЗаполнитьТипПлатежногоДокумента(
			Организация,
			БанковскийСчет,
			СтрокаДокумента.ВидОперации,
			СтрокаДокумента.СуммаДокумента,
			СтрокаДокумента.ТипПлатежногоДокумента,
			СтрокаДокумента.Документ
		);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства)
	
	ИмпортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН");
	
	// По наличию статуса составителя определяется, что платеж налоговый.
	ИмпортНеПустые_ПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН," +
	"СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования," +
	"ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа");
	
	Импорт_НеПустые = Новый Массив;
	
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручение);
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручениеБюджет);
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если Импорт_НеПустые[ВариантНеПустых][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
						
			Стр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не заполнен реквизит ""%1""!'"), ПредставлениеСвойства);
						
			ДобавитьЗамечание(СтрокаИмпорта, 3, Стр);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если ТипДокумента < 3
	 ИЛИ ТипДокумента = 11
	 ИЛИ ТипДокумента = 12 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Процедура СписокНеНайденных(СтрокаДокумента, БанковскийСчет, ТаблицаКонтрагентов)

	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент) <> Тип("Строка");
	НайденСчет       = ТипЗнч(СтрокаДокумента.СчетКонтрагента) <> Тип("Строка");
		
	ТипКонтрагента = ?(СокрЛП(СтрокаДокумента.ПлательщикСчет) = СокрЛП(БанковскийСчет.НомерСчета), "ПОЛУЧАТЕЛЬ", "ПЛАТЕЛЬЩИК");
		
	НайденнаяЗаписьОКонтрагенте = НайтиЭлементДерева(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Значение", СтрокаДокумента[ТипКонтрагента + "ИНН"]);
	
	// Контрагент
	Если НайденнаяЗаписьОКонтрагенте = Неопределено Тогда
		
		НовыйКонтрагент = ТаблицаКонтрагентов.ПолучитьЭлементы().Добавить();
		
		Окончание = ?(СтрокаДокумента[ТипКонтрагента + "1"] = "", "", "1");
		
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента + Окончание];
		НовыйКонтрагент.НомСтроки     = СтрокаДокумента.НомерСтроки;
	
		ДобавитьОписаниеНовогоРеквизита("Наименование", Окончание, ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН"		  , "ИНН"	 , ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП"		  , "КПП"	 , ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
				
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
		КонецЕсли;

	Иначе
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.ПолучитьРодителя();
		
		Если НовыйКонтрагент = Неопределено Тогда
			НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте;
		КонецЕсли;
			
	КонецЕсли;
	
	НайденныеСтроки = НайтиЭлементДерева(ТаблицаКонтрагентов.ПолучитьЭлементы(), "Значение", СтрокаДокумента[ТипКонтрагента + "СЧЕТ"]);
	
	Если НЕ НайденСчет И НайденныеСтроки = Неопределено Тогда
			
		РеквизитыНовогоКонтрагента = ДобавитьОписаниеНовогоРеквизита("Р/счет", "СЧЕТ", ТипКонтрагента, НовыйКонтрагент.ПолучитьЭлементы(), СтрокаДокумента);
				
		ПрямыеРасчеты = ПустаяСтрока(СтрокаДокумента[ТипКонтрагента + "2"]);
		
		Если ПрямыеРасчеты Тогда
			
			ДобавитьОписаниеНовогоРеквизита("Банк",            "БАНК1",   ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",     "БАНК2",   ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код банка",       "БИК",     ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка", "КОРСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			
		Иначе
			
			ДобавитьОписаниеНовогоРеквизита("Банк",                     "3",        ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка",              "4",        ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка",          "РАСЧСЧЕТ", ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("РЦ банка",                 "БАНК1",    ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Местонахождение РЦ банка", "БАНК2",    ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код РЦ банка",             "БИК",      ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет РЦ банка",       "КОРСЧЕТ",  ТипКонтрагента, РеквизитыНовогоКонтрагента.ПолучитьЭлементы(), СтрокаДокумента);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка, Импорт_ТекущаяСтрока, Импорт_Заголовок)
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Если ТипЗнч(Импорт_Заголовок) = Тип("Неопределено") Тогда
		Импорт_Заголовок = Новый Структура(СтрокаТегов);
	КонецЕсли;
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Неверный реквизит заголовка, строка %1 : %2'"), Импорт_ТекущаяСтрока - 1, ТекстСтрокиЗаголовка);
					
		Сообщение.Сообщить();
		
	КонецЕсли;
		
КонецФункции

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой'");
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат НСтр("ru='Неверный формат строки с датой'");
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	
	Если СтрДлина(ГодДаты) = 2 Тогда
		
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		
		Возврат НСтр("ru='Не удалось преобразовать строку в дату'");
		
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Функция ЕстьНеЦифры(Знач СтрокаПроверки)

	Если ТипЗнч(СтрокаПроверки) <> Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Длина = СтрДлина(СтрокаПроверки);
	
	Для Ном = 1 По Длина Цикл
		Если Найти("0123456789", Сред(СтрокаПроверки, Ном, 1)) = 0 Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПоискБанковскогоСчета(Номер)
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчетаОрганизаций.Ссылка
	               |ИЗ
	               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
	               |Где
	               |	БанковскиеСчетаОрганизаций.НомерСчета =&Номер";
				   
	Запрос.УстановитьПараметр("Номер", Номер);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
				
		Возврат Результат.Выгрузить()[0].Ссылка;
		
	Иначе
		
		Возврат Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНастройкуЗаполнения(ИмяДокумента, ИмяПараметра, НастройкаЗаполнения)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Документ", ИмяДокумента);
	
	НайденныеСтроки = НастройкаЗаполнения.НайтиСтроки(ПараметрыОтбора);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0][ИмяПараметра];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьОписаниеНовогоРеквизита(Представление, Реквизит, ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента)

	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Добавить();
		
	РеквизитыНовогоКонтрагента.Представление = Представление;
	РеквизитыНовогоКонтрагента.Значение      = СтрокаДокумента[ТипКонтрагента + Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит      = ТипКонтрагента + Реквизит;
	
    Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции

Процедура СоздатьДокументыВыпискаПоРасчетномуСчету(ДокументыКИмпорту, Организация, БанковскийСчет, Импорт_Заголовок)
	
	Перем ДатаНачала;
	Перем ДатаКонца;

	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|   ВыпискаПоРасчетномуСчету.Ссылка КАК Ссылка,
	|   ВыпискаПоРасчетномуСчету.Проведен КАК Проведен,
	|	КОНЕЦПЕРИОДА(ВыпискаПоРасчетномуСчету.Дата, День) КАК ДатаДок,
	|	ВыпискаПоРасчетномуСчету.Организация КАК Организация,
	|	ВыпискаПоРасчетномуСчету.БанковскийСчет КАК БанковскийСчет
	|ИЗ
	|	Документ.ВыпискаПоРасчетномуСчету КАК ВыпискаПоРасчетномуСчету
	|ГДЕ
	|	Организация = &Организация
	|	И БанковскийСчет = &БанковскийСчет
	|	И Дата >= &ДатаНачала
	|	И Дата <= &ДатаКонца
	|";
	
	ЗапросВыписокПоРасчетномуСчету = Новый Запрос(ТекстЗапроса);
	ЗапросВыписокПоРасчетномуСчету.УстановитьПараметр("Организация",    Организация);
	ЗапросВыписокПоРасчетномуСчету.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
	ЗапросВыписокПоРасчетномуСчету.УстановитьПараметр("ДатаНачала",     НачалоДня(ПолучитьДатуИзСтроки(ДатаНачала, Импорт_Заголовок.ДатаНачала)));
	ЗапросВыписокПоРасчетномуСчету.УстановитьПараметр("ДатаКонца",      КонецДня(ПолучитьДатуИзСтроки(ДатаКонца, Импорт_Заголовок.ДатаКонца)));
	РезультатЗапроса = ЗапросВыписокПоРасчетномуСчету.Выполнить().Выгрузить();
		
	Для Каждого Выписка Из РезультатЗапроса Цикл
		
		ОбъектДокументаВыпискаПоРасчетномуСчету         = Выписка.Ссылка.ПолучитьОбъект();
		ПровестиОбъектДокументаВыпискаПоРасчетномуСчету = Выписка.Проведен;
		
		ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи.Очистить();
		ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи.Очистить();
		
		Попытка
			
			ОбъектДокументаВыпискаПоРасчетномуСчету.Записать(РежимЗаписиДокумента.Запись);
			
		Исключение
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""Выписка по расчетному счету"" № %1 от %2 не очищен! Произошли ошибки при записи!'"), ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, ОбъектДокументаВыпискаПоРасчетномуСчету.Дата);
			Сообщение.Сообщить();
			
		КонецПопытки;
		
		Если ПровестиОбъектДокументаВыпискаПоРасчетномуСчету Тогда
			
			Если ОбъектДокументаВыпискаПоРасчетномуСчету.ПроверитьЗаполнение() Тогда
				
				Попытка
					
					ОбъектДокументаВыпискаПоРасчетномуСчету.Записать(РежимЗаписиДокумента.Проведение);
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""Выписка по расчетному счету"" № %1 от %2 не очищен! Произошли ошибки при проведении!'"), ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, ОбъектДокументаВыпискаПоРасчетномуСчету.Дата);
					Сообщение.Сообщить();
					
				КонецПопытки
				
			Иначе
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""Выписка по расчетному счету"" № %1 от %2 не очищен! Произошли ошибки при проведении!'"), ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, ОбъектДокументаВыпискаПоРасчетномуСчету.Дата);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	ТаблицаДокументовКИмпорту = ДокументыКИмпорту.Выгрузить();
	
	ТаблицаДокументовКИмпорту.Сортировать("ДатаПроведения");
				
	Пока ТаблицаДокументовКИмпорту.Количество() > 0 Цикл
		
		ДатаПроведения = ТаблицаДокументовКИмпорту[0].ДатаПроведения;
		
		СтрокаТаблЗнач = РезультатЗапроса.Найти(КонецДня(ДатаПроведения), "ДатаДок");
		
		Если СтрокаТаблЗнач = Неопределено Тогда
			
			ОбъектДокументаВыпискаПоРасчетномуСчету = Документы["ВыпискаПоРасчетномуСчету"].СоздатьДокумент();
			ОбъектДокументаВыпискаПоРасчетномуСчету.Организация    = Организация;
			ОбъектДокументаВыпискаПоРасчетномуСчету.БанковскийСчет = БанковскийСчет;
			ОбъектДокументаВыпискаПоРасчетномуСчету.Дата           = КонецДня(ДатаПроведения);
			
			ОбъектДокументаВыпискаПоРасчетномуСчету.УстановитьНовыйНомер();
			
			СозданНовыйДокумент = Истина;
			
		Иначе
			
			ОбъектДокументаВыпискаПоРасчетномуСчету         = СтрокаТаблЗнач.Ссылка.ПолучитьОбъект();
			
			СозданНовыйДокумент = Ложь;
			
		КонецЕсли;
		
		Пока ТаблицаДокументовКИмпорту[0].ДатаПроведения = ДатаПроведения Цикл
			
			Если НЕ ЗначениеЗаполнено(ТаблицаДокументовКИмпорту[0].ДатаСписано)
				И НЕ ЗначениеЗаполнено(ТаблицаДокументовКИмпорту[0].ДатаПоступило) Тогда
				
				ТаблицаДокументовКИмпорту.Удалить(0);
				
				Если ТаблицаДокументовКИмпорту.Количество() = 0 Тогда
					Прервать;
				Иначе
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТаблицаДокументовКИмпорту[0].ИмяДокумента = "Поступление безналичных денежных средств" Тогда
				ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть = ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи;
				
			ИначеЕсли ТаблицаДокументовКИмпорту[0].ИмяДокумента = "Списание безналичных денежных средств" Тогда
				ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть = ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи;
				
			ИначеЕсли ТаблицаДокументовКИмпорту[0].ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте
			 ИЛИ ТаблицаДокументовКИмпорту[0].ВидОперации = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
				ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть = ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи;
				
			ИначеЕсли ТаблицаДокументовКИмпорту[0].ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту
			 ИЛИ ТаблицаДокументовКИмпорту[0].ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
				ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть = ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТаблицаДокументовКИмпорту[0].Документ) Тогда
				
				СтрокаОбъектДокументаВыпискаПоРасчетномуСчету = ОбъектДокументаВыпискаПоРасчетномуСчетуТаблЧасть.Добавить();
				СтрокаОбъектДокументаВыпискаПоРасчетномуСчету.ПлатежныйДокумент = ТаблицаДокументовКИмпорту[0].Документ;
				
				СтрокаОбъектДокументаВыпискаПоРасчетномуСчету.Сумма = ТаблицаДокументовКИмпорту[0].СуммаДокумента;
				
			КонецЕсли;
			
			ТаблицаДокументовКИмпорту.Удалить(0);
			
			Если ТаблицаДокументовКИмпорту.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
				
		Если ОбъектДокументаВыпискаПоРасчетномуСчету.Модифицированность()
		   И (ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи.Количество() > 0
		 ИЛИ ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи.Количество() > 0) Тогда	
			
			Попытка
				
				ОбъектДокументаВыпискаПоРасчетномуСчету.Записать(РежимЗаписиДокумента.Запись);
				
				Если СозданНовыйДокумент Тогда
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 документ ""Выписка по расчетному счету"" № %2 от %3.'"), ?(СозданНовыйДокумент, "Создан", "Перезаписан"), ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, ОбъектДокументаВыпискаПоРасчетномуСчету.Дата);
					Сообщение.Сообщить();
					
				КонецЕсли;
				
			Исключение
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""Выписка по расчетному счету"" № %1 от %2 не %3! Произошли ошибки при записи!'"), ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, ОбъектДокументаВыпискаПоРасчетномуСчету.Дата, ?(СозданНовыйДокумент, "создан", "перезаписан"));
				Сообщение.Сообщить();
				
			КонецПопытки;
			
			Если ОбъектДокументаВыпискаПоРасчетномуСчету.ПометкаУдаления Тогда
				ОбъектДокументаВыпискаПоРасчетномуСчету.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			
			Если ОбъектДокументаВыпискаПоРасчетномуСчету.ПроверитьЗаполнение()
				И ОбъектДокументаВыпискаПоРасчетномуСчету.Дата <= КонецДня(ТекущаяДата()) Тогда
				
				Попытка
					
					ОбъектДокументаВыпискаПоРасчетномуСчету.Записать(РежимЗаписиДокумента.Проведение);
					
					Если СозданНовыйДокумент Тогда
						
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 документ ""Выписка по расчетному счету"" № %2 от %3.'"), ?(СозданНовыйДокумент, "Проведен", "Перепроведен"), ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, ОбъектДокументаВыпискаПоРасчетномуСчету.Дата);
						Сообщение.Сообщить();
						
					КонецЕсли;
					
				Исключение
					
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""Выписка по расчетному счету"" № %1 от %2 не %3! Произошли ошибки при проведении!'"), ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, ОбъектДокументаВыпискаПоРасчетномуСчету.Дата, ?(СозданНовыйДокумент, "проведен", "перепроведен"));
					Сообщение.Сообщить();
					
				КонецПопытки
				
			Иначе	
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Документ ""Выписка по расчетному счету"" № %1 от %2 не %3! Произошли ошибки при проведении!'"), ОбъектДокументаВыпискаПоРасчетномуСчету.Номер, ОбъектДокументаВыпискаПоРасчетномуСчету.Дата, ?(СозданНовыйДокумент, "проведен", "перепроведен"));
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		ИначеЕсли НЕ ОбъектДокументаВыпискаПоРасчетномуСчету.Ссылка.Пустая()
				И ОбъектДокументаВыпискаПоРасчетномуСчету.ВходящиеПлатежи.Количество() = 0
		 		И ОбъектДокументаВыпискаПоРасчетномуСчету.ИсходящиеПлатежи.Количество() = 0 Тогда
			
			ОбъектДокументаВыпискаПоРасчетномуСчету.УстановитьПометкуУдаления(Истина);	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьДокументДляЗагрузки(СтруктураДокумента)
	
	Результат = "";
	
	Если СтруктураДокумента.Готовность > 3 Тогда
		Результат = СтруктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьРеквизитыДокументаПоступлениеБезналичныхДенежныхСредств(ОбъектДокумента, ТипДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация)
	
	// Организация, дата, номер.
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация, , ЭтоНовыйДокумент);
	
	Если ЭтоНовыйДокумент Тогда

		ДатаДокумента = Дата("00010101");
		УстановитьСвойство(ОбъектДокумента, "Дата", КонецДня(ПолучитьДатуИзСтроки(ДатаДокумента, СтрокаСекции.ДатаПоступило)), , ЭтоНовыйДокумент);

	КонецЕсли;
		
	// Контрагент
	УстановитьСвойство(ОбъектДокумента, "Контрагент", СтрокаСекции.Контрагент, , ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", СтрокаСекции.СтатьяДДС, , ЭтоНовыйДокумент);
	
	// СтатьяДвиженияДенежныхСредств.
	Партнер = Неопределено;
	Если СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента
	 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика Тогда
	 
	 Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
		 	Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДокумента.Контрагент, "Партнер");
			Если НЕ ЗначениеЗаполнено(Партнер) Тогда
				Партнер = ПолучитьПартнераИзРегистраСведенийАналитикаУчетаПоПартнерам(Организация, ОбъектДокумента.Контрагент);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Партнер) Тогда
				Партнер = Справочники.Партнеры.НеизвестныйПартнер;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
	// НазначениеПлатежа.
	Если ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа1) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа1;
		
		Для Ном = 2 По 6 Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСекции["НазначениеПлатежа" + Ном]) Тогда
				Прервать;
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + СтрокаСекции["НазначениеПлатежа" + Ном];
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа;	
		
		НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, "");
		
	Иначе
		
		НазначениеПлатежа = "";
		
	КонецЕсли;
	
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
		
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		
		ОрганизацияРасчетов = Организация;
		ВалютаДенежныхСредствРасчетов = СтрокаСекции.СчетОрганизации.ВалютаДенежныхСредств;
		КонтрагентРасчетов = СтрокаСекции.Контрагент;
		ПартнерРасчетов = Партнер;
		ВидОперацииРасчетов = СтрокаСекции.ВидОперации;
		ДатаРасчетов = СтрокаСекции.ДатаДок;
					
		ТаблицаОстатковРасчетов = Неопределено;
		
		ЗаполнитьТаблицуПоРасчетамСПартнерами(ОрганизацияРасчетов, ВалютаДенежныхСредствРасчетов, КонтрагентРасчетов, ПартнерРасчетов, ВидОперацииРасчетов, ДатаРасчетов, ТаблицаОстатковРасчетов, 0);
		
		Если  ВидОперацииРасчетов = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента")
			ИЛИ  ВидОперацииРасчетов = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту") Тогда
			ЭтоРасчетыСКлиентами = Истина;
		Иначе
			ЭтоРасчетыСКлиентами = Ложь;
		КонецЕсли;
		 		
		Если ЭтоРасчетыСКлиентами Тогда
			ТекстЗапроса = ВзаиморасчетыСервер.ПолучитьТекстЗапросаДокументыРасчетовСКлиентами(Истина);
		Иначе
			ТекстЗапроса = ВзаиморасчетыСервер.ПолучитьТекстЗапросаДокументыРасчетовСПоставщиками();
		КонецЕсли;
		
		ЗапросДокументов = Новый Запрос;
		ЗапросДокументов.Текст = ТекстЗапроса;
		ЗапросДокументов.УстановитьПараметр("Дата", ДатаРасчетов);
		ЗапросДокументов.УстановитьПараметр("Организация", ОрганизацияРасчетов);
		ЗапросДокументов.УстановитьПараметр("Контрагент", КонтрагентРасчетов);
		ЗапросДокументов.УстановитьПараметр("Партнер", ПартнерРасчетов);
        ЗапросДокументов.УстановитьПараметр("ВыборОснованияПлатежа", Истина);
        
		ТаблицаДокументов = ЗапросДокументов.Выполнить().Выгрузить();
		
		ТаблицаОстатковРасчетов.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
		ТаблицаОстатковРасчетов.Колонки.Добавить("ОснованиеПлатежа");
        		
		СчетчикСтрок=0;
		РаспределяемаяСумма = СтрокаСекции.СуммаДокумента;
		
		Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицы.Заказ)) Тогда
				
				СтрокаТаблицыДокументов = ТаблицаДокументов.Найти(СтрокаТаблицы.Заказ, "Ссылка");
				
				Если НЕ СтрокаТаблицыДокументов = Неопределено Тогда
					СтрокаТаблицы.ОснованиеПлатежа = СтрокаТаблицыДокументов.ОбъектРасчетов;
				КонецЕсли;
				
				Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СтрокаТаблицы.Заказ)) Тогда
					
					НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТаблицы.ОснованиеПлатежа.Номер);
					Если СтрЧислоВхождений(НазначениеПлатежа, НомерДокументаРасчетов)>0 Тогда
						
						Если СчетчикСтрок > 0 Тогда
							СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
						КонецЕсли;	
						
						СчетчикСтрок = СчетчикСтрок + 1;
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						УстановитьСвойство(СтрокаРасшифровки, "Партнер", Партнер, , ЭтоНовыйДокумент);
						УстановитьСвойство(СтрокаРасшифровки, "Подразделение", СтрокаСекции.Подразделение, , ЭтоНовыйДокумент);
						УстановитьСвойство(СтрокаРасшифровки, "Сумма", СуммаСтроки, , ЭтоНовыйДокумент);
						УстановитьСвойство(СтрокаРасшифровки, "ОснованиеПлатежа", СтрокаТаблицы.ОснованиеПлатежа, , ЭтоНовыйДокумент);
						УстановитьСвойство(СтрокаРасшифровки, "Заказ", СтрокаТаблицы.Заказ, , ЭтоНовыйДокумент);				
						УстановитьСвойство(СтрокаРасшифровки, "СтатьяРасходов", СтрокаСекции.СтатьяДоходовИлиРасходов, , ЭтоНовыйДокумент);
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		
		Если РаспределяемаяСумма > 0 Тогда
			
			Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Заказ) Тогда
					Если СтрокаТаблицы.Обработано Тогда
						Продолжить;
					КонецЕсли;	
					НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТаблицы.Заказ.Номер);
					
					Если СчетчикСтрок > 0 Тогда
						СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
					КонецЕсли;	
					
					СчетчикСтрок = СчетчикСтрок + 1;
					
					СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
					РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
									
					УстановитьСвойство(СтрокаРасшифровки, "Партнер", Партнер, , ЭтоНовыйДокумент);
					УстановитьСвойство(СтрокаРасшифровки, "Подразделение", СтрокаСекции.Подразделение, , ЭтоНовыйДокумент);
					УстановитьСвойство(СтрокаРасшифровки, "Сумма", СуммаСтроки, , ЭтоНовыйДокумент);
					УстановитьСвойство(СтрокаРасшифровки, "ОснованиеПлатежа", СтрокаТаблицы.ОснованиеПлатежа, , ЭтоНовыйДокумент);
					УстановитьСвойство(СтрокаРасшифровки, "Заказ", СтрокаТаблицы.Заказ, , ЭтоНовыйДокумент);				
					УстановитьСвойство(СтрокаРасшифровки, "СтатьяРасходов", СтрокаСекции.СтатьяДоходовИлиРасходов, , ЭтоНовыйДокумент);
									
					СтрокаТаблицы.Обработано = Истина;
					
					Если РаспределяемаяСумма <= 0 Тогда
						Прервать;
					КонецЕсли;	
					
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
				
		Если РаспределяемаяСумма > 0 Тогда
			
			Если СчетчикСтрок > 0 Тогда
				СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
			КонецЕсли;	
						
			УстановитьСвойство(СтрокаРасшифровки, "Партнер", Партнер, , ЭтоНовыйДокумент);
			УстановитьСвойство(СтрокаРасшифровки, "Подразделение", СтрокаСекции.Подразделение, , ЭтоНовыйДокумент);
			УстановитьСвойство(СтрокаРасшифровки, "Сумма", РаспределяемаяСумма, , ЭтоНовыйДокумент);
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяРасходов", СтрокаСекции.СтатьяДоходовИлиРасходов, , ЭтоНовыйДокумент);
		КонецЕсли;
		
	КонецЕсли;

	
	// СчетОрганизации.
	УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", СтрокаСекции.СчетОрганизации, , ЭтоНовыйДокумент);

	// СчетКонтрагента.
	УстановитьСвойство(ОбъектДокумента, "БанковскийСчетКонтрагента", СтрокаСекции.СчетКонтрагента, , ЭтоНовыйДокумент);
	
	// Валюта.
	УстановитьСвойство(ОбъектДокумента, "Валюта", СтрокаСекции.СчетОрганизации.ВалютаДенежныхСредств, , ЭтоНовыйДокумент);
	
	// ТипПлатежногоДокумента.
	Если ЗначениеЗаполнено(СтрокаСекции.ВидДокумента)
	 И ЭтоНовыйДокумент Тогда
		Если СтрокаСекции.ВидДокумента = "МемориальныйОрдер" Тогда
			ОбъектДокумента.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер;
		Иначе
			ОбъектДокумента.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов[СтрокаСекции.ВидДокумента];
		КонецЕсли;
	КонецЕсли;
				
	// ВидОперации.
	УстановитьСвойство(ОбъектДокумента, "ХозяйственнаяОперация", СтрокаСекции.ВидОперации, , ЭтоНовыйДокумент);
	
	// СуммаДокумента.
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", СтрокаСекции.СуммаДокумента, Истина, ЭтоНовыйДокумент);
		
	// ДатаВходящегоДокумента.
	УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", СтрокаСекции.ДатаДок, , ЭтоНовыйДокумент);
	
	// НомерВходящегоДокумента.
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", СтрокаСекции.НомерДок, , ЭтоНовыйДокумент);
	
	Если ОбъектДокумента.ЭтоНовый() 
	 ИЛИ ОднаСтрокаВРасшифровкеПлатежа
	   И НЕ СтрокаРасшифровки.Сумма = ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.Сумма = ОбъектДокумента.СуммаДокумента;
						
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, Истина, ЭтоНовыйДокумент);
	
	УстановитьСвойство(ОбъектДокумента, "Комментарий", "#Загружен из клиент-банка", , ЭтоНовыйДокумент);
	
	Если ОбъектДокумента.ЭтоНовый() Тогда
		
		ОбъектДокумента.УстановитьНовыйНомер();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДокументаСписаниеБезналичныхДенежныхСредств(ОбъектДокумента, ТипДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация)
	
	// Организация, дата, номер.
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация, , ЭтоНовыйДокумент);
		
	Если ЭтоНовыйДокумент Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", КонецДня(СтрокаСекции.ДатаДок), , ЭтоНовыйДокумент);
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "Контрагент", СтрокаСекции.Контрагент, , ЭтоНовыйДокумент);
	УстановитьСвойство(ОбъектДокумента, "СтатьяДвиженияДенежныхСредств", СтрокаСекции.СтатьяДДС, , ЭтоНовыйДокумент);
	
	// Контрагент, партнер.
	Если СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаПоставщику
	 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту
	 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне Тогда
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) Тогда
	 		Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектДокумента.Контрагент, "Партнер");
			Если НЕ ЗначениеЗаполнено(Партнер) Тогда
				Партнер = ПолучитьПартнераИзРегистраСведенийАналитикаУчетаПоПартнерам(Организация, ОбъектДокумента.Контрагент);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Партнер) Тогда
				Партнер = Справочники.Партнеры.НеизвестныйПартнер;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// ПодотчетноеЛицо.
	Если СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику Тогда
		УстановитьСвойство(ОбъектДокумента, "ПодотчетноеЛицо", СтрокаСекции.Контрагент, , ЭтоНовыйДокумент);
	КонецЕсли;
		
	// БанковскийСчетПолучателя, БанковскийСчетКонтрагента.
	Если СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет
	 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
	 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
	 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
	 
	 	Если ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Организации")
		   И ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		   
		   УстановитьСвойство(ОбъектДокумента, "БанковскийСчетПолучатель", СтрокаСекции.СчетОрганизации, , ЭтоНовыйДокумент);
		 
	   	Иначе
		   
		 	УстановитьСвойство(ОбъектДокумента, "БанковскийСчетПолучатель", СтрокаСекции.СчетКонтрагента, , ЭтоНовыйДокумент);
			
	 	КонецЕсли;
		
	Иначе
		
		УстановитьСвойство(ОбъектДокумента, "БанковскийСчетКонтрагента", СтрокаСекции.СчетКонтрагента, , ЭтоНовыйДокумент);
		
	КонецЕсли;
		
	// СчетОрганизации, Валюта.
	Если ТипЗнч(СтрокаСекции.Контрагент) = Тип("СправочникСсылка.Организации")
	   И ТипЗнч(СтрокаСекции.СчетКонтрагента) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		
		УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", СтрокаСекции.СчетКонтрагента, , ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента, "Валюта", СтрокаСекции.СчетКонтрагента.ВалютаДенежныхСредств, , ЭтоНовыйДокумент);
		
	Иначе
		
		УстановитьСвойство(ОбъектДокумента, "БанковскийСчет", СтрокаСекции.СчетОрганизации, , ЭтоНовыйДокумент);
		УстановитьСвойство(ОбъектДокумента, "Валюта", СтрокаСекции.СчетОрганизации.ВалютаДенежныхСредств, , ЭтоНовыйДокумент);
		
	КонецЕсли;
	      	
	// ТипПлатежногоДокумента.
	Если ЗначениеЗаполнено(СтрокаСекции.ВидДокумента)
	 И ЭтоНовыйДокумент Тогда
		Если СтрокаСекции.ВидДокумента = "МемориальныйОрдер" Тогда
			ОбъектДокумента.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.БанковскийОрдер;
		Иначе
			ОбъектДокумента.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов[СтрокаСекции.ВидДокумента];
		КонецЕсли;	   
   	КонецЕсли;
   
    // НеКонтролироватьЗаполнениеЗаявки.
	Если СтрокаСекции.ВидДокумента = "ПлатежныйОрдер"
 	 ИЛИ СтрокаСекции.ВидДокумента = "БанковскийОрдер"
	 ИЛИ СтрокаСекции.ВидДокумента = "МемориальныйОрдер"
	 ИЛИ СтрокаСекции.ВидДокумента = "ИнкассовоеПоручение" Тогда
		ОбъектДокумента.НеКонтролироватьЗаполнениеЗаявки = Истина;
	КонецЕсли;
		
	// СуммаДокумента.
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", СтрокаСекции.СуммаДокумента, Истина, ЭтоНовыйДокумент);
	
	Если НЕ СтрокаСекции.ВидДокумента = "ПлатежноеПоручение" Тогда
		
		// ДатаВходящегоДокумента.
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", СтрокаСекции.ДатаДок, , ЭтоНовыйДокумент);
		
		// НомерВходящегоДокумента.
		УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", СтрокаСекции.НомерДок, , ЭтоНовыйДокумент);
		
	КонецЕсли;
	
	// ВидПлатежа.
	УстановитьСвойство(ОбъектДокумента, "ВидПлатежа", СтрокаСекции.ВидПлатежа, , ЭтоНовыйДокумент);
	
	// ОчередностьПлатежа.
	УстановитьСвойство(ОбъектДокумента, "ОчередностьПлатежа", СтрокаСекции.ОчередностьПлатежа, , ЭтоНовыйДокумент);

	Если ЗначениеЗаполнено(СтрокаСекции.СтатусСоставителя) Тогда
				
		// ПеречислениеВБюджет.
		УстановитьСвойство(ОбъектДокумента, "ПеречислениеВБюджет", Истина, , ЭтоНовыйДокумент);
		
		// Если статус составителя 08, в создаваемом документе устанавливается вид перечисления
	    // в бюджет «Иной платеж», если статус 06 или 16 – 20, вид перечисления «Таможенный платеж»,
	    // иначе – «Налоговый платеж».
		//
		Если СтрокаСекции.СтатусСоставителя = "08" Тогда
			
			СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств;
			
			УстановитьСвойство(ОбъектДокумента, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж, , ЭтоНовыйДокумент);
			
		ИначеЕсли СтрокаСекции.СтатусСоставителя = "06"
			  ИЛИ СтрокаСекции.СтатусСоставителя = "16"
			  ИЛИ СтрокаСекции.СтатусСоставителя = "17"
			  ИЛИ СтрокаСекции.СтатусСоставителя = "18"
			  ИЛИ СтрокаСекции.СтатусСоставителя = "19"
			  ИЛИ СтрокаСекции.СтатусСоставителя = "20" Тогда
			  
			СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеТаможне;
			  
			УстановитьСвойство(ОбъектДокумента, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж, , ЭтоНовыйДокумент); 
			
		Иначе
			
			СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет;
			
			УстановитьСвойство(ОбъектДокумента, "ВидПеречисленияВБюджет", Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж, , ЭтоНовыйДокумент); 
			
		КонецЕсли;
		 		
		// СтатусСоставителя.
		УстановитьСвойство(ОбъектДокумента, "СтатусСоставителя", СтрокаСекции.СтатусСоставителя, , ЭтоНовыйДокумент);
		
		// КодБК.
		УстановитьСвойство(ОбъектДокумента, "КодБК", СтрокаСекции.ПоказательКБК, , ЭтоНовыйДокумент);
		
		// КодОКАТО.
		УстановитьСвойство(ОбъектДокумента, "КодОКАТО", СтрокаСекции.ОКАТО, , ЭтоНовыйДокумент);
		
		// ПоказательОснования.
		УстановитьСвойство(ОбъектДокумента, "ПоказательОснования", СтрокаСекции.ПоказательОснования, , ЭтоНовыйДокумент);
		
		// ПоказательПериода.
		УстановитьСвойство(ОбъектДокумента, "ПоказательПериода", СтрокаСекции.ПоказательПериода, , ЭтоНовыйДокумент);
		
		// ПоказательНомера.
		УстановитьСвойство(ОбъектДокумента, "ПоказательНомера", СтрокаСекции.ПоказательНомера, , ЭтоНовыйДокумент);
		
		// ПоказательДаты.
		УстановитьСвойство(ОбъектДокумента, "ПоказательДаты", СтрокаСекции.ПоказательДаты, , ЭтоНовыйДокумент);
		
		// ПоказательТипа.
		УстановитьСвойство(ОбъектДокумента, "ПоказательТипа", СтрокаСекции.ПоказательТипа, , ЭтоНовыйДокумент);
		
	КонецЕсли;
	
	// НазначениеПлатежа.
	Если ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа1) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа1;
		
		Для Ном = 2 По 6 Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСекции["НазначениеПлатежа" + Ном]) Тогда
				Прервать;
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + СтрокаСекции["НазначениеПлатежа" + Ном];
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа;	
		
		НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, "");
		
	Иначе
		
		НазначениеПлатежа = "";
		
	КонецЕсли;
		
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, Истина, ЭтоНовыйДокумент);
    	
	Если НЕ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет Тогда
		
		Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
		Иначе
			СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
		КонецЕсли;
		
		ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
		
		Если ОднаСтрокаВРасшифровкеПлатежа Тогда
			
			Если СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
			 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию	
			 ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
				
				УстановитьСвойство(СтрокаРасшифровки, "Сумма", СтрокаСекции.СуммаДокумента, , ЭтоНовыйДокумент);
				
			Иначе
				
				ОрганизацияРасчетов = Организация;
				ВалютаДенежныхСредствРасчетов = СтрокаСекции.СчетОрганизации.ВалютаДенежныхСредств;
				КонтрагентРасчетов = СтрокаСекции.Контрагент;
				ПартнерРасчетов = Партнер;
                ВидОперацииРасчетов = СтрокаСекции.ВидОперации;
				ДатаРасчетов = СтрокаСекции.ДатаДок;
				
				ТаблицаОстатковРасчетов = Неопределено;
			                			
				ЗаполнитьТаблицуПоРасчетамСПартнерами(ОрганизацияРасчетов, ВалютаДенежныхСредствРасчетов, КонтрагентРасчетов, ПартнерРасчетов, ВидОперацииРасчетов, ДатаРасчетов, ТаблицаОстатковРасчетов, 0);
								
				ТаблицаОстатковРасчетов.Колонки.Добавить("Обработано", Новый ОписаниеТипов("Булево"));
				
				СчетчикСтрок=0;
				РаспределяемаяСумма = СтрокаСекции.СуммаДокумента;
	
				Для Каждого СтрокаТаблицы Из ТаблицаОстатковРасчетов Цикл
					Если НЕ ПустаяСтрока(СтрокаТаблицы.Заказ) Тогда
						Если СтрокаТаблицы.Обработано Тогда
							Продолжить;
						КонецЕсли;	
						НомерДокументаРасчетов = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаТаблицы.Заказ.Номер);
						Если СчетчикСтрок > 0 Тогда
							СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
						КонецЕсли;	
						
						СчетчикСтрок = СчетчикСтрок + 1;
						
						СуммаСтроки = Мин(РаспределяемаяСумма, СтрокаТаблицы.Сумма);
						РаспределяемаяСумма = РаспределяемаяСумма - СтрокаТаблицы.Сумма;
						
						УстановитьСвойство(СтрокаРасшифровки, "Партнер", Партнер, , ЭтоНовыйДокумент);
						УстановитьСвойство(СтрокаРасшифровки, "Подразделение", СтрокаСекции.Подразделение, , ЭтоНовыйДокумент);
						УстановитьСвойство(СтрокаРасшифровки, "Сумма", СуммаСтроки, , ЭтоНовыйДокумент);
						УстановитьСвойство(СтрокаРасшифровки, "Заказ", СтрокаТаблицы.Заказ, , ЭтоНовыйДокумент);				
						
						Если СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочиеРасходы
							ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
							УстановитьСвойство(СтрокаРасшифровки, "СтатьяРасходов", СтрокаСекции.СтатьяДоходовИлиРасходов, , ЭтоНовыйДокумент);
						КонецЕсли;
						
						СтрокаТаблицы.Обработано = Истина;
						
						Если РаспределяемаяСумма <= 0 Тогда
							Прервать;
						КонецЕсли;	
						
					КонецЕсли;	
				КонецЦикла;
								
				Если РаспределяемаяСумма > 0 Тогда
					
					Если СчетчикСтрок > 0 Тогда
						СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
					КонецЕсли;	

					
					УстановитьСвойство(СтрокаРасшифровки, "Партнер", Партнер, , ЭтоНовыйДокумент);
					УстановитьСвойство(СтрокаРасшифровки, "Подразделение", СтрокаСекции.Подразделение, , ЭтоНовыйДокумент);
					УстановитьСвойство(СтрокаРасшифровки, "Сумма", РаспределяемаяСумма, , ЭтоНовыйДокумент);
									
					Если СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПрочиеРасходы
						ИЛИ СтрокаСекции.ВидОперации = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет Тогда
						УстановитьСвойство(СтрокаРасшифровки, "СтатьяРасходов", СтрокаСекции.СтатьяДоходовИлиРасходов, , ЭтоНовыйДокумент);
					КонецЕсли;
					
				КонецЕсли;
 				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ВидОперации.
	УстановитьСвойство(ОбъектДокумента, "ХозяйственнаяОперация", СтрокаСекции.ВидОперации, , ЭтоНовыйДокумент);
	
	// НазначениеПлатежа.
	Если ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа1) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа1;
		
		Для Ном = 2 По 6 Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаСекции["НазначениеПлатежа" + Ном]) Тогда
				Прервать;
			КонецЕсли;
			
			НазначениеПлатежа = НазначениеПлатежа + Символы.ПС + СтрокаСекции["НазначениеПлатежа" + Ном];
			
		КонецЦикла;
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаСекции.НазначениеПлатежа) Тогда
		
		НазначениеПлатежа = СтрокаСекции.НазначениеПлатежа;	
		
		НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, "");
		
	Иначе
		
		НазначениеПлатежа = "";
		
	КонецЕсли;
		
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, Истина, ЭтоНовыйДокумент);
	
	УстановитьСвойство(ОбъектДокумента, "Комментарий", "#Загружен из клиент-банка", , ЭтоНовыйДокумент);
	
	Если ОбъектДокумента.ЭтоНовый() Тогда
		
		ОбъектДокумента.УстановитьНовыйНомер();
		
		Если СтрокаСекции.ВидДокумента = "ПлатежноеПоручение" Тогда
			
			Если НЕ ЕстьНеЦифры(СтрокаСекции.Номер) Тогда
				
				ОкончаниеНомера = Формат(Число(СокрЛП(СтрокаСекции.Номер)), "ЧН=; ЧГ=0");
				ДлинаНомера     = СтрДлина(СокрЛП(ОбъектДокумента.Номер));
				
				НомерПозиции = Найти(ОбъектДокумента.Номер, "-");
				
				Если НомерПозиции > 0 Тогда
					
					ОбъектДокумента.Номер = Лев(ОбъектДокумента.Номер, НомерПозиции + 1) + Формат(Число(ОкончаниеНомера), "ЧЦ=" + Строка(ДлинаНомера - (НомерПозиции + 1)) + "; ЧВН=; ЧГ=0");
					
				Иначе
					
					ОбъектДокумента.Номер = Организация.Префикс + Формат(Число(ОкончаниеНомера), "ЧЦ=" + Строка(ДлинаНомера - СтрДлина(Организация.Префикс)) + "; ЧВН=; ЧГ=0");
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОтчетаБанкаПоОперациямЭквайринга(ОбъектДокумента, ТипДокумента, СтрокаСекции, ЭтоНовыйДокумент, Организация)
	
	// Организация, дата, номер.
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация, , ЭтоНовыйДокумент);
		
	Если ЭтоНовыйДокумент Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", СтрокаСекции.ДатаДок, , ЭтоНовыйДокумент);
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "Валюта", СтрокаСекции.СчетКонтрагента.ВалютаДенежныхСредств, , ЭтоНовыйДокумент);
	
	ДоговорЭквайринга = Справочники.ДоговорыЭквайринга.ПолучитьДоговорЭквайрингаПоУмолчанию(Организация);
	УстановитьСвойство(ОбъектДокумента, "ДоговорЭквайринга", ДоговорЭквайринга, , ЭтоНовыйДокумент);
		
КонецПроцедуры

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = Ложь, ЭтоНовыйДокумент)
	
	Если НЕ ЗначениеСвойства = Неопределено
	   И НЕ Объект[ИмяСвойства] = ЗначениеСвойства Тогда
		
	   Если ЭтоНовыйДокумент 
		ИЛИ (НЕ ЗначениеЗаполнено(Объект[ИмяСвойства]) ИЛИ ОбязательнаяЗаменаСтарогоЗначения) 
		ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Булево") 
		ИЛИ ТипЗнч(Объект[ИмяСвойства]) = Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, " помечен на удаление", " отменена пометка на удаление");
		
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1:%2.'"), Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
						
		Сообщение.Сообщить();
		
	Исключение
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1: не %2! Произошли ошибки при записи!'"), Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), НазваниеДействия);
								
		Сообщение.Сообщить();
		
	КонецПопытки
	
КонецПроцедуры

Функция ПолучитьНазваниеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
					
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='документ ""Поступление безналичных денежных средств"" № %1 от %2'"), СокрЛП(Объект.Номер), Объект.Дата);
				
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
						
		НазваниеОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='документ ""Списание безналичных денежных средств"" № %1 от %2'"), СокрЛП(Объект.Номер), Объект.Дата);
						
	Иначе
		
		НазваниеОбъекта = НСтр("ru='объект'");
		
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
             	
КонецФункции

Процедура ЗаписатьОбъект(ОбъектДляЗаписи, СтрокаСекции, ЭтоНовыйДокумент, НастройкаЗаполнения, ПроводитьДокумент = Истина)
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	
	Если ТипДокумента = "ПоступлениеБезналичныхДенежныхСредств" Тогда
		ИмяДокумента = "Поступление безналичных денежных средств";
	ИначеЕсли ТипДокумента = "СписаниеБезналичныхДенежныхСредств" Тогда
		ИмяДокумента = "Списание безналичных денежных средств";	
	КонецЕсли;

	Проводить = (ПолучитьНастройкуЗаполнения(ИмяДокумента, "Проводить", НастройкаЗаполнения) = Истина);
	
	Если НЕ ПроводитьДокумент Тогда
		Проводить = Ложь;
	КонецЕсли;
							
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	
	Если ОбъектМодифицирован Тогда
		
		Попытка
			
			Если ОбъектПроведен Тогда
				
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
				
			Иначе
				
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
				
			КонецЕсли;
			
			Если ЭтоНовыйДокумент Тогда
				
				Сообщение = Новый СообщениеПользователю;
				
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2.'"), ?(ЭтоНовыйДокумент, "Создан ", "Перезаписан "), ПолучитьНазваниеОбъекта(ОбъектДляЗаписи));
				
				Сообщение.Сообщить();
				
			КонецЕсли;
			
		Исключение
			
			НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляЗаписи);
			
			// Запись события в журнал регистрации для системного администратора.
    		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись документа'"),
       								 УровеньЖурналаРегистрации.Ошибка, ,
									 ВРег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2),
       								 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Сообщение = Новый СообщениеПользователю;
						
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2! Произошли ошибки при записи!'"), Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2), ?(ЭтоНовыйДокумент, " не создан", " не записан"));
						
			Сообщение.Сообщить();
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	НазваниеОбъекта = ПолучитьНазваниеОбъекта(ОбъектДляЗаписи);

	Если Проводить
	   И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда
	   
	   Если ОбъектДляЗаписи.ПроверитьЗаполнение() Тогда
		   
		   Попытка
			   
			   ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			   
			   Если НЕ ОбъектПроведен Тогда
				   
				   Сообщение = Новый СообщениеПользователю;
				   
				   Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1%2'"), ?(ОбъектПроведен, "Перепроведен ", "Проведен "), НазваниеОбъекта);
				   
				   Сообщение.Сообщить();
				   
			   КонецЕсли;
			   
			   СтрокаСекции.Проведен = ОбъектДляЗаписи.Проведен;
			   
		   Исключение
			   
			   Сообщение = Новый СообщениеПользователю;
			   
			   Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 не проведен! Произошли ошибки при проведении!'"), Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2));
			   
			   Сообщение.Сообщить();
			   
		   КонецПопытки
		   
	   Иначе
		   
		   Сообщение = Новый СообщениеПользователю;
		   
		   Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 не проведен! Произошли ошибки при проведении!'"), Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2));
		   
		   Сообщение.Сообщить();
		   
	   КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция НайтиБанк(НаимБанка, ГородБанка, БИК, КоррСчет)
	
	НайденныйБанк = Справочники.КлассификаторБанковРФ.ПустаяСсылка();
	
	Если НЕ ПустаяСтрока(БИК) Тогда
		НайденныйБанк = Справочники.КлассификаторБанковРФ.НайтиПоКоду(БИК);
	КонецЕсли;
	
	Если НайденныйБанк = Справочники.КлассификаторБанковРФ.ПустаяСсылка() Тогда
		НайденныйБанк = Справочники.КлассификаторБанковРФ.НайтиПоРеквизиту("КоррСчет", КоррСчет);
	КонецЕсли;
	
	Если НЕ НайденныйБанк = Справочники.КлассификаторБанковРФ.ПустаяСсылка() Тогда
		
		Если НЕ НайденныйБанк.Наименование = НаимБанка
		 ИЛИ НЕ НайденныйБанк.Код = БИК
		 ИЛИ НЕ НайденныйБанк.Город = ГородБанка
		 ИЛИ НЕ НайденныйБанк.КоррСчет = КоррСчет Тогда
			Возврат Справочники.КлассификаторБанковРФ.ПустаяСсылка();
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат НайденныйБанк;

КонецФункции

Функция ПлатежныйДокументПоВидуОперации(ВидОперации, Организация, БанковскийСчет, СуммаДокумента)
	
	ТекстЗапроса = "";
	Если ВидОперации = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДанныеРегистра.Документ КАК Документ
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКПоступлениюБезналичные.Остатки(,
		|   	ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствКПоступлению.ВыдачаИзКассы)	
		|		И Организация = &Организация
		|		И БанковскийСчет = &БанковскийСчет
		|		И (Документ.СуммаДокумента = &СуммаДокумента ИЛИ &СуммаДокумента = 0)
		|	) КАК ДанныеРегистра
		|";
		
	ИначеЕсли ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДанныеРегистра.Документ КАК Документ
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКСписаниюБезналичные.Остатки(,
		|   	ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствКСписанию.СнятиеПоЧеку)	
		|		И Организация = &Организация
		|		И БанковскийСчет = &БанковскийСчет
		|		И (Документ.СуммаДокумента = &СуммаДокумента ИЛИ &СуммаДокумента = 0)
		|	) КАК ДанныеРегистра
		|";
		
	ИначеЕсли ВидОперации = Перечисления.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДанныеРегистра.Документ КАК Документ
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКПоступлениюБезналичные.Остатки(,
		|   	ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствКПоступлению.ПоступлениеОтБанкаПоЭквайрингу)	
		|		И Организация = &Организация
		|		И БанковскийСчет = &БанковскийСчет
		|	) КАК ДанныеРегистра
		|";
		
	ИначеЕсли ВидОперации = Перечисления.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ 2
		|	ДанныеРегистра.Документ КАК Документ
		|ИЗ
		|	РегистрНакопления.ДенежныеСредстваКСписаниюБезналичные.Остатки(,
		|   	ТипДенежныхСредств = ЗНАЧЕНИЕ(Перечисление.ТипыДенежныхСредствКСписанию.СписаниеБанкомПоЭквайрингу)	
		|		И Организация = &Организация
		|		И БанковскийСчет = &БанковскийСчет
		|	) КАК ДанныеРегистра
		|";
		
	КонецЕсли;
	
	ПлатежныйДокумент = Неопределено;
	
	Если Не ПустаяСтрока(ТекстЗапроса) Тогда
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("БанковскийСчет", БанковскийСчет);
		Запрос.УстановитьПараметр("СуммаДокумента", СуммаДокумента);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			
			Выборка.Следующий();
			ПлатежныйДокумент = Выборка.Документ;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПлатежныйДокумент;
	
КонецФункции

Процедура ЗаполнитьТаблицуПоРасчетамСПартнерами(Организация, Валюта, Контрагент, Партнер, ХозяйственнаяОперация, ДатаДокумента, ТаблицаОстатковРасчетов, СуммаДокумента)
	
	Реквизиты = Новый Структура("Дата, Организация, СуммаДокумента, Валюта, Контрагент, Партнер, ХозяйственнаяОперация",
		ДатаДокумента,
		Организация,
		СуммаДокумента,
		Валюта,
		Контрагент,
		Партнер,
		ХозяйственнаяОперация
	);
	
	АдресПлатежейВХранилище = "";
		
	ВзаиморасчетыСервер.ЗаполнитьТаблицуОстатковРасчетов(Реквизиты, АдресПлатежейВХранилище, ТаблицаОстатковРасчетов);
		
КонецПроцедуры


#КонецЕсли