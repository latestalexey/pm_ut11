////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Объект.НачПериода = ТекущаяДата();
	Объект.КонПериода = ТекущаяДата();
			
	НастройкаЗаполнения.Добавить().Документ = "Поступление безналичных денежных средств";
	НастройкаЗаполнения.Добавить().Документ = "Списание безналичных денежных средств";
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗагрузитьНастройкиПрограммыКлиентаБанка();
	
	Если ЗначениеЗаполнено(РежимПоУмолчанию) Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы[РежимПоУмолчанию];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
			
	РежимПоУмолчанию = Элементы.Страницы.ТекущаяСтраница.Имя;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_БанковскиеСчетаОрганизаций" И Источник = Объект.БанковскийСчет Тогда
		УстановитьЗначенияРеквизитовИзНастроекОбменаСКлиентомБанка();
	КонецЕсли;
		
	Если Параметр = ЭтаФорма Тогда
		ДокументыНаЭкспортОбновить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "ВыгрузкаДокументов" Тогда
		Объект.ПлатежныеДокументы.Очистить();
	КонецЕсли;
		
	ИзменитьБанковскийСчет(Элементы.Страницы.ТекущаяСтраница.Имя);
	
	Если Элементы.Страницы.ТекущаяСтраница.Имя = "ВыгрузкаДокументов" Тогда
		ВыгружатьПриИзменении(Неопределено);
	Иначе
		ДокументыКИмпорту.Очистить();
	КонецЕсли;
	
	УстановитьЗначенияРеквизитовИзНастроекОбменаСКлиентомБанка();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлДанных(Элемент, НСтр("ru='Выберите файл для выгрузки данных в клиента банка'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
		
	ОткрытьФайлДляПросмотра(Элемент, НСтр("ru='Файл выгрузки'"));
		
КонецПроцедуры

&НаКлиенте
Процедура НачПериодаПриИзменении(Элемент)
	
	Если Объект.НачПериода > Объект.КонПериода Тогда
		Предупреждение(НСтр("ru='Дата начала периода не должна быть больше даты окончания периода!'"));
		Объект.НачПериода = Объект.КонПериода;
		Возврат;
	КонецЕсли;
		
	ДокументыНаЭкспортОбновить();
	ВыгружатьПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КонПериодаПриИзменении(Элемент)
	
	Если Объект.КонПериода < Объект.НачПериода Тогда
		Предупреждение(НСтр("ru='Дата окончания периода не должна быть меньше даты начала периода!'"));
		Объект.КонПериода = Объект.НачПериода;
		Возврат;
	КонецЕсли;
	
	ДокументыНаЭкспортОбновить();
	ВыгружатьПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ВыгрузкаДокументов Тогда
			
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет)
			ИЛИ Объект.ПлатежныеДокументы.Количество() > 0 Тогда
			Возврат;
		КонецЕсли;

		ДокументыНаЭкспортОбновить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлДанных(Элемент, НСтр("ru='Выберите файл для загрузки данных из клиента банка'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФайлДляПросмотра(Элемент, НСтр("ru='Файл загрузки'"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ДОКУМЕНТЫ НА ЭКСПОРТ

&НаКлиенте
Процедура ДокументыНаЭкспортВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
			
	Если Поле.Имя = "Выгружать" Тогда
		
		Элемент.ТекущиеДанные.Выгружать = НЕ (Элемент.ТекущиеДанные.Выгружать);
				
	ИначеЕсли Поле.Имя = "ОписаниеОшибок" Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Элемент.ТекущиеДанные.ОписаниеОшибок);
				
		Сообщение.Сообщить();
	
	ИначеЕсли Поле.Имя = "НазначениеПлатежа" Тогда
				
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Элемент.ТекущиеДанные.НазначениеПлатежа));
		
	Иначе
		
		ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если НЕ Копирование Тогда
						
		ОткрытьФорму("Документ.СписаниеБезналичныхДенежныхСредств.Форма.ФормаДокумента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередНачаломИзменения(Элемент, Отказ)
		
	Если НЕ Элемент.ТекущийЭлемент.Имя = "Выгружать" Тогда
		
		Отказ = Истина;
						
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные) Тогда
			ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгружатьПриИзменении(Элемент)
	
	Сумма      = 0;
	Количество = 0;
	
	Для Каждого Строка Из Объект.ПлатежныеДокументы Цикл
		
		Если Строка.Выгружать Тогда
			
			Сумма      = Сумма + Строка.СуммаДокумента;
			Количество = Количество + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.Выгружать.ТекстПодвала = Формат(Количество, "ЧЦ=10");
	Элементы.СуммаДокумента.ТекстПодвала = Формат(Сумма, "ЧДЦ=2");
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ НАСТРОЙКА ЗАПОЛНЕНИЯ

&НаКлиенте
Процедура НастройкаЗаполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущийЭлемент.Имя = "НастройкаЗаполненияВидОперации" Тогда
		
		ТекущиеДанные = Элементы.НастройкаЗаполнения.ТекущиеДанные;
		ЗаполнитьСписокВыбораВидовОпераций(ТекущиеДанные.Документ, Элементы.НастройкаЗаполненияВидОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗаполненияВидОперацииПриИзменении(Элемент)
		
	Элементы.НастройкаЗаполнения.ТекущиеДанные.СтатьяДДС = ПолучитьСтатьюДДС(Элементы.НастройкаЗаполнения.ТекущиеДанные.ВидОперации);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЦЫ ФОРМЫ ДОКУМЕНТЫ К ИМПОРТУ

&НаКлиенте
Процедура ДокументыКИмпортуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДокументыКИмпортуЗагружать" Тогда
						
		Элемент.ТекущиеДанные.Загружать = НЕ (Элемент.ТекущиеДанные.Загружать);
		
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуОписаниеОшибок" Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Элемент.ТекущиеДанные.ОписаниеОшибок);
				
		Сообщение.Сообщить();
			
	ИначеЕсли Поле.Имя = "ДокументыКИмпортуНазначениеПлатежа" Тогда
				
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1'"), Элемент.ТекущиеДанные.НазначениеПлатежа));
				
	ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.Документ) Тогда 
		
		Если (Поле.Имя = "ДокументыКИмпортуНомерСтроки"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуНомерДок"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуДатаДок"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаПоступило"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуСуммаСписано"
		  ИЛИ Поле.Имя = "ДокументыКИмпортуДатаПроведения")
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуКонтрагент" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Контрагент)) 
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуСчетКонтрагента" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СчетКонтрагента)) 
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуСтатьяДДС" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатьяДДС))
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуСтатьяДоходовИлиРасходов" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатьяДоходовИлиРасходов))
		  ИЛИ (Поле.Имя = "ДокументыКИмпортуПодразделение" И ЗначениеЗаполнено(Элемент.ТекущиеДанные.Подразделение)) Тогда
			
			СтандартнаяОбработка = Ложь;
				
			ОткрытьЗначение(Элемент.ТекущиеДанные.Документ);
		
		КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	
	Если Элемент.ТекущийЭлемент.Имя = "ДокументыКИмпортуВидОперации" Тогда
		
		ЗаполнитьСписокВыбораВидовОпераций(ТекущиеДанные.ИмяДокумента, Элементы.ДокументыКИмпортуВидОперации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуВидОперацииПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДокументыКИмпорту.ТекущиеДанные;
	ДокументыКИмпортуВидОперацииПриИзмененииСервер(
		ТекущиеДанные.ВидОперации,
		Текущиеданные.СуммаДокумента,
		ТекущиеДанные.ТипПлатежногоДокумента,
		ТекущиеДанные.Документ
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Выгрузить(Команда)
	
	Элементы.ДокументыНаЭкспортОтчетОВыгрузке.Доступность = Ложь;
	
	Если Объект.ПлатежныеДокументы.Количество() > 0 Тогда
		
		ПроизвестиВыгрузку = КодВозвратаДиалога.Да;
		
		Если ПроизвестиВыгрузку = КодВозвратаДиалога.Да Тогда
			
			Если ВыгрузитьДокументыНаЭкспортНаКлиенте() Тогда
								
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Данные успешно выгружены в файл %1'"), Объект.ФайлВыгрузки);
								
				Предупреждение(ТекстПредупреждения);
				
				Элементы.ДокументыНаЭкспортОтчетОВыгрузке.Доступность = Истина;
				
			Иначе
								
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось записать данные в файл. Возможно, отсутствует каталог %1'"), Объект.ФайлВыгрузки);
								
				Предупреждение(ТекстПредупреждения);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
				
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Список документов для выгрузки пуст.%1Проверьте правильность указанного банковского счета и периода выгрузки.'"), Символы.ПС);
				
		Предупреждение(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуОтметитьВсе(Команда)
	
	Для Каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Истина;
	КонецЦикла;
		           	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыКИмпортуСнятьОтметкуСоВсех(Команда)
	
	Для Каждого СтрокаДокумента Из ДокументыКИмпорту Цикл
		СтрокаДокумента.Загружать = Ложь;
	КонецЦикла;
	           	
КонецПроцедуры

&НаКлиенте
Процедура Загрузить(Команда)
	
	Если ДокументыКИмпорту.Количество() > 0 Тогда
		ЗагрузитьДокументыКИмпорту();
	Иначе
				
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Список документов для загрузки пуст.%1Необходимо прочитать данные из файла.'"), Символы.ПС);
				
		Предупреждение(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыНаЭкспорт(Команда)
	
	ДокументыНаЭкспортОбновить();
	ВыгружатьПриИзменении(Неопределено);
	
	Элементы.ДокументыНаЭкспортОтчетОВыгрузке.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	УстановитьФлажки(Истина);
	   
КонецПроцедуры

&НаКлиенте
Процедура КомандаПрочитатьДанныеИзФайла(Команда)
	
	Если ПрочитатьДанныеИзФайла() Тогда
		
		ПроверитьЗаполнениеТаблицыДокументов("ДокументыКИмпорту");
		
		Элементы.ДокументыКИмпортуЗагрузить.Доступность = Истина;
		Элементы.ДокументыКИмпортуСформироватьОтчетОЗагрузке.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	УстановитьФлажки(Ложь);
		
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКотрагентов(Команда)
	
	СоздатьНовогоКонтрагента();
	
	Если ПрочитатьДанныеИзФайла(Ложь) Тогда
		
		Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
		
	КонецЕсли;
			                            	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОВыгрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
	
	ПолучитьОтчетОВыгрузке(ПолеОтчета);
	
	ПолеОтчета.ТолькоПросмотр = Истина;
	
	ПолеОтчета.Показать(НСтр("ru='Отчет о выгруженных документах'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчетОЗагрузке(Команда)
	
	ПолеОтчета = Новый ТабличныйДокумент;
		
	ПолучитьОтчетОЗагрузке(ПолеОтчета);
	
	ПолеОтчета.ТолькоПросмотр = Истина;
	
	ПолеОтчета.Показать(НСтр("ru='Отчет о загруженных документах'"));
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// При изменении реквизитов

&НаСервере
Процедура ДокументыКИмпортуВидОперацииПриИзмененииСервер(ВидОперации, СуммаДокумента, ТипПлатежногоДокумента, ПлатежныйДокумент)
	
	Обработки.ОбменСБанком.ЗаполнитьТипПлатежногоДокумента(
		Объект.Организация,
		Объект.БанковскийСчет,
		ВидОперации,
		СуммаДокумента,
		ТипПлатежногоДокумента,
		ПлатежныйДокумент
	);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

&НаКлиенте
Процедура ВыбратьФайлДанных(Элемент, Заголовок);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                      = НСтр("ru='Текстовый файл (*.txt)|*.txt'");
	ДиалогВыбораФайла.Заголовок                   = Заголовок;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  = "txt";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = Элемент.ТекстРедактирования;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Если Элемент.Имя = "ФайлВыгрузки" Тогда
			Объект.ФайлВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		ИначеЕсли Элемент.Имя = "ФайлЗагрузки" Тогда
			Объект.ФайлЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляПросмотра(Элемент, Заголовок);
	
	ФайлНаДиске = Новый Файл(Элемент.ТекстРедактирования);
	
	Если НЕ ФайлНаДиске.Существует() Тогда
		Предупреждение(НСтр("ru='Не найден файл!'"));
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Если Объект.Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	КонецЕсли;
	
	Текст.Прочитать(Элемент.ТекстРедактирования, Кодир);
	Текст.Показать(Заголовок, Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаСервере
Функция УстановитьЗначенияРеквизитовИзНастроекОбменаСКлиентомБанка()
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчетаОрганизаций.Программа,
	               |	БанковскиеСчетаОрганизаций.Кодировка,
	               |	БанковскиеСчетаОрганизаций.ФайлЗагрузки,
	               |	БанковскиеСчетаОрганизаций.ФайлВыгрузки
	               |ИЗ
	               |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаОрганизаций
				   |Где
				   |	БанковскиеСчетаОрганизаций.Ссылка = &Счет
				   |";
    	
	Запрос.УстановитьПараметр("Счет", Объект.БанковскийСчет.Ссылка);
		
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если НЕ Выборка.Количество() = 0 Тогда
		
		Объект.Программа    = Выборка[0].Программа;
		Объект.Кодировка    = Выборка[0].Кодировка;
		Объект.ФайлВыгрузки = Выборка[0].ФайлВыгрузки;
		Объект.ФайлЗагрузки = Выборка[0].ФайлЗагрузки;
		
		Возврат 1;
		
	КонецЕсли;	
	
	Возврат 0;
		
КонецФункции

&НаСервере
Процедура ЗагрузитьНастройкиПрограммыКлиентаБанка();

	Если НЕ УстановитьЗначенияРеквизитовИзНастроекОбменаСКлиентомБанка() Тогда
			
		Объект.Программа    = "";
		Объект.Кодировка    = "";
		Объект.ФайлВыгрузки = "";
		Объект.ФайлЗагрузки = "";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеТаблицыДокументов(Документы)
			
	Обработки.ОбменСБанком.ПроверитьЗаполнениеТаблицыДокументов(Объект, ?(Документы = "ДокументыНаЭкспорт", Объект.ПлатежныеДокументы, ДокументыКИмпорту));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыНаЭкспорт()
	
	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не выбран банковский счет.'"),
            , // ОбъектИлиСсылка
			"Объект.БанковскийСчет"
		);
		Возврат;
	КонецЕсли;
	
	Обработки.ОбменСБанком.ЗаполнитьДокументыНаЭкспорт(Объект.ПлатежныеДокументы,
													  Элементы.ДокументыНаЭкспорт,
													  Объект.НачПериода,
													  Объект.КонПериода,
													  Объект.БанковскийСчет);
	
КонецПроцедуры

&НаСервере
Процедура ДокументыНаЭкспортОбновитьСервер()
	
	ЗаполнитьДокументыНаЭкспорт();
	
	ПроверитьЗаполнениеТаблицыДокументов("ДокументыНаЭкспорт");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыНаЭкспортОбновить()
	
	Объект.ПлатежныеДокументы.Очистить();
	
	ДокументыНаЭкспортОбновитьСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Флаг)
	
	Количество = 0;
	Сумма      = 0;
	
	Для Каждого СтрокаДокумента Из Объект.ПлатежныеДокументы Цикл
		
		СтрокаДокумента.Выгружать = Флаг;
		
		Если СтрокаДокумента.Выгружать Тогда
			
			Количество = Количество + 1;
			Сумма      = Сумма + СтрокаДокумента.СуммаДокумента;
			
		КонецЕсли;
		
	КонецЦикла;
			
	Элементы.Выгружать.ТекстПодвала = Формат(Количество, "ЧЦ=10");
	Элементы.СуммаДокумента.ТекстПодвала = Формат(Сумма, "ЧДЦ=2");
	
КонецПроцедуры

&НаКлиенте
Функция ВыгрузитьДокументыНаЭкспортНаКлиенте()
		
	ПотокВыгрузки = Новый ТекстовыйДокумент();
		
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ПотокВыгрузки, ЭтаФорма.УникальныйИдентификатор);
		
	ВыгрузитьДокументыНаЭкспорт(АдресВременногоХранилища);
	
	ПотокВыгрузки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Попытка
		
		Если Объект.Кодировка = "DOS" Тогда
			ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.OEM);
		Иначе
			ПотокВыгрузки.Записать(Объект.ФайлВыгрузки, КодировкаТекста.ANSI);
		КонецЕсли;
		
		// Отметим те документы, которые успешно выгрузились.
		Для Каждого СтрокаСекции Из Объект.ПлатежныеДокументы Цикл
			
			Если СтрокаСекции.Готовность = -2 Тогда
				СтрокаСекции.Готовность = -1;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат 1;
		
	Исключение
		
		Возврат 0;
		
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьДокументыНаЭкспорт(АдресВременногоХранилища)
	
	Обработки.ОбменСБанком.Выгрузить(Объект.ПлатежныеДокументы,
	 								 Объект.Кодировка,
									 Объект.Программа,
									 Объект.НачПериода,
									 Объект.КонПериода,
									 Объект.БанковскийСчет,
									 Объект.ФайлВыгрузки,
									 Объект.Организация,
									 АдресВременногоХранилища,
									 ВыгружатьКПП);
			
КонецПроцедуры

&НаСервере
Процедура ПолучитьОтчетОВыгрузке(ПолеОтчета)
	
	Обработки.ОбменСБанком.ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета,
																	  Объект.ПлатежныеДокументы,
																	  Объект.Организация,
																	  Объект.БанковскийСчет,
																	  Объект.НачПериода,
																	  Объект.КонПериода);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОтчетОЗагрузке(ПолеОтчета)
	
	Обработки.ОбменСБанком.ПечатьОтчетаОЗагруженныхПлатежныхДокументах(ПолеОтчета,
																	  ДокументыКИмпорту,
																	  Объект.Организация,
																	  Импорт_РасчетныеСчета,
																	  Импорт_Заголовок);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументыНаИмпорт(ВыводитьСообщения, АдресВременногоХранилища)
	
	ОчисткаТаблицыНеНайденныхКонтрагентов();
		
	Обработки.ОбменСБанком.ЗаполнитьДокументыНаИмпорт(ДокументыКИмпорту,
													 Элементы.ДокументыКИмпорту,
													 ВыводитьСообщения,
													 Объект.ФайлЗагрузки,
													 Объект.БанковскийСчет,
													 Объект.Кодировка,
													 Объект.Организация,
													 НастройкаЗаполнения,
													 ТаблицаКонтрагентов,
													 Импорт_Заголовок,
													 Импорт_РасчетныеСчета,
													 АдресВременногоХранилища);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораВидовОпераций(ИмяДокумента, ПолеФормы)
	
	СписокВыбора = ПолеФормы.СписокВыбора;
	СписокВыбора.Очистить();
		
	Если Найти(ИмяДокумента, "Поступление") > 0 Тогда
	
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствОтПоставщика"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыОтКлиента"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеДоходы"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочееПоступлениеДенежныхСредств"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПоступлениеОплатыПоПлатежнойКарте"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты"));
		
	Иначе
		
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаПоставщику"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыКлиенту"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочиеРасходы"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеТаможне"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПеречислениеВБюджет"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВозвратОплатыНаПлатежнуюКарту"));
		СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.КонвертацияВалюты"));
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДокументыКИмпорту()
	
	// Проверка заполнения реквизитов таблицы документов к импорту.
	ЕстьОшибкиЗаполнения = Ложь;
	Для Каждого СтрокаТаблицы Из ДокументыКИмпорту Цикл
		
		Если СтрокаТаблицы.Загружать
		 И (СтрокаТаблицы.ВидОперации = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		 	ИЛИ СтрокаТаблицы.ВидОперации = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
		 И Не ЗначениеЗаполнено(СтрокаТаблицы.Документ) Тогда
		 
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Платежный документ"" в строке %1 списка загружаемых документов'"),
				СтрокаТаблицы.НомерСтроки
			);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				Текст,
				,
				"ДокументыКИмпорту[" + (СтрокаТаблицы.НомерСтроки - 1) + "].Документ"
			);
			ЕстьОшибкиЗаполнения = Истина;
		 
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьОшибкиЗаполнения Тогда
		Обработки.ОбменСБанком.Загрузить(
			ДокументыКИмпорту,
			Импорт_Заголовок,
			Объект.Организация,
			Импорт_РасчетныеСчета,
			Объект.ИспользоватьГраницуОбработки,
			НастройкаЗаполнения,
			Объект.ДатаГраницыОбработки,
			Объект.БанковскийСчет
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовогоКонтрагента()
			
	Для Каждого Элемент Из ТаблицаКонтрагентов.ПолучитьЭлементы() Цикл
							
		Обработки.ОбменСБанком.СоздатьКонтрагента(Элемент).Пустая();
				
	КонецЦикла;
			
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииСервер()
	
	Объект.Организация = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(Объект.БанковскийСчет).Организация;
		
КонецПроцедуры

&НаСервере
Процедура ИзменитьБанковскийСчет(ИмяСтраницы)
	
	БанковскийСчетПриИзмененииСервер();
	
	ЗагрузитьНастройкиПрограммыКлиентаБанка();
	
	Если ИмяСтраницы = "ВыгрузкаДокументов" Тогда
		ДокументыНаЭкспортОбновитьСервер();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьФайл(Файл, Кодировка)
	
	ФайлЗагр = Новый Файл(Файл);
	
	Если НЕ ФайлЗагр.Существует() Тогда
		
		Сообщение = Новый СообщениеПользователю;
				
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Файла %1 не существует!'"), Файл);
				
		Сообщение.Сообщить();
		
		Возврат "ФайлНеСуществует";
		
	КонецЕсли;
	
	ПотокЧтения = Новый ТекстовыйДокумент();
	
	Попытка
		
		ПотокЧтения.Прочитать(Файл);
		
	Исключение
				
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Файл не прочитан.'");
				
		Сообщение.Сообщить();
		
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	Конецесли;

	ПотокЧтения.Прочитать(Файл, Кодир);

	Если ПотокЧтения.КоличествоСтрок() < 1 Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Файл загрузки не содержит данных!'");
				
		Сообщение.Сообщить();
				
		Возврат Неопределено;
		
	КонецЕсли;

	Если НЕ СокрЛП(ПотокЧтения.ПолучитьСтроку(1)) = "1CClientBankExchange" Тогда
		
		Сообщение = Новый СообщениеПользователю;
		
		Сообщение.Текст = НСтр("ru='Указанный файл не является файлом обмена, или неверно указана кодировка!'");
				
		Сообщение.Сообщить();
				
		Возврат Неопределено;
		
	КонецЕсли;

	Возврат ПотокЧтения.ПолучитьТекст();

КонецФункции

&НаКлиенте
Функция ПрочитатьДанныеИзФайла(ВыводитьСообщения = Истина)
	
	// Получаем исходные данные.
	Импорт_ТекстДляРазбора = ПрочитатьФайл(Объект.ФайлЗагрузки, Объект.Кодировка);
	
	Если Импорт_ТекстДляРазбора = "ФайлНеСуществует" Тогда
		
		Возврат Ложь;
	
	ИначеЕсли Импорт_ТекстДляРазбора = Неопределено Тогда
				
		//Сообщение = Новый СообщениеПользователю;
		//
		//Сообщение.Текст = НСтр("ru='Файл загрузки не содержит данных!'");
		//		
		//Сообщение.Сообщить();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Импорт_ТекстДляРазбора, ЭтаФорма.УникальныйИдентификатор);
	
	ЗаполнитьДокументыНаИмпорт(ВыводитьСообщения, АдресВременногоХранилища);
	
	Элементы.НеНайденныеРеквизиты.Видимость = (ТаблицаКонтрагентов.ПолучитьЭлементы().Количество() > 0);
	
	Элементы.ДокументыКИмпортуЗагружать.ТекстПодвала      = ДокументыКИмпорту.Количество();
	Элементы.ДокументыКИмпортуСуммаПоступило.ТекстПодвала = Формат(ДокументыКИмпорту.Итог("СуммаПоступило"), "ЧЦ=12; ЧДЦ=2");
	Элементы.ДокументыКИмпортуСуммаСписано.ТекстПодвала   = Формат(ДокументыКИмпорту.Итог("СуммаСписано"), "ЧЦ=12; ЧДЦ=2");
	
	ДокументыКИмпортуОтметитьВсе(Неопределено);
	
	Возврат Истина;
			
КонецФункции

&НаСервере
Процедура ОчисткаТаблицыНеНайденныхКонтрагентов()
		
	ТаблицаКонтрагентов.ПолучитьЭлементы().Очистить();
							
КонецПроцедуры

&НаСервере
Функция ПолучитьСтатьюДДС(ВидОперации)
	
	Возврат Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ВидОперации);
	                                           	                                    	
КонецФункции

