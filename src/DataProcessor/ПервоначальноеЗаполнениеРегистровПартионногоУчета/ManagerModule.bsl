#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ДополнитьДвиженияДокументов(Параметры, АдресХранилища = "") Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Партионный учет сервер. Проведение документов по регистрам партий, НДС, суммам в валюте регл'"), 
		УровеньЖурналаРегистрации.Информация, , , НСтр("ru = 'Начато заполнение движений документов по регистрам'"), 
		РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
	
	ТоварныеРегистры = Новый Массив;
	ТоварныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций);
	ТоварныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииТоваровПереданныеНаКомиссию);
	ТоварныеРегистры.Добавить(Метаданные.РегистрыНакопления.ТоварыОрганизаций);
	РегистрыНДС = Новый Массив;
	РегистрыНДС.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок);
	РегистрыНДС.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж);
	РегистрыНДС.Добавить(Метаданные.РегистрыСведений.ЖурналУчетаСчетовФактур);
	РегистрыНДС.Добавить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
	РегистрыРасходов = Новый Массив;
	РегистрыРасходов.Добавить(Метаданные.РегистрыНакопления.ПрочиеРасходы);
	ВалютныеРегистры = Новый Массив;
	ВалютныеРегистры.Добавить(Метаданные.РегистрыСведений.СуммыДокументовВВалютеРегл);
	
	ПропускаемыеИмена = ПропускаемыеИменаДокументов();
	ТоварныеРегистраторы = СоставРегистраторов(ТоварныеРегистры, ПропускаемыеИмена);
	РегистраторыНДС = СоставРегистраторов(РегистрыНДС, ПропускаемыеИмена, ИменаДокументовНДС());
	РегистраторыРасходов = СоставРегистраторов(РегистрыРасходов, ПропускаемыеИмена);
	ВалютныеРегистраторы = СоставРегистраторов(ВалютныеРегистры, ПропускаемыеИмена);
	
	ПериодДокументов = Новый Структура("Начало, Конец", Неопределено, Неопределено);
	ПериодДокументов(ТоварныеРегистраторы, ПериодДокументов);
	ПериодДокументов(РегистраторыНДС, ПериодДокументов);
	ПериодДокументов(РегистраторыРасходов, ПериодДокументов);
	ПериодДокументов(ВалютныеРегистраторы, ПериодДокументов);
	
	Если Не ЗначениеЗаполнено(ПериодДокументов.Начало) Тогда
		Параметры.Вставить("ЗагрузкаВыполнена", Ложь);
		Параметры.Вставить("ТекстСообщения", НСтр("ru = 'В базе отсутствуют документы для проведения по регистрам партий'"));
	Иначе
		МесяцПроведения = НачалоМесяца(ПериодДокументов.Начало);
		КонецПериода = КонецМесяца(ПериодДокументов.Конец);
		Пока МесяцПроведения < КонецПериода Цикл
			КонецМесяцаПроведения = КонецМесяца(МесяцПроведения);
			
			// последовательность вызовов важна
			ОбработатьВалютныеДокументы(ВалютныеРегистраторы, МесяцПроведения, КонецМесяцаПроведения);
			ОбработатьТоварныеДокументы(ТоварныеРегистраторы, МесяцПроведения, КонецМесяцаПроведения);
			ОбработатьДокументыНДС(РегистраторыНДС, МесяцПроведения, КонецМесяцаПроведения);
			ОбработатьДокументыРасходов(РегистраторыРасходов, МесяцПроведения, КонецМесяцаПроведения);
			
			МесяцПроведения = ДобавитьМесяц(МесяцПроведения, 1);
		КонецЦикла;
		Параметры.Вставить("ЗагрузкаВыполнена", Истина);
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(Параметры, АдресХранилища);
	КонецЕсли;
КонецПроцедуры

Процедура СброситьТоварныеДвижения() Экспорт
	// АналитикаУчетаНоменклатуры, ХозяйственнаяОперация, НалогообложениеНДС
	СобытиеЖурнала = НСтр("ru = 'Товарные движения - очистка записей'");
	ЗаписьЖурналаРегистрации(СобытиеЖурнала, , , , "Начало обработки");
		
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Регистратор ИЗ (
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Регистратор КАК Регистратор ИЗ РегистрНакопления.ТоварыОрганизаций КАК Т
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Регистратор КАК Регистратор ИЗ РегистрНакопления.ТоварыПереданныеНаКомиссию КАК Т
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Регистратор КАК Регистратор ИЗ РегистрНакопления.ПартииТоваровОрганизаций КАК Т
		|	ОБЪЕДИНИТЬ ВСЕ
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ Т.Регистратор КАК Регистратор ИЗ Последовательность.ПартииТоваровОрганизаций КАК Т
		|) КАК Т
		|");
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДокТоварыОрганизаций = Метаданные.РегистрыНакопления.ТоварыОрганизаций.СтандартныеРеквизиты.Регистратор.Тип;
	ДокТоварыПереданныеНаКомиссию = Метаданные.РегистрыНакопления.ТоварыПереданныеНаКомиссию.СтандартныеРеквизиты.Регистратор.Тип;
	ДокПартииТоваровОрганизаций = Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций.СтандартныеРеквизиты.Регистратор.Тип;
	
	ВсегоСтрокой = Формат(Выборка.Количество(), "ЧГ=") + " док.";
	СчетчикДокументов = 1;
	Пока Выборка.Следующий() Цикл
		ДокТип = Тип("ДокументСсылка." + Выборка.Регистратор.Метаданные().Имя);
		// чистим товары организаций
		Если ДокТоварыОрганизаций.СодержитТип(ДокТип) Тогда
			Набор = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Набор.Прочитать();
			Для Каждого Запись Из Набор Цикл
				Запись.АналитикаУчетаНоменклатуры = Справочники.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка();
				Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
				Запись.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
			КонецЦикла;
			Если Набор.Модифицированность() Тогда Набор.Записать(); КонецЕсли;
		КонецЕсли;
		// чистим товары на комиссии
		Если ДокТоварыПереданныеНаКомиссию.СодержитТип(ДокТип) Тогда
			Набор = РегистрыНакопления.ТоварыПереданныеНаКомиссию.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Набор.Прочитать();
			Для Каждого Запись Из Набор Цикл
				Запись.АналитикаУчетаНоменклатуры = Справочники.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка();
				Запись.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПустаяСсылка();
				Запись.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка();
			КонецЦикла;
			Если Набор.Модифицированность() Тогда Набор.Записать(); КонецЕсли;
		КонецЕсли;
		// чистим партии товаров организаций
		Если ДокПартииТоваровОрганизаций.СодержитТип(ДокТип) Тогда
			Набор = РегистрыНакопления.ПартииТоваровОрганизаций.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Набор.Очистить();
			Набор.Записать();
		КонецЕсли;
		// чистим последовательность партий
		Если ДокПартииТоваровОрганизаций.СодержитТип(ДокТип) Тогда
			Набор = Последовательности.ПартииТоваровОрганизаций.СоздатьНаборЗаписей();
			Набор.Отбор.Регистратор.Установить(Выборка.Регистратор);
			Набор.Очистить();
			Набор.Записать();
		КонецЕсли;
		
		Если 0 = СчетчикДокументов % 100 Тогда
			ЗаписьЖурналаРегистрации(СобытиеЖурнала, , , , "Обработано " + Формат(СчетчикДокументов, "ЧГ=") + " из " + ВсегоСтрокой);
		КонецЕсли;
		СчетчикДокументов = СчетчикДокументов + 1;	
	КонецЦикла;
	ЗаписьЖурналаРегистрации(СобытиеЖурнала, , , , "Окончание обработки, всего " + ВсегоСтрокой);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Дополнение движений документов

Функция СоставРегистраторов(Регистры, ПропускаемыеИмена = Неопределено, ВключаемыеИмена = Неопределено)
	Состав = Новый Соответствие();
	
	Для Каждого Регистр Из Регистры Цикл
		Регистраторы = Регистр.СтандартныеРеквизиты.Регистратор.Тип.Типы();
		Для Каждого Регистратор ИЗ Регистраторы Цикл
			МетаОбъект = Метаданные.НайтиПоТипу(Регистратор);
			ИмяМетаОбъекта = МетаОбъект.Имя;
			
			Если Неопределено <> ПропускаемыеИмена И ПропускаемыеИмена.Свойство(ИмяМетаОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Неопределено <> ВключаемыеИмена И Не ВключаемыеИмена.Свойство(ИмяМетаОбъекта) Тогда
				Продолжить;
			КонецЕсли;
			
			Состав.Вставить(ИмяМетаОбъекта, МетаОбъект);
		КонецЦикла;
	КонецЦикла;

	Возврат Состав;	
КонецФункции

Функция ПропускаемыеИменаДокументов()
	Возврат Новый Структура("
		// Не надо допроводить, есть в УТ11:
		|РаспределениеРасходовБудущихПериодов,
		|РаспределениеДоходовИРасходовПоНаправлениямДеятельности,
		|РасчетСебестоимостиТоваров,
		|КорректировкаРегистров,
		|РаспределениеРасходовНаСебестоимостьТоваров,
		|РаспределениеНДС,
    	// Остается в УП2, не будет в УТ11:
	    |АмортизацияНМА,
	    |НачислениеНДСпоСМРхозспособом,
	    |АмортизацияОС,
	    |ВосстановлениеНДСПоОбъектамНедвижимости,
	    |РаспределениеПрочихЗатрат,
	    |ОперацияБух,
    	// Будут удалены из УП2/УТ11:
	    |ВосстановлениеНДС,
	    |ОтражениеНачисленияНДС,
	    |СписаниеНДС,
	    |ОтражениеНДСКВычету");
КонецФункции

Функция ИменаДокументовНДС()
	Возврат Новый Структура("
		|АктВыполненныхРабот,
		|ВозвратТоваровМеждуОрганизациями,
		|ВозвратТоваровОтКлиента,
		|ВозвратТоваровПоставщику,
		|ВыкупВозвратнойТарыКлиентом,
		|ЗаписьКнигиПокупок,
		|ЗаписьКнигиПродаж,
		|КорректировкаРеализации,
		|ОтчетКомиссионера,
		|ОтчетКомитенту,
		|ОтчетОРозничныхПродажах,
		|ОтчетПоКомиссииМеждуОрганизациями,
		|ПередачаТоваровМеждуОрганизациями,
		|РеализацияТоваровУслуг,
		|РеализацияУслугПрочихАктивов,
		|СчетФактураВыданный,
		|СчетФактураВыданныйАванс,
		|СчетФактураПолученный,
		|СчетФактураПолученныйАванс,
		|ТаможеннаяДекларацияИмпорт");
КонецФункции

Функция ПериодДокументов(ОписаниеДокументов, ДополняемыйПериод = Неопределено)
	Запрос = Новый Запрос();
	ТекстЗапроса = "
		|ВЫБРАТЬ
		|	МИНИМУМ(Операция.Дата) КАК Начало,
		|	МАКСИМУМ(Операция.Дата) КАК Конец
		|ИЗ
		|	ИмяДокумента КАК Операция
		|ГДЕ
		|	Операция.Проведен
		|ИМЕЮЩИЕ
		|	НЕ МИНИМУМ(Операция.Дата) ЕСТЬ NULL
		|";
		
	Период = ?(Неопределено = ДополняемыйПериод, Новый Структура("Начало, Конец", Неопределено, Неопределено), ДополняемыйПериод);
	
	Для Каждого Описание Из ОписаниеДокументов Цикл
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяДокумента", "Документ." + Описание.Ключ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Период.Начало = ?(ЗначениеЗаполнено(Период.Начало), Мин(Период.Начало, Выборка.Начало), Выборка.Начало);
			Период.Конец = ?(ЗначениеЗаполнено(Период.Конец), Макс(Период.Конец, Выборка.Конец), Выборка.Конец);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Период;
КонецФункции

Процедура ОбработатьТоварныеДокументы(ОписаниеДокументов, НачалоПериода, КонецПериода);
	Запрос = Новый Запрос;
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операция.Ссылка КАК Ссылка
		|ИЗ
		|	ИмяДокумента КАК Операция
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрг
		|		ПО Операция.Ссылка = ТоварыОрг.Регистратор
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданныеНаКомиссию КАК ТоварыКомис
		|		ПО Операция.Ссылка = ТоварыКомис.Регистратор
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Последовательность.ПартииТоваровОрганизаций КАК Партии
		|		ПО Операция.Ссылка = Партии.Регистратор
		|
		|ГДЕ // получим проведенные доки, не зарегистрированные в измененных/дополненных регистрах
		|	Операция.Проведен И Операция.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И Партии.Регистратор ЕСТЬ NULL
		|	И (ТоварыОрг.Активность ИЛИ ТоварыКомис.Активность
		|		ИЛИ
		|		ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаНоменклатуры.ПустаяСсылка)
		|			В (ТоварыОрг.АналитикаУчетаНоменклатуры, ТоварыКомис.АналитикаУчетаНоменклатуры))
		|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	РегистрыДополненияДвижений = РегистрыДополненияДвижений();
	// специальная обработка документов поступления
	ДокументыПартий = Метаданные.РегистрыНакопления.ПартииТоваровОрганизаций.Измерения.ДокументПоступления.Тип;
	
	Для Каждого Описание Из ОписаниеДокументов Цикл
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяДокумента", "Документ." + Описание.Ключ);
		
		ДополнитьАналитику = ДокументыПартий.СодержитТип(Тип("ДокументСсылка." + Описание.Ключ))
			И Описание.Ключ <> "ПеремещениеТоваров";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Дополнение движений по партиям'"), , , Выборка.Ссылка);
				
			Если ДополнитьАналитику Тогда
				ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокОбъект.ЗаполнитьКлючиАналитикиУчетаПартийДокумента();
				ДокОбъект.ОбменДанными.Загрузка = Истина;
				ДокОбъект.Записать();
			КонецЕсли;
				
			ДополнитьДвиженияДокумента(Выборка.Ссылка, РегистрыДополненияДвижений);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьДокументыНДС(ОписаниеДокументов, НачалоПериода, КонецПериода);
	Запрос = Новый Запрос;
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операция.Ссылка КАК Ссылка
		|ИЗ
		|	ИмяДокумента КАК Операция
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСПокупки
		|		ПО Операция.Ссылка = НДСПокупки.Регистратор
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСПродажи
		|		ПО Операция.Ссылка = НДСПродажи.Регистратор
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК Журнал
		|		ПО Операция.Ссылка = Журнал.Регистратор
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК Выручка
		|		ПО Операция.Ссылка = Выручка.Регистратор
		|
		|ГДЕ // получим проведенные доки, не зарегистрированные в измененных/дополненных регистрах
		|	Операция.Проведен И Операция.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И (НДСПокупки.Регистратор ЕСТЬ NULL ИЛИ НЕ НДСПокупки.Активность)
		|	И (НДСПродажи.Регистратор ЕСТЬ NULL ИЛИ НЕ НДСПродажи.Активность)
		|	И (Журнал.Регистратор ЕСТЬ NULL ИЛИ НЕ Журнал.Активность)
		|	И (Выручка.Регистратор ЕСТЬ NULL ИЛИ НЕ Выручка.Активность
		|		ИЛИ Выручка.НалогообложениеНДС = ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка))
		|	И &ИсключаемыеХозоперации
		|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	РегистрыДополненияДвижений = РегистрыДополненияДвижений();
	
	Для Каждого Описание Из ОписаниеДокументов Цикл
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяДокумента", "Документ." + Описание.Ключ);
		
		// Исключим комиссионные хозоперации
		Если Истина = Описание.Значение.Реквизиты.Найти("ХозяйственнаяОперация") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИсключаемыеХозоперации",
				"НЕ Операция.ХозяйственнаяОперация В (
				|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссию),
				|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию),
				|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями),
				|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратОтКомиссионера),
				|ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВозвратТоваровКомитенту))");
		Иначе
			Запрос.УстановитьПараметр("ИсключаемыеХозоперации", Истина);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Дополнение движений по НДС'"), , , Выборка.Ссылка);
			ДополнитьДвиженияДокумента(Выборка.Ссылка, РегистрыДополненияДвижений);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьДокументыРасходов(ОписаниеДокументов, НачалоПериода, КонецПериода);
	Запрос = Новый Запрос;
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операция.Ссылка КАК Ссылка
		|ИЗ
		|	ИмяДокумента КАК Операция
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПрочиеРасходы КАК РасходыПрочие
		|		ПО Операция.Ссылка = РасходыПрочие.Регистратор
		|
		|ГДЕ
		|	Операция.Проведен И Операция.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РасходыПрочие.СтатьяРасходов.ВариантРаспределенияРасходов = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
		|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	РегистрыДополненияДвижений = РегистрыДополненияДвижений();
	
	Для Каждого Описание Из ОписаниеДокументов Цикл
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяДокумента", "Документ." + Описание.Ключ);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Дополнение движений по расходам'"), , , Выборка.Ссылка);
			ДополнитьДвиженияДокумента(Выборка.Ссылка, РегистрыДополненияДвижений);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьВалютныеДокументы(ОписаниеДокументов, НачалоПериода, КонецПериода)
	Перем ТаблицаВыборкиИмя, ВалютаПоле;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операция.Ссылка КАК Ссылка
		|ИЗ
		|	ИмяДокумента КАК Операция
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютеРегл КАК Суммы
		|		ПО Операция.Ссылка = Суммы.Регистратор
		|
		|ГДЕ
		|	Операция.Ссылка.Проведен И Операция.Ссылка.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И &ВалютаОперации <> &ВалютаРегл
		|	И (Суммы.Регистратор ЕСТЬ NULL ИЛИ НЕ Суммы.Активность)
		|";
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ВалютаРегл", Константы.ВалютаРегламентированногоУчета.Получить());
	ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	
	РегистрыДополненияДвижений = РегистрыДополненияДвижений();
	
	Для Каждого Описание Из ОписаниеДокументов Цикл
		ОписатьПоляВалюты(Описание.Значение, ТаблицаВыборкиИмя, ВалютаПоле);
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "ИмяДокумента", "Документ." + ТаблицаВыборкиИмя);
		
		// смотри комментарий в методе ОписатьПоляВалюты
		Если ЗначениеЗаполнено(ВалютаПоле) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВалютаОперации", "Операция." + ВалютаПоле);
		Иначе
			Запрос.УстановитьПараметр("ВалютаОперации", ВалютаУпр);
		КонецЕсли;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Дополнение движений по валютам'"), , , Выборка.Ссылка);

			ЗаполнитьИдентификаторыСтрокДокумента(Выборка.Ссылка);
			ДополнитьДвиженияДокумента(Выборка.Ссылка, РегистрыДополненияДвижений);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОписатьПоляВалюты(ОбъектМетаданных, ТаблицаВыборкиИмя, ВалютаПоле)
	// 1. Используем реквизит Валюта
	// 2. Если нет реквизита Валюта, используем реквизиты табчасти ВалютаВзаиморасчетов и ИдентификаторСтроки
	// 3. Если валюты не обнаружено, считаем что для документа определена валюта упр. учета
	// ---
	// Если есть реквизит типа валюты, то в обработке валютных документов контролируем его равенство валюте регл.
	// Во всех случаях в обработке валютных документов проверяем наличие записей регистра сумм регл.
	// ТаблицаВыборкиИмя, ВалютаПоле
	ТаблицаВыборкиИмя = ОбъектМетаданных.Имя;
	ВалютаПоле = "";
	
	Если Неопределено <> ОбъектМетаданных.Реквизиты.Найти("Валюта") Тогда
		ВалютаПоле = "Валюта";
	Иначе
		Для Каждого Табчасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
			Если Неопределено <> Табчасть.Реквизиты.Найти("ВалютаВзаиморасчетов")
				И Неопределено <> Табчасть.Реквизиты.Найти("ИдентификаторСтроки")
			Тогда
			    ТаблицаВыборкиИмя = ТаблицаВыборкиИмя + "." + Табчасть.Имя;
				ВалютаПоле = "ВалютаВзаиморасчетов";
				// нашли хоть что-то должное отразиться в регистре сумм регл.
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция РегистрыДополненияДвижений()
	Регистры = Новый Структура;
	Регистры.Вставить("ТаблицаТоварыОрганизаций", РегистрыНакопления.ТоварыОрганизаций);
	Регистры.Вставить("ТаблицаТоварыПереданныеНаКомиссию", РегистрыНакопления.ТоварыПереданныеНаКомиссию);
	Регистры.Вставить("ТаблицаПартииТоваровОрганизаций", РегистрыНакопления.ПартииТоваровОрганизаций);
	
	Регистры.Вставить("ТаблицаПрочиеРасходы", РегистрыНакопления.ПрочиеРасходы);
	Регистры.Вставить("ТаблицаПартииПрочихРасходов", РегистрыНакопления.ПартииПрочихРасходов);
	
	Регистры.Вставить("ТаблицаНДСЗаписиКнигиПокупок", РегистрыНакопления.НДСЗаписиКнигиПокупок);
	Регистры.Вставить("ТаблицаНДСЗаписиКнигиПродаж", РегистрыНакопления.НДСЗаписиКнигиПродаж);
	Регистры.Вставить("ТаблицаЖурналУчетаСчетовФактур", РегистрыСведений.ЖурналУчетаСчетовФактур);
	
	Регистры.Вставить("ТаблицаСуммыДокументовВВалютеРегл", РегистрыСведений.СуммыДокументовВВалютеРегл);
	Регистры.Вставить("ТаблицаВыручкаИСебестоимостьПродаж", РегистрыНакопления.ВыручкаИСебестоимостьПродаж);
	
	Возврат Регистры;
КонецФункции

Процедура ДополнитьДвиженияДокумента(Ссылка, РегистрыДополнения)
	Перем Таблица;
	
	ДопСвойства = Новый Структура("ЭтоНовый, РежимЗаписи", Ложь, РежимЗаписиДокумента.Проведение);
	
	ПроведениеСервер.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДопСвойства, РежимПроведенияДокумента.Неоперативный);
	Документы[ДопСвойства.ДляПроведения.МетаданныеДокумента.Имя].ИнициализироватьДанныеДокумента(Ссылка, ДопСвойства);
	Таблицы = ДопСвойства.ТаблицыДляДвижений;
	
	НачатьТранзакцию();
	
	Если Таблицы.Свойство("ТаблицаПартииТоваровОрганизацийПоследовательность", Таблица) Тогда
		ЗаписатьДвиженияВБазу(Последовательности.ПартииТоваровОрганизаций, Таблица, Ссылка, Истина, Ложь);
	КонецЕсли;
	
	Для Каждого Регистр Из РегистрыДополнения Цикл
		Если Таблицы.Свойство(Регистр.Ключ, Таблица) Тогда
			ЗаписатьДвиженияВБазу(Регистр.Значение, Таблица, Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ЗаписатьДвиженияВБазу(МенеджерДвижений, Таблица, Ссылка, ЗаполнятьЦиклом = Ложь, УстановитьАктивность = Истина)
	Набор = МенеджерДвижений.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(Ссылка);
	Набор.Прочитать();
	Если Набор.Количество() > 0 Или Таблица.Количество() > 0 Тогда
		Если ЗаполнятьЦиклом Тогда
			Для Каждого Строка Из Таблица Цикл
				Запись = Набор.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Строка);
			КонецЦикла;
		Иначе
			Набор.Загрузить(Таблица);
		КонецЕсли;
		Если УстановитьАктивность Тогда
			Набор.УстановитьАктивность(Истина);
		КонецЕсли;
		Набор.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыСтрокДокумента(Ссылка)
	ИменаТабчастей = Новый Массив;
	Мета = Ссылка.Метаданные();
	Для Каждого Табчасть Из Мета.ТабличныеЧасти Цикл
		Если Неопределено <> Табчасть.Реквизиты.Найти("ИдентификаторСтроки") Тогда
			ИменаТабчастей.Добавить(Табчасть.Имя);
		КонецЕсли;
	КонецЦикла;
	Если 0 = ИменаТабчастей.Количество() Тогда
		Возврат;
	КонецЕсли;

	ОбъектЗаполнения = Ссылка.ПолучитьОбъект();
	Для Каждого ИмяТабчасти Из ИменаТабчастей Цикл
		ВзаиморасчетыСервер.ЗаполнитьИдентификаторыСтрокВТабличнойЧасти(ОбъектЗаполнения[ИмяТабчасти]);
	КонецЦикла;
	Если ОбъектЗаполнения.Модифицированность() Тогда
		ОбъектЗаполнения.ОбменДанными.Загрузка = Истина;
		ОбъектЗаполнения.Записать();
	КонецЕсли;
КонецПроцедуры

#КонецЕсли